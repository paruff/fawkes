{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fawkes Internal Developer Platform","text":"Fawkes Platform Overview <p>Welcome to the Fawkes project! Fawkes is an open-source platform designed to help teams achieve elite performance in software delivery by implementing all 24 DORA capabilities through integrated tooling and practices. Based on research from \"Accelerate\" and the DORA State of DevOps reports, organizations that excel in these capabilities are twice as likely to exceed their organizational performance goals.</p>"},{"location":"#elite-performance-metrics","title":"\ud83c\udfaf Elite Performance Metrics","text":"Metric Elite Performance Industry Average Description Deployment Frequency Multiple deploys per day Between once per week and once per month How often an organization successfully releases to production Lead Time Less than one hour Between one week and one month The time it takes to go from code committed to code successfully running in production Change Failure Rate 0-15% 31-45% The percentage of changes that result in a failure in production MTTR Less than one hour Less than one day Mean Time to Restore - The time it takes to recover from a failure in production"},{"location":"#dora-capabilities-metric-impact","title":"\ud83c\udf1f DORA Capabilities &amp; Metric Impact","text":"<p>DORA research has identified specific capabilities that directly impact each performance metric. Below we map each capability to the metrics it most strongly influences, based on data from \"Accelerate: The Science of Lean Software and DevOps\".</p>"},{"location":"#deployment-frequency-drivers","title":"Deployment Frequency Drivers","text":"<p>These capabilities have the strongest positive correlation with deployment frequency:</p> Capability Purpose Implementation Performance Impact Continuous Delivery Ensuring software is always in a deployable state Spinnaker, Flux 2.5x higher deployment frequency Deployment Automation Automating the deployment process Jenkins 3x more frequent deployments Continuous Integration Frequently merging code changes GitHub Actions 2x higher deployment frequency Infrastructure as Code Using cloud and infrastructure-as-code Terraform 1.8x more frequent deployments"},{"location":"#lead-time-reducers","title":"Lead Time Reducers","text":"<p>These capabilities have the strongest positive correlation with reducing lead time:</p> Capability Purpose Implementation Performance Impact Continuous Integration Frequently merging code changes GitHub Actions 74% reduction in lead time Test Automation Automated testing at all levels Selenium, JUnit 67% reduction in lead time Loosely Coupled Architecture Enabling independent team work Kubernetes 56% reduction in lead time Database Change Management Managing database changes effectively Flyway 43% reduction in lead time"},{"location":"#change-failure-rate-reducers","title":"Change Failure Rate Reducers","text":"<p>These capabilities have the strongest positive correlation with reducing change failure rate:</p> Capability Purpose Implementation Performance Impact Test Automation Automated testing at all levels Selenium, JUnit 3x lower change failure rate Change Failure Rate Reduction Improving code quality SonarQube 1.8x fewer production defects Shift Left on Security Early security testing OWASP ZAP 2x fewer security incidents Monitoring and Observability Implementing comprehensive monitoring Prometheus, Grafana 2x more likely to detect issues before failure"},{"location":"#mttr-improvers","title":"MTTR Improvers","text":"<p>These capabilities have the strongest positive correlation with reducing mean time to restore:</p> Capability Purpose Implementation Performance Impact Time to Restore Service Quick incident resolution Grafana 73% faster MTTR Monitoring and Observability Implementing comprehensive monitoring Prometheus, Grafana 2.1x faster incident detection Proactive Failure Management Testing system resilience Chaos Mesh 1.5x faster incident resolution Infrastructure as Code Using cloud and infrastructure-as-code Terraform 1.7x faster recovery time"},{"location":"#capability-synergies","title":"\ud83d\udd04 Capability Synergies","text":"<p>According to DORA research, these capabilities work together to create a flywheel effect:</p> <pre><code>graph TD\n    A[Continuous Integration] --&gt; B[Test Automation]\n    B --&gt; C[Continuous Delivery]\n    C --&gt; D[Deployment Automation]\n    D --&gt; E[Monitoring &amp; Observability]\n    E --&gt; F[Incident Response]\n    F --&gt; A\n    G[Infrastructure as Code] --&gt; C\n    G --&gt; F\n    H[Loosely Coupled Architecture] --&gt; B\n    H --&gt; D</code></pre> <p>Organizations that implement capabilities across all three categories (Flow, Feedback, Recovery) are 5x more likely to achieve elite performance across all four key metrics.</p>"},{"location":"#getting-started","title":"\ud83d\udcc8 Getting Started","text":"<ol> <li>Assess your current capabilities</li> <li>Choose your implementation path</li> <li>Set up your first capability</li> </ol> <p>Start Your Journey  Explore All Capabilities View Implementation Guide</p>"},{"location":"architecture/","title":"Fawkes Platform Architecture","text":"<p>This document provides an overview of the architecture for the Fawkes Internal Developer Platform (IDP), including its core components, infrastructure layers, and integration points.</p>"},{"location":"architecture/#overview","title":"Overview","text":"<p>Fawkes is designed as a modular, cloud-native platform to accelerate infrastructure provisioning and developer productivity. It leverages Infrastructure as Code (IaC), Kubernetes, and a suite of open source tools to provide a secure, scalable, and extensible developer experience.</p>"},{"location":"architecture/#design-principles","title":"Design Principles","text":"<p>Fawkes is heavily influenced by the research and best practices from the Accelerate book, the DORA (DevOps Research and Assessment) reports, and the State of DevOps reports. The platform is built to help teams measure and improve the Four Key DORA Metrics:</p> <ul> <li>Deployment Frequency</li> <li>Lead Time for Changes</li> <li>Change Failure Rate</li> <li>Mean Time to Restore (MTTR)</li> </ul> <p>Fawkes also aims to implement the 24 DORA capabilities, with a special focus on the 8 capabilities related to Continuous Delivery. These principles guide the platform's architecture, automation, and extensibility, ensuring teams can continuously improve their software delivery performance.</p>"},{"location":"architecture/#high-level-architecture-diagram","title":"High-Level Architecture Diagram","text":"<p>(Add or update the diagram in <code>docs/assets/architecture-diagram.png</code> as needed.)</p>"},{"location":"architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/#1-infrastructure-layer-infra","title":"1. Infrastructure Layer (<code>infra/</code>)","text":"<ul> <li>Terraform Modules: Used for provisioning cloud resources (AWS, Azure, GCP, etc.).</li> <li>Kubernetes Manifests &amp; Helm Charts: For deploying and managing workloads.</li> <li>Bootstrap &amp; Helper Scripts: Automate setup, configuration, and deployment.</li> </ul>"},{"location":"architecture/#2-platform-layer-platform","title":"2. Platform Layer (<code>platform/</code>)","text":"<ul> <li>CI/CD Services: Jenkins, GitHub Actions, or other CI/CD tools.</li> <li>Quality &amp; Security: SonarQube, static analysis, and vulnerability scanning.</li> <li>Developer Tools: Kubernetes Dashboard, monitoring, and logging stacks.</li> <li>Authentication &amp; Authorization: (Optional) Keycloak or other SSO/IdP solutions.</li> </ul>"},{"location":"architecture/#3-workspace-automation-workspace","title":"3. Workspace Automation (<code>workspace/</code>)","text":"<ul> <li>Scripts and configs for setting up local developer environments.</li> <li>Editor/IDE settings, dotfiles, and onboarding automation.</li> </ul>"},{"location":"architecture/#4-quality-assurance-qa","title":"4. Quality Assurance (<code>qa/</code>)","text":"<ul> <li>Automated test suites, integration tests, and quality gates.</li> </ul>"},{"location":"architecture/#infrastructure-flow","title":"Infrastructure Flow","text":"<ol> <li>Provisioning: </li> <li>Use Terraform scripts in <code>infra/</code> to provision cloud resources (VPC, EKS/AKS/GKE clusters, storage, etc.).</li> <li> <p>Kubernetes clusters are bootstrapped with required namespaces and RBAC.</p> </li> <li> <p>Platform Deployment: </p> </li> <li>Deploy core platform services (Jenkins, SonarQube, etc.) using Helm or custom scripts.</li> <li> <p>Configure ingress, secrets, and monitoring.</p> </li> <li> <p>Developer Onboarding: </p> </li> <li> <p>Developers use scripts in <code>workspace/</code> to set up their local environments and connect to the platform.</p> </li> <li> <p>CI/CD &amp; Workflows: </p> </li> <li>Source code is built, tested, and deployed using the platform\u2019s CI/CD pipelines.</li> <li>Artifacts and logs are stored and accessible via platform services.</li> </ol>"},{"location":"architecture/#extensibility","title":"Extensibility","text":"<ul> <li>Multi-Cloud Support: Modular Terraform and Kubernetes manifests support AWS, Azure, and GCP.</li> <li>Pluggable Services: Easily add or replace CI/CD, monitoring, or authentication tools.</li> <li>Custom Workflows: Extend with custom scripts, APIs, or plugins.</li> </ul>"},{"location":"architecture/#security-best-practices","title":"Security &amp; Best Practices","text":"<ul> <li>Secrets are managed outside of version control and injected at deploy time.</li> <li>Follows cloud and Kubernetes security best practices (RBAC, network policies, etc.).</li> <li>Automated vulnerability scanning and compliance checks.</li> </ul>"},{"location":"architecture/#additional-resources","title":"Additional Resources","text":"<ul> <li>Getting Started</li> <li>Usage Guide</li> <li>Configuration</li> <li>Integrations</li> <li>Security</li> </ul> <p>For more details, see the documentation in each subdirectory and the assets folder for diagrams and reference material.</p>"},{"location":"capabilities/","title":"DORA Capabilities","text":""},{"location":"capabilities/#fast-flow-capabilities","title":"Fast Flow Capabilities","text":""},{"location":"capabilities/#continuous-delivery","title":"Continuous Delivery","text":"<p>Enable teams to deploy software quickly and reliably using automated pipelines.</p> <p>Implementation: - Pattern: Continuous Delivery - Tools:    - Spinnaker   - Jenkins</p>"},{"location":"capabilities/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>Manage infrastructure through version-controlled declarative configurations.</p> <p>Implementation: - Pattern: Infrastructure as Code - Tools:   - Terraform   - Kubernetes</p>"},{"location":"capabilities/#feedback-and-continuous-improvement-capabilities","title":"Feedback and Continuous Improvement Capabilities","text":""},{"location":"capabilities/#monitoring-and-observability","title":"Monitoring and Observability","text":"<p>Implement comprehensive monitoring to ensure system health.</p> <p>Implementation: - Pattern: Monitoring and Observability - Tools:   - Prometheus   - Grafana</p>"},{"location":"capabilities/#test-automation","title":"Test Automation","text":"<p>Automate testing at all levels to catch issues early.</p> <p>Implementation: - Pattern: Test Automation - Tools:   - Selenium   - JUnit</p>"},{"location":"capabilities/#recovery-and-resilience-capabilities","title":"Recovery and Resilience Capabilities","text":""},{"location":"capabilities/#shift-left-on-security","title":"Shift Left on Security","text":"<p>Integrate security early in the development process.</p> <p>Implementation: - Pattern: Shift Left on Security - Tools:   - OWASP ZAP   - SonarQube</p>"},{"location":"capabilities/#change-failure-rate-reduction","title":"Change Failure Rate Reduction","text":"<p>Improve code quality to reduce production failures.</p> <p>Implementation: - Pattern: Change Failure Rate Reduction - Tools:   - SonarQube   - CodeClimate</p>"},{"location":"capabilities/#learning-and-innovation-capabilities","title":"Learning and Innovation Capabilities","text":""},{"location":"capabilities/#documentation-quality","title":"Documentation Quality","text":"<p>Maintain high-quality, accessible documentation.</p> <p>Implementation: - Pattern: Documentation Quality - Tools:   - MkDocs   - Docusaurus</p>"},{"location":"capabilities/#learning-culture","title":"Learning Culture","text":"<p>Foster continuous learning and improvement.</p> <p>Implementation: - Pattern: Learning Culture - Tools:   - Discourse   - Jupyter</p> <p>Explore Implementation Patterns View Tool Integrations</p>"},{"location":"configuration/","title":"Configuration","text":"<p>This document provides an overview of the configuration options for the Fawkes Internal Developer Platform. It explains how to set up and manage environment variables, secrets, and other configuration files to customize the platform for your needs.</p>"},{"location":"configuration/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Environment Variables</li> <li>Secrets Management</li> <li>Configuration Files</li> <li>Cloud Provider Configuration</li> <li>Kubernetes Configuration</li> <li>Best Practices</li> </ul>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>Environment variables are used to configure various aspects of the platform. These variables can be set in a <code>.env</code> file or directly in your CI/CD pipeline.</p>"},{"location":"configuration/#example-env-file","title":"Example <code>.env</code> File:","text":"<pre><code># General settings\nENVIRONMENT=dev\nREGION=us-east-1\n\n# AWS-specific settings\nAWS_ACCESS_KEY_ID=your-access-key\nAWS_SECRET_ACCESS_KEY=your-secret-key\n\n# Kubernetes settings\nKUBECONFIG=/path/to/kubeconfig\n</code></pre>"},{"location":"configuration/#how-to-use","title":"How to Use:","text":"<ul> <li>Copy the provided <code>.env.example</code> file to <code>.env</code> and update the values as needed.</li> <li>Load the environment variables using a script or your CI/CD pipeline.</li> </ul>"},{"location":"configuration/#secrets-management","title":"Secrets Management","text":"<p>Secrets should never be committed to version control. Use a secrets management tool to securely store and inject secrets at runtime.</p>"},{"location":"configuration/#recommended-tools","title":"Recommended Tools:","text":"<ul> <li>AWS Secrets Manager (for AWS deployments)</li> <li>Azure Key Vault (for Azure deployments)</li> <li>GCP Secret Manager (for GCP deployments)</li> <li>Kubernetes Secrets (for cluster-specific secrets)</li> </ul>"},{"location":"configuration/#example-kubernetes-secret","title":"Example Kubernetes Secret:","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: my-secret\n  namespace: default\ntype: Opaque\ndata:\n  username: bXktdXNlcm5hbWU=  # Base64 encoded\n  password: cGFzc3dvcmQ=      # Base64 encoded\n</code></pre>"},{"location":"configuration/#configuration-files","title":"Configuration Files","text":"<p>Configuration files are used to define infrastructure, platform services, and application settings. These files are located in the <code>infra/</code> and <code>platform/</code> directories.</p>"},{"location":"configuration/#key-configuration-files","title":"Key Configuration Files:","text":"<ul> <li>Terraform Variables: Located in <code>infra/terraform/variables.tf</code>.</li> <li>Helm Values: Located in <code>platform/helm/values.yaml</code>.</li> <li>Kubernetes Manifests: Located in <code>platform/k8s/</code>.</li> </ul>"},{"location":"configuration/#example-helm-values","title":"Example Helm Values:","text":"<pre><code>replicaCount: 2\nimage:\n  repository: nginx\n  tag: \"1.21.0\"\n  pullPolicy: IfNotPresent\n</code></pre>"},{"location":"configuration/#cloud-provider-configuration","title":"Cloud Provider Configuration","text":"<p>Each cloud provider requires specific configuration for authentication and resource provisioning.</p>"},{"location":"configuration/#aws","title":"AWS:","text":"<ul> <li>Set <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> in your environment.</li> <li>Configure the region using <code>AWS_DEFAULT_REGION</code>.</li> </ul>"},{"location":"configuration/#azure","title":"Azure:","text":"<ul> <li>Use the Azure CLI to authenticate:   <pre><code>az login\n</code></pre></li> <li>Set the subscription ID:   <pre><code>az account set --subscription &lt;subscription-id&gt;\n</code></pre></li> </ul>"},{"location":"configuration/#gcp","title":"GCP:","text":"<ul> <li>Authenticate using a service account key:   <pre><code>gcloud auth activate-service-account --key-file=/path/to/key.json\n</code></pre></li> <li>Set the project ID:   <pre><code>gcloud config set project &lt;project-id&gt;\n</code></pre></li> </ul>"},{"location":"configuration/#kubernetes-configuration","title":"Kubernetes Configuration","text":"<p>Kubernetes clusters require a valid <code>kubeconfig</code> file for authentication and management.</p>"},{"location":"configuration/#setting-up-kubeconfig","title":"Setting Up <code>kubeconfig</code>:","text":"<ul> <li>Use your cloud provider CLI to generate the <code>kubeconfig</code> file:</li> <li>AWS: <code>aws eks update-kubeconfig --name &lt;cluster-name&gt;</code></li> <li>Azure: <code>az aks get-credentials --resource-group &lt;resource-group&gt; --name &lt;cluster-name&gt;</code></li> <li> <p>GCP: <code>gcloud container clusters get-credentials &lt;cluster-name&gt;</code></p> </li> <li> <p>Export the <code>KUBECONFIG</code> environment variable:   <pre><code>export KUBECONFIG=/path/to/kubeconfig\n</code></pre></p> </li> </ul>"},{"location":"configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Do Not Hardcode Secrets: Always use a secrets management tool.</li> <li>Use Separate Environments: Maintain separate configurations for <code>dev</code>, <code>staging</code>, and <code>prod</code>.</li> <li>Version Control Configuration Files: Track non-sensitive configuration files in version control.</li> <li>Validate Configurations: Use tools like <code>kubeval</code> or <code>terraform validate</code> to ensure configurations are valid.</li> <li>Automate Configuration Management: Use CI/CD pipelines to manage and apply configurations.</li> </ol> <p>For more details, refer to the specific documentation in the <code>infra/</code> and <code>platform/</code> directories.</p>"},{"location":"contributing/","title":"Contributing to Fawkes","text":"<p>Thank you for your interest in contributing to Fawkes! This guide will help you get started with contributing to the project.</p>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#1-trunk-based-development","title":"1. Trunk-Based Development","text":"<p>We follow trunk-based development practices:</p> <pre><code># Clone the repository\ngit clone https://github.com/paruff/fawkes.git\ncd fawkes\n\n# Create a feature branch\ngit checkout -b feature/your-feature-name\n\n# Make your changes\n# Commit frequently with clear messages\ngit add .\ngit commit -m \"feat: description of your change\"\n\n# Push your changes\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"contributing/#2-development-guidelines","title":"2. Development Guidelines","text":"Guideline Description Branch Lifetime Merge within 24 hours Testing Include tests with all changes Documentation Update relevant docs CI/CD Ensure all checks pass"},{"location":"contributing/#adding-new-content","title":"Adding New Content","text":""},{"location":"contributing/#documentation","title":"Documentation","text":"<pre><code>---\ntitle: Your Page Title\ndescription: Brief description of the page content\n---\n\n# Your Page Title\n\nContent goes here following the standard format:\n- Use H2 (##) for main sections\n- Use tables for structured information\n- Include related links\n</code></pre>"},{"location":"contributing/#implementation-patterns","title":"Implementation Patterns","text":"<p>When adding new patterns:</p> <ol> <li>Create pattern file in <code>docs/patterns/</code></li> <li>Add to navigation in <code>mkdocs.yml</code></li> <li>Link from relevant capabilities</li> <li>Include example implementations</li> </ol>"},{"location":"contributing/#tool-integration","title":"Tool Integration","text":"<p>When adding new tools:</p> <ol> <li>Create tool doc in <code>docs/tools/</code></li> <li>Add to navigation in <code>mkdocs.yml</code></li> <li>Link from relevant patterns</li> <li>Include configuration examples</li> </ol>"},{"location":"contributing/#testing-changes","title":"Testing Changes","text":"<pre><code># Install dependencies\npip install -r requirements.txt\n\n# Run local development server\nmkdocs serve\n\n# Build documentation\nmkdocs build\n</code></pre>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes","text":"<ol> <li>Create Issue</li> <li>Describe the problem or enhancement</li> <li> <p>Reference related DORA capabilities</p> </li> <li> <p>Submit Pull Request</p> </li> <li>Reference the issue</li> <li>Include clear description</li> <li>Update documentation</li> <li> <p>Add tests if applicable</p> </li> <li> <p>Review Process</p> </li> <li>Peer review required</li> <li>All checks must pass</li> <li>Documentation updated</li> </ol>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Create an issue on GitHub</li> <li>Join our community discussions</li> <li>Review existing documentation</li> </ul> <p>View Style Guide GitHub Repository</p>"},{"location":"development/","title":"Development Guide","text":"<p>This document provides guidelines for contributing to the Fawkes Internal Developer Platform (IDP). It includes instructions for setting up a local development environment, coding standards, and best practices for contributing to the project.</p>"},{"location":"development/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Setting Up Your Development Environment</li> <li>Coding Standards</li> <li>Branching and Workflow</li> <li>Testing</li> <li>Azure Development Best Practices</li> <li>Submitting Contributions</li> </ul>"},{"location":"development/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following tools installed:</p> <ul> <li>Git: Version control system</li> <li>Docker: For containerized development</li> <li>Terraform: For infrastructure provisioning</li> <li>kubectl: For managing Kubernetes clusters</li> <li>Helm: For managing Kubernetes applications</li> <li>Azure CLI (if working with Azure):   Install using:   <pre><code>curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n</code></pre></li> </ul>"},{"location":"development/#steps-to-set-up","title":"Steps to Set Up","text":"<ol> <li> <p>Clone the Repository:    <pre><code>git clone https://github.com/paruff/fawkes.git\ncd fawkes\n</code></pre></p> </li> <li> <p>Set Up Environment Variables:    Copy the <code>.env.example</code> file to <code>.env</code> and update the values:    <pre><code>cp .env.example .env\n</code></pre></p> </li> <li> <p>Provision Infrastructure:    Use the scripts in the <code>infra/</code> directory to provision the required infrastructure:    <pre><code>cd infra\n./buildinfra.sh -p aws -e dev\n</code></pre></p> </li> <li> <p>Deploy Platform Services:    Navigate to the <code>platform/</code> directory and deploy services:    <pre><code>cd platform\n./deploy-services.sh\n</code></pre></p> </li> <li> <p>Run Tests:    Execute the test suite to validate your setup:    <pre><code>cd qa\n./run-tests.sh\n</code></pre></p> </li> </ol>"},{"location":"development/#coding-standards","title":"Coding Standards","text":"<ul> <li>Language: Follow the conventions of the language used in the respective module (e.g., Java, Python, Bash).</li> <li>Linting: Use linters to ensure code quality:</li> <li>YAML: <code>yamllint</code></li> <li>Shell: <code>shellcheck</code></li> <li>Python: <code>flake8</code></li> <li>Java: Checkstyle or SonarQube</li> <li>Documentation: Add comments and update relevant documentation for any changes.</li> </ul>"},{"location":"development/#branching-and-workflow","title":"Branching and Workflow","text":"<ol> <li> <p>Create a Feature Branch:    <pre><code>git checkout -b feature/&lt;feature-name&gt;\n</code></pre></p> </li> <li> <p>Commit Changes:    Write clear and concise commit messages:    <pre><code>git commit -m \"Add &lt;feature-name&gt;: &lt;short description&gt;\"\n</code></pre></p> </li> <li> <p>Push Changes:    <pre><code>git push origin feature/&lt;feature-name&gt;\n</code></pre></p> </li> <li> <p>Submit a Pull Request:    Open a pull request (PR) on GitHub and request a review.</p> </li> </ol>"},{"location":"development/#testing","title":"Testing","text":"<p>Fawkes includes multiple layers of testing:</p> <ul> <li>Static Analysis: Run tools like SonarQube or Trivy to check for vulnerabilities.</li> <li>Unit Tests: Located in the <code>qa/unit/</code> directory.</li> <li>Integration Tests: Located in the <code>qa/integration/</code> directory.</li> <li>Acceptance Tests: Located in the <code>qa/acceptance/</code> directory.</li> <li>Performance Tests: Located in the <code>qa/performance/</code> directory.</li> </ul> <p>Run all tests before submitting a PR: <pre><code>cd qa\n./run-all-tests.sh\n</code></pre></p>"},{"location":"development/#azure-development-best-practices","title":"Azure Development Best Practices","text":"<p>If you are working with Azure, follow these best practices:</p> <ol> <li> <p>Use Azure CLI for Authentication:    <pre><code>az login\n</code></pre></p> </li> <li> <p>Set the Active Subscription:    <pre><code>az account set --subscription &lt;subscription-id&gt;\n</code></pre></p> </li> <li> <p>Follow Azure Resource Naming Conventions:    Use consistent and descriptive names for resources.</p> </li> <li> <p>Use Infrastructure as Code (IaC):    Use Terraform or Bicep for provisioning Azure resources.</p> </li> <li> <p>Enable Logging and Monitoring:    Configure Azure Monitor and Log Analytics for all deployed resources.</p> </li> <li> <p>Secure Secrets:    Store secrets in Azure Key Vault and reference them in your deployments.</p> </li> </ol>"},{"location":"development/#submitting-contributions","title":"Submitting Contributions","text":"<ol> <li> <p>Fork the Repository:    Create a fork of the repository on GitHub.</p> </li> <li> <p>Make Changes:    Work on your feature branch and ensure all tests pass.</p> </li> <li> <p>Submit a Pull Request:    Open a PR with a detailed description of your changes.</p> </li> <li> <p>Address Feedback:    Respond to reviewer comments and make necessary updates.</p> </li> </ol>"},{"location":"development/#need-help","title":"Need Help?","text":"<p>If you encounter any issues, refer to the troubleshooting guide or open an issue on GitHub.</p>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>This document addresses common questions about the Fawkes Internal Developer Platform (IDP). If your question is not answered here, feel free to open an issue on GitHub.</p>"},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#1-what-is-fawkes","title":"1. What is Fawkes?","text":"<p>Fawkes is an open source platform for provisioning secure, automated workspaces and Kubernetes-based continuous delivery pipelines across multiple cloud environments. It is designed to help teams adopt DevSecOps practices and improve their software delivery performance.</p>"},{"location":"faq/#2-what-are-the-key-influences-behind-fawkes","title":"2. What are the key influences behind Fawkes?","text":"<p>Fawkes is heavily inspired by the Accelerate book, the DORA (DevOps Research and Assessment) reports, and the State of DevOps reports. The platform focuses on improving the Four Key Metrics and implementing the 24 DORA capabilities, especially those related to Continuous Delivery.</p>"},{"location":"faq/#setup-and-configuration","title":"Setup and Configuration","text":""},{"location":"faq/#3-how-do-i-set-up-fawkes","title":"3. How do I set up Fawkes?","text":"<p>Follow the Getting Started Guide to set up your environment, provision infrastructure, and deploy platform services.</p>"},{"location":"faq/#4-what-cloud-providers-are-supported","title":"4. What cloud providers are supported?","text":"<p>Currently, Fawkes supports AWS. Azure, GCP, and VMware support are planned for future releases.</p>"},{"location":"faq/#5-how-do-i-configure-secrets","title":"5. How do I configure secrets?","text":"<p>Secrets should be managed using tools like AWS Secrets Manager, Azure Key Vault, or Kubernetes Secrets. Refer to the Configuration Guide for details.</p>"},{"location":"faq/#infrastructure-and-platform","title":"Infrastructure and Platform","text":""},{"location":"faq/#6-what-tools-are-used-for-infrastructure-provisioning","title":"6. What tools are used for infrastructure provisioning?","text":"<p>Fawkes uses Terraform for Infrastructure as Code (IaC) and Helm for managing Kubernetes applications.</p>"},{"location":"faq/#7-how-do-i-monitor-my-infrastructure-and-applications","title":"7. How do I monitor my infrastructure and applications?","text":"<p>Fawkes integrates with Prometheus and Grafana for monitoring. Additional integrations like Azure Monitor and the ELK stack are also supported. See the Integrations Guide for more details.</p>"},{"location":"faq/#cicd-and-testing","title":"CI/CD and Testing","text":""},{"location":"faq/#8-what-cicd-tools-are-supported","title":"8. What CI/CD tools are supported?","text":"<p>Fawkes supports Jenkins, GitHub Actions, and Azure DevOps Pipelines. Pre-configured pipelines and workflows are included to help you get started quickly.</p>"},{"location":"faq/#9-what-types-of-testing-are-included","title":"9. What types of testing are included?","text":"<p>Fawkes includes static analysis, unit testing, integration testing, acceptance testing, performance testing, and security testing. Refer to the QA Directory for more information.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#10-what-should-i-do-if-i-encounter-an-issue","title":"10. What should I do if I encounter an issue?","text":"<p>Refer to the Troubleshooting Guide for solutions to common problems. If the issue persists, open an issue on GitHub.</p>"},{"location":"faq/#11-how-do-i-debug-kubernetes-issues","title":"11. How do I debug Kubernetes issues?","text":"<p>Use <code>kubectl</code> to inspect resources and logs. For example: <pre><code>kubectl describe pod &lt;pod-name&gt;\nkubectl logs &lt;pod-name&gt;\n</code></pre> Refer to the Kubernetes Configuration section for more details.</p>"},{"location":"faq/#contributions","title":"Contributions","text":""},{"location":"faq/#12-how-can-i-contribute-to-fawkes","title":"12. How can I contribute to Fawkes?","text":"<p>We welcome contributions! See the Development Guide for instructions on setting up your development environment and submitting pull requests.</p>"},{"location":"faq/#13-are-there-any-coding-standards-i-should-follow","title":"13. Are there any coding standards I should follow?","text":"<p>Yes, Fawkes follows best practices for coding, testing, and documentation. Refer to the Development Guide for details.</p>"},{"location":"faq/#azure-specific-questions","title":"Azure-Specific Questions","text":""},{"location":"faq/#14-how-do-i-authenticate-with-azure","title":"14. How do I authenticate with Azure?","text":"<p>Use the Azure CLI to log in and set your subscription: <pre><code>az login\naz account set --subscription &lt;subscription-id&gt;\n</code></pre> Follow Azure best practices for authentication and resource management. Refer to the Azure Development Best Practices section for more details.</p>"},{"location":"faq/#15-does-fawkes-support-azure-devops","title":"15. Does Fawkes support Azure DevOps?","text":"<p>Yes, Fawkes supports Azure DevOps Pipelines for CI/CD. Pre-configured templates and best practices are included.</p>"},{"location":"faq/#need-more-help","title":"Need More Help?","text":"<p>If your question is not answered here, you can: 1. Check the Documentation for additional resources. 2. Open an issue on GitHub. 3. Reach out to the community for support.</p>"},{"location":"getting-started/","title":"Getting Started with Fawkes","text":"<p>Welcome to the Fawkes Internal Developer Platform! This guide will help you set up your environment, deploy the platform, and start using its features.</p> <p>Fawkes is a metrics-first platform designed to help teams improve their software delivery performance by focusing on the Four Key Metrics and supporting the eight capabilities needed to enhance those metrics.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following tools installed:</p> <ul> <li>Git: For cloning the repository.</li> <li>Docker: For local development and container builds.</li> <li>Terraform: For infrastructure provisioning.</li> <li>kubectl: For Kubernetes management.</li> <li>Helm: For managing Kubernetes applications.</li> <li>Cloud CLI tools: As needed for your cloud provider (e.g., AWS CLI, Azure CLI, GCloud CLI).</li> </ul>"},{"location":"getting-started/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>Start by cloning the Fawkes repository:</p> <pre><code>git clone https://github.com/paruff/fawkes.git\ncd fawkes\n</code></pre>"},{"location":"getting-started/#2-review-the-directory-structure","title":"2. Review the Directory Structure","text":"<p>Familiarize yourself with the repository structure:</p> <ul> <li><code>infra/</code>: Infrastructure as Code (Terraform, Kubernetes, scripts).</li> <li><code>platform/</code>: Platform services, APIs, and UI.</li> <li><code>workspace/</code>: Developer environment automation.</li> <li><code>qa/</code>: Quality assurance and test suites.</li> <li><code>docs/</code>: Documentation.</li> </ul>"},{"location":"getting-started/#3-configure-your-environment","title":"3. Configure Your Environment","text":"<ol> <li>Copy and edit any example configuration files:    <pre><code>cp .env.example .env\n</code></pre></li> <li>Set up required secrets and environment variables as described in configuration.md.</li> </ol>"},{"location":"getting-started/#4-provision-infrastructure","title":"4. Provision Infrastructure","text":"<p>Navigate to the <code>infra/</code> directory and follow the instructions for your cloud provider:</p> <pre><code>cd infra\n# Example for AWS\n./buildinfra.sh -p aws -e dev\n</code></pre> <p>For more details on supported platforms and environments, see architecture.md.</p>"},{"location":"getting-started/#5-deploy-platform-services","title":"5. Deploy Platform Services","text":"<p>Once the infrastructure is ready, deploy platform services (e.g., Jenkins, SonarQube):</p> <pre><code>cd platform\n# Example: Deploy Jenkins\n./jenkins-delta.sh -i\n</code></pre> <p>Refer to the usage guide for additional service deployment options.</p>"},{"location":"getting-started/#6-access-the-platform","title":"6. Access the Platform","text":"<ol> <li>Find service endpoints and credentials in the output of your deployment scripts or in the show outputs section.</li> <li>Access the developer dashboard, CI/CD tools, and other services via your browser.</li> </ol>"},{"location":"getting-started/#7-next-steps","title":"7. Next Steps","text":"<ul> <li>Explore the usage guide for workflows and examples.</li> <li>Review development.md if you want to contribute.</li> <li>Check troubleshooting.md for help with common issues.</li> </ul>"},{"location":"getting-started/#need-help","title":"Need Help?","text":"<p>If you encounter any issues or have questions:</p> <ul> <li>See the FAQ for common questions.</li> <li>Open an issue on GitHub.</li> </ul> <p>Thank you for choosing Fawkes! We\u2019re excited to help you build better, faster, and more reliable infrastructure.</p>"},{"location":"integrations/","title":"Integrations","text":"<p>This document provides an overview of the integrations supported by the Fawkes Internal Developer Platform (IDP). These integrations enhance the platform's capabilities by connecting it with external tools and services for CI/CD, monitoring, security, and more.</p>"},{"location":"integrations/#table-of-contents","title":"Table of Contents","text":"<ul> <li>CI/CD Integrations</li> <li>Monitoring and Logging</li> <li>Security and Compliance</li> <li>Cloud Provider Integrations</li> <li>Developer Tools</li> <li>Extending Integrations</li> </ul>"},{"location":"integrations/#cicd-integrations","title":"CI/CD Integrations","text":"<p>Fawkes supports seamless integration with popular CI/CD tools to automate build, test, and deployment pipelines.</p> <ul> <li> <p>Jenkins:   Pre-configured pipelines for building and deploying applications.   See the Jenkins integration guide for setup instructions.</p> </li> <li> <p>GitHub Actions:   Use GitHub Actions workflows for CI/CD directly from your repository.   Example workflows are provided in the <code>.github/workflows/</code> directory.</p> </li> <li> <p>Azure DevOps Pipelines:   Integrate with Azure DevOps for end-to-end CI/CD pipelines.   Follow Azure best practices for pipeline configuration.</p> </li> </ul>"},{"location":"integrations/#monitoring-and-logging","title":"Monitoring and Logging","text":"<p>Fawkes integrates with monitoring and logging tools to provide visibility into your infrastructure and applications.</p> <ul> <li> <p>Prometheus and Grafana:   Pre-configured Helm charts for Prometheus and Grafana to monitor Kubernetes clusters and applications.   See the Prometheus setup guide.</p> </li> <li> <p>Azure Monitor:   Use Azure Monitor for centralized logging and metrics collection.   Follow Azure best practices for configuring Log Analytics and Application Insights.</p> </li> <li> <p>ELK Stack (Elasticsearch, Logstash, Kibana):   Optional integration for advanced log aggregation and visualization.</p> </li> </ul>"},{"location":"integrations/#security-and-compliance","title":"Security and Compliance","text":"<p>Fawkes includes integrations with tools to ensure security and compliance across your infrastructure and applications.</p> <ul> <li> <p>Trivy:   Scan container images for vulnerabilities before deployment.</p> </li> <li> <p>OWASP ZAP:   Perform dynamic application security testing (DAST) on your web applications.</p> </li> <li> <p>Azure Policy:   Enforce compliance policies for Azure resources.   Use Azure best practices for configuring and managing policies.</p> </li> <li> <p>Snyk:   Identify and fix vulnerabilities in your dependencies.</p> </li> </ul>"},{"location":"integrations/#cloud-provider-integrations","title":"Cloud Provider Integrations","text":"<p>Fawkes supports multi-cloud deployments with integrations for major cloud providers.</p> <ul> <li> <p>AWS:   Provision infrastructure using Terraform and manage resources with the AWS CLI.   See the AWS integration guide.</p> </li> <li> <p>Azure:   Use Azure CLI and Terraform to provision and manage resources.   Follow Azure best practices for authentication, resource groups, and networking.</p> </li> <li> <p>Google Cloud Platform (GCP):   Integrate with GCP for Kubernetes (GKE) and other cloud services.</p> </li> </ul>"},{"location":"integrations/#developer-tools","title":"Developer Tools","text":"<p>Fawkes integrates with tools to enhance the developer experience.</p> <ul> <li> <p>SonarQube:   Perform static code analysis to ensure code quality and security.</p> </li> <li> <p>Keycloak:   Optional integration for single sign-on (SSO) and identity management.</p> </li> <li> <p>Docker:   Use Docker for local development and containerized applications.</p> </li> <li> <p>Azure Dev Spaces:   Enable collaborative development in Kubernetes clusters.   Follow Azure best practices for setting up Dev Spaces.</p> </li> </ul>"},{"location":"integrations/#extending-integrations","title":"Extending Integrations","text":"<p>Fawkes is designed to be extensible. You can add new integrations by:</p> <ol> <li>Adding configuration files or scripts in the appropriate directory (e.g., <code>infra/</code>, <code>platform/</code>).</li> <li>Updating the documentation in this file to reflect the new integration.</li> <li>Testing the integration in your environment.</li> </ol>"},{"location":"integrations/#need-help","title":"Need Help?","text":"<p>If you encounter issues with any integration, refer to the specific tool's documentation or open an issue on GitHub.</p>"},{"location":"security/","title":"Security","text":"<p>This document outlines the security model, practices, and recommendations for the Fawkes Internal Developer Platform (IDP).</p>"},{"location":"security/#principles","title":"Principles","text":"<ul> <li>Least Privilege: All components and users are granted only the permissions they need.</li> <li>Separation of Duties: Infrastructure, platform, and application responsibilities are separated.</li> <li>Defense in Depth: Multiple layers of security controls are implemented across the stack.</li> <li>Transparency: All security controls and configurations are documented and open for review.</li> </ul>"},{"location":"security/#secrets-management","title":"Secrets Management","text":"<ul> <li>Never commit secrets to version control.</li> <li>Use secret management tools (e.g., AWS Secrets Manager, Azure Key Vault, GCP Secret Manager, or Kubernetes Secrets).</li> <li>Store only encrypted secrets in infrastructure code; inject secrets at deploy time.</li> <li>Add secret files and templates to <code>.gitignore</code>.</li> </ul>"},{"location":"security/#identity-and-access-management-iam","title":"Identity and Access Management (IAM)","text":"<ul> <li>Use cloud-native IAM (AWS IAM, Azure AD, GCP IAM) for resource access control.</li> <li>Use Kubernetes RBAC for fine-grained access within clusters.</li> <li>Rotate credentials and keys regularly.</li> <li>Use service accounts for automation and CI/CD, with minimal permissions.</li> </ul>"},{"location":"security/#network-security","title":"Network Security","text":"<ul> <li>Deploy resources in private subnets where possible.</li> <li>Restrict public ingress using security groups, firewalls, and Kubernetes network policies.</li> <li>Use TLS/SSL for all service endpoints.</li> <li>Enable logging and monitoring for network traffic.</li> </ul>"},{"location":"security/#platform-security","title":"Platform Security","text":"<ul> <li>Enable audit logging for all infrastructure and platform components.</li> <li>Regularly update dependencies and base images to address vulnerabilities.</li> <li>Use vulnerability scanning tools (e.g., Trivy, Gitleaks) in CI/CD pipelines.</li> <li>Enforce code reviews and automated tests for all changes.</li> </ul>"},{"location":"security/#kubernetes-security","title":"Kubernetes Security","text":"<ul> <li>Use namespaces to isolate workloads.</li> <li>Apply Pod Security Standards (PSS) or PodSecurityPolicies.</li> <li>Limit container privileges (no root, no privilege escalation).</li> <li>Use network policies to restrict pod-to-pod communication.</li> <li>Scan container images for vulnerabilities before deployment.</li> </ul>"},{"location":"security/#cicd-security","title":"CI/CD Security","text":"<ul> <li>Store CI/CD credentials securely (never in code).</li> <li>Use environment variables or secret stores for pipeline secrets.</li> <li>Limit pipeline permissions to only required resources.</li> <li>Scan code and dependencies for vulnerabilities on every build.</li> </ul>"},{"location":"security/#monitoring-and-incident-response","title":"Monitoring and Incident Response","text":"<ul> <li>Enable and monitor audit logs for all cloud and platform resources.</li> <li>Set up alerts for suspicious activity or failed authentication attempts.</li> <li>Document incident response procedures and regularly review them.</li> </ul>"},{"location":"security/#user-responsibilities","title":"User Responsibilities","text":"<ul> <li>Use strong, unique passwords and enable MFA where possible.</li> <li>Report any suspected security issues to the project maintainers.</li> <li>Follow the contributing guidelines for secure code contributions.</li> </ul>"},{"location":"security/#reporting-vulnerabilities","title":"Reporting Vulnerabilities","text":"<p>If you discover a security vulnerability, please report it responsibly by opening a private issue or contacting the maintainers directly.</p>"},{"location":"security/#references","title":"References","text":"<ul> <li>CNCF Kubernetes Security Best Practices</li> <li>OWASP Top Ten</li> <li>Cloud Provider Security Docs</li> </ul> <p>```</p>"},{"location":"security/#security_1","title":"Security","text":"<p>This document outlines the security model, practices, and recommendations for the Fawkes Internal Developer Platform (IDP).</p>"},{"location":"security/#principles_1","title":"Principles","text":"<ul> <li>Least Privilege: All components and users are granted only the permissions they need.</li> <li>Separation of Duties: Infrastructure, platform, and application responsibilities are separated.</li> <li>Defense in Depth: Multiple layers of security controls are implemented across the stack.</li> <li>Transparency: All security controls and configurations are documented and open for review.</li> </ul>"},{"location":"security/#secrets-management_1","title":"Secrets Management","text":"<ul> <li>Never commit secrets to version control.</li> <li>Use secret management tools (e.g., AWS Secrets Manager, Azure Key Vault, GCP Secret Manager, or Kubernetes Secrets).</li> <li>Store only encrypted secrets in infrastructure code; inject secrets at deploy time.</li> <li>Add secret files and templates to <code>.gitignore</code>.</li> </ul>"},{"location":"security/#identity-and-access-management-iam_1","title":"Identity and Access Management (IAM)","text":"<ul> <li>Use cloud-native IAM (AWS IAM, Azure AD, GCP IAM) for resource access control.</li> <li>Use Kubernetes RBAC for fine-grained access within clusters.</li> <li>Rotate credentials and keys regularly.</li> <li>Use service accounts for automation and CI/CD, with minimal permissions.</li> </ul>"},{"location":"security/#network-security_1","title":"Network Security","text":"<ul> <li>Deploy resources in private subnets where possible.</li> <li>Restrict public ingress using security groups, firewalls, and Kubernetes network policies.</li> <li>Use TLS/SSL for all service endpoints.</li> <li>Enable logging and monitoring for network traffic.</li> </ul>"},{"location":"security/#platform-security_1","title":"Platform Security","text":"<ul> <li>Enable audit logging for all infrastructure and platform components.</li> <li>Regularly update dependencies and base images to address vulnerabilities.</li> <li>Use vulnerability scanning tools (e.g., Trivy, Gitleaks) in CI/CD pipelines.</li> <li>Enforce code reviews and automated tests for all changes.</li> </ul>"},{"location":"security/#kubernetes-security_1","title":"Kubernetes Security","text":"<ul> <li>Use namespaces to isolate workloads.</li> <li>Apply Pod Security Standards (PSS) or PodSecurityPolicies.</li> <li>Limit container privileges (no root, no privilege escalation).</li> <li>Use network policies to restrict pod-to-pod communication.</li> <li>Scan container images for vulnerabilities before deployment.</li> </ul>"},{"location":"security/#cicd-security_1","title":"CI/CD Security","text":"<ul> <li>Store CI/CD credentials securely (never in code).</li> <li>Use environment variables or secret stores for pipeline secrets.</li> <li>Limit pipeline permissions to only required resources.</li> <li>Scan code and dependencies for vulnerabilities on every build.</li> </ul>"},{"location":"security/#monitoring-and-incident-response_1","title":"Monitoring and Incident Response","text":"<ul> <li>Enable and monitor audit logs for all cloud and platform resources.</li> <li>Set up alerts for suspicious activity or failed authentication attempts.</li> <li>Document incident response procedures and regularly review them.</li> </ul>"},{"location":"security/#user-responsibilities_1","title":"User Responsibilities","text":"<ul> <li>Use strong, unique passwords and enable MFA where possible.</li> <li>Report any suspected security issues to the project maintainers.</li> <li>Follow the contributing guidelines for secure code contributions.</li> </ul>"},{"location":"security/#reporting-vulnerabilities_1","title":"Reporting Vulnerabilities","text":"<p>If you discover a security vulnerability, please report it responsibly by opening a private issue or contacting the maintainers directly.</p>"},{"location":"security/#references_1","title":"References","text":"<ul> <li>CNCF Kubernetes Security Best Practices</li> <li>OWASP Top Ten</li> <li>Cloud Provider Security Docs</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide provides solutions to common issues encountered while using the Fawkes Internal Developer Platform. It is organized by category to help you quickly identify and resolve problems.</p>"},{"location":"troubleshooting/#table-of-contents","title":"Table of Contents","text":"<ul> <li>General Issues</li> <li>Infrastructure Issues</li> <li>Kubernetes Issues</li> <li>CI/CD Issues</li> <li>Azure-Specific Issues</li> <li>Testing Issues</li> <li>Getting Help</li> </ul>"},{"location":"troubleshooting/#general-issues","title":"General Issues","text":""},{"location":"troubleshooting/#1-environment-variables-not-loaded","title":"1. Environment Variables Not Loaded","text":"<ul> <li>Symptom: Commands fail due to missing environment variables.</li> <li>Solution:</li> <li>Ensure you have a <code>.env</code> file in the root directory.</li> <li>Load the environment variables:     <pre><code>source .env\n</code></pre></li> </ul>"},{"location":"troubleshooting/#2-permission-denied-errors","title":"2. Permission Denied Errors","text":"<ul> <li>Symptom: You encounter <code>Permission Denied</code> errors when running scripts.</li> <li>Solution:</li> <li>Ensure the script has executable permissions:     <pre><code>chmod +x &lt;script-name&gt;.sh\n</code></pre></li> <li>Run the script with appropriate privileges (e.g., <code>sudo</code> if required).</li> </ul>"},{"location":"troubleshooting/#infrastructure-issues","title":"Infrastructure Issues","text":""},{"location":"troubleshooting/#1-terraform-apply-fails","title":"1. Terraform Apply Fails","text":"<ul> <li>Symptom: Terraform fails with errors like \"resource already exists\" or \"authentication failed.\"</li> <li>Solution:</li> <li>Run <code>terraform plan</code> to identify conflicting resources.</li> <li>Ensure your cloud provider credentials are valid and loaded:     <pre><code>export AWS_ACCESS_KEY_ID=your-access-key\nexport AWS_SECRET_ACCESS_KEY=your-secret-key\n</code></pre></li> </ul>"},{"location":"troubleshooting/#2-infrastructure-not-destroyed-properly","title":"2. Infrastructure Not Destroyed Properly","text":"<ul> <li>Symptom: Resources remain after running the destroy script.</li> <li>Solution:</li> <li>Manually inspect the resources in your cloud provider's console.</li> <li>Run <code>terraform destroy</code> directly in the affected directory:     <pre><code>terraform destroy\n</code></pre></li> </ul>"},{"location":"troubleshooting/#kubernetes-issues","title":"Kubernetes Issues","text":""},{"location":"troubleshooting/#1-kubernetes-cluster-unreachable","title":"1. Kubernetes Cluster Unreachable","text":"<ul> <li>Symptom: <code>kubectl</code> commands fail with \"Unable to connect to the server.\"</li> <li>Solution:</li> <li>Ensure your <code>kubeconfig</code> is set correctly:     <pre><code>export KUBECONFIG=/path/to/kubeconfig\n</code></pre></li> <li>Verify the cluster status:     <pre><code>kubectl cluster-info\n</code></pre></li> </ul>"},{"location":"troubleshooting/#2-pods-stuck-in-pending-state","title":"2. Pods Stuck in Pending State","text":"<ul> <li>Symptom: Pods remain in the <code>Pending</code> state.</li> <li>Solution:</li> <li>Check for insufficient resources:     <pre><code>kubectl describe pod &lt;pod-name&gt;\n</code></pre></li> <li>Scale up your cluster or free up resources.</li> </ul>"},{"location":"troubleshooting/#cicd-issues","title":"CI/CD Issues","text":""},{"location":"troubleshooting/#1-jenkins-pipeline-fails","title":"1. Jenkins Pipeline Fails","text":"<ul> <li>Symptom: Jenkins pipelines fail with errors related to missing credentials or tools.</li> <li>Solution:</li> <li>Verify that the required credentials are configured in Jenkins.</li> <li>Ensure the Jenkins agent has the necessary tools installed.</li> </ul>"},{"location":"troubleshooting/#2-github-actions-workflow-fails","title":"2. GitHub Actions Workflow Fails","text":"<ul> <li>Symptom: GitHub Actions fail with errors like \"command not found\" or \"authentication failed.\"</li> <li>Solution:</li> <li>Check the workflow logs for detailed error messages.</li> <li>Ensure secrets are configured correctly in the repository settings.</li> </ul>"},{"location":"troubleshooting/#azure-specific-issues","title":"Azure-Specific Issues","text":""},{"location":"troubleshooting/#1-azure-cli-authentication-fails","title":"1. Azure CLI Authentication Fails","text":"<ul> <li>Symptom: Azure CLI commands fail with \"not logged in\" or \"authentication failed.\"</li> <li>Solution:</li> <li>Log in to Azure CLI:     <pre><code>az login\n</code></pre></li> <li>Set the correct subscription:     <pre><code>az account set --subscription &lt;subscription-id&gt;\n</code></pre></li> </ul>"},{"location":"troubleshooting/#2-resource-group-not-found","title":"2. Resource Group Not Found","text":"<ul> <li>Symptom: Terraform or Azure CLI commands fail with \"resource group not found.\"</li> <li>Solution:</li> <li>Verify the resource group exists:     <pre><code>az group list --query \"[].name\"\n</code></pre></li> <li>Create the resource group if necessary:     <pre><code>az group create --name &lt;resource-group&gt; --location &lt;location&gt;\n</code></pre></li> </ul>"},{"location":"troubleshooting/#testing-issues","title":"Testing Issues","text":""},{"location":"troubleshooting/#1-tests-fail-due-to-missing-dependencies","title":"1. Tests Fail Due to Missing Dependencies","text":"<ul> <li>Symptom: Tests fail with errors like \"module not found\" or \"dependency missing.\"</li> <li>Solution:</li> <li>Install the required dependencies:     <pre><code>mvn clean install\n</code></pre></li> </ul>"},{"location":"troubleshooting/#2-performance-tests-fail","title":"2. Performance Tests Fail","text":"<ul> <li>Symptom: Performance tests fail with timeout or resource errors.</li> <li>Solution:</li> <li>Ensure the test environment has sufficient resources.</li> <li>Adjust the test parameters (e.g., reduce load or increase timeouts).</li> </ul>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you are unable to resolve an issue, you can:</p> <ol> <li>Check the FAQ for additional guidance.</li> <li>Open an issue on GitHub with detailed information about the problem.</li> <li>Reach out to the community for support.</li> </ol>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide explains how to use the Fawkes Internal Developer Platform after setup. It covers common workflows, service management, and accessing platform features.</p> <p>Fawkes is a metrics-first platform designed to help teams improve their software delivery performance by focusing on the Four Key Metrics and supporting the eight capabilities needed to enhance those metrics.</p>"},{"location":"usage/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Accessing Platform Services</li> <li>Managing Infrastructure</li> <li>Deploying Platform Services</li> <li>Viewing Outputs and Endpoints</li> <li>CI/CD and Developer Workflows</li> <li>Measuring and Improving DORA Metrics</li> <li>Configuration Management</li> <li>Troubleshooting</li> </ul>"},{"location":"usage/#accessing-platform-services","title":"Accessing Platform Services","text":"<p>After deployment, you can access services such as Jenkins, SonarQube, and the Kubernetes Dashboard. These services support Continuous Integration, Monitoring and Observability, and Streamlining Change Approval.</p> <ul> <li> <p>Jenkins:   Access Jenkins via the provided URL (e.g., <code>http://&lt;jenkins-lb&gt;:8080</code>).   Retrieve the admin password using:   <pre><code>kubectl get secret --namespace &lt;namespace&gt; jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode\n</code></pre></p> </li> <li> <p>SonarQube:   Access SonarQube via the provided URL (e.g., <code>http://&lt;sonarqube-lb&gt;:9000</code>).   Default credentials: <code>admin</code> / <code>admin</code>.</p> </li> <li> <p>Kubernetes Dashboard:   Access the dashboard via the provided URL. Retrieve the admin token using:   <pre><code>kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')\n</code></pre></p> </li> </ul>"},{"location":"usage/#managing-infrastructure","title":"Managing Infrastructure","text":"<ul> <li> <p>Provisioning Infrastructure:   Use the provided scripts in the <code>infra/</code> directory to provision or update infrastructure:   <pre><code>cd infra\n./buildinfra.sh -p aws -e dev\n</code></pre></p> </li> <li> <p>Destroying Infrastructure:   To tear down infrastructure:   <pre><code>cd infra\n./buildinfra.sh -p aws -e dev --destroy\n</code></pre></p> </li> <li> <p>Using Terraform Directly:   Advanced users can manage infrastructure directly with Terraform:   <pre><code>cd infra/platform/aws\nterraform init\nterraform plan\nterraform apply\n</code></pre></p> </li> </ul>"},{"location":"usage/#deploying-platform-services","title":"Deploying Platform Services","text":"<ul> <li> <p>Jenkins Deployment:   Deploy Jenkins using the provided script:   <pre><code>cd platform/jenkins\n./jenkins-delta.sh -i\n</code></pre></p> </li> <li> <p>Other Services:   Each service directory contains deployment scripts or Helm charts. Refer to the respective README files for details.</p> </li> </ul>"},{"location":"usage/#viewing-outputs-and-endpoints","title":"Viewing Outputs and Endpoints","text":"<p>After deployment, service URLs and credentials are displayed in the terminal. You can also retrieve them using:</p> <ul> <li> <p>Terraform Outputs: <pre><code>terraform output\n</code></pre></p> </li> <li> <p>Deployment Script Outputs: <pre><code>./jenkins-delta.sh -s\n</code></pre></p> </li> </ul>"},{"location":"usage/#cicd-and-developer-workflows","title":"CI/CD and Developer Workflows","text":"<ul> <li> <p>Pipelines:   Jenkins is pre-configured for CI/CD. Add your repositories and configure pipelines as needed.</p> </li> <li> <p>Workspace Automation:   Use scripts in the <code>workspace/</code> directory to set up local development environments.</p> </li> </ul>"},{"location":"usage/#measuring-and-improving-dora-metrics","title":"Measuring and Improving DORA Metrics","text":"<p>Fawkes is designed to help teams measure and improve the Four Key DORA Metrics:</p> <ul> <li>Deployment Frequency</li> <li>Lead Time for Changes</li> <li>Change Failure Rate</li> <li>Mean Time to Restore (MTTR)</li> </ul>"},{"location":"usage/#how-fawkes-helps","title":"How Fawkes Helps:","text":"<ul> <li>Automated CI/CD Pipelines: Jenkins and other integrated tools provide metrics on deployment frequency and lead time.</li> <li>Quality Gates: SonarQube and automated tests help reduce change failure rate.</li> <li>Monitoring &amp; Alerts: Integrated monitoring and logging help track and reduce MTTR.</li> <li>Reporting: Extract and visualize DORA metrics from pipeline logs, test reports, and monitoring dashboards.</li> </ul> <p>See the architecture and development guide for more on how Fawkes supports DORA capabilities and continuous improvement.</p>"},{"location":"usage/#configuration-management","title":"Configuration Management","text":"<ul> <li>All configuration files are located in the <code>infra/</code> and <code>platform/</code> directories.</li> <li>Secrets should not be committed to version control. Use templates and inject secrets at deploy time.</li> <li>See configuration.md for details on environment variables and secret management.</li> </ul>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>See troubleshooting.md for common issues and solutions.</li> <li>For further help, open an issue on GitHub.</li> </ul> <p>Thank you for choosing Fawkes! We\u2019re excited to help you build better, faster, and more reliable infrastructure.</p>"},{"location":"design/Demand%20Hypothesis/","title":"Demand Hypothesis","text":"<p>Based on the defined persona (Improvement-Driven Leader) and their Jobs to Be Done, we hypothesize the following about the demand for a service that provides DORA metrics visualization:</p> <p>Hypothesis Statement:</p> <p>We believe that Improvement-Driven Leaders within software development organizations will find significant value in a service that provides easily accessible, objective visualization of DORA metrics.</p> <p>Because:</p> <ul> <li>DORA metrics (change lead time, deployment frequency, change fail percentage, failed deployment recovery time) are globally recognized and validated indicators of software delivery performance and overall organizational outcomes [6, 7].</li> <li>Improvement-Driven Leaders need objective data to understand the current state of their software delivery process and identify specific areas for improvement [5, 8].</li> <li>There is a common pain point where management doesn't fully understand the software process or the challenges faced by development and operations teams, leading to misaligned expectations and pressure [1-3].</li> <li>Providing end-to-end dashboards for stakeholders to view performance is a key practice for mitigating challenges and enabling data-driven decision-making [8].</li> <li>Metrics are a requirement for excellence and facilitate informed decision-making [8].</li> <li>Organizations often struggle to effectively collect and present these critical metrics from their existing toolchains [8, 14-16].</li> <li>A service focused on delivering these core metrics addresses a fundamental need for visibility and insight necessary for an improvement-driven approach [5, 7].</li> </ul> <p>Therefore:</p> <ul> <li>Providing a clear, centralized view of DORA metrics will solve a key pain point for leaders struggling to measure and understand their team's performance.</li> <li>This service will enable leaders to make better decisions, justify investments in process improvements, and communicate performance effectively across the organization.</li> <li>The demand for such a service is driven by the need to identify and address inefficiencies and bottlenecks in the software delivery lifecycle, ultimately helping organizations get \"better at getting better\" [5].</li> <li>While platforms like Backstage exist, a focused MVP on DORA metrics addresses the specific need for performance visibility directly, potentially with less initial overhead than a full IDP implementation, thus being valuable as a targeted solution for this persona.</li> </ul> <p>Validation Strategy (Implicit/Next Steps):</p> <ul> <li>Engage directly with potential customers (Improvement-Driven Leaders) to confirm these pain points and the perceived value of a DORA metrics dashboard [17].</li> <li>Leverage tools and methods for identifying pain points such as surveys, interviews, analyzing forum discussions (like on Reddit) related to DevOps, performance, and management challenges [17-26].</li> <li>Start with a DORA Quick Check style conversation [Conversation History] to assess current understanding and perceived needs regarding performance metrics.</li> </ul>"},{"location":"design/Jobs%20to%20Be%20Done%20%28JTBD%29%20for%20the%20Improve/","title":"Jobs to Be Done (JTBD) for the Improvement-Driven Leader Persona","text":"<p>Based on the persona description and the sources, the \"Improvement-Driven Leader\" hires a solution to perform the following jobs:</p> <p>Core Job:</p> <ul> <li>Measure software delivery performance using established metrics like the DORA Four Keys (change lead time, deployment frequency, change fail percentage, failed deployment recovery time) to understand the current state and track progress over time [6, 7].</li> </ul> <p>Related Jobs:</p> <ul> <li>Gain visibility into team and process performance to identify bottlenecks and areas needing attention [8].</li> <li>Provide stakeholders with end-to-end dashboards to visualize performance and facilitate decision-making [8].</li> <li>Identify problems early by monitoring key performance indicators [8].</li> <li>Understand where the organization is potentially failing across the key software delivery metrics [7].</li> <li>Gather objective data to validate or challenge perceptions about performance.</li> <li>Inform and prioritize improvement initiatives based on data rather than intuition or anecdote [5, 8].</li> <li>Communicate performance trends and the impact of changes to other leaders and teams [1, 2].</li> <li>Bridge the communication gap between technical teams and business stakeholders by providing quantifiable metrics [1, 2].</li> <li>Establish a baseline for performance before implementing new practices or tools.</li> <li>Monitor the effectiveness of implemented changes and improvements.</li> <li>Enable continuous improvement by providing the data needed to identify and address problems iteratively [5].</li> </ul>"},{"location":"design/Persona-Ivan%20The%20Improvement-Driven%20Leader/","title":"Persona: The Improvement-Driven Leader","text":"<p>Based on our conversation history and the provided sources, our primary persona is the Improvement-Driven Leader. This persona represents individuals in leadership or management roles who are focused on understanding and improving their organization's software delivery performance.</p> <p>Description:</p> <p>This persona is typically a product manager, manager, or leader within a software development or IT organization [1-3]. They are concerned with business objectives [4], realizing gains quickly [1], and ensuring their teams are getting better at getting better [5].</p> <p>Goals:</p> <ul> <li>To understand the current state of software delivery performance objectively [6, 7].</li> <li>To identify areas for improvement within the software development and delivery process [5].</li> <li>To make data-driven decisions to optimize workflows and resource allocation [8].</li> <li>To bridge the gap between business needs and the realities of software development difficulty [1, 2].</li> <li>To quantify the Return on Investment (ROI) of improvement initiatives.</li> <li>To foster a supportive, innovative, and stable organizational culture that enables high performance [7].</li> <li>To ensure security is seamlessly integrated into development workflows and aligns with business objectives [4].</li> </ul> <p>Pain Points &amp; Frustrations:</p> <ul> <li>Lack of clear visibility into software delivery performance metrics [8].</li> <li>Difficulty in understanding the actual effort and complexity of development work (\"development as a black box\") [1].</li> <li>Challenges in conveying the difficulty or time required for features to business stakeholders [1, 2].</li> <li>Pressure to deliver quickly leading to rushing and technical debt, often due to management not understanding the process [2].</li> <li>Unrealistic expectations and deadlines from project managers or management who don't understand the workload, especially in DevOps roles [3].</li> <li>Tools that get in their way rather than helping [9].</li> <li>Challenges related to management structure, communication/collaboration, and culture when adopting new methodologies like DevOps [10, 11].</li> <li>Lack of senior management involvement in improvement initiatives [12].</li> <li>Difficulty in identifying hidden pain points or workarounds that teams have become accustomed to (\"It's annoying, but this is how we do the thing\") [13].</li> </ul>"},{"location":"patterns/","title":"Implementation Patterns","text":"<p>These patterns provide proven approaches to implementing DORA capabilities in your organization.</p>"},{"location":"patterns/#fast-flow-patterns","title":"Fast Flow Patterns","text":"Pattern Description Related Tools Continuous Delivery Automated deployment pipeline patterns Spinnaker, Jenkins, Flux Infrastructure as Code Managing infrastructure through code Terraform, Kubernetes Database Changes Safe database deployment patterns Flyway, Liquibase"},{"location":"patterns/#fast-feedback-patterns","title":"Fast Feedback Patterns","text":"Pattern Description Related Tools Test Automation Comprehensive testing strategies Selenium, JUnit Monitoring Observability implementation Prometheus, Grafana Chaos Engineering Resilience testing patterns Chaos Mesh"},{"location":"patterns/#fast-recovery-patterns","title":"Fast Recovery Patterns","text":"Pattern Description Related Tools Shift Left Security Early security testing patterns OWASP ZAP Quality Gates Code quality enforcement SonarQube Incident Response Quick recovery patterns PagerDuty <p>View Capabilities Explore Tools</p>"},{"location":"patterns/continuous-delivery/","title":"Continuous Delivery Pattern","text":"<p>Continuous Delivery (CD) is a software development practice where code changes are automatically prepared for production release. According to DORA research, it's one of the key capabilities that drives high performance in technology organizations.</p>"},{"location":"patterns/continuous-delivery/#core-principles","title":"Core Principles","text":"Principle Description Implementation Trunk-Based Development Work in small batches with short-lived branches Git workflow with feature flags Automation Automate build, test, and deployment processes Jenkins, GitHub Actions Comprehensive Testing Implement automated testing at all levels Selenium, JUnit, Cypress GitOps Use Git as single source of truth ArgoCD, Flux"},{"location":"patterns/continuous-delivery/#implementation-guide","title":"Implementation Guide","text":""},{"location":"patterns/continuous-delivery/#1-version-control-practices","title":"1. Version Control Practices","text":"<pre><code># Trunk-based development workflow\ngit checkout -b feature/small-change\n# Make small, incremental changes\ngit commit -am \"feat: add new feature behind flag\"\ngit push origin feature/small-change\n# Merge to trunk within 24 hours\n</code></pre>"},{"location":"patterns/continuous-delivery/#2-deployment-pipeline","title":"2. Deployment Pipeline","text":"<pre><code># Example Jenkins Pipeline\npipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                sh 'make build'\n            }\n        }\n        stage('Test') {\n            parallel {\n                stage('Unit') {\n                    steps { sh 'make test-unit' }\n                }\n                stage('Integration') {\n                    steps { sh 'make test-integration' }\n                }\n            }\n        }\n        stage('Deploy') {\n            steps {\n                sh 'make deploy'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"patterns/continuous-delivery/#3-feature-flags","title":"3. Feature Flags","text":"<pre><code>public class FeatureFlags {\n    private static final String FLAG_NEW_FEATURE = \"new-feature\";\n\n    public boolean isEnabled(String flag) {\n        return LaunchDarkly.client().boolVariation(flag, user, false);\n    }\n}\n</code></pre>"},{"location":"patterns/continuous-delivery/#key-metrics","title":"Key Metrics","text":"<p>Based on DORA research, track these metrics:</p> Metric Elite Performance Implementation Deployment Frequency Multiple deploys per day <code>deployment_frequency = deploys / time_period</code> Lead Time for Changes Less than one hour <code>lead_time = time_to_production - commit_time</code> Change Failure Rate 0-15% <code>failure_rate = failed_deploys / total_deploys</code> Time to Restore Less than one hour <code>mttr = restore_time - failure_time</code>"},{"location":"patterns/continuous-delivery/#best-practices","title":"Best Practices","text":""},{"location":"patterns/continuous-delivery/#1-build-process","title":"1. Build Process","text":"<ul> <li>Use deterministic builds</li> <li>Cache dependencies</li> <li>Implement parallel processing</li> </ul>"},{"location":"patterns/continuous-delivery/#2-testing-strategy","title":"2. Testing Strategy","text":"<ul> <li>Maintain test pyramid</li> <li>Automate all tests</li> <li>Include security testing</li> </ul>"},{"location":"patterns/continuous-delivery/#3-deployment-process","title":"3. Deployment Process","text":"<pre><code># Example ArgoCD Application\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: fawkes-app\nspec:\n  source:\n    repoURL: https://github.com/paruff/fawkes.git\n    path: kubernetes\n    targetRevision: HEAD\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: production\n</code></pre>"},{"location":"patterns/continuous-delivery/#common-anti-patterns","title":"Common Anti-Patterns","text":"<p>\u274c Avoid These Practices: - Long-lived feature branches - Manual deployment steps - Infrequent integration - Environment-specific builds</p> <p>\u2705 Instead Do This: - Merge to trunk daily - Automate everything - Practice continuous integration - Build once, deploy many times</p>"},{"location":"patterns/continuous-delivery/#tools-integration","title":"Tools Integration","text":"Category Tools Purpose CI/CD Jenkins, GitHub Actions Pipeline automation Version Control Git Source code management Testing Selenium, JUnit Automated testing Deployment Spinnaker, ArgoCD Deployment automation Monitoring Prometheus, Grafana Performance tracking"},{"location":"patterns/continuous-delivery/#references","title":"References","text":"<ul> <li>Accelerate: Building and Scaling High Performing Technology Organizations</li> <li>2023 State of DevOps Report</li> <li>Continuous Delivery</li> </ul> <p>View Examples  Implementation Guide </p>"},{"location":"patterns/infrastructure-as-code/","title":"Infrastructure as Code Pattern","text":"<p>Infrastructure as Code (IaC) is a key capability identified in DORA research that enables high-performing organizations to manage their infrastructure using version-controlled declarative configurations.</p>"},{"location":"patterns/infrastructure-as-code/#core-principles","title":"Core Principles","text":"Principle Description Implementation Declarative Define desired state, not steps Terraform, ARM templates Version Control Track all infrastructure changes Git Immutable Replace rather than modify Containers, VM images Idempotent Same input yields same result Terraform state"},{"location":"patterns/infrastructure-as-code/#implementation-guide","title":"Implementation Guide","text":""},{"location":"patterns/infrastructure-as-code/#1-infrastructure-definition","title":"1. Infrastructure Definition","text":"<pre><code># Example Terraform Configuration\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~&gt; 3.0\"\n    }\n  }\n}\n\nresource \"azurerm_kubernetes_cluster\" \"main\" {\n  name                = \"fawkes-aks\"\n  location            = \"eastus\"\n  resource_group_name = azurerm_resource_group.main.name\n  dns_prefix          = \"fawkes\"\n\n  default_node_pool {\n    name       = \"default\"\n    node_count = 3\n    vm_size    = \"Standard_D2_v2\"\n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n}\n</code></pre>"},{"location":"patterns/infrastructure-as-code/#2-gitops-integration","title":"2. GitOps Integration","text":"<pre><code># ArgoCD Application for Infrastructure\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: fawkes-infrastructure\nspec:\n  source:\n    repoURL: https://github.com/paruff/fawkes.git\n    path: infrastructure/terraform\n    targetRevision: HEAD\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: infrastructure\n</code></pre>"},{"location":"patterns/infrastructure-as-code/#best-practices","title":"Best Practices","text":""},{"location":"patterns/infrastructure-as-code/#1-code-organization","title":"1. Code Organization","text":"<pre><code>infrastructure/\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 production/\n\u2502   \u2502   \u2514\u2500\u2500 main.tf\n\u2502   \u2514\u2500\u2500 staging/\n\u2502       \u2514\u2500\u2500 main.tf\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 kubernetes/\n\u2502   \u2502   \u2514\u2500\u2500 main.tf\n\u2502   \u2514\u2500\u2500 networking/\n\u2502       \u2514\u2500\u2500 main.tf\n\u2514\u2500\u2500 shared/\n    \u2514\u2500\u2500 variables.tf\n</code></pre>"},{"location":"patterns/infrastructure-as-code/#2-security-controls","title":"2. Security Controls","text":"<pre><code># Example Security Policy\nresource \"azurerm_key_vault\" \"main\" {\n  name                = \"fawkes-vault\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  tenant_id          = data.azurerm_client_config.current.tenant_id\n\n  sku_name = \"standard\"\n\n  network_acls {\n    default_action = \"Deny\"\n    bypass         = \"AzureServices\"\n  }\n}\n</code></pre>"},{"location":"patterns/infrastructure-as-code/#key-metrics","title":"Key Metrics","text":"<p>Based on DORA research, track these infrastructure metrics:</p> Metric Elite Performance Implementation Infrastructure Change Success Rate &gt; 95% <code>success_rate = successful_changes / total_changes</code> Infrastructure Recovery Time &lt; 1 hour <code>recovery_time = restore_time - failure_time</code> Infrastructure Deployment Time &lt; 30 minutes <code>deployment_time = end_time - start_time</code>"},{"location":"patterns/infrastructure-as-code/#testing-strategy","title":"Testing Strategy","text":""},{"location":"patterns/infrastructure-as-code/#1-unit-testing","title":"1. Unit Testing","text":"<pre><code># Example Terraform Test\nprovider \"test\" {}\n\nresource \"test_assertions\" \"network\" {\n  component = \"network\"\n\n  equal \"cidr_block\" {\n    description = \"CIDR block should match expected value\"\n    got         = module.network.cidr_block\n    want        = \"10.0.0.0/16\"\n  }\n}\n</code></pre>"},{"location":"patterns/infrastructure-as-code/#2-integration-testing","title":"2. Integration Testing","text":"<pre><code>#!/bin/bash\n# Infrastructure Integration Test\nterraform init\nterraform plan -out=tfplan\nterraform apply tfplan\n\n# Validate resources\naz aks show --name fawkes-aks --resource-group fawkes-rg\n</code></pre>"},{"location":"patterns/infrastructure-as-code/#common-anti-patterns","title":"Common Anti-Patterns","text":"<p>\u274c Avoid These Practices: - Manual infrastructure changes - Untested infrastructure code - Sharing state files - Hard-coded credentials</p> <p>\u2705 Instead Do This: - Automate all changes - Implement comprehensive testing - Use remote state storage - Use secrets management</p>"},{"location":"patterns/infrastructure-as-code/#tools-integration","title":"Tools Integration","text":"Category Tools Purpose IaC Terraform, Pulumi Infrastructure definition Version Control Git Configuration management CI/CD Azure DevOps, GitHub Actions Automation Testing Terratest, Inspec Validation Security Checkov, tfsec Security scanning"},{"location":"patterns/infrastructure-as-code/#references","title":"References","text":"<ul> <li>2023 State of DevOps Report</li> <li>Accelerate: Building and Scaling High Performing Technology Organizations</li> <li>Infrastructure as Code by Kief Morris</li> </ul> <p>View Examples  Implementation Guide </p>"},{"location":"patterns/test-automation/","title":"Test Automation Pattern","text":"<p>Test automation is a critical capability identified in DORA research that enables organizations to achieve elite performance through rapid, reliable feedback cycles. According to the research, elite performers automate 95% of their tests.</p>"},{"location":"patterns/test-automation/#core-principles","title":"Core Principles","text":"Principle Description Implementation Test Pyramid Balance test types for optimal coverage Unit (70%), Integration (20%), E2E (10%) Shift Left Test early in development cycle CI pipeline integration Reliability Tests should be deterministic Avoid flaky tests Speed Quick feedback loops Parallel test execution Trunk-Based Support frequent integration Pre-merge testing"},{"location":"patterns/test-automation/#implementation-guide","title":"Implementation Guide","text":""},{"location":"patterns/test-automation/#1-unit-testing","title":"1. Unit Testing","text":"<pre><code>@Test\nvoid deploymentFrequencyCalculation() {\n    // Arrange\n    DeploymentMetrics metrics = new DeploymentMetrics();\n    List&lt;Deployment&gt; deployments = Arrays.asList(\n        new Deployment(\"2023-01-01\"),\n        new Deployment(\"2023-01-02\")\n    );\n\n    // Act\n    double frequency = metrics.calculateFrequency(deployments);\n\n    // Assert\n    assertEquals(2.0, frequency, \"Should calculate correct deployment frequency\");\n}\n\n@Test\nvoid shouldHandleNoDeployments() {\n    // Arrange\n    DeploymentMetrics metrics = new DeploymentMetrics();\n    List&lt;Deployment&gt; deployments = Collections.emptyList();\n\n    // Act &amp; Assert\n    assertDoesNotThrow(() -&gt; metrics.calculateFrequency(deployments));\n    assertEquals(0.0, metrics.calculateFrequency(deployments));\n}\n</code></pre>"},{"location":"patterns/test-automation/#2-integration-testing-with-testcontainers","title":"2. Integration Testing with TestContainers","text":"<pre><code>@TestContainer\nclass DeploymentRepositoryTest {\n    @Container\n    static PostgreSQLContainer&lt;?&gt; postgres = new PostgreSQLContainer&lt;&gt;(\"postgres:14\")\n        .withDatabaseName(\"testdb\")\n        .withUsername(\"test\")\n        .withPassword(\"test\");\n\n    @Test\n    void shouldPersistDeployment() {\n        // Arrange\n        DeploymentRepository repository = new DeploymentRepository(postgres.getJdbcUrl());\n        Deployment deployment = new Deployment(\"2023-01-01\");\n\n        // Act\n        repository.save(deployment);\n\n        // Assert\n        Optional&lt;Deployment&gt; found = repository.findById(deployment.getId());\n        assertTrue(found.isPresent());\n        assertEquals(\"2023-01-01\", found.get().getDate());\n    }\n}\n</code></pre>"},{"location":"patterns/test-automation/#3-end-to-end-testing-with-cypress","title":"3. End-to-End Testing with Cypress","text":"<pre><code>describe('Deployment Pipeline', () =&gt; {\n  beforeEach(() =&gt; {\n    cy.intercept('GET', '/api/deployments').as('getDeployments');\n    cy.login(); // Custom command for authentication\n  });\n\n  it('shows deployment metrics dashboard', () =&gt; {\n    // Arrange\n    cy.visit('/dashboard');\n\n    // Act\n    cy.wait('@getDeployments');\n\n    // Assert\n    cy.get('[data-testid=\"deployment-frequency\"]').should('be.visible');\n    cy.get('[data-testid=\"lead-time\"]').should('be.visible');\n    cy.get('[data-testid=\"change-failure-rate\"]').should('be.visible');\n    cy.get('[data-testid=\"mttr\"]').should('be.visible');\n  });\n\n  it('creates new deployment', () =&gt; {\n    // Arrange\n    cy.visit('/deployments/new');\n\n    // Act\n    cy.get('[data-testid=\"service-name\"]').type('fawkes-web');\n    cy.get('[data-testid=\"version\"]').type('1.0.0');\n    cy.get('[data-testid=\"submit\"]').click();\n\n    // Assert\n    cy.get('[data-testid=\"success-message\"]')\n      .should('be.visible')\n      .and('contain', 'Deployment created successfully');\n  });\n});\n</code></pre>"},{"location":"patterns/test-automation/#continuous-integration-pipeline","title":"Continuous Integration Pipeline","text":"<pre><code># GitHub Actions workflow for test automation\nname: Test Automation\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          java-version: '17'\n          distribution: 'temurin'\n\n      - name: Unit Tests\n        run: ./gradlew test\n\n      - name: Integration Tests\n        run: ./gradlew integrationTest\n\n      - name: E2E Tests\n        uses: cypress-io/github-action@v6\n        with:\n          browser: chrome\n          config-file: cypress.config.js\n\n      - name: Upload Test Reports\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: test-reports\n          path: build/reports/tests/\n</code></pre>"},{"location":"patterns/test-automation/#test-coverage-goals","title":"Test Coverage Goals","text":"Test Type Coverage Target Run Frequency Max Duration Unit 80% Every commit 3 minutes Integration 60% Every PR 10 minutes E2E 40% Daily 30 minutes"},{"location":"patterns/test-automation/#performance-metrics","title":"Performance Metrics","text":"<p>According to DORA research, elite performers achieve:</p> <ul> <li>Test Runtime: &lt; 10 minutes for the full suite</li> <li>Test Reliability: &gt; 95% pass rate</li> <li>Coverage: &gt; 80% of critical paths</li> <li>Automation: &gt; 95% of all tests</li> </ul> <p>View Example Project  Testing Guide </p>"},{"location":"tools/","title":"Tools Overview","text":"<p>Fawkes integrates with industry-leading open-source tools to implement DORA capabilities effectively.</p>"},{"location":"tools/#continuous-delivery-tools","title":"Continuous Delivery Tools","text":"Tool Purpose Related Patterns Spinnaker Cloud-native continuous delivery Continuous Delivery Jenkins Automation server Continuous Delivery"},{"location":"tools/#infrastructure-tools","title":"Infrastructure Tools","text":"Tool Purpose Related Patterns Terraform Infrastructure as Code Infrastructure as Code Kubernetes Container orchestration Infrastructure as Code"},{"location":"tools/#monitoring-tools","title":"Monitoring Tools","text":"Tool Purpose Related Patterns Prometheus Metrics collection Monitoring Grafana Visualization Monitoring"},{"location":"tools/#testing-tools","title":"Testing Tools","text":"Tool Purpose Related Patterns Selenium UI testing Test Automation JUnit Unit testing Test Automation <p>View Implementation Guide</p>"},{"location":"tools/jenkins/","title":"Jenkins","text":"<p>Jenkins is an open-source automation server that enables continuous integration and continuous delivery (CI/CD) for software development projects.</p>"},{"location":"tools/jenkins/#overview","title":"Overview","text":"<p>Jenkins provides robust automation capabilities: - Build Automation - Compile and test code automatically - Deployment Pipeline - Create sophisticated deployment workflows - Plugin Ecosystem - Extend functionality through thousands of plugins</p>"},{"location":"tools/jenkins/#key-features","title":"Key Features","text":"Feature Description  Pipeline as Code Define pipelines using Jenkinsfile  Plugin System Extensive plugin ecosystem  Distributed Builds Scale with master/agent architecture  Security Features Built-in security and authentication"},{"location":"tools/jenkins/#integration-with-fawkes","title":"Integration with Fawkes","text":""},{"location":"tools/jenkins/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker or Kubernetes cluster</li> <li>Helm (for Kubernetes deployment)</li> <li>kubectl configured with cluster access</li> </ul>"},{"location":"tools/jenkins/#installation","title":"Installation","text":"<pre><code># Using Helm\nhelm repo add jenkins https://charts.jenkins.io\nhelm repo update\n\n# Install Jenkins\nhelm install jenkins jenkins/jenkins \\\n  --namespace jenkins \\\n  --create-namespace \\\n  --values jenkins-values.yaml\n</code></pre> <p>Example <code>jenkins-values.yaml</code>: <pre><code>controller:\n  ingress:\n    enabled: true\n    hostName: jenkins.fawkes.local\n  adminPassword: \"your-secure-password\"\n\npersistence:\n  enabled: true\n  size: 10Gi\n\nserviceAccount:\n  create: true\n  annotations:\n    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/jenkins-role\n</code></pre></p>"},{"location":"tools/jenkins/#configuring-jenkins-pipelines","title":"Configuring Jenkins Pipelines","text":""},{"location":"tools/jenkins/#basic-pipeline-example","title":"Basic Pipeline Example","text":"<pre><code>// Jenkinsfile\npipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn clean package'\n            }\n        }\n        stage('Test') {\n            steps {\n                sh 'mvn test'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                sh 'kubectl apply -f k8s/'\n            }\n        }\n    }\n\n    post {\n        always {\n            junit '**/target/surefire-reports/TEST-*.xml'\n        }\n    }\n}\n</code></pre>"},{"location":"tools/jenkins/#advanced-pipeline-with-fawkes-integration","title":"Advanced Pipeline with Fawkes Integration","text":"<pre><code>// Jenkinsfile for Fawkes deployment\npipeline {\n    agent {\n        kubernetes {\n            yaml '''\n                apiVersion: v1\n                kind: Pod\n                spec:\n                  containers:\n                  - name: maven\n                    image: maven:3.8.4-openjdk-11\n                    command:\n                    - cat\n                    tty: true\n                  - name: kubectl\n                    image: bitnami/kubectl\n                    command:\n                    - cat\n                    tty: true\n            '''\n        }\n    }\n\n    stages {\n        stage('Build &amp; Test') {\n            steps {\n                container('maven') {\n                    sh 'mvn clean verify'\n                }\n            }\n        }\n\n        stage('Deploy to Kubernetes') {\n            steps {\n                container('kubectl') {\n                    sh '''\n                        kubectl apply -f k8s/\n                        kubectl rollout status deployment/fawkes-app\n                    '''\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"tools/jenkins/#best-practices","title":"Best Practices","text":"<ol> <li>Pipeline as Code</li> <li>Store Jenkinsfile in version control</li> <li>Use declarative pipeline syntax</li> <li> <p>Keep pipelines simple and modular</p> </li> <li> <p>Security</p> </li> <li>Use credentials management</li> <li>Implement role-based access control</li> <li> <p>Regular security updates</p> </li> <li> <p>Performance</p> </li> <li>Use agent nodes for distribution</li> <li>Clean workspace regularly</li> <li>Optimize build steps</li> </ol>"},{"location":"tools/jenkins/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> Issue Solution Pipeline fails to start Check Jenkins agent connectivity Build fails Verify build tool configuration Deployment fails Check Kubernetes credentials"},{"location":"tools/jenkins/#monitoring-jenkins","title":"Monitoring Jenkins","text":"<pre><code># Prometheus configuration\n- job_name: 'jenkins'\n  metrics_path: /prometheus\n  static_configs:\n    - targets: ['jenkins.fawkes.local:8080']\n</code></pre>"},{"location":"tools/jenkins/#additional-resources","title":"Additional Resources","text":"<ul> <li>Jenkins Documentation</li> <li>Jenkins GitHub</li> <li>Jenkins Plugins</li> </ul> <p>Configure Jenkins  View Examples </p>"},{"location":"tools/prometheus/","title":"Prometheus","text":"<p>Prometheus is an open-source monitoring and alerting toolkit designed for reliability and scalability in modern cloud environments.</p>"},{"location":"tools/prometheus/#overview","title":"Overview","text":"<p>Prometheus provides essential monitoring capabilities: - Time-Series Database - Store and query metrics data - PromQL - Powerful query language for metrics analysis - Alert Manager - Handle alerts and notifications - Service Discovery - Automatic target discovery</p>"},{"location":"tools/prometheus/#key-features","title":"Key Features","text":"Feature Description  Metrics Collection Pull-based metrics gathering  PromQL Flexible query language  Alerting Configurable alert rules  Service Discovery Auto-discover targets"},{"location":"tools/prometheus/#integration-with-fawkes","title":"Integration with Fawkes","text":""},{"location":"tools/prometheus/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster</li> <li>Helm v3</li> <li>kubectl configured with cluster access</li> </ul>"},{"location":"tools/prometheus/#installation","title":"Installation","text":"<pre><code># Add Prometheus Helm repository\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\n\n# Install Prometheus Stack\nhelm install prometheus prometheus-community/kube-prometheus-stack \\\n  --namespace monitoring \\\n  --create-namespace \\\n  --values prometheus-values.yaml\n</code></pre> <p>Example <code>prometheus-values.yaml</code>: <pre><code>prometheus:\n  prometheusSpec:\n    retention: 15d\n    storageSpec:\n      volumeClaimTemplate:\n        spec:\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: 50Gi\n\ngrafana:\n  enabled: true\n  persistence:\n    enabled: true\n    size: 10Gi\n\nalertmanager:\n  config:\n    global:\n      resolve_timeout: 5m\n    route:\n      group_by: ['job']\n      group_wait: 30s\n      group_interval: 5m\n      repeat_interval: 12h\n</code></pre></p>"},{"location":"tools/prometheus/#configuring-prometheus-rules","title":"Configuring Prometheus Rules","text":""},{"location":"tools/prometheus/#basic-recording-rules","title":"Basic Recording Rules","text":"<pre><code>groups:\n- name: fawkes-recording-rules\n  rules:\n  - record: job:http_requests_total:rate5m\n    expr: rate(http_requests_total[5m])\n  - record: job:http_errors_total:rate5m\n    expr: rate(http_errors_total[5m])\n</code></pre>"},{"location":"tools/prometheus/#alert-rules","title":"Alert Rules","text":"<pre><code>groups:\n- name: fawkes-alerts\n  rules:\n  - alert: HighErrorRate\n    expr: job:http_errors_total:rate5m / job:http_requests_total:rate5m &gt; 0.1\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: High error rate detected\n      description: Error rate is above 10% for 5 minutes\n</code></pre>"},{"location":"tools/prometheus/#monitoring-dora-metrics","title":"Monitoring DORA Metrics","text":""},{"location":"tools/prometheus/#deployment-frequency","title":"Deployment Frequency","text":"<pre><code>groups:\n- name: dora-metrics\n  rules:\n  - record: dora:deployment_frequency:count24h\n    expr: count_over_time(deployment_success_total[24h])\n  - record: dora:lead_time_seconds:avg24h\n    expr: avg_over_time(deployment_lead_time_seconds[24h])\n</code></pre>"},{"location":"tools/prometheus/#best-practices","title":"Best Practices","text":"<ol> <li>Data Retention</li> <li>Set appropriate retention periods</li> <li>Use persistent storage</li> <li> <p>Implement data compaction</p> </li> <li> <p>Query Optimization</p> </li> <li>Use recording rules for complex queries</li> <li>Limit the use of high-cardinality labels</li> <li> <p>Cache frequently used queries</p> </li> <li> <p>Alerting</p> </li> <li>Define clear alerting thresholds</li> <li>Implement proper alert routing</li> <li>Avoid alert fatigue</li> </ol>"},{"location":"tools/prometheus/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> Issue Solution High memory usage Adjust retention period and storage Slow queries Review and optimize PromQL expressions Missing metrics Check service discovery configuration"},{"location":"tools/prometheus/#grafana-dashboard-examples","title":"Grafana Dashboard Examples","text":"<pre><code>{\n  \"dashboard\": {\n    \"id\": null,\n    \"title\": \"Fawkes DORA Metrics\",\n    \"panels\": [\n      {\n        \"title\": \"Deployment Frequency\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"dora:deployment_frequency:count24h\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"tools/prometheus/#additional-resources","title":"Additional Resources","text":"<ul> <li>Prometheus Documentation</li> <li>PromQL Examples</li> <li>Grafana Integration</li> </ul> <p>Configure Prometheus  View Dashboards </p>"},{"location":"tools/spinnaker/","title":"Spinnaker","text":"<p>Spinnaker is an open-source continuous delivery platform that helps you release software changes with high velocity and confidence.</p>"},{"location":"tools/spinnaker/#overview","title":"Overview","text":"<p>Spinnaker provides two core sets of features: - Application Management - Deploy and manage cloud resources - Application Deployment - Construct and manage continuous delivery workflows</p>"},{"location":"tools/spinnaker/#key-features","title":"Key Features","text":"Feature Description  Multi-Cloud Deploy to multiple cloud providers  Pipeline Management Create complex deployment workflows  Automated Canary Analysis Automated testing in production  Easy Rollbacks Quick recovery from failed deployments"},{"location":"tools/spinnaker/#integration-with-fawkes","title":"Integration with Fawkes","text":""},{"location":"tools/spinnaker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster</li> <li>Helm v3</li> <li>kubectl configured with cluster access</li> </ul>"},{"location":"tools/spinnaker/#installation","title":"Installation","text":"<pre><code># Add Spinnaker Helm repository\nhelm repo add spinnaker https://helmcharts.opsmx.com/\nhelm repo update\n\n# Install Spinnaker\nhelm install spinnaker spinnaker/spinnaker \\\n  --namespace spinnaker \\\n  --create-namespace \\\n  --values values.yaml\n</code></pre> <p>Example <code>values.yaml</code>: <pre><code>spinnakerConfig:\n  profiles:\n    clouddriver:\n      kubernetes:\n        enabled: true\n        accounts:\n        - name: fawkes-cluster\n          requiredGroupMembership: []\n          providerVersion: V2\n          permissions: {}\n          dockerRegistries: []\n          configureImagePullSecrets: true\n          cacheThreads: 1\n          namespaces: []\n          omitNamespaces: []\n          kinds: []\n          omitKinds: []\n          customResources: []\n</code></pre></p>"},{"location":"tools/spinnaker/#using-spinnaker-with-fawkes","title":"Using Spinnaker with Fawkes","text":""},{"location":"tools/spinnaker/#creating-a-deployment-pipeline","title":"Creating a Deployment Pipeline","text":"<ol> <li>Navigate to Spinnaker UI</li> <li>Create a new application:</li> <li>Name: <code>fawkes-app</code></li> <li>Owner Email: <code>team@fawkes.io</code></li> <li> <p>Cloud Providers: <code>Kubernetes V2</code></p> </li> <li> <p>Create a deployment pipeline:    <pre><code>{\n  \"name\": \"Deploy to Production\",\n  \"stages\": [\n    {\n      \"type\": \"deployManifest\",\n      \"name\": \"Deploy Application\",\n      \"cloudProvider\": \"kubernetes\",\n      \"account\": \"fawkes-cluster\",\n      \"source\": \"text\",\n      \"manifests\": [\n        {\n          \"apiVersion\": \"apps/v1\",\n          \"kind\": \"Deployment\",\n          \"metadata\": {\n            \"name\": \"fawkes-app\"\n          },\n          \"spec\": {\n            \"replicas\": 3\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre></p> </li> </ol>"},{"location":"tools/spinnaker/#best-practices","title":"Best Practices","text":"<ol> <li>Pipeline Templates</li> <li>Use pipeline templates for consistency</li> <li>Version control your templates</li> <li> <p>Share common deployment patterns</p> </li> <li> <p>Security</p> </li> <li>Enable RBAC</li> <li>Use service accounts</li> <li> <p>Implement least privilege access</p> </li> <li> <p>Monitoring</p> </li> <li>Configure pipeline notifications</li> <li>Monitor pipeline executions</li> <li>Set up alerting for failures</li> </ol>"},{"location":"tools/spinnaker/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> Issue Solution Pipeline fails to start Check Spinnaker service account permissions Manifest deployment fails Verify Kubernetes cluster connectivity Images not found Confirm container registry configuration"},{"location":"tools/spinnaker/#additional-resources","title":"Additional Resources","text":"<ul> <li>Spinnaker Documentation</li> <li>GitHub Repository</li> <li>Community Slack</li> </ul> <p>Configure Spinnaker  View Examples </p>"}]}