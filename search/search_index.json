{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fawkes Internal Developer Platform","text":"Fawkes Platform Overview <p>Welcome to the Fawkes project! Fawkes is an open-source platform designed to help teams achieve elite performance in software delivery by implementing all 24 DORA capabilities through integrated tooling and practices. Based on research from \"Accelerate\" and the DORA State of DevOps reports, organizations that excel in these capabilities are twice as likely to exceed their organizational performance goals.</p>"},{"location":"#elite-performance-metrics","title":"\ud83c\udfaf Elite Performance Metrics","text":"Metric Elite Performance Industry Average Description Deployment Frequency Multiple deploys per day Between once per week and once per month How often an organization successfully releases to production Lead Time Less than one hour Between one week and one month The time it takes to go from code committed to code successfully running in production Change Failure Rate 0-15% 31-45% The percentage of changes that result in a failure in production MTTR Less than one hour Less than one day Mean Time to Restore - The time it takes to recover from a failure in production"},{"location":"#dora-capabilities-metric-impact","title":"\ud83c\udf1f DORA Capabilities &amp; Metric Impact","text":"<p>DORA research has identified specific capabilities that directly impact each performance metric. Below we map each capability to the metrics it most strongly influences, based on data from \"Accelerate: The Science of Lean Software and DevOps\".</p>"},{"location":"#deployment-frequency-drivers","title":"Deployment Frequency Drivers","text":"<p>These capabilities have the strongest positive correlation with deployment frequency:</p> Capability Purpose Implementation Performance Impact Continuous Delivery Ensuring software is always in a deployable state Spinnaker, Flux 2.5x higher deployment frequency Deployment Automation Automating the deployment process Jenkins 3x more frequent deployments Continuous Integration Frequently merging code changes GitHub Actions 2x higher deployment frequency Infrastructure as Code Using cloud and infrastructure-as-code Terraform 1.8x more frequent deployments"},{"location":"#lead-time-reducers","title":"Lead Time Reducers","text":"<p>These capabilities have the strongest positive correlation with reducing lead time:</p> Capability Purpose Implementation Performance Impact Continuous Integration Frequently merging code changes GitHub Actions 74% reduction in lead time Test Automation Automated testing at all levels Selenium, JUnit 67% reduction in lead time Loosely Coupled Architecture Enabling independent team work Kubernetes 56% reduction in lead time Database Change Management Managing database changes effectively Flyway 43% reduction in lead time"},{"location":"#change-failure-rate-reducers","title":"Change Failure Rate Reducers","text":"<p>These capabilities have the strongest positive correlation with reducing change failure rate:</p> Capability Purpose Implementation Performance Impact Test Automation Automated testing at all levels Selenium, JUnit 3x lower change failure rate Change Failure Rate Reduction Improving code quality SonarQube 1.8x fewer production defects Shift Left on Security Early security testing OWASP ZAP 2x fewer security incidents Monitoring and Observability Implementing comprehensive monitoring Prometheus, Grafana 2x more likely to detect issues before failure"},{"location":"#mttr-improvers","title":"MTTR Improvers","text":"<p>These capabilities have the strongest positive correlation with reducing mean time to restore:</p> Capability Purpose Implementation Performance Impact Time to Restore Service Quick incident resolution Grafana 73% faster MTTR Monitoring and Observability Implementing comprehensive monitoring Prometheus, Grafana 2.1x faster incident detection Proactive Failure Management Testing system resilience Chaos Mesh 1.5x faster incident resolution Infrastructure as Code Using cloud and infrastructure-as-code Terraform 1.7x faster recovery time"},{"location":"#capability-synergies","title":"\ud83d\udd04 Capability Synergies","text":"<p>According to DORA research, these capabilities work together to create a flywheel effect:</p> <pre><code>graph TD\n    A[Continuous Integration] --&gt; B[Test Automation]\n    B --&gt; C[Continuous Delivery]\n    C --&gt; D[Deployment Automation]\n    D --&gt; E[Monitoring &amp; Observability]\n    E --&gt; F[Incident Response]\n    F --&gt; A\n    G[Infrastructure as Code] --&gt; C\n    G --&gt; F\n    H[Loosely Coupled Architecture] --&gt; B\n    H --&gt; D</code></pre> <p>Organizations that implement capabilities across all three categories (Flow, Feedback, Recovery) are 5x more likely to achieve elite performance across all four key metrics.</p>"},{"location":"#getting-started","title":"\ud83d\udcc8 Getting Started","text":"<ol> <li>Assess your current capabilities</li> <li>Choose your implementation path</li> <li>Set up your first capability</li> </ol> <p>Start Your Journey  Explore All Capabilities View Implementation Guide</p>"},{"location":"AWS%20cost%20estimation/","title":"Fawkes AWS Cost Estimation","text":"<p>Document Purpose: Detailed AWS infrastructure cost analysis for Fawkes platform deployment Target Audience: AWS Activate reviewers, financial planning, infrastructure architects Last Updated: October 7, 2025 AWS Region: US-East-1 (Virginia) - Primary region for cost estimates</p>"},{"location":"AWS%20cost%20estimation/#executive-summary","title":"Executive Summary","text":"<p>Total Estimated Monthly Cost: $1,847/month Annual Projection: $22,164/year AWS Activate Credit Request: $25,000 (covers 13 months of operation)</p> <p>Primary AWS Services: - Amazon EKS (Kubernetes orchestration) - Amazon RDS (PostgreSQL databases) - Amazon S3 (Artifact storage) - Elastic Load Balancing (Application Load Balancers) - Amazon CloudWatch (Monitoring and logging) - AWS Secrets Manager (Secrets management) - Amazon ECR (Container registry)</p> <p>Cost Optimization Strategy: Implementing Reserved Instances, Spot instances, and auto-scaling can reduce costs by 40-60% after initial 6-month validation period.</p>"},{"location":"AWS%20cost%20estimation/#infrastructure-architecture-overview","title":"Infrastructure Architecture Overview","text":"<p>Fawkes requires three distinct environments to support: 1. Development: Active platform development and testing 2. Staging: Pre-production validation and integration testing 3. Production: Live platform serving community users and Dojo learners</p> <p>Each environment runs a complete stack including: - Kubernetes cluster (EKS) - PostgreSQL database (RDS) - Container registry (ECR) - Load balancers (ALB) - Monitoring and logging (CloudWatch) - Storage (S3, EBS)</p>"},{"location":"AWS%20cost%20estimation/#development-environment","title":"Development Environment","text":"<p>Purpose: Platform engineering team development, feature testing, automated CI/CD testing</p> <p>Traffic Profile: 5-10 concurrent users, intermittent usage (8 hours/day, 5 days/week)</p>"},{"location":"AWS%20cost%20estimation/#compute-amazon-eks","title":"Compute - Amazon EKS","text":"<p>EKS Control Plane: - Cost: $0.10/hour \u00d7 730 hours = $73.00/month - Note: Control plane runs 24/7 regardless of node usage</p> <p>Worker Nodes (3\u00d7 t3.medium instances): - Instance Type: t3.medium (2 vCPU, 4GB RAM) - Quantity: 3 nodes (minimum for HA) - On-Demand Cost: $0.0416/hour \u00d7 3 \u00d7 730 hours = $91.10/month - Storage: 50GB EBS gp3 per node \u00d7 3 = $0.08/GB \u00d7 150GB = $12.00/month</p> <p>EKS Subtotal: $176.10/month</p>"},{"location":"AWS%20cost%20estimation/#database-amazon-rds-postgresql","title":"Database - Amazon RDS PostgreSQL","text":"<p>Instance Configuration: - Instance Type: db.t3.medium (2 vCPU, 4GB RAM) - Engine: PostgreSQL 15.x - Single-AZ deployment (development only) - Storage: 100GB gp3 SSD - Cost Breakdown:   - Instance: $0.068/hour \u00d7 730 hours = $49.64/month   - Storage: 100GB \u00d7 $0.115/GB = $11.50/month   - Backup Storage: 100GB \u00d7 $0.095/GB = $9.50/month</p> <p>RDS Subtotal: $70.64/month</p>"},{"location":"AWS%20cost%20estimation/#load-balancing","title":"Load Balancing","text":"<p>Application Load Balancer (1): - ALB Hours: $0.0225/hour \u00d7 730 hours = $16.43/month - LCU (Load Capacity Units): ~5 LCUs average = $0.008 \u00d7 5 \u00d7 730 = $29.20/month</p> <p>ALB Subtotal: $45.63/month</p>"},{"location":"AWS%20cost%20estimation/#storage-amazon-s3","title":"Storage - Amazon S3","text":"<p>Container Images &amp; Artifacts: - Standard Storage: 50GB \u00d7 $0.023/GB = $1.15/month - PUT/GET Requests: ~10,000 requests = $0.05/month</p> <p>Backup Storage: - Standard-IA: 20GB \u00d7 $0.0125/GB = $0.25/month</p> <p>S3 Subtotal: $1.45/month</p>"},{"location":"AWS%20cost%20estimation/#container-registry-amazon-ecr","title":"Container Registry - Amazon ECR","text":"<p>Private Registry: - Storage: 30GB \u00d7 $0.10/GB = $3.00/month - Data Transfer: Negligible (within VPC)</p> <p>ECR Subtotal: $3.00/month</p>"},{"location":"AWS%20cost%20estimation/#monitoring-amazon-cloudwatch","title":"Monitoring - Amazon CloudWatch","text":"<p>Logs: - Ingestion: 20GB \u00d7 $0.50/GB = $10.00/month - Storage: 20GB \u00d7 $0.03/GB = $0.60/month</p> <p>Metrics: - Custom Metrics: 100 metrics \u00d7 $0.30 = $30.00/month</p> <p>CloudWatch Subtotal: $40.60/month</p>"},{"location":"AWS%20cost%20estimation/#secrets-management-aws-secrets-manager","title":"Secrets Management - AWS Secrets Manager","text":"<p>Secrets Storage: - 10 secrets \u00d7 $0.40/secret = $4.00/month - API Calls: 10,000 \u00d7 $0.05/10,000 = $0.50/month</p> <p>Secrets Manager Subtotal: $4.50/month</p>"},{"location":"AWS%20cost%20estimation/#networking","title":"Networking","text":"<p>NAT Gateway (1): - Hours: $0.045/hour \u00d7 730 hours = $32.85/month - Data Processing: 50GB \u00d7 $0.045/GB = $2.25/month</p> <p>Data Transfer: - Outbound to Internet: 20GB \u00d7 $0.09/GB = $1.80/month</p> <p>Networking Subtotal: $36.90/month</p>"},{"location":"AWS%20cost%20estimation/#development-environment-total-37882month","title":"Development Environment Total: $378.82/month","text":""},{"location":"AWS%20cost%20estimation/#staging-environment","title":"Staging Environment","text":"<p>Purpose: Pre-production validation, integration testing, performance testing, security scanning</p> <p>Traffic Profile: 10-20 concurrent users, continuous deployment testing, 12 hours/day operation</p>"},{"location":"AWS%20cost%20estimation/#compute-amazon-eks_1","title":"Compute - Amazon EKS","text":"<p>EKS Control Plane: $73.00/month</p> <p>Worker Nodes (4\u00d7 t3.large instances): - Instance Type: t3.large (2 vCPU, 8GB RAM) - Quantity: 4 nodes - On-Demand Cost: $0.0832/hour \u00d7 4 \u00d7 730 hours = $242.94/month - Storage: 100GB EBS gp3 per node \u00d7 4 = $0.08/GB \u00d7 400GB = $32.00/month</p> <p>EKS Subtotal: $347.94/month</p>"},{"location":"AWS%20cost%20estimation/#database-amazon-rds-postgresql_1","title":"Database - Amazon RDS PostgreSQL","text":"<p>Instance Configuration: - Instance Type: db.t3.large (2 vCPU, 8GB RAM) - Single-AZ (staging environment) - Storage: 200GB gp3 SSD - Cost Breakdown:   - Instance: $0.136/hour \u00d7 730 hours = $99.28/month   - Storage: 200GB \u00d7 $0.115/GB = $23.00/month   - Backup Storage: 200GB \u00d7 $0.095/GB = $19.00/month</p> <p>RDS Subtotal: $141.28/month</p>"},{"location":"AWS%20cost%20estimation/#load-balancing_1","title":"Load Balancing","text":"<p>Application Load Balancers (2): - ALB Hours: $0.0225/hour \u00d7 2 \u00d7 730 hours = $32.85/month - LCU: ~8 LCUs average \u00d7 2 = $0.008 \u00d7 16 \u00d7 730 = $93.44/month</p> <p>ALB Subtotal: $126.29/month</p>"},{"location":"AWS%20cost%20estimation/#storage-amazon-s3_1","title":"Storage - Amazon S3","text":"<p>Container Images &amp; Artifacts: - Standard Storage: 100GB \u00d7 $0.023/GB = $2.30/month - PUT/GET Requests: ~50,000 requests = $0.25/month</p> <p>Backup Storage: - Standard-IA: 50GB \u00d7 $0.0125/GB = $0.63/month</p> <p>S3 Subtotal: $3.18/month</p>"},{"location":"AWS%20cost%20estimation/#container-registry-amazon-ecr_1","title":"Container Registry - Amazon ECR","text":"<p>Private Registry: - Storage: 50GB \u00d7 $0.10/GB = $5.00/month</p> <p>ECR Subtotal: $5.00/month</p>"},{"location":"AWS%20cost%20estimation/#monitoring-amazon-cloudwatch_1","title":"Monitoring - Amazon CloudWatch","text":"<p>Logs: - Ingestion: 40GB \u00d7 $0.50/GB = $20.00/month - Storage: 40GB \u00d7 $0.03/GB = $1.20/month</p> <p>Metrics: - Custom Metrics: 200 metrics \u00d7 $0.30 = $60.00/month</p> <p>Alarms: 20 alarms \u00d7 $0.10 = $2.00/month</p> <p>CloudWatch Subtotal: $83.20/month</p>"},{"location":"AWS%20cost%20estimation/#aws-x-ray-distributed-tracing","title":"AWS X-Ray (Distributed Tracing)","text":"<p>Traces Recorded: 1 million traces \u00d7 $5.00/million = $5.00/month Traces Retrieved: 100K traces \u00d7 $0.50/million = $0.05/month</p> <p>X-Ray Subtotal: $5.05/month</p>"},{"location":"AWS%20cost%20estimation/#secrets-management","title":"Secrets Management","text":"<p>Secrets Storage: - 15 secrets \u00d7 $0.40/secret = $6.00/month - API Calls: 50,000 \u00d7 $0.05/10,000 = $2.50/month</p> <p>Secrets Manager Subtotal: $8.50/month</p>"},{"location":"AWS%20cost%20estimation/#networking_1","title":"Networking","text":"<p>NAT Gateway (1): - Hours: $0.045/hour \u00d7 730 hours = $32.85/month - Data Processing: 100GB \u00d7 $0.045/GB = $4.50/month</p> <p>Data Transfer: - Outbound to Internet: 50GB \u00d7 $0.09/GB = $4.50/month</p> <p>Networking Subtotal: $41.85/month</p>"},{"location":"AWS%20cost%20estimation/#staging-environment-total-76229month","title":"Staging Environment Total: $762.29/month","text":""},{"location":"AWS%20cost%20estimation/#production-environment","title":"Production Environment","text":"<p>Purpose: Live platform serving community users, Dojo learning environment for 200+ concurrent learners</p> <p>Traffic Profile: 50-200 concurrent users, 24/7 availability, high-availability requirements</p>"},{"location":"AWS%20cost%20estimation/#compute-amazon-eks_2","title":"Compute - Amazon EKS","text":"<p>EKS Control Plane: $73.00/month</p> <p>Worker Nodes (6\u00d7 t3.xlarge instances): - Instance Type: t3.xlarge (4 vCPU, 16GB RAM) - Quantity: 6 nodes (3 per AZ, 2 AZs for HA) - On-Demand Cost: $0.1664/hour \u00d7 6 \u00d7 730 hours = $728.83/month - Storage: 200GB EBS gp3 per node \u00d7 6 = $0.08/GB \u00d7 1,200GB = $96.00/month</p> <p>Note: Production will use Reserved Instances after validation period (40% savings = $291.53/month savings)</p> <p>EKS Subtotal: $897.83/month</p>"},{"location":"AWS%20cost%20estimation/#database-amazon-rds-postgresql_2","title":"Database - Amazon RDS PostgreSQL","text":"<p>Instance Configuration: - Instance Type: db.m5.large (2 vCPU, 8GB RAM) - Multi-AZ deployment (high availability) - Storage: 500GB gp3 SSD - Automated backups with 7-day retention - Cost Breakdown:   - Instance (Multi-AZ): $0.190/hour \u00d7 730 hours \u00d7 2 = $277.40/month   - Storage: 500GB \u00d7 $0.115/GB = $57.50/month   - Backup Storage: 500GB \u00d7 $0.095/GB = $47.50/month   - PIOPS (Provisioned IOPS): 3000 IOPS \u00d7 $0.10 = $300.00/month (optional, for high-traffic scenarios)</p> <p>RDS Subtotal (without PIOPS): $382.40/month RDS Subtotal (with PIOPS): $682.40/month</p> <p>Using base configuration (without PIOPS) for conservative estimate</p>"},{"location":"AWS%20cost%20estimation/#load-balancing_2","title":"Load Balancing","text":"<p>Application Load Balancers (3): - ALB Hours: $0.0225/hour \u00d7 3 \u00d7 730 hours = $49.28/month - LCU: ~20 LCUs average \u00d7 3 = $0.008 \u00d7 60 \u00d7 730 = $350.40/month</p> <p>ALB Subtotal: $399.68/month</p>"},{"location":"AWS%20cost%20estimation/#storage-amazon-s3_2","title":"Storage - Amazon S3","text":"<p>Container Images &amp; Artifacts: - Standard Storage: 300GB \u00d7 $0.023/GB = $6.90/month - PUT/GET Requests: ~200,000 requests = $1.00/month</p> <p>Backup Storage: - Standard-IA: 200GB \u00d7 $0.0125/GB = $2.50/month</p> <p>Glacier Deep Archive (long-term backups): - 500GB \u00d7 $0.00099/GB = $0.50/month</p> <p>S3 Subtotal: $10.90/month</p>"},{"location":"AWS%20cost%20estimation/#container-registry-amazon-ecr_2","title":"Container Registry - Amazon ECR","text":"<p>Private Registry: - Storage: 100GB \u00d7 $0.10/GB = $10.00/month - Data Transfer (within region): Included</p> <p>ECR Subtotal: $10.00/month</p>"},{"location":"AWS%20cost%20estimation/#monitoring-amazon-cloudwatch_2","title":"Monitoring - Amazon CloudWatch","text":"<p>Logs: - Ingestion: 100GB \u00d7 $0.50/GB = $50.00/month - Storage: 100GB \u00d7 $0.03/GB = $3.00/month</p> <p>Metrics: - Custom Metrics: 500 metrics \u00d7 $0.30 = $150.00/month</p> <p>Alarms: 50 alarms \u00d7 $0.10 = $5.00/month</p> <p>CloudWatch Subtotal: $208.00/month</p>"},{"location":"AWS%20cost%20estimation/#aws-x-ray-distributed-tracing_1","title":"AWS X-Ray (Distributed Tracing)","text":"<p>Traces Recorded: 5 million traces \u00d7 $5.00/million = $25.00/month Traces Retrieved: 500K traces \u00d7 $0.50/million = $0.25/month</p> <p>X-Ray Subtotal: $25.25/month</p>"},{"location":"AWS%20cost%20estimation/#secrets-management_1","title":"Secrets Management","text":"<p>Secrets Storage: - 25 secrets \u00d7 $0.40/secret = $10.00/month - API Calls: 200,000 \u00d7 $0.05/10,000 = $10.00/month</p> <p>Secrets Manager Subtotal: $20.00/month</p>"},{"location":"AWS%20cost%20estimation/#networking_2","title":"Networking","text":"<p>NAT Gateways (2, one per AZ for HA): - Hours: $0.045/hour \u00d7 2 \u00d7 730 hours = $65.70/month - Data Processing: 300GB \u00d7 $0.045/GB = $13.50/month</p> <p>Data Transfer: - Outbound to Internet: 200GB \u00d7 $0.09/GB = $18.00/month</p> <p>VPC Endpoints (for S3, ECR): - 2 endpoints \u00d7 $0.01/hour \u00d7 730 hours = $14.60/month</p> <p>Networking Subtotal: $111.80/month</p>"},{"location":"AWS%20cost%20estimation/#aws-certificate-manager","title":"AWS Certificate Manager","text":"<p>SSL/TLS Certificates: Free (public certificates)</p>"},{"location":"AWS%20cost%20estimation/#aws-waf-web-application-firewall","title":"AWS WAF (Web Application Firewall)","text":"<p>Web ACL: $5.00/month Rules: 5 rules \u00d7 $1.00 = $5.00/month Requests: 10 million \u00d7 $0.60/million = $6.00/month</p> <p>WAF Subtotal: $16.00/month</p>"},{"location":"AWS%20cost%20estimation/#production-environment-total-208386month","title":"Production Environment Total: $2,083.86/month","text":"<p>(Conservative estimate without PIOPS, with potential to add $300/month for high-performance scenarios)</p>"},{"location":"AWS%20cost%20estimation/#cost-summary-all-environments","title":"Cost Summary: All Environments","text":"Environment Monthly Cost Annual Cost % of Total Development $378.82 $4,545.84 18% Staging $762.29 $9,147.48 37% Production $2,083.86 $25,006.32 100% TOTAL (3 Environments) $3,224.97 $38,699.64 -"},{"location":"AWS%20cost%20estimation/#phased-rollout-recommended","title":"Phased Rollout (Recommended)","text":"<p>Phase 1: Months 1-3 (Development Only) - Monthly: $378.82 - Quarterly Total: $1,136.46</p> <p>Phase 2: Months 4-6 (Development + Staging) - Monthly: $378.82 + $762.29 = $1,141.11 - Quarterly Total: $3,423.33</p> <p>Phase 3: Months 7-12 (All Three Environments) - Monthly: $3,224.97 - Semi-Annual Total: $19,349.82</p> <p>12-Month Phased Total: $23,909.61</p>"},{"location":"AWS%20cost%20estimation/#aws-activate-credit-request-justification","title":"AWS Activate Credit Request Justification","text":""},{"location":"AWS%20cost%20estimation/#requested-amount-25000","title":"Requested Amount: $25,000","text":"<p>Allocation Strategy:</p> <p>Phase 1 (Months 1-3): $1,200 credits - Build production-grade reference implementation - Complete Terraform modules for AWS - Deploy and validate all platform services - Document deployment patterns</p> <p>Phase 2 (Months 4-6): $3,500 credits - Launch staging environment for testing - Begin Dojo learning platform development - Support initial community adopters (10-20 users) - Implement automated testing infrastructure</p> <p>Phase 3 (Months 7-12): $20,300 credits - Launch production environment for community - Scale Dojo platform to 200+ concurrent learners - Provide demo environments for enterprise prospects - Support growing open-source community</p> <p>Reserve/Buffer: $0 (exact 12-month coverage)</p>"},{"location":"AWS%20cost%20estimation/#cost-optimization-strategy","title":"Cost Optimization Strategy","text":""},{"location":"AWS%20cost%20estimation/#immediate-optimizations-months-1-6","title":"Immediate Optimizations (Months 1-6)","text":"<p>Development Environment: - Use Spot Instances for worker nodes: 30% savings = $27.33/month - Schedule shutdown during non-business hours (nights/weekends): 60% uptime = $54.66/month saved - Combined Savings: $82/month or $492 over 6 months</p> <p>Staging Environment: - Use Spot Instances where possible: 25% savings = $60.74/month - Schedule shutdown outside testing windows: 40% savings = $140.79/month - Combined Savings: $201.53/month or $1,209 over 6 months</p> <p>Total Phase 1-2 Savings: $1,701 over 6 months</p>"},{"location":"AWS%20cost%20estimation/#long-term-optimizations-months-7-12","title":"Long-Term Optimizations (Months 7-12)","text":"<p>Reserved Instances (1-year commitment after validation): - EKS Worker Nodes: 40% savings = $291.53/month - RDS Instances: 35% savings = $133.84/month - Combined Savings: $425.37/month or $2,552 over 6 months</p> <p>Auto-Scaling Policies: - Scale down during low-traffic periods (nights): 15% compute savings = $109.32/month - Right-size instances based on utilization: 10% additional savings = $72.88/month - Combined Savings: $182.20/month or $1,093 over 6 months</p> <p>Storage Optimization: - Lifecycle policies for S3 (move to IA after 30 days): 20% savings = $2.18/month - EBS snapshot management (delete old snapshots): 10% savings = $9.60/month - Combined Savings: $11.78/month or $71 over 6 months</p> <p>Total Phase 3 Savings: $3,716 over 6 months</p>"},{"location":"AWS%20cost%20estimation/#projected-12-month-cost-with-optimizations","title":"Projected 12-Month Cost with Optimizations","text":"<ul> <li>Months 1-6 (with immediate optimizations): $1,136.46 + ($3,423.33 - $1,209) = $3,350.79</li> <li>Months 7-12 (with all optimizations): ($19,349.82 - $3,716) = $15,633.82</li> <li>Total Optimized 12-Month Cost: $18,984.61</li> </ul> <p>Savings vs. Baseline: $23,909.61 - $18,984.61 = $4,925 (21% reduction)</p>"},{"location":"AWS%20cost%20estimation/#monitoring-and-cost-control","title":"Monitoring and Cost Control","text":""},{"location":"AWS%20cost%20estimation/#aws-cost-management-tools","title":"AWS Cost Management Tools","text":"<p>AWS Budgets: - Set monthly budget alerts at 80%, 100%, 120% thresholds - Email notifications to team and AWS billing contact - Automatic notifications for anomaly detection</p> <p>Cost Allocation Tags: <pre><code>Environment: [dev|staging|prod]\nProject: fawkes\nComponent: [eks|rds|s3|alb|cloudwatch]\nOwner: platform-team\nCostCenter: engineering\n</code></pre></p> <p>AWS Cost Explorer: - Weekly cost reviews - Identify cost anomalies - Track savings from optimizations</p> <p>Third-Party Tools (optional): - CloudHealth or CloudCheckr for advanced cost optimization - Infracost for Terraform cost estimation in CI/CD</p>"},{"location":"AWS%20cost%20estimation/#cost-anomaly-detection","title":"Cost Anomaly Detection","text":"<p>Automated Alerts for: - Unexpected traffic spikes (LCU increases) - Storage growth exceeding 20% month-over-month - Compute utilization above 85% (scale up) or below 30% (scale down) - Data transfer costs exceeding $100/month</p>"},{"location":"AWS%20cost%20estimation/#monthly-cost-review-process","title":"Monthly Cost Review Process","text":"<p>Week 1: Review previous month's spend vs. budget Week 2: Analyze cost trends and usage patterns Week 3: Implement optimization recommendations Week 4: Validate optimizations and adjust budgets</p>"},{"location":"AWS%20cost%20estimation/#additional-aws-services-optionalfuture","title":"Additional AWS Services (Optional/Future)","text":"<p>Services we may adopt as platform matures:</p> Service Use Case Estimated Monthly Cost AWS Config Compliance tracking $20-$50 AWS GuardDuty Threat detection $30-$100 AWS Security Hub Security posture $10-$30 AWS Systems Manager Parameter store (alternative to Secrets Manager) $5-$15 Amazon OpenSearch Log analytics (alternative to self-hosted) $200-$500 AWS Backup Centralized backup management $50-$150 Amazon CloudFront CDN for static assets $20-$100 AWS Lambda Serverless automation $10-$50 <p>Total Optional Services: $345-$995/month</p> <p>These services are not included in base cost estimate but represent future expansion opportunities.</p>"},{"location":"AWS%20cost%20estimation/#roi-analysis","title":"ROI Analysis","text":""},{"location":"AWS%20cost%20estimation/#value-delivered-by-aws-credits","title":"Value Delivered by AWS Credits","text":"<p>Direct Benefits: - Platform Development: 12 months of uninterrupted development - Community Support: 200+ learners trained on Dojo platform - Enterprise Demos: 20+ prospect demonstrations - Open Source Contributions: Reference implementation for AWS deployments</p> <p>Indirect Benefits: - AWS Advocacy: Every Dojo graduate learns AWS-native platform engineering - Ecosystem Growth: Fawkes users become AWS customers - Documentation: Comprehensive AWS deployment guides benefit broader community - Best Practices: Showcase modern AWS architecture patterns</p>"},{"location":"AWS%20cost%20estimation/#expected-outcomes-12-month-horizon","title":"Expected Outcomes (12-Month Horizon)","text":"<p>Community Metrics: - 500+ GitHub stars - 50+ active contributors - 200+ Dojo learners certified - 20+ organizations adopting Fawkes on AWS</p> <p>Business Metrics: - 10 enterprise pilot programs - $10K MRR from managed service beta - 5 partnerships with training organizations - 100+ job placements for Dojo graduates</p> <p>AWS-Specific Outcomes: - 30+ organizations migrated to AWS using Fawkes - $500K+ annual AWS spend driven by Fawkes users - 200+ engineers trained on AWS services - Contribution to AWS EKS/RDS/CloudWatch ecosystems</p>"},{"location":"AWS%20cost%20estimation/#conclusion","title":"Conclusion","text":"<p>Total AWS Investment Required: $23,910 over 12 months (phased) AWS Activate Credit Request: $25,000 Optimized Cost (with savings): $18,985 (21% under budget)</p> <p>Why This Investment Makes Sense:</p> <ol> <li>AWS-Native Platform: Fawkes is purpose-built for AWS, showcasing EKS, RDS, S3, and CloudWatch</li> <li>Community Impact: Training 200+ platform engineers who will use AWS in their organizations</li> <li>Open Source Value: Reference implementation benefits entire AWS community</li> <li>Long-Term AWS Commitment: Every Fawkes user is a potential AWS customer</li> <li>Cost-Effective: Phased approach validates value before full-scale deployment</li> </ol> <p>Next Steps: 1. Secure AWS Activate credits ($25,000) 2. Deploy Phase 1 (Development environment) 3. Build reference implementation and documentation 4. Launch Dojo platform (Phase 2-3) 5. Support community growth and enterprise adoption</p>"},{"location":"AWS%20cost%20estimation/#appendix-aws-pricing-assumptions","title":"Appendix: AWS Pricing Assumptions","text":"<p>Pricing effective as of: October 2025 Region: US-East-1 (N. Virginia) Currency: USD Pricing Model: On-Demand (with Reserved Instance projections)</p> <p>Sources: - AWS Pricing Calculator - Amazon EKS Pricing - Amazon RDS Pricing - Amazon S3 Pricing - Elastic Load Balancing Pricing</p> <p>Disclaimer: Actual costs may vary based on usage patterns, data transfer, and AWS pricing changes. This estimate provides a conservative baseline for planning purposes.</p> <p>Document Owner: Fawkes Platform Team Review Cadence: Monthly during AWS Activate period Last Review: October 7, 2025 Next Review: November 7, 2025</p>"},{"location":"AWS_deployment_guide/","title":"Fawkes AWS Production Deployment Guide","text":"<p>Document Purpose: Complete step-by-step guide for deploying Fawkes on AWS in production Target Audience: DevOps engineers, Platform engineers, System administrators Estimated Time: 3-4 hours for full deployment Last Updated: October 7, 2025</p>"},{"location":"AWS_deployment_guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Architecture Overview</li> <li>Pre-Deployment Planning</li> <li>Phase 1: AWS Foundation Setup</li> <li>Phase 2: EKS Cluster Deployment</li> <li>Phase 3: Database and Storage</li> <li>Phase 4: Platform Services</li> <li>Phase 5: Observability Stack</li> <li>Phase 6: Security Hardening</li> <li>Phase 7: Validation and Testing</li> <li>Post-Deployment Operations</li> <li>Troubleshooting</li> <li>Cost Optimization</li> </ol>"},{"location":"AWS_deployment_guide/#prerequisites","title":"Prerequisites","text":""},{"location":"AWS_deployment_guide/#required-tools","title":"Required Tools","text":"<p>Install these tools on your local machine before beginning:</p> <pre><code># AWS CLI (version 2.x)\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\naws --version  # Should be 2.x\n\n# kubectl (Kubernetes CLI)\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nchmod +x kubectl\nsudo mv kubectl /usr/local/bin/\nkubectl version --client\n\n# Terraform (1.5.0 or later)\nwget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip\nunzip terraform_1.6.0_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\nterraform version\n\n# Helm (Kubernetes package manager)\ncurl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\nhelm version\n\n# eksctl (EKS cluster management)\ncurl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp\nsudo mv /tmp/eksctl /usr/local/bin\neksctl version\n\n# jq (JSON processor - for scripts)\nsudo apt-get install jq -y  # Ubuntu/Debian\n# or\nsudo yum install jq -y      # RHEL/CentOS\n</code></pre>"},{"location":"AWS_deployment_guide/#aws-account-requirements","title":"AWS Account Requirements","text":"<p>IAM Permissions Needed: - EC2 (VPC, Security Groups, EBS) - EKS (Cluster creation and management) - RDS (PostgreSQL instances) - S3 (Bucket creation and management) - IAM (Role and policy creation) - CloudWatch (Logs and metrics) - Certificate Manager (SSL/TLS certificates) - Secrets Manager (Secret storage) - Application Load Balancer - Route53 (DNS management - optional)</p> <p>Recommended: Use an IAM user with <code>AdministratorAccess</code> for initial setup, then lock down to least-privilege after deployment.</p> <p>Service Limits Check: <pre><code># Check EKS cluster limit (default: 100 per region)\naws service-quotas get-service-quota \\\n  --service-code eks \\\n  --quota-code L-1194D53C \\\n  --region us-east-1\n\n# Check EIP limit (need at least 3 for NAT gateways)\naws service-quotas get-service-quota \\\n  --service-code ec2 \\\n  --quota-code L-0263D0A3 \\\n  --region us-east-1\n</code></pre></p>"},{"location":"AWS_deployment_guide/#domain-and-ssl-optional-but-recommended","title":"Domain and SSL (Optional but Recommended)","text":"<p>For production deployments: - Domain name (e.g., <code>fawkes.yourdomain.com</code>) - Access to DNS management (Route53 or external DNS provider) - SSL certificate via AWS Certificate Manager (we'll create this)</p> <p>Without domain: - Can use AWS-provided Load Balancer DNS names - Self-signed certificates (development only)</p>"},{"location":"AWS_deployment_guide/#budget-and-cost-awareness","title":"Budget and Cost Awareness","text":"<p>Expected Monthly Costs: - Development: ~$379/month - Staging: ~$762/month - Production: ~$2,084/month</p> <p>See AWS Cost Estimation for detailed breakdown.</p> <p>Set up billing alerts: <pre><code>aws budgets create-budget \\\n  --account-id YOUR_ACCOUNT_ID \\\n  --budget file://budget.json \\\n  --notifications-with-subscribers file://notifications.json\n</code></pre></p>"},{"location":"AWS_deployment_guide/#architecture-overview","title":"Architecture Overview","text":""},{"location":"AWS_deployment_guide/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         AWS Region (us-east-1)               \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502                   VPC (10.0.0.0/16)                    \u2502 \u2502\n\u2502  \u2502                                                        \u2502 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\n\u2502  \u2502  \u2502   Public     \u2502  \u2502   Public     \u2502  \u2502   Public    \u2502 \u2502 \u2502\n\u2502  \u2502  \u2502  Subnet AZ1  \u2502  \u2502  Subnet AZ2  \u2502  \u2502 Subnet AZ3  \u2502 \u2502 \u2502\n\u2502  \u2502  \u2502 10.0.1.0/24  \u2502  \u2502 10.0.2.0/24  \u2502  \u250210.0.3.0/24  \u2502 \u2502 \u2502\n\u2502  \u2502  \u2502              \u2502  \u2502              \u2502  \u2502             \u2502 \u2502 \u2502\n\u2502  \u2502  \u2502  NAT GW      \u2502  \u2502  NAT GW      \u2502  \u2502  NAT GW     \u2502 \u2502 \u2502\n\u2502  \u2502  \u2502  ALB         \u2502  \u2502  ALB         \u2502  \u2502             \u2502 \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\n\u2502  \u2502         \u2502                 \u2502                 \u2502         \u2502 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\n\u2502  \u2502  \u2502   Private    \u2502  \u2502   Private    \u2502  \u2502   Private   \u2502 \u2502 \u2502\n\u2502  \u2502  \u2502  Subnet AZ1  \u2502  \u2502  Subnet AZ2  \u2502  \u2502 Subnet AZ3  \u2502 \u2502 \u2502\n\u2502  \u2502  \u2502 10.0.11.0/24 \u2502  \u2502 10.0.12.0/24 \u2502  \u250210.0.13.0/24 \u2502 \u2502 \u2502\n\u2502  \u2502  \u2502              \u2502  \u2502              \u2502  \u2502             \u2502 \u2502 \u2502\n\u2502  \u2502  \u2502 EKS Nodes    \u2502  \u2502 EKS Nodes    \u2502  \u2502 EKS Nodes   \u2502 \u2502 \u2502\n\u2502  \u2502  \u2502 RDS Primary  \u2502  \u2502 RDS Standby  \u2502  \u2502             \u2502 \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\n\u2502  \u2502                                                        \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  EKS Cluster (fawkes-production)                       \u2502 \u2502\n\u2502  \u2502  - Backstage Portal                                    \u2502 \u2502\n\u2502  \u2502  - Jenkins CI/CD                                       \u2502 \u2502\n\u2502  \u2502  - ArgoCD (GitOps)                                     \u2502 \u2502\n\u2502  \u2502  - Harbor (Registry)                                   \u2502 \u2502\n\u2502  \u2502  - Prometheus + Grafana                                \u2502 \u2502\n\u2502  \u2502  - Mattermost                                          \u2502 \u2502\n\u2502  \u2502  - Focalboard                                          \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  RDS PostgreSQL (Multi-AZ)                             \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  S3 Buckets                                            \u2502 \u2502\n\u2502  \u2502  - Artifacts (fawkes-artifacts-prod)                   \u2502 \u2502\n\u2502  \u2502  - Backups (fawkes-backups-prod)                       \u2502 \u2502\n\u2502  \u2502  - Logs (fawkes-logs-prod)                             \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"AWS_deployment_guide/#network-design","title":"Network Design","text":"<p>VPC CIDR: <code>10.0.0.0/16</code> (65,536 IPs)</p> <p>Subnets: - Public Subnets (3 AZs): <code>10.0.1.0/24</code>, <code>10.0.2.0/24</code>, <code>10.0.3.0/24</code>   - Internet Gateway attached   - NAT Gateways deployed here   - Application Load Balancers</p> <ul> <li>Private Subnets (3 AZs): <code>10.0.11.0/24</code>, <code>10.0.12.0/24</code>, <code>10.0.13.0/24</code></li> <li>No direct internet access</li> <li>EKS worker nodes</li> <li>RDS instances</li> <li>Egress via NAT Gateways</li> </ul> <p>Why 3 Availability Zones? - High availability and fault tolerance - EKS best practice (distribute nodes across AZs) - RDS Multi-AZ automatic failover</p>"},{"location":"AWS_deployment_guide/#component-placement","title":"Component Placement","text":"Component Subnet Type Availability Zones Accessibility Internet Gateway N/A Region-level Public NAT Gateways Public 3 (one per AZ) Public IPs Application Load Balancers Public 3 Internet-facing EKS Worker Nodes Private 3 Internal only RDS PostgreSQL Private 2 (Multi-AZ) Internal only S3 Buckets N/A Region-level VPC Endpoint"},{"location":"AWS_deployment_guide/#pre-deployment-planning","title":"Pre-Deployment Planning","text":""},{"location":"AWS_deployment_guide/#environment-configuration","title":"Environment Configuration","text":"<p>Create a <code>production.tfvars</code> file with your specific configuration:</p> <pre><code># production.tfvars\n\n# General Settings\nenvironment         = \"production\"\nproject_name        = \"fawkes\"\naws_region          = \"us-east-1\"\navailability_zones  = [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n\n# VPC Configuration\nvpc_cidr            = \"10.0.0.0/16\"\npublic_subnet_cidrs = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\nprivate_subnet_cidrs = [\"10.0.11.0/24\", \"10.0.12.0/24\", \"10.0.13.0/24\"]\n\n# EKS Cluster Configuration\ncluster_name        = \"fawkes-production\"\ncluster_version     = \"1.28\"\nnode_instance_type  = \"t3.xlarge\"\nnode_desired_size   = 6\nnode_min_size       = 3\nnode_max_size       = 12\n\n# RDS Configuration\ndb_instance_class   = \"db.m5.large\"\ndb_engine_version   = \"15.4\"\ndb_name             = \"fawkes\"\ndb_username         = \"fawkesadmin\"\ndb_multi_az         = true\ndb_allocated_storage = 500\ndb_backup_retention = 7\n\n# S3 Bucket Names (must be globally unique)\nartifacts_bucket    = \"fawkes-artifacts-prod-YOUR-UNIQUE-ID\"\nbackups_bucket      = \"fawkes-backups-prod-YOUR-UNIQUE-ID\"\nlogs_bucket         = \"fawkes-logs-prod-YOUR-UNIQUE-ID\"\n\n# Domain Configuration (optional)\ndomain_name         = \"fawkes.yourdomain.com\"\ncreate_route53_zone = false  # Set to true if you want Terraform to manage DNS\n\n# Tags\ntags = {\n  Environment = \"production\"\n  Project     = \"fawkes\"\n  ManagedBy   = \"terraform\"\n  Owner       = \"platform-team\"\n  CostCenter  = \"engineering\"\n}\n</code></pre>"},{"location":"AWS_deployment_guide/#secrets-management","title":"Secrets Management","text":"<p>Generate secure passwords BEFORE deployment:</p> <pre><code># Generate database password\nDB_PASSWORD=$(openssl rand -base64 32)\necho \"Database Password: $DB_PASSWORD\"  # Save this securely!\n\n# Generate ArgoCD admin password\nARGOCD_PASSWORD=$(openssl rand -base64 24)\necho \"ArgoCD Password: $ARGOCD_PASSWORD\"\n\n# Generate Jenkins admin password\nJENKINS_PASSWORD=$(openssl rand -base64 24)\necho \"Jenkins Password: $JENKINS_PASSWORD\"\n\n# Store in AWS Secrets Manager (we'll do this in Phase 1)\n</code></pre> <p>IMPORTANT: Store all passwords in a secure password manager (1Password, LastPass, etc.) immediately.</p>"},{"location":"AWS_deployment_guide/#pre-flight-checklist","title":"Pre-Flight Checklist","text":"<p>Before proceeding, verify:</p> <ul> <li>[ ] AWS CLI configured with correct credentials (<code>aws sts get-caller-identity</code>)</li> <li>[ ] All required tools installed and correct versions</li> <li>[ ] <code>production.tfvars</code> file created with your values</li> <li>[ ] All passwords generated and stored securely</li> <li>[ ] S3 bucket names are globally unique (add your org/random suffix)</li> <li>[ ] Budget alerts configured (optional but recommended)</li> <li>[ ] Team notified of deployment window (estimated 3-4 hours)</li> </ul>"},{"location":"AWS_deployment_guide/#phase-1-aws-foundation-setup","title":"Phase 1: AWS Foundation Setup","text":"<p>Duration: 30 minutes Goal: Create VPC, subnets, security groups, and IAM roles</p>"},{"location":"AWS_deployment_guide/#step-11-initialize-terraform","title":"Step 1.1: Initialize Terraform","text":"<pre><code># Clone the Fawkes repository\ngit clone https://github.com/paruff/fawkes.git\ncd fawkes/infra/terraform/aws\n\n# Initialize Terraform\nterraform init\n\n# Validate configuration\nterraform validate\n\n# Plan deployment (review what will be created)\nterraform plan -var-file=production.tfvars -out=tfplan\n</code></pre> <p>Review the plan carefully. You should see: - 1 VPC - 6 subnets (3 public, 3 private) - 1 Internet Gateway - 3 NAT Gateways - Route tables and associations - Security groups - IAM roles and policies</p>"},{"location":"AWS_deployment_guide/#step-12-deploy-vpc-and-networking","title":"Step 1.2: Deploy VPC and Networking","text":"<pre><code># Apply the foundation infrastructure\nterraform apply tfplan\n\n# This will take ~10 minutes (NAT Gateways are slow to provision)\n</code></pre> <p>Expected output: <pre><code>Apply complete! Resources: 42 added, 0 changed, 0 destroyed.\n\nOutputs:\nvpc_id = \"vpc-0a1b2c3d4e5f6g7h8\"\npublic_subnet_ids = [\"subnet-abc123\", \"subnet-def456\", \"subnet-ghi789\"]\nprivate_subnet_ids = [\"subnet-xyz123\", \"subnet-uvw456\", \"subnet-rst789\"]\nnat_gateway_ids = [\"nat-0a1b2c3d\", \"nat-4e5f6g7h\", \"nat-8i9j0k1l\"]\n</code></pre></p>"},{"location":"AWS_deployment_guide/#step-13-create-s3-buckets","title":"Step 1.3: Create S3 Buckets","text":"<pre><code># Create artifacts bucket\naws s3 mb s3://fawkes-artifacts-prod-YOUR-UNIQUE-ID --region us-east-1\n\n# Enable versioning for artifacts\naws s3api put-bucket-versioning \\\n  --bucket fawkes-artifacts-prod-YOUR-UNIQUE-ID \\\n  --versioning-configuration Status=Enabled\n\n# Create backups bucket\naws s3 mb s3://fawkes-backups-prod-YOUR-UNIQUE-ID --region us-east-1\n\n# Enable versioning for backups\naws s3api put-bucket-versioning \\\n  --bucket fawkes-backups-prod-YOUR-UNIQUE-ID \\\n  --versioning-configuration Status=Enabled\n\n# Create logs bucket\naws s3 mb s3://fawkes-logs-prod-YOUR-UNIQUE-ID --region us-east-1\n\n# Configure lifecycle policy for logs (delete after 90 days)\ncat &gt; logs-lifecycle.json &lt;&lt;EOF\n{\n  \"Rules\": [\n    {\n      \"Id\": \"DeleteOldLogs\",\n      \"Status\": \"Enabled\",\n      \"Prefix\": \"\",\n      \"Expiration\": {\n        \"Days\": 90\n      }\n    }\n  ]\n}\nEOF\n\naws s3api put-bucket-lifecycle-configuration \\\n  --bucket fawkes-logs-prod-YOUR-UNIQUE-ID \\\n  --lifecycle-configuration file://logs-lifecycle.json\n\n# Enable encryption at rest for all buckets\nfor bucket in fawkes-artifacts-prod-YOUR-UNIQUE-ID fawkes-backups-prod-YOUR-UNIQUE-ID fawkes-logs-prod-YOUR-UNIQUE-ID; do\n  aws s3api put-bucket-encryption \\\n    --bucket $bucket \\\n    --server-side-encryption-configuration '{\n      \"Rules\": [\n        {\n          \"ApplyServerSideEncryptionByDefault\": {\n            \"SSEAlgorithm\": \"AES256\"\n          }\n        }\n      ]\n    }'\ndone\n</code></pre>"},{"location":"AWS_deployment_guide/#step-14-store-secrets-in-aws-secrets-manager","title":"Step 1.4: Store Secrets in AWS Secrets Manager","text":"<pre><code># Store database password\naws secretsmanager create-secret \\\n  --name fawkes/production/db-password \\\n  --description \"Fawkes Production Database Password\" \\\n  --secret-string \"$DB_PASSWORD\" \\\n  --region us-east-1\n\n# Store ArgoCD admin password\naws secretsmanager create-secret \\\n  --name fawkes/production/argocd-password \\\n  --description \"ArgoCD Admin Password\" \\\n  --secret-string \"$ARGOCD_PASSWORD\" \\\n  --region us-east-1\n\n# Store Jenkins admin password\naws secretsmanager create-secret \\\n  --name fawkes/production/jenkins-password \\\n  --description \"Jenkins Admin Password\" \\\n  --secret-string \"$JENKINS_PASSWORD\" \\\n  --region us-east-1\n\n# Verify secrets were created\naws secretsmanager list-secrets --region us-east-1 | grep fawkes\n</code></pre>"},{"location":"AWS_deployment_guide/#step-15-create-ssl-certificate-if-using-custom-domain","title":"Step 1.5: Create SSL Certificate (if using custom domain)","text":"<pre><code># Request certificate from AWS Certificate Manager\naws acm request-certificate \\\n  --domain-name fawkes.yourdomain.com \\\n  --subject-alternative-names \"*.fawkes.yourdomain.com\" \\\n  --validation-method DNS \\\n  --region us-east-1\n\n# Output will include CertificateArn - save this!\n# Example: arn:aws:acm:us-east-1:123456789012:certificate/abc123...\n\n# Follow the validation instructions (add DNS records)\n# Certificate validation usually takes 5-30 minutes\n</code></pre> <p>Validation: <pre><code># Check VPC exists\naws ec2 describe-vpcs --filters \"Name=tag:Name,Values=fawkes-production-vpc\"\n\n# Check subnets exist\naws ec2 describe-subnets --filters \"Name=vpc-id,Values=YOUR_VPC_ID\"\n\n# Check NAT gateways are available\naws ec2 describe-nat-gateways --filter \"Name=state,Values=available\"\n\n# Verify S3 buckets\naws s3 ls | grep fawkes\n\n# Verify secrets\naws secretsmanager list-secrets | grep fawkes\n</code></pre></p>"},{"location":"AWS_deployment_guide/#phase-2-eks-cluster-deployment","title":"Phase 2: EKS Cluster Deployment","text":"<p>Duration: 20-30 minutes Goal: Deploy and configure EKS cluster with worker nodes</p>"},{"location":"AWS_deployment_guide/#step-21-create-eks-cluster","title":"Step 2.1: Create EKS Cluster","text":"<pre><code># Create cluster configuration file\ncat &gt; cluster-config.yaml &lt;&lt;EOF\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\n\nmetadata:\n  name: fawkes-production\n  region: us-east-1\n  version: \"1.28\"\n\nvpc:\n  id: \"YOUR_VPC_ID\"  # From Phase 1 output\n  subnets:\n    private:\n      us-east-1a:\n        id: \"PRIVATE_SUBNET_1_ID\"\n      us-east-1b:\n        id: \"PRIVATE_SUBNET_2_ID\"\n      us-east-1c:\n        id: \"PRIVATE_SUBNET_3_ID\"\n\nmanagedNodeGroups:\n  - name: fawkes-ng-general\n    instanceType: t3.xlarge\n    minSize: 3\n    maxSize: 12\n    desiredCapacity: 6\n    privateNetworking: true\n    volumeSize: 200\n    volumeType: gp3\n    labels:\n      role: general\n      environment: production\n    tags:\n      Name: fawkes-production-node\n      Environment: production\n      Project: fawkes\n    iam:\n      withAddonPolicies:\n        imageBuilder: true\n        autoScaler: true\n        externalDNS: true\n        certManager: true\n        appMesh: false\n        ebs: true\n        fsx: false\n        efs: true\n        albIngress: true\n        xRay: true\n        cloudWatch: true\n\niam:\n  withOIDC: true\n  serviceAccounts:\n    - metadata:\n        name: aws-load-balancer-controller\n        namespace: kube-system\n      wellKnownPolicies:\n        awsLoadBalancerController: true\n    - metadata:\n        name: ebs-csi-controller-sa\n        namespace: kube-system\n      wellKnownPolicies:\n        ebsCSIController: true\n    - metadata:\n        name: external-secrets\n        namespace: external-secrets-system\n      attachPolicyARNs:\n        - \"arn:aws:iam::aws:policy/SecretsManagerReadWrite\"\n\ncloudWatch:\n  clusterLogging:\n    enableTypes:\n      - \"api\"\n      - \"audit\"\n      - \"authenticator\"\n      - \"controllerManager\"\n      - \"scheduler\"\n\naddons:\n  - name: vpc-cni\n    version: latest\n  - name: coredns\n    version: latest\n  - name: kube-proxy\n    version: latest\n  - name: aws-ebs-csi-driver\n    version: latest\n    serviceAccountRoleARN: \"AUTO_GENERATED\"\nEOF\n\n# Create the EKS cluster\neksctl create cluster -f cluster-config.yaml\n\n# This takes 15-20 minutes - good time for coffee!\n</code></pre> <p>What's happening during creation: 1. EKS control plane provisioning (managed by AWS) 2. Worker nodes launching across 3 AZs 3. IAM roles and policies creation 4. OIDC provider setup 5. Add-ons installation (VPC CNI, CoreDNS, kube-proxy, EBS CSI)</p>"},{"location":"AWS_deployment_guide/#step-22-configure-kubectl-access","title":"Step 2.2: Configure kubectl Access","text":"<pre><code># Update kubeconfig\naws eks update-kubeconfig \\\n  --region us-east-1 \\\n  --name fawkes-production\n\n# Verify connectivity\nkubectl get nodes\n\n# Should show 6 nodes in Ready state:\n# NAME                          STATUS   ROLES    AGE   VERSION\n# ip-10-0-11-123.ec2.internal   Ready    &lt;none&gt;   2m    v1.28.x\n# ip-10-0-11-124.ec2.internal   Ready    &lt;none&gt;   2m    v1.28.x\n# ...\n</code></pre>"},{"location":"AWS_deployment_guide/#step-23-install-aws-load-balancer-controller","title":"Step 2.3: Install AWS Load Balancer Controller","text":"<pre><code># Add Helm repository\nhelm repo add eks https://aws.github.io/eks-charts\nhelm repo update\n\n# Get your cluster VPC ID\nVPC_ID=$(aws eks describe-cluster \\\n  --name fawkes-production \\\n  --query \"cluster.resourcesVpcConfig.vpcId\" \\\n  --output text)\n\n# Install AWS Load Balancer Controller\nhelm install aws-load-balancer-controller eks/aws-load-balancer-controller \\\n  -n kube-system \\\n  --set clusterName=fawkes-production \\\n  --set serviceAccount.create=false \\\n  --set serviceAccount.name=aws-load-balancer-controller \\\n  --set region=us-east-1 \\\n  --set vpcId=$VPC_ID\n\n# Verify installation\nkubectl get deployment -n kube-system aws-load-balancer-controller\n\n# Should show:\n# NAME                           READY   UP-TO-DATE   AVAILABLE   AGE\n# aws-load-balancer-controller   2/2     2            2           1m\n</code></pre>"},{"location":"AWS_deployment_guide/#step-24-install-external-secrets-operator","title":"Step 2.4: Install External Secrets Operator","text":"<pre><code># Add Helm repository\nhelm repo add external-secrets https://charts.external-secrets.io\nhelm repo update\n\n# Create namespace\nkubectl create namespace external-secrets-system\n\n# Install External Secrets Operator\nhelm install external-secrets \\\n  external-secrets/external-secrets \\\n  -n external-secrets-system \\\n  --set installCRDs=true\n\n# Verify installation\nkubectl get pods -n external-secrets-system\n\n# Create SecretStore for AWS Secrets Manager\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: external-secrets.io/v1beta1\nkind: SecretStore\nmetadata:\n  name: aws-secrets-manager\n  namespace: fawkes-system\nspec:\n  provider:\n    aws:\n      service: SecretsManager\n      region: us-east-1\n      auth:\n        jwt:\n          serviceAccountRef:\n            name: external-secrets\nEOF\n</code></pre>"},{"location":"AWS_deployment_guide/#step-25-configure-cluster-autoscaler","title":"Step 2.5: Configure Cluster Autoscaler","text":"<pre><code># Install Cluster Autoscaler\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/autoscaler/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml\n\n# Patch deployment with correct cluster name\nkubectl -n kube-system \\\n  patch deployment cluster-autoscaler \\\n  -p '{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"cluster-autoscaler.kubernetes.io/safe-to-evict\": \"false\"}}}}}'\n\nkubectl -n kube-system \\\n  set image deployment/cluster-autoscaler \\\n  cluster-autoscaler=registry.k8s.io/autoscaling/cluster-autoscaler:v1.28.0\n\n# Add cluster name\nkubectl -n kube-system \\\n  patch deployment cluster-autoscaler \\\n  --type='json' \\\n  -p='[{\"op\": \"add\", \"path\": \"/spec/template/spec/containers/0/command/-\", \"value\": \"--node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/fawkes-production\"}]'\n\n# Verify\nkubectl get pods -n kube-system | grep cluster-autoscaler\n</code></pre> <p>Validation: <pre><code># Check cluster status\neksctl get cluster --name fawkes-production\n\n# Check nodes\nkubectl get nodes -o wide\n\n# Check system pods\nkubectl get pods -n kube-system\n\n# Verify service accounts\nkubectl get sa -n kube-system aws-load-balancer-controller\nkubectl get sa -n external-secrets-system external-secrets\n</code></pre></p>"},{"location":"AWS_deployment_guide/#phase-3-database-and-storage","title":"Phase 3: Database and Storage","text":"<p>Duration: 20 minutes Goal: Deploy RDS PostgreSQL and configure storage classes</p>"},{"location":"AWS_deployment_guide/#step-31-create-rds-postgresql-instance","title":"Step 3.1: Create RDS PostgreSQL Instance","text":"<pre><code># Get private subnet IDs\nPRIVATE_SUBNET_1=$(terraform output -raw private_subnet_ids | jq -r '.[0]')\nPRIVATE_SUBNET_2=$(terraform output -raw private_subnet_ids | jq -r '.[1]')\n\n# Create DB subnet group\naws rds create-db-subnet-group \\\n  --db-subnet-group-name fawkes-production-db-subnet \\\n  --db-subnet-group-description \"Fawkes Production DB Subnet Group\" \\\n  --subnet-ids $PRIVATE_SUBNET_1 $PRIVATE_SUBNET_2 \\\n  --tags Key=Environment,Value=production Key=Project,Value=fawkes\n\n# Create security group for RDS\nRDS_SG_ID=$(aws ec2 create-security-group \\\n  --group-name fawkes-production-rds-sg \\\n  --description \"Fawkes Production RDS Security Group\" \\\n  --vpc-id $VPC_ID \\\n  --output text)\n\n# Allow PostgreSQL access from EKS nodes\nEKS_NODE_SG=$(aws eks describe-cluster \\\n  --name fawkes-production \\\n  --query \"cluster.resourcesVpcConfig.clusterSecurityGroupId\" \\\n  --output text)\n\naws ec2 authorize-security-group-ingress \\\n  --group-id $RDS_SG_ID \\\n  --protocol tcp \\\n  --port 5432 \\\n  --source-group $EKS_NODE_SG\n\n# Create RDS instance\naws rds create-db-instance \\\n  --db-instance-identifier fawkes-production-db \\\n  --db-instance-class db.m5.large \\\n  --engine postgres \\\n  --engine-version 15.4 \\\n  --master-username fawkesadmin \\\n  --master-user-password \"$DB_PASSWORD\" \\\n  --allocated-storage 500 \\\n  --storage-type gp3 \\\n  --storage-encrypted \\\n  --db-subnet-group-name fawkes-production-db-subnet \\\n  --vpc-security-group-ids $RDS_SG_ID \\\n  --backup-retention-period 7 \\\n  --preferred-backup-window \"03:00-04:00\" \\\n  --preferred-maintenance-window \"sun:04:00-sun:05:00\" \\\n  --multi-az \\\n  --auto-minor-version-upgrade \\\n  --publicly-accessible false \\\n  --tags Key=Name,Value=fawkes-production-db Key=Environment,Value=production\n\n# This takes 10-15 minutes - continue with next steps while it provisions\n</code></pre>"},{"location":"AWS_deployment_guide/#step-32-configure-kubernetes-storage-classes","title":"Step 3.2: Configure Kubernetes Storage Classes","text":"<pre><code># Create storage class for general purpose SSD (gp3)\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: gp3\n  annotations:\n    storageclass.kubernetes.io/is-default-class: \"true\"\nprovisioner: ebs.csi.aws.com\nparameters:\n  type: gp3\n  iops: \"3000\"\n  throughput: \"125\"\n  encrypted: \"true\"\nvolumeBindingMode: WaitForFirstConsumer\nallowVolumeExpansion: true\n---\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: gp3-retain\nprovisioner: ebs.csi.aws.com\nparameters:\n  type: gp3\n  iops: \"3000\"\n  throughput: \"125\"\n  encrypted: \"true\"\nreclaimPolicy: Retain\nvolumeBindingMode: WaitForFirstConsumer\nallowVolumeExpansion: true\nEOF\n\n# Verify storage classes\nkubectl get storageclass\n</code></pre>"},{"location":"AWS_deployment_guide/#step-33-wait-for-rds-instance-and-get-endpoint","title":"Step 3.3: Wait for RDS Instance and Get Endpoint","text":"<pre><code># Wait for RDS instance to be available\necho \"Waiting for RDS instance to be available (this takes ~15 minutes)...\"\naws rds wait db-instance-available \\\n  --db-instance-identifier fawkes-production-db\n\n# Get RDS endpoint\nRDS_ENDPOINT=$(aws rds describe-db-instances \\\n  --db-instance-identifier fawkes-production-db \\\n  --query 'DBInstances[0].Endpoint.Address' \\\n  --output text)\n\necho \"RDS Endpoint: $RDS_ENDPOINT\"\n\n# Store RDS endpoint in Secrets Manager for easy access\naws secretsmanager create-secret \\\n  --name fawkes/production/db-endpoint \\\n  --description \"Fawkes Production Database Endpoint\" \\\n  --secret-string \"$RDS_ENDPOINT\" \\\n  --region us-east-1\n\n# Create Kubernetes secret for database connection\nkubectl create namespace fawkes-system\n\nkubectl create secret generic postgres-credentials \\\n  --from-literal=host=$RDS_ENDPOINT \\\n  --from-literal=port=5432 \\\n  --from-literal=database=postgres \\\n  --from-literal=username=fawkesadmin \\\n  --from-literal=password=$DB_PASSWORD \\\n  -n fawkes-system\n</code></pre>"},{"location":"AWS_deployment_guide/#step-34-initialize-database-schema","title":"Step 3.4: Initialize Database Schema","text":"<pre><code># Connect to RDS and create databases for each platform component\ncat &gt; init-databases.sql &lt;&lt;EOF\n-- Create databases for platform components\nCREATE DATABASE backstage;\nCREATE DATABASE jenkins;\nCREATE DATABASE argocd;\nCREATE DATABASE harbor;\nCREATE DATABASE mattermost;\nCREATE DATABASE focalboard;\n\n-- Create extensions\n\\c backstage\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n\\c jenkins\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n\\c argocd\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n\\c harbor\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n\\c mattermost\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n\\c focalboard\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nEOF\n\n# Run via temporary pod\nkubectl run postgres-client --rm -i --tty \\\n  --image postgres:15 \\\n  --restart=Never \\\n  -n fawkes-system \\\n  --env=\"PGPASSWORD=$DB_PASSWORD\" \\\n  -- psql -h $RDS_ENDPOINT -U fawkesadmin -d postgres -f /dev/stdin &lt; init-databases.sql\n\n# Verify databases were created\nkubectl run postgres-client --rm -i --tty \\\n  --image postgres:15 \\\n  --restart=Never \\\n  -n fawkes-system \\\n  --env=\"PGPASSWORD=$DB_PASSWORD\" \\\n  -- psql -h $RDS_ENDPOINT -U fawkesadmin -d postgres -c \"\\l\"\n</code></pre> <p>Validation: <pre><code># Verify RDS instance is running\naws rds describe-db-instances \\\n  --db-instance-identifier fawkes-production-db \\\n  --query 'DBInstances[0].DBInstanceStatus' \\\n  --output text\n# Should output: available\n\n# Test database connectivity\nkubectl run postgres-test --rm -i --tty \\\n  --image postgres:15 \\\n  --restart=Never \\\n  -n fawkes-system \\\n  --env=\"PGPASSWORD=$DB_PASSWORD\" \\\n  -- psql -h $RDS_ENDPOINT -U fawkesadmin -d postgres -c \"SELECT version();\"\n\n# Verify storage classes\nkubectl get storageclass\n</code></pre></p>"},{"location":"AWS_deployment_guide/#phase-4-platform-services","title":"Phase 4: Platform Services","text":"<p>Duration: 45-60 minutes Goal: Deploy core Fawkes platform components</p>"},{"location":"AWS_deployment_guide/#step-41-create-namespaces","title":"Step 4.1: Create Namespaces","text":"<pre><code># Create namespaces for platform components\nkubectl create namespace backstage\nkubectl create namespace jenkins\nkubectl create namespace argocd\nkubectl create namespace harbor\nkubectl create namespace monitoring\nkubectl create namespace mattermost\nkubectl create namespace focalboard\n\n# Label namespaces for better organization\nkubectl label namespace backstage app.kubernetes.io/part-of=fawkes\nkubectl label namespace jenkins app.kubernetes.io/part-of=fawkes\nkubectl label namespace argocd app.kubernetes.io/part-of=fawkes\nkubectl label namespace harbor app.kubernetes.io/part-of=fawkes\nkubectl label namespace monitoring app.kubernetes.io/part-of=fawkes\nkubectl label namespace mattermost app.kubernetes.io/part-of=fawkes\nkubectl label namespace focalboard app.kubernetes.io/part-of=fawkes\n</code></pre>"},{"location":"AWS_deployment_guide/#step-42-deploy-argocd-gitops-engine","title":"Step 4.2: Deploy ArgoCD (GitOps Engine)","text":"<pre><code># Add ArgoCD Helm repository\nhelm repo add argo https://argoproj.github.io/argo-helm\nhelm repo update\n\n# Create values file for ArgoCD\ncat &gt; argocd-values.yaml &lt;&lt;EOF\nglobal:\n  domain: argocd.fawkes.yourdomain.com\n\nserver:\n  service:\n    type: ClusterIP\n  ingress:\n    enabled: true\n    ingressClassName: alb\n    annotations:\n      alb.ingress.kubernetes.io/scheme: internet-facing\n      alb.ingress.kubernetes.io/target-type: ip\n      alb.ingress.kubernetes.io/certificate-arn: YOUR_ACM_CERT_ARN\n      alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\": 80}, {\"HTTPS\": 443}]'\n      alb.ingress.kubernetes.io/ssl-redirect: '443'\n    hosts:\n      - argocd.fawkes.yourdomain.com\n\nconfigs:\n  secret:\n    argocdServerAdminPassword: '$ARGOCD_PASSWORD_BCRYPT'\n  cm:\n    url: https://argocd.fawkes.yourdomain.com\n    dex.config: |\n      connectors:\n        - type: github\n          id: github\n          name: GitHub\n          config:\n            clientID: YOUR_GITHUB_OAUTH_CLIENT_ID\n            clientSecret: YOUR_GITHUB_OAUTH_CLIENT_SECRET\n            orgs:\n              - name: your-github-org\n\nredis:\n  enabled: true\n\nrepoServer:\n  replicas: 2\n\napplicationSet:\n  enabled: true\nEOF\n\n# Hash the ArgoCD password for storage\nARGOCD_PASSWORD_BCRYPT=$(htpasswd -nbBC 10 \"\" \"$ARGOCD_PASSWORD\" | tr -d ':\\n' | sed 's/$2y/$2a/')\n\n# Replace in values file\nsed -i \"s|\\$ARGOCD_PASSWORD_BCRYPT|$ARGOCD_PASSWORD_BCRYPT|g\" argocd-values.yaml\n\n# Install ArgoCD\nhelm install argocd argo/argo-cd \\\n  --namespace argocd \\\n  --values argocd-values.yaml \\\n  --version 5.51.0\n\n# Wait for ArgoCD to be ready\nkubectl wait --for=condition=available --timeout=300s \\\n  deployment/argocd-server -n argocd\n\n# Get ArgoCD admin password (if you didn't set it)\nARGOCD_ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret \\\n  -o jsonpath=\"{.data.password}\" | base64 -d)\necho \"ArgoCD Admin Password: $ARGOCD_ADMIN_PASSWORD\"\n\n# Get ArgoCD URL\nkubectl get ingress -n argocd\n</code></pre>"},{"location":"AWS_deployment_guide/#step-43-deploy-harbor-container-registry","title":"Step 4.3: Deploy Harbor (Container Registry)","text":"<pre><code># Add Harbor Helm repository\nhelm repo add harbor https://helm.goharbor.io\nhelm repo update\n\n# Create values file for Harbor\ncat &gt; harbor-values.yaml &lt;&lt;EOF\nexpose:\n  type: ingress\n  tls:\n    enabled: true\n    certSource: secret\n    secret:\n      secretName: harbor-tls\n  ingress:\n    className: alb\n    annotations:\n      alb.ingress.kubernetes.io/scheme: internet-facing\n      alb.ingress.kubernetes.io/target-type: ip\n      alb.ingress.kubernetes.io/certificate-arn: YOUR_ACM_CERT_ARN\n      alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\": 80}, {\"HTTPS\": 443}]'\n      alb.ingress.kubernetes.io/ssl-redirect: '443'\n    hosts:\n      core: harbor.fawkes.yourdomain.com\n\nexternalURL: https://harbor.fawkes.yourdomain.com\n\npersistence:\n  enabled: true\n  persistentVolumeClaim:\n    registry:\n      storageClass: gp3\n      size: 200Gi\n    chartmuseum:\n      storageClass: gp3\n      size: 5Gi\n    jobservice:\n      jobLog:\n        storageClass: gp3\n        size: 1Gi\n    database:\n      storageClass: gp3\n      size: 1Gi\n    redis:\n      storageClass: gp3\n      size: 1Gi\n    trivy:\n      storageClass: gp3\n      size: 5Gi\n\ndatabase:\n  type: external\n  external:\n    host: $RDS_ENDPOINT\n    port: 5432\n    username: fawkesadmin\n    password: $DB_PASSWORD\n    coreDatabase: harbor\n    notaryServerDatabase: notary_server\n    notarySignerDatabase: notary_signer\n\nharborAdminPassword: $(openssl rand -base64 16)\n\ntrivy:\n  enabled: true\n\nnotary:\n  enabled: false\n\nmetrics:\n  enabled: true\nEOF\n\n# Install Harbor\nhelm install harbor harbor/harbor \\\n  --namespace harbor \\\n  --values harbor-values.yaml \\\n  --version 1.13.0\n\n# Wait for Harbor to be ready (takes 5-10 minutes)\nkubectl wait --for=condition=available --timeout=600s \\\n  deployment/harbor-core -n harbor\n</code></pre>"},{"location":"AWS_deployment_guide/#step-44-deploy-jenkins-cicd","title":"Step 4.4: Deploy Jenkins (CI/CD)","text":"<pre><code># Add Jenkins Helm repository\nhelm repo add jenkins https://charts.jenkins.io\nhelm repo update\n\n# Create values file for Jenkins\ncat &gt; jenkins-values.yaml &lt;&lt;EOF\ncontroller:\n  adminPassword: $JENKINS_PASSWORD\n\n  ingress:\n    enabled: true\n    ingressClassName: alb\n    annotations:\n      alb.ingress.kubernetes.io/scheme: internet-facing\n      alb.ingress.kubernetes.io/target-type: ip\n      alb.ingress.kubernetes.io/certificate-arn: YOUR_ACM_CERT_ARN\n      alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\": 80}, {\"HTTPS\": 443}]'\n      alb.ingress.kubernetes.io/ssl-redirect: '443'\n    hostName: jenkins.fawkes.yourdomain.com\n\n  resources:\n    requests:\n      cpu: \"1000m\"\n      memory: \"2Gi\"\n    limits:\n      cpu: \"2000m\"\n      memory: \"4Gi\"\n\n  JCasC:\n    configScripts:\n      aws-credentials: |\n        credentials:\n          system:\n            domainCredentials:\n              - credentials:\n                - aws:\n                    accessKey: \"${AWS_ACCESS_KEY_ID}\"\n                    description: \"AWS Credentials\"\n                    id: \"aws-credentials\"\n                    iamRoleArn: \"\"\n                    scope: GLOBAL\n                    secretKey: \"${AWS_SECRET_ACCESS_KEY}\"\n      kubernetes-cloud: |\n        jenkins:\n          clouds:\n            - kubernetes:\n                name: \"kubernetes\"\n                serverUrl: \"https://kubernetes.default\"\n                namespace: \"jenkins\"\n                jenkinsUrl: \"http://jenkins:8080\"\n                jenkinsTunnel: \"jenkins-agent:50000\"\n                containerCapStr: \"10\"\n                templates:\n                  - name: \"jenkins-agent\"\n                    namespace: \"jenkins\"\n                    label: \"jenkins-agent\"\n                    containers:\n                      - name: \"jnlp\"\n                        image: \"jenkins/inbound-agent:latest\"\n                        alwaysPullImage: true\n                        workingDir: \"/home/jenkins/agent\"\n                        ttyEnabled: true\n\n  installPlugins:\n    - kubernetes:latest\n    - workflow-aggregator:latest\n    - git:latest\n    - configuration-as-code:latest\n    - aws-credentials:latest\n    - pipeline-aws:latest\n    - docker-workflow:latest\n    - blueocean:latest\n\npersistence:\n  enabled: true\n  storageClass: gp3-retain\n  size: 100Gi\n\nagent:\n  enabled: true\n  resources:\n    requests:\n      cpu: \"500m\"\n      memory: \"1Gi\"\n    limits:\n      cpu: \"1000m\"\n      memory: \"2Gi\"\nEOF\n\n# Install Jenkins\nhelm install jenkins jenkins/jenkins \\\n  --namespace jenkins \\\n  --values jenkins-values.yaml \\\n  --version 4.6.0\n\n# Wait for Jenkins to be ready\nkubectl wait --for=condition=available --timeout=600s \\\n  deployment/jenkins -n jenkins\n\n# Get Jenkins admin password (if you didn't set it)\nJENKINS_ADMIN_PASSWORD=$(kubectl exec --namespace jenkins -it svc/jenkins \\\n  -c jenkins -- /bin/cat /run/secrets/additional/chart-admin-password)\necho \"Jenkins Admin Password: $JENKINS_ADMIN_PASSWORD\"\n</code></pre>"},{"location":"AWS_deployment_guide/#step-45-deploy-backstage-developer-portal","title":"Step 4.5: Deploy Backstage (Developer Portal)","text":"<pre><code># Create Backstage configuration\ncat &gt; backstage-values.yaml &lt;&lt;EOF\nimage:\n  registry: ghcr.io\n  repository: backstage/backstage\n  tag: latest\n\nbackstage:\n  image:\n    pullPolicy: Always\n\n  extraEnvVars:\n    - name: POSTGRES_HOST\n      value: $RDS_ENDPOINT\n    - name: POSTGRES_PORT\n      value: \"5432\"\n    - name: POSTGRES_USER\n      value: fawkesadmin\n    - name: POSTGRES_PASSWORD\n      value: $DB_PASSWORD\n\n  appConfig:\n    app:\n      title: Fawkes Platform\n      baseUrl: https://backstage.fawkes.yourdomain.com\n\n    backend:\n      baseUrl: https://backstage.fawkes.yourdomain.com\n      listen:\n        port: 7007\n      csp:\n        connect-src: [\"'self'\", 'http:', 'https:']\n      cors:\n        origin: https://backstage.fawkes.yourdomain.com\n        methods: [GET, POST, PUT, DELETE]\n        credentials: true\n      database:\n        client: pg\n        connection:\n          host: \\${POSTGRES_HOST}\n          port: \\${POSTGRES_PORT}\n          user: \\${POSTGRES_USER}\n          password: \\${POSTGRES_PASSWORD}\n          database: backstage\n\n    catalog:\n      rules:\n        - allow: [Component, System, API, Group, User, Resource, Location]\n      locations:\n        - type: url\n          target: https://github.com/paruff/fawkes/blob/master/catalog-info.yaml\n\n    auth:\n      providers:\n        github:\n          development:\n            clientId: \\${GITHUB_CLIENT_ID}\n            clientSecret: \\${GITHUB_CLIENT_SECRET}\n\ningress:\n  enabled: true\n  className: alb\n  annotations:\n    alb.ingress.kubernetes.io/scheme: internet-facing\n    alb.ingress.kubernetes.io/target-type: ip\n    alb.ingress.kubernetes.io/certificate-arn: YOUR_ACM_CERT_ARN\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\": 80}, {\"HTTPS\": 443}]'\n    alb.ingress.kubernetes.io/ssl-redirect: '443'\n  host: backstage.fawkes.yourdomain.com\n\npostgresql:\n  enabled: false  # Using external RDS\n\nresources:\n  requests:\n    cpu: 500m\n    memory: 1Gi\n  limits:\n    cpu: 1000m\n    memory: 2Gi\nEOF\n\n# Install Backstage\nhelm install backstage backstage/backstage \\\n  --namespace backstage \\\n  --values backstage-values.yaml\n\n# Wait for Backstage to be ready\nkubectl wait --for=condition=available --timeout=600s \\\n  deployment/backstage -n backstage\n</code></pre>"},{"location":"AWS_deployment_guide/#step-46-deploy-mattermost-team-collaboration","title":"Step 4.6: Deploy Mattermost (Team Collaboration)","text":"<pre><code># Add Mattermost Helm repository\nhelm repo add mattermost https://helm.mattermost.com\nhelm repo update\n\n# Create values file\ncat &gt; mattermost-values.yaml &lt;&lt;EOF\ningress:\n  enabled: true\n  className: alb\n  annotations:\n    alb.ingress.kubernetes.io/scheme: internet-facing\n    alb.ingress.kubernetes.io/target-type: ip\n    alb.ingress.kubernetes.io/certificate-arn: YOUR_ACM_CERT_ARN\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\": 80}, {\"HTTPS\": 443}]'\n    alb.ingress.kubernetes.io/ssl-redirect: '443'\n  hosts:\n    - mattermost.fawkes.yourdomain.com\n\nmysql:\n  enabled: false\n\nexternalDB:\n  enabled: true\n  externalDriverType: \"postgres\"\n  externalConnectionString: \"postgres://fawkesadmin:$DB_PASSWORD@$RDS_ENDPOINT:5432/mattermost?sslmode=require\"\n\npersistence:\n  data:\n    enabled: true\n    size: 50Gi\n    storageClass: gp3\n  plugins:\n    enabled: true\n    size: 5Gi\n    storageClass: gp3\n\nresources:\n  requests:\n    cpu: 500m\n    memory: 1Gi\n  limits:\n    cpu: 1000m\n    memory: 2Gi\nEOF\n\n# Install Mattermost\nhelm install mattermost mattermost/mattermost-team-edition \\\n  --namespace mattermost \\\n  --values mattermost-values.yaml\n\n# Wait for Mattermost to be ready\nkubectl wait --for=condition=available --timeout=600s \\\n  deployment/mattermost -n mattermost\n</code></pre>"},{"location":"AWS_deployment_guide/#step-47-deploy-focalboard-project-tracking","title":"Step 4.7: Deploy Focalboard (Project Tracking)","text":"<pre><code># Create Focalboard deployment\ncat &gt; focalboard-deployment.yaml &lt;&lt;EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: focalboard-config\n  namespace: focalboard\ndata:\n  config.json: |\n    {\n      \"serverRoot\": \"https://focalboard.fawkes.yourdomain.com\",\n      \"port\": 8000,\n      \"dbtype\": \"postgres\",\n      \"dbconfig\": \"postgres://fawkesadmin:$DB_PASSWORD@$RDS_ENDPOINT:5432/focalboard?sslmode=require\",\n      \"useSSL\": false,\n      \"webpath\": \"./pack\",\n      \"filespath\": \"./files\",\n      \"telemetry\": true,\n      \"session_expire_time\": 2592000,\n      \"session_refresh_time\": 18000,\n      \"localOnly\": false,\n      \"enableLocalMode\": true,\n      \"localModeSocketLocation\": \"/var/tmp/focalboard_local.socket\"\n    }\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: focalboard\n  namespace: focalboard\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: focalboard\n  template:\n    metadata:\n      labels:\n        app: focalboard\n    spec:\n      containers:\n      - name: focalboard\n        image: mattermost/focalboard:latest\n        ports:\n        - containerPort: 8000\n        volumeMounts:\n        - name: config\n          mountPath: /opt/focalboard/config.json\n          subPath: config.json\n        - name: data\n          mountPath: /opt/focalboard/files\n        resources:\n          requests:\n            cpu: 250m\n            memory: 512Mi\n          limits:\n            cpu: 500m\n            memory: 1Gi\n      volumes:\n      - name: config\n        configMap:\n          name: focalboard-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: focalboard-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: focalboard\n  namespace: focalboard\nspec:\n  selector:\n    app: focalboard\n  ports:\n  - port: 8000\n    targetPort: 8000\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: focalboard-data\n  namespace: focalboard\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: gp3\n  resources:\n    requests:\n      storage: 20Gi\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: focalboard\n  namespace: focalboard\n  annotations:\n    alb.ingress.kubernetes.io/scheme: internet-facing\n    alb.ingress.kubernetes.io/target-type: ip\n    alb.ingress.kubernetes.io/certificate-arn: YOUR_ACM_CERT_ARN\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\": 80}, {\"HTTPS\": 443}]'\n    alb.ingress.kubernetes.io/ssl-redirect: '443'\nspec:\n  ingressClassName: alb\n  rules:\n  - host: focalboard.fawkes.yourdomain.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: focalboard\n            port:\n              number: 8000\nEOF\n\n# Apply Focalboard manifests\nkubectl apply -f focalboard-deployment.yaml\n\n# Wait for Focalboard to be ready\nkubectl wait --for=condition=available --timeout=300s \\\n  deployment/focalboard -n focalboard\n</code></pre> <p>Validation: <pre><code># Check all platform services are running\nkubectl get pods -n argocd\nkubectl get pods -n harbor\nkubectl get pods -n jenkins\nkubectl get pods -n backstage\nkubectl get pods -n mattermost\nkubectl get pods -n focalboard\n\n# Get all ingress URLs\nkubectl get ingress --all-namespaces\n\n# Test connectivity to each service\ncurl -k https://argocd.fawkes.yourdomain.com\ncurl -k https://harbor.fawkes.yourdomain.com\ncurl -k https://jenkins.fawkes.yourdomain.com\ncurl -k https://backstage.fawkes.yourdomain.com\ncurl -k https://mattermost.fawkes.yourdomain.com\ncurl -k https://focalboard.fawkes.yourdomain.com\n</code></pre></p>"},{"location":"AWS_deployment_guide/#phase-5-observability-stack","title":"Phase 5: Observability Stack","text":"<p>Duration: 30 minutes Goal: Deploy Prometheus, Grafana, and logging infrastructure</p>"},{"location":"AWS_deployment_guide/#step-51-deploy-prometheus-stack","title":"Step 5.1: Deploy Prometheus Stack","text":"<pre><code># Add Prometheus Helm repository\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\n\n# Create values file\ncat &gt; prometheus-values.yaml &lt;&lt;EOF\nprometheus:\n  prometheusSpec:\n    retention: 30d\n    storageSpec:\n      volumeClaimTemplate:\n        spec:\n          storageClassName: gp3\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: 100Gi\n    resources:\n      requests:\n        cpu: 500m\n        memory: 2Gi\n      limits:\n        cpu: 1000m\n        memory: 4Gi\n\ngrafana:\n  enabled: true\n  adminPassword: $(openssl rand -base64 16)\n\n  ingress:\n    enabled: true\n    ingressClassName: alb\n    annotations:\n      alb.ingress.kubernetes.io/scheme: internet-facing\n      alb.ingress.kubernetes.io/target-type: ip\n      alb.ingress.kubernetes.io/certificate-arn: YOUR_ACM_CERT_ARN\n      alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\": 80}, {\"HTTPS\": 443}]'\n      alb.ingress.kubernetes.io/ssl-redirect: '443'\n    hosts:\n      - grafana.fawkes.yourdomain.com\n\n  persistence:\n    enabled: true\n    storageClassName: gp3\n    size: 10Gi\n\n  datasources:\n    datasources.yaml:\n      apiVersion: 1\n      datasources:\n      - name: Prometheus\n        type: prometheus\n        url: http://prometheus-operated:9090\n        isDefault: true\n\n  dashboardProviders:\n    dashboardproviders.yaml:\n      apiVersion: 1\n      providers:\n      - name: 'default'\n        orgId: 1\n        folder: ''\n        type: file\n        disableDeletion: false\n        editable: true\n        options:\n          path: /var/lib/grafana/dashboards/default\n\nalertmanager:\n  alertmanagerSpec:\n    storage:\n      volumeClaimTemplate:\n        spec:\n          storageClassName: gp3\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: 10Gi\n\nkubeStateMetrics:\n  enabled: true\n\nnodeExporter:\n  enabled: true\nEOF\n\n# Install Prometheus stack\nhelm install prometheus prometheus-community/kube-prometheus-stack \\\n  --namespace monitoring \\\n  --values prometheus-values.yaml \\\n  --version 51.0.0\n\n# Wait for Prometheus to be ready\nkubectl wait --for=condition=available --timeout=600s \\\n  deployment/prometheus-grafana -n monitoring\n</code></pre>"},{"location":"AWS_deployment_guide/#step-52-deploy-dora-metrics-exporter","title":"Step 5.2: Deploy DORA Metrics Exporter","text":"<pre><code># Create DORA metrics collection service\ncat &gt; dora-metrics-exporter.yaml &lt;&lt;EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: dora-exporter-config\n  namespace: monitoring\ndata:\n  config.yaml: |\n    argocd:\n      url: https://argocd.fawkes.yourdomain.com\n      token: \\${ARGOCD_TOKEN}\n    jenkins:\n      url: https://jenkins.fawkes.yourdomain.com\n      username: admin\n      token: \\${JENKINS_TOKEN}\n    prometheus:\n      port: 9090\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dora-metrics-exporter\n  namespace: monitoring\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: dora-metrics-exporter\n  template:\n    metadata:\n      labels:\n        app: dora-metrics-exporter\n    spec:\n      containers:\n      - name: exporter\n        image: fawkes/dora-metrics-exporter:latest  # TODO: Build this image\n        ports:\n        - containerPort: 9090\n        envFrom:\n        - secretRef:\n            name: dora-exporter-secrets\n        volumeMounts:\n        - name: config\n          mountPath: /app/config.yaml\n          subPath: config.yaml\n      volumes:\n      - name: config\n        configMap:\n          name: dora-exporter-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: dora-metrics-exporter\n  namespace: monitoring\n  labels:\n    app: dora-metrics-exporter\nspec:\n  ports:\n  - port: 9090\n    targetPort: 9090\n    name: metrics\n  selector:\n    app: dora-metrics-exporter\n---\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: dora-metrics\n  namespace: monitoring\nspec:\n  selector:\n    matchLabels:\n      app: dora-metrics-exporter\n  endpoints:\n  - port: metrics\n    interval: 60s\nEOF\n\n# Apply DORA metrics exporter\nkubectl apply -f dora-metrics-exporter.yaml\n</code></pre>"},{"location":"AWS_deployment_guide/#step-53-import-dora-metrics-dashboards","title":"Step 5.3: Import DORA Metrics Dashboards","text":"<pre><code># Create DORA metrics dashboard\ncat &gt; dora-dashboard.json &lt;&lt;'EOF'\n{\n  \"dashboard\": {\n    \"title\": \"DORA Metrics - Fawkes Platform\",\n    \"tags\": [\"dora\", \"platform\"],\n    \"timezone\": \"browser\",\n    \"panels\": [\n      {\n        \"title\": \"Deployment Frequency\",\n        \"targets\": [\n          {\n            \"expr\": \"sum(rate(deployments_total[7d]))\",\n            \"legendFormat\": \"Deployments per day\"\n          }\n        ],\n        \"type\": \"graph\"\n      },\n      {\n        \"title\": \"Lead Time for Changes\",\n        \"targets\": [\n          {\n            \"expr\": \"histogram_quantile(0.95, rate(lead_time_seconds_bucket[7d]))\",\n            \"legendFormat\": \"p95 Lead Time\"\n          }\n        ],\n        \"type\": \"graph\"\n      },\n      {\n        \"title\": \"Mean Time to Restore (MTTR)\",\n        \"targets\": [\n          {\n            \"expr\": \"avg(mttr_seconds) / 60\",\n            \"legendFormat\": \"MTTR (minutes)\"\n          }\n        ],\n        \"type\": \"graph\"\n      },\n      {\n        \"title\": \"Change Failure Rate\",\n        \"targets\": [\n          {\n            \"expr\": \"(sum(failed_deployments_total) / sum(deployments_total)) * 100\",\n            \"legendFormat\": \"Failure Rate (%)\"\n          }\n        ],\n        \"type\": \"gauge\"\n      }\n    ]\n  }\n}\nEOF\n\n# Import dashboard to Grafana\nGRAFANA_POD=$(kubectl get pod -n monitoring -l \"app.kubernetes.io/name=grafana\" -o jsonpath=\"{.items[0].metadata.name}\")\n\nkubectl exec -n monitoring $GRAFANA_POD -- \\\n  curl -X POST http://localhost:3000/api/dashboards/db \\\n  -H \"Content-Type: application/json\" \\\n  -d @/tmp/dora-dashboard.json\n\n# Upload the dashboard file first\nkubectl cp dora-dashboard.json monitoring/$GRAFANA_POD:/tmp/\n</code></pre> <p>Validation: <pre><code># Check Prometheus is scraping targets\nkubectl port-forward -n monitoring svc/prometheus-operated 9090:9090 &amp;\ncurl http://localhost:9090/api/v1/targets\n\n# Access Grafana\nkubectl get ingress -n monitoring\n\n# Get Grafana admin password\nkubectl get secret -n monitoring prometheus-grafana \\\n  -o jsonpath=\"{.data.admin-password}\" | base64 --decode; echo\n</code></pre></p>"},{"location":"AWS_deployment_guide/#phase-6-security-hardening","title":"Phase 6: Security Hardening","text":"<p>Duration: 20 minutes Goal: Implement security best practices</p>"},{"location":"AWS_deployment_guide/#step-61-deploy-trivy-operator-vulnerability-scanning","title":"Step 6.1: Deploy Trivy Operator (Vulnerability Scanning)","text":"<pre><code># Add Aqua Security Helm repository\nhelm repo add aqua https://aquasecurity.github.io/helm-charts/\nhelm repo update\n\n# Install Trivy Operator\nhelm install trivy-operator aqua/trivy-operator \\\n  --namespace trivy-system \\\n  --create-namespace \\\n  --set=\"trivy.ignoreUnfixed=true\"\n\n# Wait for Trivy to be ready\nkubectl wait --for=condition=available --timeout=300s \\\n  deployment/trivy-operator -n trivy-system\n</code></pre>"},{"location":"AWS_deployment_guide/#step-62-deploy-kyverno-policy-enforcement","title":"Step 6.2: Deploy Kyverno (Policy Enforcement)","text":"<pre><code># Add Kyverno Helm repository\nhelm repo add kyverno https://kyverno.github.io/kyverno/\nhelm repo update\n\n# Install Kyverno\nhelm install kyverno kyverno/kyverno \\\n  --namespace kyverno \\\n  --create-namespace\n\n# Wait for Kyverno to be ready\nkubectl wait --for=condition=available --timeout=300s \\\n  deployment/kyverno -n kyverno\n\n# Apply baseline policies\nkubectl apply -f https://raw.githubusercontent.com/kyverno/policies/main/pod-security/baseline/disallow-privileged-containers/disallow-privileged-containers.yaml\nkubectl apply -f https://raw.githubusercontent.com/kyverno/policies/main/pod-security/baseline/disallow-host-namespaces/disallow-host-namespaces.yaml\nkubectl apply -f https://raw.githubusercontent.com/kyverno/policies/main/pod-security/baseline/disallow-host-path/disallow-host-path.yaml\n\n# Create custom policy for required labels\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: require-labels\nspec:\n  validationFailureAction: audit\n  background: true\n  rules:\n  - name: check-for-labels\n    match:\n      any:\n      - resources:\n          kinds:\n          - Pod\n          - Deployment\n          - Service\n    validate:\n      message: \"Labels 'app.kubernetes.io/name' and 'app.kubernetes.io/part-of' are required.\"\n      pattern:\n        metadata:\n          labels:\n            app.kubernetes.io/name: \"?*\"\n            app.kubernetes.io/part-of: \"fawkes\"\nEOF\n</code></pre>"},{"location":"AWS_deployment_guide/#step-63-configure-network-policies","title":"Step 6.3: Configure Network Policies","text":"<pre><code># Create network policies for each namespace\ncat &lt;&lt;EOF | kubectl apply -f -\n# Allow Backstage to communicate with all services\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: backstage-egress\n  namespace: backstage\nspec:\n  podSelector:\n    matchLabels:\n      app: backstage\n  policyTypes:\n  - Egress\n  egress:\n  - to:\n    - namespaceSelector: {}\n    ports:\n    - protocol: TCP\n      port: 443\n    - protocol: TCP\n      port: 80\n    - protocol: TCP\n      port: 8080\n  - to:\n    - podSelector: {}\n    ports:\n    - protocol: TCP\n      port: 5432  # PostgreSQL\n---\n# ArgoCD network policy\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: argocd-network-policy\n  namespace: argocd\nspec:\n  podSelector:\n    matchLabels:\n      app.kubernetes.io/part-of: argocd\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector: {}\n    ports:\n    - protocol: TCP\n      port: 8080\n    - protocol: TCP\n      port: 443\n  egress:\n  - to:\n    - namespaceSelector: {}\n  - to:\n    - podSelector: {}\n    ports:\n    - protocol: TCP\n      port: 443\n    - protocol: TCP\n      port: 22  # Git SSH\n---\n# Jenkins network policy\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: jenkins-network-policy\n  namespace: jenkins\nspec:\n  podSelector:\n    matchLabels:\n      app.kubernetes.io/name: jenkins\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector: {}\n    ports:\n    - protocol: TCP\n      port: 8080\n    - protocol: TCP\n      port: 50000  # JNLP agent port\n  egress:\n  - to:\n    - namespaceSelector: {}\n---\n# Monitoring namespace - allow all (needs to scrape metrics)\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: monitoring-egress\n  namespace: monitoring\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n  egress:\n  - to:\n    - namespaceSelector: {}\nEOF\n</code></pre>"},{"location":"AWS_deployment_guide/#step-64-enable-pod-security-standards","title":"Step 6.4: Enable Pod Security Standards","text":"<pre><code># Apply Pod Security Standards to namespaces\nkubectl label namespace backstage pod-security.kubernetes.io/enforce=baseline\nkubectl label namespace jenkins pod-security.kubernetes.io/enforce=baseline\nkubectl label namespace argocd pod-security.kubernetes.io/enforce=baseline\nkubectl label namespace harbor pod-security.kubernetes.io/enforce=baseline\nkubectl label namespace mattermost pod-security.kubernetes.io/enforce=baseline\nkubectl label namespace focalboard pod-security.kubernetes.io/enforce=baseline\nkubectl label namespace monitoring pod-security.kubernetes.io/enforce=baseline\n\n# Audit mode for system namespaces\nkubectl label namespace kube-system pod-security.kubernetes.io/audit=restricted\nkubectl label namespace kube-system pod-security.kubernetes.io/warn=restricted\n</code></pre>"},{"location":"AWS_deployment_guide/#step-65-configure-rbac","title":"Step 6.5: Configure RBAC","text":"<pre><code># Create read-only role for developers\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: fawkes-developer\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"services\", \"configmaps\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\", \"statefulsets\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"\"]\n  resources: [\"pods/log\"]\n  verbs: [\"get\", \"list\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: fawkes-operator\nrules:\n- apiGroups: [\"*\"]\n  resources: [\"*\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"]\n- apiGroups: [\"\"]\n  resources: [\"pods/exec\", \"pods/portforward\"]\n  verbs: [\"create\"]\n---\n# Bind roles to groups (configure based on your IdP)\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: fawkes-developers\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: fawkes-developer\nsubjects:\n- kind: Group\n  name: fawkes-developers\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: fawkes-operators\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: fawkes-operator\nsubjects:\n- kind: Group\n  name: fawkes-operators\n  apiGroup: rbac.authorization.k8s.io\nEOF\n</code></pre> <p>Validation: <pre><code># Check Trivy is scanning\nkubectl get vulnerabilityreports -A\n\n# Check Kyverno policies\nkubectl get clusterpolicy\n\n# Verify network policies\nkubectl get networkpolicies -A\n\n# Test RBAC (as a developer user)\nkubectl auth can-i delete pods --as=system:serviceaccount:default:developer\n# Should return \"no\"\n</code></pre></p>"},{"location":"AWS_deployment_guide/#phase-7-validation-and-testing","title":"Phase 7: Validation and Testing","text":"<p>Duration: 30 minutes Goal: Verify all components are working correctly</p>"},{"location":"AWS_deployment_guide/#step-71-component-health-checks","title":"Step 7.1: Component Health Checks","text":"<pre><code># Create health check script\ncat &gt; health-check.sh &lt;&lt;'EOF'\n#!/bin/bash\n\necho \"=========================================\"\necho \"Fawkes Platform Health Check\"\necho \"=========================================\"\necho \"\"\n\n# Check cluster health\necho \"1. EKS Cluster Status:\"\naws eks describe-cluster --name fawkes-production --query 'cluster.status' --output text\necho \"\"\n\n# Check node health\necho \"2. Node Status:\"\nkubectl get nodes -o custom-columns=NAME:.metadata.name,STATUS:.status.conditions[3].type,VERSION:.status.nodeInfo.kubeletVersion\necho \"\"\n\n# Check RDS status\necho \"3. RDS Database Status:\"\naws rds describe-db-instances --db-instance-identifier fawkes-production-db --query 'DBInstances[0].DBInstanceStatus' --output text\necho \"\"\n\n# Check all pods\necho \"4. Pod Status by Namespace:\"\nfor ns in argocd harbor jenkins backstage mattermost focalboard monitoring; do\n  echo \"  Namespace: $ns\"\n  kubectl get pods -n $ns -o custom-columns=NAME:.metadata.name,STATUS:.status.phase,RESTARTS:.status.containerStatuses[0].restartCount\n  echo \"\"\ndone\n\n# Check ingresses\necho \"5. Ingress Endpoints:\"\nkubectl get ingress -A -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,HOSTS:.spec.rules[0].host,ADDRESS:.status.loadBalancer.ingress[0].hostname\necho \"\"\n\n# Check PVC status\necho \"6. Persistent Volume Claims:\"\nkubectl get pvc -A -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,STATUS:.status.phase,CAPACITY:.status.capacity.storage\necho \"\"\n\n# Check certificates (if using cert-manager)\necho \"7. SSL Certificates:\"\naws acm list-certificates --region us-east-1 --query 'CertificateSummaryList[?contains(DomainName, `fawkes`)]' --output table\necho \"\"\n\necho \"=========================================\"\necho \"Health Check Complete\"\necho \"=========================================\"\nEOF\n\nchmod +x health-check.sh\n./health-check.sh\n</code></pre>"},{"location":"AWS_deployment_guide/#step-72-connectivity-tests","title":"Step 7.2: Connectivity Tests","text":"<pre><code># Test external connectivity to all services\ncat &gt; connectivity-test.sh &lt;&lt;'EOF'\n#!/bin/bash\n\nSERVICES=(\n  \"https://argocd.fawkes.yourdomain.com\"\n  \"https://harbor.fawkes.yourdomain.com\"\n  \"https://jenkins.fawkes.yourdomain.com\"\n  \"https://backstage.fawkes.yourdomain.com\"\n  \"https://mattermost.fawkes.yourdomain.com\"\n  \"https://focalboard.fawkes.yourdomain.com\"\n  \"https://grafana.fawkes.yourdomain.com\"\n)\n\necho \"Testing connectivity to all services...\"\necho \"\"\n\nfor service in \"${SERVICES[@]}\"; do\n  status_code=$(curl -k -s -o /dev/null -w \"%{http_code}\" \"$service\")\n  if [ \"$status_code\" -eq 200 ] || [ \"$status_code\" -eq 302 ] || [ \"$status_code\" -eq 401 ]; then\n    echo \"\u2713 $service - OK (HTTP $status_code)\"\n  else\n    echo \"\u2717 $service - FAILED (HTTP $status_code)\"\n  fi\ndone\n\necho \"\"\necho \"Connectivity test complete\"\nEOF\n\nchmod +x connectivity-test.sh\n./connectivity-test.sh\n</code></pre>"},{"location":"AWS_deployment_guide/#step-73-deploy-test-application","title":"Step 7.3: Deploy Test Application","text":"<pre><code># Create a test application to verify the full pipeline\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: fawkes-test\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-fawkes\n  namespace: fawkes-test\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: hello-fawkes\n  template:\n    metadata:\n      labels:\n        app: hello-fawkes\n        app.kubernetes.io/name: hello-fawkes\n        app.kubernetes.io/part-of: fawkes\n    spec:\n      containers:\n      - name: hello\n        image: nginxdemos/hello:latest\n        ports:\n        - containerPort: 80\n        resources:\n          requests:\n            cpu: 100m\n            memory: 128Mi\n          limits:\n            cpu: 200m\n            memory: 256Mi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-fawkes\n  namespace: fawkes-test\nspec:\n  selector:\n    app: hello-fawkes\n  ports:\n  - port: 80\n    targetPort: 80\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: hello-fawkes\n  namespace: fawkes-test\n  annotations:\n    alb.ingress.kubernetes.io/scheme: internet-facing\n    alb.ingress.kubernetes.io/target-type: ip\nspec:\n  ingressClassName: alb\n  rules:\n  - host: hello.fawkes.yourdomain.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: hello-fawkes\n            port:\n              number: 80\nEOF\n\n# Wait for deployment\nkubectl wait --for=condition=available --timeout=300s \\\n  deployment/hello-fawkes -n fawkes-test\n\n# Get the ingress URL\nkubectl get ingress hello-fawkes -n fawkes-test\n\n# Test the application\nsleep 60  # Wait for ALB to register targets\ncurl http://hello.fawkes.yourdomain.com\n</code></pre>"},{"location":"AWS_deployment_guide/#step-74-verify-dora-metrics-collection","title":"Step 7.4: Verify DORA Metrics Collection","text":"<pre><code># Check if Prometheus is collecting metrics\nkubectl port-forward -n monitoring svc/prometheus-operated 9090:9090 &amp;\nPF_PID=$!\n\nsleep 5\n\n# Query deployment metrics\ncurl -s 'http://localhost:9090/api/v1/query?query=deployments_total' | jq\n\n# Query lead time metrics\ncurl -s 'http://localhost:9090/api/v1/query?query=lead_time_seconds_count' | jq\n\n# Query MTTR metrics\ncurl -s 'http://localhost:9090/api/v1/query?query=mttr_seconds' | jq\n\n# Stop port-forward\nkill $PF_PID\n</code></pre>"},{"location":"AWS_deployment_guide/#step-75-security-scan","title":"Step 7.5: Security Scan","text":"<pre><code># Run Trivy scan on all namespaces\nkubectl get vulnerabilityreports -A -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,CRITICAL:.report.summary.criticalCount,HIGH:.report.summary.highCount\n\n# Check Kyverno policy reports\nkubectl get policyreport -A\n\n# Test network policies\nkubectl run test-pod --image=busybox --rm -it --restart=Never -- /bin/sh\n# Inside the pod, try to access services\n# wget -O- http://jenkins.jenkins.svc.cluster.local:8080\n# Should succeed or fail based on network policies\n</code></pre> <p>Validation Checklist:</p> <ul> <li>[ ] All nodes are in Ready state</li> <li>[ ] All pods are Running (no CrashLoopBackOff)</li> <li>[ ] RDS database is available</li> <li>[ ] All ingresses have ALB addresses</li> <li>[ ] All services respond to HTTP requests (200, 302, or 401)</li> <li>[ ] Test application deployed successfully</li> <li>[ ] Prometheus collecting metrics</li> <li>[ ] No critical vulnerabilities in running containers</li> <li>[ ] Network policies enforced</li> <li>[ ] RBAC working correctly</li> </ul>"},{"location":"AWS_deployment_guide/#post-deployment-operations","title":"Post-Deployment Operations","text":""},{"location":"AWS_deployment_guide/#dns-configuration","title":"DNS Configuration","text":"<p>If you're using Route53 or external DNS:</p> <pre><code># Get all ALB DNS names\nkubectl get ingress -A -o jsonpath='{range .items[*]}{.spec.rules[0].host}{\"\\t\"}{.status.loadBalancer.ingress[0].hostname}{\"\\n\"}{end}'\n\n# Create Route53 records (if using Route53)\n# For each service, create a CNAME record pointing to the ALB DNS name\n\n# Example for ArgoCD:\naws route53 change-resource-record-sets \\\n  --hosted-zone-id YOUR_HOSTED_ZONE_ID \\\n  --change-batch '{\n    \"Changes\": [\n      {\n        \"Action\": \"CREATE\",\n        \"ResourceRecordSet\": {\n          \"Name\": \"argocd.fawkes.yourdomain.com\",\n          \"Type\": \"CNAME\",\n          \"TTL\": 300,\n          \"ResourceRecords\": [\n            {\n              \"Value\": \"k8s-argocd-abc123-1234567890.us-east-1.elb.amazonaws.com\"\n            }\n          ]\n        }\n      }\n    ]\n  }'\n\n# Repeat for all services\n</code></pre>"},{"location":"AWS_deployment_guide/#configure-backups","title":"Configure Backups","text":"<pre><code># Install Velero for cluster backups\nhelm repo add vmware-tanzu https://vmware-tanzu.github.io/helm-charts\nhelm repo update\n\n# Create S3 bucket for backups (if not already created)\naws s3 mb s3://fawkes-velero-backups-prod-YOUR-UNIQUE-ID --region us-east-1\n\n# Create IAM policy for Velero\ncat &gt; velero-policy.json &lt;&lt;EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeVolumes\",\n        \"ec2:DescribeSnapshots\",\n        \"ec2:CreateTags\",\n        \"ec2:CreateVolume\",\n        \"ec2:CreateSnapshot\",\n        \"ec2:DeleteSnapshot\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:DeleteObject\",\n        \"s3:PutObject\",\n        \"s3:AbortMultipartUpload\",\n        \"s3:ListMultipartUploadParts\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::fawkes-velero-backups-prod-YOUR-UNIQUE-ID/*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::fawkes-velero-backups-prod-YOUR-UNIQUE-ID\"\n      ]\n    }\n  ]\n}\nEOF\n\naws iam create-policy \\\n  --policy-name FawkesVeleroPolicy \\\n  --policy-document file://velero-policy.json\n\n# Install Velero\nhelm install velero vmware-tanzu/velero \\\n  --namespace velero \\\n  --create-namespace \\\n  --set-file credentials.secretContents.cloud=&lt;(echo \"[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\") \\\n  --set configuration.provider=aws \\\n  --set configuration.backupStorageLocation.bucket=fawkes-velero-backups-prod-YOUR-UNIQUE-ID \\\n  --set configuration.backupStorageLocation.config.region=us-east-1 \\\n  --set configuration.volumeSnapshotLocation.config.region=us-east-1 \\\n  --set initContainers[0].name=velero-plugin-for-aws \\\n  --set initContainers[0].image=velero/velero-plugin-for-aws:v1.8.0 \\\n  --set initContainers[0].volumeMounts[0].mountPath=/target \\\n  --set initContainers[0].volumeMounts[0].name=plugins\n\n# Create daily backup schedule\nvelero schedule create daily-backup \\\n  --schedule=\"0 2 * * *\" \\\n  --ttl 720h0m0s\n\n# Test backup\nvelero backup create test-backup --wait\nvelero backup describe test-backup\n</code></pre>"},{"location":"AWS_deployment_guide/#configure-monitoring-and-alerting","title":"Configure Monitoring and Alerting","text":"<pre><code># Create AlertManager configuration\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: alertmanager-config\n  namespace: monitoring\ndata:\n  alertmanager.yml: |\n    global:\n      resolve_timeout: 5m\n\n    route:\n      group_by: ['alertname', 'cluster', 'service']\n      group_wait: 10s\n      group_interval: 10s\n      repeat_interval: 12h\n      receiver: 'fawkes-team'\n\n    receivers:\n    - name: 'fawkes-team'\n      email_configs:\n      - to: 'alerts@yourdomain.com'\n        from: 'fawkes-alerts@yourdomain.com'\n        smarthost: 'smtp.gmail.com:587'\n        auth_username: 'fawkes-alerts@yourdomain.com'\n        auth_password: 'YOUR_SMTP_PASSWORD'\n        headers:\n          Subject: '{{ template \"email.default.subject\" . }}'\n      slack_configs:\n      - api_url: 'YOUR_SLACK_WEBHOOK_URL'\n        channel: '#fawkes-alerts'\n        title: '{{ template \"slack.default.title\" . }}'\n        text: '{{ template \"slack.default.text\" . }}'\nEOF\n\n# Restart AlertManager to pick up new config\nkubectl rollout restart statefulset/alertmanager-prometheus-kube-prometheus-alertmanager -n monitoring\n</code></pre>"},{"location":"AWS_deployment_guide/#set-up-cost-monitoring","title":"Set Up Cost Monitoring","text":"<pre><code># Tag all resources for cost allocation\nCLUSTER_NAME=\"fawkes-production\"\n\n# Tag EKS cluster\naws eks tag-resource \\\n  --resource-arn $(aws eks describe-cluster --name $CLUSTER_NAME --query 'cluster.arn' --output text) \\\n  --tags Environment=production,Project=fawkes,CostCenter=engineering\n\n# Tag RDS instance\naws rds add-tags-to-resource \\\n  --resource-name $(aws rds describe-db-instances --db-instance-identifier fawkes-production-db --query 'DBInstances[0].DBInstanceArn' --output text) \\\n  --tags Key=Environment,Value=production Key=Project,Value=fawkes Key=CostCenter,Value=engineering\n\n# Tag S3 buckets\nfor bucket in fawkes-artifacts-prod-YOUR-UNIQUE-ID fawkes-backups-prod-YOUR-UNIQUE-ID fawkes-logs-prod-YOUR-UNIQUE-ID; do\n  aws s3api put-bucket-tagging \\\n    --bucket $bucket \\\n    --tagging 'TagSet=[{Key=Environment,Value=production},{Key=Project,Value=fawkes},{Key=CostCenter,Value=engineering}]'\ndone\n\n# Set up AWS Cost Explorer filters\necho \"Configure Cost Explorer to filter by tags: Project=fawkes\"\n</code></pre>"},{"location":"AWS_deployment_guide/#documentation","title":"Documentation","text":"<pre><code># Create deployment documentation\ncat &gt; DEPLOYMENT_RECORD.md &lt;&lt;EOF\n# Fawkes Production Deployment Record\n\n**Deployment Date**: $(date)\n**Deployed By**: $(whoami)\n**AWS Region**: us-east-1\n\n## Infrastructure Details\n\n### EKS Cluster\n- **Name**: fawkes-production\n- **Version**: 1.28\n- **Nodes**: 6 x t3.xlarge\n- **VPC ID**: $VPC_ID\n\n### RDS Database\n- **Identifier**: fawkes-production-db\n- **Instance Class**: db.m5.large\n- **Engine**: PostgreSQL 15.4\n- **Multi-AZ**: Yes\n- **Endpoint**: $RDS_ENDPOINT\n\n### S3 Buckets\n- Artifacts: fawkes-artifacts-prod-YOUR-UNIQUE-ID\n- Backups: fawkes-backups-prod-YOUR-UNIQUE-ID\n- Logs: fawkes-logs-prod-YOUR-UNIQUE-ID\n\n### Service Endpoints\n$(kubectl get ingress -A -o custom-columns=SERVICE:.metadata.name,URL:.spec.rules[0].host --no-headers)\n\n## Access Credentials\n\n**Stored in AWS Secrets Manager**:\n- fawkes/production/db-password\n- fawkes/production/argocd-password\n- fawkes/production/jenkins-password\n- fawkes/production/db-endpoint\n\n## Component Versions\n\n**Platform Services**:\n- ArgoCD: 5.51.0\n- Harbor: 1.13.0\n- Jenkins: 4.6.0\n- Backstage: latest\n- Mattermost: latest\n- Focalboard: latest\n\n**Observability**:\n- Prometheus Stack: 51.0.0\n- Grafana: (included in Prometheus stack)\n\n**Security**:\n- Trivy Operator: latest\n- Kyverno: latest\n\n## Next Steps\n\n1. Configure DNS records for all services\n2. Set up monitoring alerts\n3. Configure backup retention policies\n4. Onboard first users\n5. Deploy first application\n\n## Maintenance Windows\n\n- **Preferred Maintenance**: Sundays 04:00-05:00 UTC\n- **Backup Windows**: Daily 03:00-04:00 UTC\n\n## Support Contacts\n\n- Platform Team: platform-team@yourdomain.com\n- AWS Support: [Your AWS Support Plan]\n- On-Call: [PagerDuty/On-Call System]\n\nEOF\n\ncat DEPLOYMENT_RECORD.md\n</code></pre>"},{"location":"AWS_deployment_guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"AWS_deployment_guide/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"AWS_deployment_guide/#issue-pods-stuck-in-pending-state","title":"Issue: Pods stuck in Pending state","text":"<p>Symptoms: <pre><code>kubectl get pods -A | grep Pending\n</code></pre></p> <p>Diagnosis: <pre><code># Check pod events\nkubectl describe pod &lt;pod-name&gt; -n &lt;namespace&gt;\n\n# Common causes:\n# 1. Insufficient resources\nkubectl describe nodes | grep -A 5 \"Allocated resources\"\n\n# 2. PVC not bound\nkubectl get pvc -A | grep Pending\n\n# 3. Node selector/affinity issues\nkubectl get pod &lt;pod-name&gt; -n &lt;namespace&gt; -o yaml | grep -A 10 nodeSelector\n</code></pre></p> <p>Solutions: <pre><code># Scale up nodes if resource constrained\neksctl scale nodegroup --cluster=fawkes-production --nodes=9 --name=fawkes-ng-general\n\n# Check storage class\nkubectl get storageclass\n\n# Fix PVC issues\nkubectl describe pvc &lt;pvc-name&gt; -n &lt;namespace&gt;\n</code></pre></p>"},{"location":"AWS_deployment_guide/#issue-cannot-access-services-via-ingress","title":"Issue: Cannot access services via ingress","text":"<p>Symptoms: <pre><code>curl https://argocd.fawkes.yourdomain.com\n# Returns timeout or connection refused\n</code></pre></p> <p>Diagnosis: <pre><code># Check ingress status\nkubectl get ingress -A\nkubectl describe ingress &lt;ingress-name&gt; -n &lt;namespace&gt;\n\n# Check ALB controller logs\nkubectl logs -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller\n\n# Check target groups in AWS console\naws elbv2 describe-target-groups --region us-east-1\n\n# Check security groups\naws ec2 describe-security-groups --group-ids &lt;sg-id&gt;\n</code></pre></p> <p>Solutions: <pre><code># Restart ALB controller\nkubectl rollout restart deployment/aws-load-balancer-controller -n kube-system\n\n# Check certificate ARN is correct\nkubectl get ingress &lt;ingress-name&gt; -n &lt;namespace&gt; -o yaml | grep certificate-arn\n\n# Verify DNS resolution\nnslookup argocd.fawkes.yourdomain.com\n</code></pre></p>"},{"location":"AWS_deployment_guide/#issue-database-connection-failures","title":"Issue: Database connection failures","text":"<p>Symptoms: <pre><code># Pods crashlooping with database errors\nkubectl logs &lt;pod-name&gt; -n &lt;namespace&gt; | grep -i \"database\\|postgres\"\n</code></pre></p> <p>Diagnosis: <pre><code># Check RDS status\naws rds describe-db-instances --db-instance-identifier fawkes-production-db\n\n# Test connectivity from cluster\nkubectl run postgres-test --rm -i --tty \\\n  --image postgres:15 \\\n  --restart=Never \\\n  --env=\"PGPASSWORD=$DB_PASSWORD\" \\\n  -- psql -h $RDS_ENDPOINT -U fawkesadmin -d postgres -c \"SELECT 1\"\n\n# Check security group rules\naws ec2 describe-security-groups --group-ids &lt;rds-sg-id&gt;\n</code></pre></p> <p>Solutions: <pre><code># Verify security group allows traffic from EKS nodes\nEKS_NODE_SG=$(aws eks describe-cluster --name fawkes-production --query \"cluster.resourcesVpcConfig.clusterSecurityGroupId\" --output text)\n\naws ec2 authorize-security-group-ingress \\\n  --group-id $RDS_SG_ID \\\n  --protocol tcp \\\n  --port 5432 \\\n  --source-group $EKS_NODE_SG\n\n# Check secrets are correct\nkubectl get secret postgres-credentials -n fawkes-system -o yaml\n</code></pre></p>"},{"location":"AWS_deployment_guide/#issue-high-aws-costs","title":"Issue: High AWS costs","text":"<p>Diagnosis: <pre><code># Check current month's costs\naws ce get-cost-and-usage \\\n  --time-period Start=$(date -d \"$(date +%Y-%m-01)\" +%Y-%m-%d),End=$(date +%Y-%m-%d) \\\n  --granularity MONTHLY \\\n  --metrics UnblendedCost \\\n  --group-by Type=SERVICE\n\n# Identify expensive resources\nkubectl top nodes\nkubectl top pods -A\n</code></pre></p> <p>Solutions: <pre><code># Right-size nodes\neksctl scale nodegroup --cluster=fawkes-production --nodes=3 --name=fawkes-ng-general\n\n# Delete unused EBS volumes\naws ec2 describe-volumes --filters Name=status,Values=available --query 'Volumes[*].[VolumeId,Size,CreateTime]' --output table\n\n# Configure auto-scaling\n# (Already configured in Step 2.5)\n\n# Use Spot instances for dev/staging\n# Edit nodegroup configuration to use Spot\n\n# Set up AWS Budgets alerts\naws budgets create-budget \\\n  --account-id $(aws sts get-caller-identity --query Account --output text) \\\n  --budget file://budget-alert.json\n</code></pre></p>"},{"location":"AWS_deployment_guide/#issue-certificate-validation-pending","title":"Issue: Certificate validation pending","text":"<p>Symptoms: <pre><code>aws acm describe-certificate --certificate-arn &lt;cert-arn&gt; | grep Status\n# Returns: PENDING_VALIDATION\n</code></pre></p> <p>Solutions: <pre><code># Get validation records\naws acm describe-certificate --certificate-arn &lt;cert-arn&gt; --query 'Certificate.DomainValidationOptions[0].ResourceRecord'\n\n# Add DNS record for validation\n# In Route53 or your DNS provider, create a CNAME record with the values returned above\n\n# Wait for validation (can take 5-30 minutes)\naws acm wait certificate-validated --certificate-arn &lt;cert-arn&gt;\n</code></pre></p>"},{"location":"AWS_deployment_guide/#cost-optimization","title":"Cost Optimization","text":""},{"location":"AWS_deployment_guide/#immediate-optimizations-week-1","title":"Immediate Optimizations (Week 1)","text":"<pre><code># 1. Right-size EKS nodes based on actual usage\nkubectl top nodes\nkubectl top pods -A --sort-by=memory\n\n# If utilization &lt; 50%, scale down\neksctl scale nodegroup --cluster=fawkes-production --nodes=4 --name=fawkes-ng-general\n\n# 2. Delete unused EBS volumes\naws ec2 describe-volumes --filters Name=status,Values=available \\\n  --query 'Volumes[*].[VolumeId,Size,CreateTime]' --output table\n\n# Delete them\naws ec2 delete-volume --volume-id vol-xxxxxxxxx\n\n# 3. Configure S3 lifecycle policies\naws s3api put-bucket-lifecycle-configuration \\\n  --bucket fawkes-logs-prod-YOUR-UNIQUE-ID \\\n  --lifecycle-configuration file://s3-lifecycle.json\n\n# s3-lifecycle.json content:\ncat &gt; s3-lifecycle.json &lt;&lt;EOF\n{\n  \"Rules\": [\n    {\n      \"Id\": \"ArchiveOldLogs\",\n      \"Status\": \"Enabled\",\n      \"Transitions\": [\n        {\n          \"Days\": 30,\n          \"StorageClass\": \"STANDARD_IA\"\n        },\n        {\n          \"Days\": 90,\n          \"StorageClass\": \"GLACIER\"\n        }\n      ],\n      \"Expiration\": {\n        \"Days\": 365\n      }\n    }\n  ]\n}\nEOF\n</code></pre>"},{"location":"AWS_deployment_guide/#long-term-optimizations-month-2-3","title":"Long-term Optimizations (Month 2-3)","text":"<pre><code># 1. Purchase Reserved Instances (40% savings)\n# After validating instance types and sizes, purchase 1-year RIs\naws ec2 describe-reserved-instances-offerings \\\n  --instance-type t3.xlarge \\\n  --offering-class standard \\\n  --product-description Linux/UNIX\n\n# 2. Use Savings Plans for RDS\naws rds purchase-reserved-db-instances-offering \\\n  --reserved-db-instances-offering-id &lt;offering-id&gt; \\\n  --reserved-db-instance-id fawkes-production-db-reserved\n\n# 3. Implement cluster autoscaling policies\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cluster-autoscaler-priority-expander\n  namespace: kube-system\ndata:\n  priorities: |-\n    10:\n      - .*-spot-.*\n    50:\n      - .*-on-demand-.*\nEOF\n\n# 4. Use Spot instances for non-critical workloads\n# Create a mixed instance nodegroup\neksctl create nodegroup \\\n  --cluster=fawkes-production \\\n  --name=fawkes-ng-spot \\\n  --node-type=t3.xlarge \\\n  --nodes=3 \\\n  --nodes-min=1 \\\n  --nodes-max=10 \\\n  --spot\n\n# 5. Enable AWS Compute Optimizer\naws compute-optimizer update-enrollment-status \\\n  --status Active \\\n  --include-member-accounts\n</code></pre>"},{"location":"AWS_deployment_guide/#monitoring-costs","title":"Monitoring Costs","text":"<pre><code># Create cost monitoring dashboard\ncat &gt; cost-monitoring.sh &lt;&lt;'EOF'\n#!/bin/bash\n\necho \"===== Fawkes AWS Cost Report =====\"\necho \"Report Date: $(date)\"\necho \"\"\n\n# Current month costs\necho \"Current Month Costs:\"\naws ce get-cost-and-usage \\\n  --time-period Start=$(date -d \"$(date +%Y-%m-01)\" +%Y-%m-%d),End=$(date +%Y-%m-%d) \\\n  --granularity MONTHLY \\\n  --metrics UnblendedCost \\\n  --group-by Type=SERVICE \\\n  --filter file://&lt;(echo '{\n    \"Tags\": {\n      \"Key\": \"Project\",\n      \"Values\": [\"fawkes\"]\n    }\n  }') \\\n  --output table\n\necho \"\"\necho \"Top 10 Most Expensive Resources:\"\naws ce get-cost-and-usage \\\n  --time-period Start=$(date -d \"$(date +%Y-%m-01)\" +%Y-%m-%d),End=$(date +%Y-%m-%d) \\\n  --granularity MONTHLY \\\n  --metrics UnblendedCost \\\n  --group-by Type=DIMENSION,Key=RESOURCE_ID \\\n  --filter file://&lt;(echo '{\n    \"Tags\": {\n      \"Key\": \"Project\",\n      \"Values\": [\"fawkes\"]\n    }\n  }') \\\n  --query 'ResultsByTime[0].Groups | sort_by(@, &amp;Metrics.UnblendedCost.Amount) | reverse(@) | [0:10]' \\\n  --output table\n\necho \"\"\necho \"Projected Month-End Cost:\"\naws ce get-cost-forecast \\\n  --time-period Start=$(date +%Y-%m-%d),End=$(date -d \"$(date +%Y-%m-01) +1 month -1 day\" +%Y-%m-%d) \\\n  --metric UNBLENDED_COST \\\n  --granularity MONTHLY \\\n  --output table\n\necho \"\"\necho \"=====================================\"\nEOF\n\nchmod +x cost-monitoring.sh\n./cost-monitoring.sh\n</code></pre>"},{"location":"AWS_deployment_guide/#appendix-a-complete-deployment-checklist","title":"Appendix A: Complete Deployment Checklist","text":""},{"location":"AWS_deployment_guide/#pre-deployment","title":"Pre-Deployment","text":"<ul> <li>[ ] AWS account with appropriate permissions</li> <li>[ ] All required tools installed (AWS CLI, kubectl, terraform, helm, eksctl)</li> <li>[ ] Domain name registered (optional but recommended)</li> <li>[ ] Budget alerts configured</li> <li>[ ] Team notified of deployment window</li> <li>[ ] Passwords generated and stored securely</li> <li>[ ] S3 bucket names chosen (globally unique)</li> </ul>"},{"location":"AWS_deployment_guide/#phase-1-foundation-30-min","title":"Phase 1: Foundation (30 min)","text":"<ul> <li>[ ] Terraform initialized</li> <li>[ ] VPC and networking deployed</li> <li>[ ] NAT Gateways provisioned</li> <li>[ ] S3 buckets created with encryption</li> <li>[ ] Secrets stored in AWS Secrets Manager</li> <li>[ ] SSL certificate requested (if using custom domain)</li> <li>[ ] Validation: VPC, subnets, NAT gateways, S3 buckets exist</li> </ul>"},{"location":"AWS_deployment_guide/#phase-2-eks-cluster-30-min","title":"Phase 2: EKS Cluster (30 min)","text":"<ul> <li>[ ] EKS cluster created</li> <li>[ ] Worker nodes launched across 3 AZs</li> <li>[ ] kubectl configured</li> <li>[ ] AWS Load Balancer Controller installed</li> <li>[ ] External Secrets Operator installed</li> <li>[ ] Cluster Autoscaler configured</li> <li>[ ] Validation: All nodes Ready, system pods running</li> </ul>"},{"location":"AWS_deployment_guide/#phase-3-database-storage-20-min","title":"Phase 3: Database &amp; Storage (20 min)","text":"<ul> <li>[ ] RDS PostgreSQL instance created (Multi-AZ)</li> <li>[ ] Security groups configured</li> <li>[ ] Database connectivity verified</li> <li>[ ] Databases initialized for each component</li> <li>[ ] Storage classes configured</li> <li>[ ] Validation: RDS available, connectivity tested</li> </ul>"},{"location":"AWS_deployment_guide/#phase-4-platform-services-60-min","title":"Phase 4: Platform Services (60 min)","text":"<ul> <li>[ ] Namespaces created</li> <li>[ ] ArgoCD deployed and accessible</li> <li>[ ] Harbor deployed and accessible</li> <li>[ ] Jenkins deployed and accessible</li> <li>[ ] Backstage deployed and accessible</li> <li>[ ] Mattermost deployed and accessible</li> <li>[ ] Focalboard deployed and accessible</li> <li>[ ] Validation: All services responding, ingresses have ALB addresses</li> </ul>"},{"location":"AWS_deployment_guide/#phase-5-observability-30-min","title":"Phase 5: Observability (30 min)","text":"<ul> <li>[ ] Prometheus stack deployed</li> <li>[ ] Grafana accessible with dashboards</li> <li>[ ] DORA metrics exporter deployed</li> <li>[ ] Alerting configured</li> <li>[ ] Validation: Prometheus scraping, Grafana dashboards visible</li> </ul>"},{"location":"AWS_deployment_guide/#phase-6-security-20-min","title":"Phase 6: Security (20 min)","text":"<ul> <li>[ ] Trivy Operator deployed</li> <li>[ ] Kyverno policies deployed</li> <li>[ ] Network policies configured</li> <li>[ ] Pod Security Standards applied</li> <li>[ ] RBAC roles created</li> <li>[ ] Validation: Vulnerability scans running, policies enforced</li> </ul>"},{"location":"AWS_deployment_guide/#phase-7-validation-30-min","title":"Phase 7: Validation (30 min)","text":"<ul> <li>[ ] Health check script run successfully</li> <li>[ ] Connectivity tests pass</li> <li>[ ] Test application deployed</li> <li>[ ] DORA metrics collecting</li> <li>[ ] Security scan completed</li> <li>[ ] Validation: All green checks</li> </ul>"},{"location":"AWS_deployment_guide/#post-deployment","title":"Post-Deployment","text":"<ul> <li>[ ] DNS records configured</li> <li>[ ] Backups configured (Velero)</li> <li>[ ] Monitoring and alerting verified</li> <li>[ ] Cost tracking enabled</li> <li>[ ] Documentation completed</li> <li>[ ] Team access granted</li> <li>[ ] First application deployed</li> <li>[ ] Runbook created</li> </ul>"},{"location":"AWS_deployment_guide/#appendix-b-useful-commands-reference","title":"Appendix B: Useful Commands Reference","text":""},{"location":"AWS_deployment_guide/#cluster-management","title":"Cluster Management","text":"<pre><code># Get cluster info\nkubectl cluster-info\neksctl get cluster --name fawkes-production\n\n# Get all resources\nkubectl get all -A\n\n# Scale nodegroup\neksctl scale nodegroup --cluster=fawkes-production --nodes=6 --name=fawkes-ng-general\n\n# Update kubeconfig\naws eks update-kubeconfig --region us-east-1 --name fawkes-production\n\n# Drain node for maintenance\nkubectl drain &lt;node-name&gt; --ignore-daemonsets --delete-emptydir-data\n\n# Uncordon node after maintenance\nkubectl uncordon &lt;node-name&gt;\n</code></pre>"},{"location":"AWS_deployment_guide/#debugging","title":"Debugging","text":"<pre><code># View pod logs\nkubectl logs &lt;pod-name&gt; -n &lt;namespace&gt;\nkubectl logs &lt;pod-name&gt; -n &lt;namespace&gt; --previous  # Previous container\n\n# Follow logs\nkubectl logs -f &lt;pod-name&gt; -n &lt;namespace&gt;\n\n# Exec into pod\nkubectl exec -it &lt;pod-name&gt; -n &lt;namespace&gt; -- /bin/bash\n\n# Port forward\nkubectl port-forward -n &lt;namespace&gt; svc/&lt;service-name&gt; 8080:80\n\n# Describe resources\nkubectl describe pod &lt;pod-name&gt; -n &lt;namespace&gt;\nkubectl describe node &lt;node-name&gt;\n\n# Get events\nkubectl get events -n &lt;namespace&gt; --sort-by='.lastTimestamp'\n\n# Check resource usage\nkubectl top nodes\nkubectl top pods -A\n</code></pre>"},{"location":"AWS_deployment_guide/#backup-and-restore","title":"Backup and Restore","text":"<pre><code># Create backup\nvelero backup create &lt;backup-name&gt; --include-namespaces &lt;namespace&gt;\n\n# List backups\nvelero backup get\n\n# Restore from backup\nvelero restore create --from-backup &lt;backup-name&gt;\n\n# Backup specific resource\nvelero backup create &lt;backup-name&gt; --include-resources deployments,services\n\n# Schedule regular backups\nvelero schedule create daily --schedule=\"0 2 * * *\" --ttl 720h\n</code></pre>"},{"location":"AWS_deployment_guide/#certificate-management","title":"Certificate Management","text":"<pre><code># List certificates\naws acm list-certificates --region us-east-1\n\n# Describe certificate\naws acm describe-certificate --certificate-arn &lt;arn&gt;\n\n# Request new certificate\naws acm request-certificate \\\n  --domain-name fawkes.yourdomain.com \\\n  --validation-method DNS \\\n  --region us-east-1\n\n# Delete certificate\naws acm delete-certificate --certificate-arn &lt;arn&gt;\n</code></pre>"},{"location":"AWS_deployment_guide/#database-operations","title":"Database Operations","text":"<pre><code># Connect to RDS\nkubectl run postgres-client --rm -i --tty \\\n  --image postgres:15 \\\n  --restart=Never \\\n  --env=\"PGPASSWORD=$DB_PASSWORD\" \\\n  -- psql -h $RDS_ENDPOINT -U fawkesadmin -d postgres\n\n# Create database dump\nkubectl run postgres-backup --rm -i --tty \\\n  --image postgres:15 \\\n  --restart=Never \\\n  --env=\"PGPASSWORD=$DB_PASSWORD\" \\\n  -- pg_dump -h $RDS_ENDPOINT -U fawkesadmin -d backstage &gt; backstage-backup.sql\n\n# Restore database\nkubectl run postgres-restore --rm -i --tty \\\n  --image postgres:15 \\\n  --restart=Never \\\n  --env=\"PGPASSWORD=$DB_PASSWORD\" \\\n  -- psql -h $RDS_ENDPOINT -U fawkesadmin -d backstage &lt; backstage-backup.sql\n</code></pre>"},{"location":"AWS_deployment_guide/#secrets-management_1","title":"Secrets Management","text":"<pre><code># Create secret from AWS Secrets Manager\nkubectl create secret generic my-secret \\\n  --from-literal=password=$(aws secretsmanager get-secret-value \\\n    --secret-id fawkes/production/db-password \\\n    --query SecretString \\\n    --output text)\n\n# View secret (base64 decoded)\nkubectl get secret &lt;secret-name&gt; -n &lt;namespace&gt; -o jsonpath='{.data.password}' | base64 -d\n\n# Update secret\nkubectl create secret generic &lt;secret-name&gt; \\\n  --from-literal=key=value \\\n  --dry-run=client -o yaml | kubectl apply -f -\n</code></pre>"},{"location":"AWS_deployment_guide/#appendix-c-disaster-recovery-procedures","title":"Appendix C: Disaster Recovery Procedures","text":""},{"location":"AWS_deployment_guide/#rds-failure","title":"RDS Failure","text":"<p>Detection: <pre><code>aws rds describe-db-instances \\\n  --db-instance-identifier fawkes-production-db \\\n  --query 'DBInstances[0].DBInstanceStatus'\n</code></pre></p> <p>Recovery (Multi-AZ automatic failover): <pre><code># Force failover to standby\naws rds reboot-db-instance \\\n  --db-instance-identifier fawkes-production-db \\\n  --force-failover\n\n# Wait for availability\naws rds wait db-instance-available \\\n  --db-instance-identifier fawkes-production-db\n\n# Verify new endpoint (should be same)\naws rds describe-db-instances \\\n  --db-instance-identifier fawkes-production-db \\\n  --query 'DBInstances[0].Endpoint.Address'\n</code></pre></p> <p>Recovery (Complete failure - restore from snapshot): <pre><code># List recent snapshots\naws rds describe-db-snapshots \\\n  --db-instance-identifier fawkes-production-db \\\n  --query 'DBSnapshots[*].[DBSnapshotIdentifier,SnapshotCreateTime]' \\\n  --output table\n\n# Restore from snapshot\naws rds restore-db-instance-from-db-snapshot \\\n  --db-instance-identifier fawkes-production-db-restored \\\n  --db-snapshot-identifier &lt;snapshot-id&gt; \\\n  --db-subnet-group-name fawkes-production-db-subnet \\\n  --multi-az\n\n# Update connection strings in Kubernetes secrets\nNEW_ENDPOINT=$(aws rds describe-db-instances \\\n  --db-instance-identifier fawkes-production-db-restored \\\n  --query 'DBInstances[0].Endpoint.Address' \\\n  --output text)\n\nkubectl create secret generic postgres-credentials \\\n  --from-literal=host=$NEW_ENDPOINT \\\n  --from-literal=port=5432 \\\n  --from-literal=database=postgres \\\n  --from-literal=username=fawkesadmin \\\n  --from-literal=password=$DB_PASSWORD \\\n  -n fawkes-system \\\n  --dry-run=client -o yaml | kubectl apply -f -\n\n# Restart all pods using database\nkubectl rollout restart deployment -n backstage\nkubectl rollout restart deployment -n jenkins\nkubectl rollout restart deployment -n argocd\nkubectl rollout restart deployment -n harbor\nkubectl rollout restart deployment -n mattermost\nkubectl rollout restart deployment -n focalboard\n</code></pre></p>"},{"location":"AWS_deployment_guide/#eks-cluster-failure","title":"EKS Cluster Failure","text":"<p>Detection: <pre><code>kubectl get nodes\n# No response or all nodes NotReady\n</code></pre></p> <p>Recovery: <pre><code># Check cluster status\naws eks describe-cluster --name fawkes-production --query 'cluster.status'\n\n# If cluster API is down, recreate from Terraform\ncd infra/terraform/aws\nterraform plan -var-file=production.tfvars\nterraform apply\n\n# Restore from Velero backup\nvelero restore create --from-backup daily-backup-20251007\n</code></pre></p>"},{"location":"AWS_deployment_guide/#complete-region-failure","title":"Complete Region Failure","text":"<p>Prerequisites: - Multi-region setup (not covered in this guide) - Cross-region RDS replication - S3 cross-region replication</p> <p>Recovery: <pre><code># Promote RDS read replica in secondary region\naws rds promote-read-replica \\\n  --db-instance-identifier fawkes-production-db-replica \\\n  --region us-west-2\n\n# Deploy EKS cluster in secondary region\ncd infra/terraform/aws\nterraform apply -var-file=dr-production.tfvars -var=\"aws_region=us-west-2\"\n\n# Update DNS to point to new region\naws route53 change-resource-record-sets \\\n  --hosted-zone-id &lt;zone-id&gt; \\\n  --change-batch file://failover-dns.json\n</code></pre></p>"},{"location":"AWS_deployment_guide/#appendix-d-maintenance-procedures","title":"Appendix D: Maintenance Procedures","text":""},{"location":"AWS_deployment_guide/#monthly-maintenance-tasks","title":"Monthly Maintenance Tasks","text":"<pre><code># 1. Update EKS cluster version\neksctl upgrade cluster --name fawkes-production --version 1.29 --approve\n\n# 2. Update nodegroups\neksctl upgrade nodegroup --cluster=fawkes-production --name=fawkes-ng-general\n\n# 3. Update Helm charts\nhelm repo update\nhelm list -A\n\n# Update each chart\nhelm upgrade argocd argo/argo-cd -n argocd --version &lt;new-version&gt;\nhelm upgrade harbor harbor/harbor -n harbor --version &lt;new-version&gt;\n# ... etc\n\n# 4. Update add-ons\neksctl utils update-addon --cluster fawkes-production --name vpc-cni --version &lt;new-version&gt;\neksctl utils update-addon --cluster fawkes-production --name coredns --version &lt;new-version&gt;\neksctl utils update-addon --cluster fawkes-production --name kube-proxy --version &lt;new-version&gt;\neksctl utils update-addon --cluster fawkes-production --name aws-ebs-csi-driver --version &lt;new-version&gt;\n\n# 5. Clean up old resources\n# Delete old EBS snapshots\naws ec2 describe-snapshots --owner-ids self \\\n  --query 'Snapshots[?StartTime&lt;=`2024-07-01`].[SnapshotId,StartTime,Description]' \\\n  --output table\n\n# Delete them\naws ec2 delete-snapshot --snapshot-id snap-xxxxxxxxx\n\n# 6. Review and clean up unused PVCs\nkubectl get pvc -A | grep Released\nkubectl delete pvc &lt;pvc-name&gt; -n &lt;namespace&gt;\n\n# 7. Rotate secrets\n# Generate new password\nNEW_DB_PASSWORD=$(openssl rand -base64 32)\n\n# Update in RDS\naws rds modify-db-instance \\\n  --db-instance-identifier fawkes-production-db \\\n  --master-user-password $NEW_DB_PASSWORD \\\n  --apply-immediately\n\n# Update in Secrets Manager\naws secretsmanager update-secret \\\n  --secret-id fawkes/production/db-password \\\n  --secret-string $NEW_DB_PASSWORD\n\n# Update in Kubernetes\nkubectl create secret generic postgres-credentials \\\n  --from-literal=password=$NEW_DB_PASSWORD \\\n  --dry-run=client -o yaml | kubectl apply -f -\n\n# 8. Review security scan results\nkubectl get vulnerabilityreports -A | grep CRITICAL\n\n# 9. Review and update network policies\nkubectl get networkpolicies -A\n\n# 10. Cost optimization review\n./cost-monitoring.sh\n</code></pre>"},{"location":"AWS_deployment_guide/#quarterly-maintenance-tasks","title":"Quarterly Maintenance Tasks","text":"<pre><code># 1. Major version upgrades (EKS, RDS)\n# Follow AWS documentation for major version upgrades\n\n# 2. Review and update IAM policies\naws iam get-policy-version \\\n  --policy-arn arn:aws:iam::ACCOUNT_ID:policy/FawkesPolicy \\\n  --version-id v1\n\n# 3. Security audit\naws securityhub get-findings --region us-east-1\n\n# 4. Compliance check\naws config describe-compliance-by-config-rule\n\n# 5. Performance review\n# Review Grafana dashboards for trends\n# Analyze DORA metrics improvements\n\n# 6. Disaster recovery test\n# Perform complete failover test in DR environment\n\n# 7. Documentation review\n# Update runbooks, procedures, contact information\n</code></pre>"},{"location":"AWS_deployment_guide/#appendix-e-additional-resources","title":"Appendix E: Additional Resources","text":""},{"location":"AWS_deployment_guide/#official-documentation","title":"Official Documentation","text":"<ul> <li>Amazon EKS User Guide</li> <li>Amazon RDS User Guide</li> <li>AWS Load Balancer Controller</li> <li>Backstage Documentation</li> <li>ArgoCD Documentation</li> <li>Harbor Documentation</li> </ul>"},{"location":"AWS_deployment_guide/#best-practices-guides","title":"Best Practices Guides","text":"<ul> <li>EKS Best Practices Guide</li> <li>Kubernetes Production Best Practices</li> <li>AWS Well-Architected Framework</li> </ul>"},{"location":"AWS_deployment_guide/#training-and-certification","title":"Training and Certification","text":"<ul> <li>AWS Certified Solutions Architect</li> <li>Certified Kubernetes Administrator (CKA)</li> <li>Platform Engineering University</li> </ul>"},{"location":"AWS_deployment_guide/#community-and-support","title":"Community and Support","text":"<ul> <li>Fawkes GitHub Discussions</li> <li>Fawkes Mattermost (after deployment)</li> <li>AWS Support</li> <li>CNCF Slack</li> </ul>"},{"location":"AWS_deployment_guide/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully deployed the Fawkes platform on AWS in production. </p> <p>What you've accomplished: - \u2705 Deployed a complete Internal Delivery Platform on AWS - \u2705 Set up high-availability infrastructure across 3 availability zones - \u2705 Implemented security best practices (encryption, network policies, RBAC) - \u2705 Configured comprehensive observability and monitoring - \u2705 Established automated backups and disaster recovery procedures - \u2705 Created maintainable, documented infrastructure</p> <p>Next steps: 1. Onboard your first team: Create their first project using Backstage 2. Deploy first application: Use the golden path templates 3. Configure CI/CD: Set up Jenkins pipelines for automated builds 4. Launch Dojo: Begin training engineers on the platform 5. Iterate and improve: Collect feedback and enhance the platform</p> <p>Remember: - Monitor costs daily for the first week - Review security scans weekly - Perform monthly maintenance tasks - Test disaster recovery procedures quarterly - Keep documentation up to date</p> <p>Need help? - Check troubleshooting section first - Search GitHub Issues: https://github.com/paruff/fawkes/issues - Join the community on Mattermost - Review AWS documentation - Contact platform team: platform-team@yourdomain.com</p> <p>Thank you for choosing Fawkes! \ud83d\ude80</p> <p>Document Version: 1.0 Last Updated: October 7, 2025 Maintained By: Fawkes Platform Team Feedback: Please submit issues or improvements to the GitHub repository</p> <p>Estimated Total Time: 3-4 hours Estimated Monthly Cost: $2,084 (production environment) AWS Services Used: 10+ (EKS, RDS, S3, ALB, CloudWatch, Secrets Manager, ACM, IAM, VPC, ECR)</p>"},{"location":"CHARTER/","title":"Fawkes Project Charter","text":""},{"location":"CHARTER/#project-name","title":"Project Name","text":"<p>Fawkes - An Open Source Internal Delivery Platform</p>"},{"location":"CHARTER/#vision","title":"Vision","text":"<p>To become the leading open-source Internal Delivery Platform that empowers organizations to achieve elite DORA performance while fostering a culture of continuous learning and improvement in platform engineering.</p>"},{"location":"CHARTER/#mission","title":"Mission","text":"<p>Provide a production-ready, comprehensive Internal Delivery Platform that: - Enables rapid, secure software delivery through automation and best practices - Makes DORA metrics a first-class citizen with automated collection and visualization - Integrates learning and skill development through a dojo-style curriculum - Supports multi-cloud infrastructure with GitOps and Infrastructure as Code - Prioritizes security through DevSecOps practices and zero-trust principles - Creates an exceptional developer experience that reduces cognitive load</p>"},{"location":"CHARTER/#problem-statement","title":"Problem Statement","text":"<p>Organizations struggle to build effective Internal Developer Platforms due to:</p> <ol> <li>Complexity: Platform engineering requires expertise across dozens of tools and practices</li> <li>Integration Challenges: Stitching together CI/CD, observability, security, and deployment tools is time-consuming</li> <li>Metrics Blind Spots: Teams lack visibility into DORA metrics and platform effectiveness</li> <li>Skills Gap: Platform engineering skills are scarce; teams need learning resources integrated with tools</li> <li>Reinventing the Wheel: Every organization builds similar platforms, duplicating effort</li> <li>Vendor Lock-in: Commercial platforms create dependencies and limit customization</li> </ol>"},{"location":"CHARTER/#solution","title":"Solution","text":"<p>Fawkes provides an opinionated, integrated platform that includes:</p> <p>Core Platform Capabilities: - Kubernetes-based infrastructure provisioning (AWS, Azure, GCP) - GitOps workflows for declarative infrastructure and application management - CI/CD pipelines with golden path templates - Automated security scanning and compliance checks - Comprehensive observability stack (metrics, logs, traces) - Developer portal (Backstage) for self-service and discovery - Deployment strategies (blue-green, canary, progressive delivery)</p> <p>Differentiators: - DORA Metrics Automation: Automated collection and visualization of all four key metrics - Dojo Learning Curriculum: Integrated learning paths aligned with platform capabilities - Certification Integration: Aligned with Platform Engineering University certifications - Open Source &amp; Extensible: No vendor lock-in, community-driven development - Security-First: Comprehensive scanning, policy-as-code, zero-trust roadmap - Multi-Cloud Native: Designed for multi-cloud from the start</p>"},{"location":"CHARTER/#target-audience","title":"Target Audience","text":""},{"location":"CHARTER/#primary-users","title":"Primary Users","text":"<ul> <li>Platform Engineering Teams (5-50 people) in mid to large enterprises</li> <li>DevOps Teams transitioning to platform engineering model</li> <li>Engineering Leaders seeking to improve DORA metrics and developer productivity</li> </ul>"},{"location":"CHARTER/#secondary-users","title":"Secondary Users","text":"<ul> <li>Application Developers who benefit from the platform's self-service capabilities</li> <li>Platform Engineering Students learning through hands-on implementation</li> <li>DevOps Consultants implementing IDPs for clients</li> </ul>"},{"location":"CHARTER/#geographic-focus","title":"Geographic Focus","text":"<ul> <li>Initial: North America, Europe (English language)</li> <li>Expansion: Global (internationalization in roadmap)</li> </ul>"},{"location":"CHARTER/#success-criteria","title":"Success Criteria","text":""},{"location":"CHARTER/#6-month-goals-post-mvp","title":"6-Month Goals (Post-MVP)","text":"<ul> <li>Adoption: 15-25 organizations using Fawkes in production</li> <li>Community: 50+ contributors, 1,000+ GitHub stars</li> <li>DORA Impact: 3+ published case studies showing measurable DORA improvement</li> <li>Learning: 100+ individuals complete at least one dojo module</li> <li>Stability: 99.5%+ platform uptime for core components</li> </ul>"},{"location":"CHARTER/#12-month-goals","title":"12-Month Goals","text":"<ul> <li>Adoption: 50+ organizations, 10+ Fortune 1000 companies</li> <li>Community: 100+ contributors, 2,500+ GitHub stars, CNCF Sandbox project</li> <li>Certification: Official partnership with Platform Engineering University</li> <li>Multi-Cloud: Full support for AWS, Azure, GCP</li> <li>Revenue: Sustainable funding model (sponsorships, professional services)</li> </ul>"},{"location":"CHARTER/#24-month-goals","title":"24-Month Goals","text":"<ul> <li>Market Position: Top 3 open-source IDP by adoption</li> <li>Community: 250+ contributors, 5,000+ GitHub stars, CNCF Incubating project</li> <li>Ecosystem: 20+ plugins/extensions from community</li> <li>Enterprise: 100+ enterprise deployments with reference architectures</li> <li>Research: Published research on IDP adoption and DORA correlation</li> </ul>"},{"location":"CHARTER/#key-metrics","title":"Key Metrics","text":""},{"location":"CHARTER/#platform-performance-metrics","title":"Platform Performance Metrics","text":"<ul> <li>Deployment Frequency: Track improvements for adopting teams</li> <li>Lead Time for Changes: Measure from commit to production</li> <li>Change Failure Rate: Monitor failed deployments</li> <li>Time to Restore Service: Track incident recovery times</li> </ul>"},{"location":"CHARTER/#community-health-metrics","title":"Community Health Metrics","text":"<ul> <li>Contributors: Active monthly contributors</li> <li>Pull Requests: PR volume and merge rate</li> <li>Response Time: Time to first response on issues</li> <li>Community Size: Slack/Discord members, mailing list subscribers</li> </ul>"},{"location":"CHARTER/#business-metrics","title":"Business Metrics","text":"<ul> <li>Adoption: Organizations deploying Fawkes</li> <li>NPS Score: User satisfaction (target: 50+)</li> <li>Documentation Quality: Page views, search success rate</li> <li>Cost Savings: Infrastructure efficiency vs. manual platform building</li> </ul>"},{"location":"CHARTER/#guiding-principles","title":"Guiding Principles","text":""},{"location":"CHARTER/#1-developer-experience-is-paramount","title":"1. Developer Experience is Paramount","text":"<p>Every feature must improve developer productivity, reduce cognitive load, or enable self-service.</p>"},{"location":"CHARTER/#2-measure-everything","title":"2. Measure Everything","text":"<p>If it can't be measured, it can't be improved. Build observability into every component.</p>"},{"location":"CHARTER/#3-security-is-non-negotiable","title":"3. Security is Non-Negotiable","text":"<p>Security scanning, policy enforcement, and compliance are built-in, not bolt-on.</p>"},{"location":"CHARTER/#4-learn-while-building","title":"4. Learn While Building","text":"<p>The platform doubles as a learning environment with integrated curriculum.</p>"},{"location":"CHARTER/#5-community-over-features","title":"5. Community Over Features","text":"<p>A healthy, engaged community is more valuable than a feature-complete platform.</p>"},{"location":"CHARTER/#6-open-by-default","title":"6. Open by Default","text":"<p>Decisions, roadmap, metrics, and discussions are public unless privacy requires otherwise.</p>"},{"location":"CHARTER/#7-opinionated-but-extensible","title":"7. Opinionated but Extensible","text":"<p>Provide golden paths for 80% of use cases; allow customization for the other 20%.</p>"},{"location":"CHARTER/#8-multi-cloud-from-day-one","title":"8. Multi-Cloud from Day One","text":"<p>Design for cloud portability even if initial implementation is AWS-only.</p>"},{"location":"CHARTER/#scope","title":"Scope","text":""},{"location":"CHARTER/#in-scope","title":"In Scope","text":"<ul> <li>Kubernetes-based infrastructure automation</li> <li>CI/CD pipelines and deployment strategies</li> <li>Observability (metrics, logs, traces)</li> <li>Security scanning and policy enforcement</li> <li>Developer portal and self-service catalog</li> <li>GitOps workflows</li> <li>DORA metrics automation</li> <li>Learning curriculum and certification alignment</li> <li>Multi-cloud support (AWS, Azure, GCP)</li> <li>Documentation and community building</li> </ul>"},{"location":"CHARTER/#out-of-scope-explicitly","title":"Out of Scope (Explicitly)","text":"<ul> <li>Application frameworks or languages (we provide templates, not frameworks)</li> <li>Source control management (we integrate with GitHub/GitLab, not replace them)</li> <li>Project management tools (we integrate, not replace)</li> <li>Business-specific workflows (keep platform generic, extensible)</li> <li>On-premises only deployments (cloud-first, on-prem possible but not primary)</li> </ul>"},{"location":"CHARTER/#future-consideration","title":"Future Consideration","text":"<ul> <li>Edge computing and IoT deployments</li> <li>Machine learning platform capabilities</li> <li>FinOps and cost optimization features</li> <li>Compliance automation (SOC2, HIPAA, etc.)</li> <li>Advanced chaos engineering integration</li> </ul>"},{"location":"CHARTER/#risks-and-mitigation","title":"Risks and Mitigation","text":""},{"location":"CHARTER/#technical-risks","title":"Technical Risks","text":"Risk Impact Mitigation Integration complexity delays MVP High Start with minimal integrations, prioritize stability over features Scalability issues at enterprise scale High Design for scale from day one, conduct load testing early Security vulnerabilities in dependencies High Automated scanning, regular updates, security-first culture"},{"location":"CHARTER/#community-risks","title":"Community Risks","text":"Risk Impact Mitigation Maintainer burnout Critical Grow maintainer team early, establish rotation schedules Low adoption / community interest High Invest heavily in documentation, marketing, and partnerships Competing projects fragment efforts Medium Differentiate clearly, collaborate where possible"},{"location":"CHARTER/#business-risks","title":"Business Risks","text":"Risk Impact Mitigation Insufficient funding for infrastructure Medium Seek cloud credits, CNCF support, sponsorships Certification partnerships fail Medium Maintain standalone value, diversify partnerships Enterprise concerns about support Medium Build professional services ecosystem, offer paid support options"},{"location":"CHARTER/#resource-requirements","title":"Resource Requirements","text":""},{"location":"CHARTER/#human-resources-mvp-phase","title":"Human Resources (MVP Phase)","text":"<ul> <li>Technical Lead / Architect: 1 FTE (50% project lead, 50% architecture)</li> <li>Backend Engineers: 2-3 contributors (part-time acceptable)</li> <li>Documentation Writer: 0.5 FTE (can be distributed)</li> <li>Community Manager: 0.25 FTE (grows to 0.5 FTE post-launch)</li> </ul>"},{"location":"CHARTER/#infrastructure-resources","title":"Infrastructure Resources","text":"<ul> <li>Development/Testing: AWS EKS cluster, supporting services (~$500/month)</li> <li>Demo Environment: Always-on demo instance (~$300/month)</li> <li>CI/CD: GitHub Actions (free tier initially)</li> <li>Communication: Slack/Discord (free tier)</li> <li>Documentation Hosting: GitHub Pages or Netlify (free)</li> </ul>"},{"location":"CHARTER/#financial-resources-first-year","title":"Financial Resources (First Year)","text":"<ul> <li>Infrastructure: $10,000 (offset by cloud credits)</li> <li>Tools/Services: $5,000 (domain, email, premium tools)</li> <li>Events/Marketing: $5,000 (conference travel, swag)</li> <li>Contingency: $5,000</li> <li>Total: ~$25,000 (significant portion via sponsorships/credits)</li> </ul>"},{"location":"CHARTER/#stakeholders","title":"Stakeholders","text":""},{"location":"CHARTER/#internal-stakeholders","title":"Internal Stakeholders","text":"<ul> <li>Project Lead: Overall vision and strategy</li> <li>Maintainer Team: Technical direction and execution</li> <li>Core Contributors: Feature development and community support</li> </ul>"},{"location":"CHARTER/#external-stakeholders","title":"External Stakeholders","text":"<ul> <li>Platform Engineering University: Certification alignment, educational content</li> <li>CNCF: Potential project hosting, infrastructure support, visibility</li> <li>Cloud Providers (AWS, Azure, GCP): Infrastructure credits, reference architectures</li> <li>Enterprise Users: Requirements, feedback, case studies</li> <li>Open Source Community: Contributors, users, advocates</li> </ul>"},{"location":"CHARTER/#communication-plan","title":"Communication Plan","text":""},{"location":"CHARTER/#internal-communication","title":"Internal Communication","text":"<ul> <li>Maintainer Meetings: Bi-weekly, 60 minutes, public minutes</li> <li>Contributor Sync: Monthly, 30 minutes, open to all contributors</li> <li>Async Updates: GitHub Discussions, Slack channels</li> </ul>"},{"location":"CHARTER/#external-communication","title":"External Communication","text":"<ul> <li>Community Newsletter: Bi-weekly updates on progress, contributions</li> <li>Blog Posts: Weekly technical content, case studies, announcements</li> <li>Social Media: Daily engagement on Twitter/X, LinkedIn</li> <li>Office Hours: Bi-weekly, live Q&amp;A and support</li> <li>Conferences: Quarterly speaking engagements (KubeCon, PlatformCon, DevOpsDays)</li> </ul>"},{"location":"CHARTER/#crisis-communication","title":"Crisis Communication","text":"<ul> <li>Security Issues: Immediate disclosure via security mailing list, GitHub advisory</li> <li>Service Outages: Status page updates, post-mortem published within 48 hours</li> <li>Community Issues: Transparent handling per Code of Conduct, documented decisions</li> </ul>"},{"location":"CHARTER/#timeline","title":"Timeline","text":""},{"location":"CHARTER/#phase-0-foundation-weeks-1-2","title":"Phase 0: Foundation (Weeks 1-2)","text":"<ul> <li>Establish governance, communication infrastructure</li> <li>Initial documentation and architecture</li> </ul>"},{"location":"CHARTER/#phase-1-core-platform-weeks-3-5","title":"Phase 1: Core Platform (Weeks 3-5)","text":"<ul> <li>Backstage portal, CI/CD pipelines, GitOps implementation</li> </ul>"},{"location":"CHARTER/#phase-2-observability-weeks-6-8","title":"Phase 2: Observability (Weeks 6-8)","text":"<ul> <li>Metrics stack, DORA automation, deployment strategies</li> </ul>"},{"location":"CHARTER/#phase-3-launch-preparation-weeks-9-12","title":"Phase 3: Launch Preparation (Weeks 9-12)","text":"<ul> <li>Documentation completion, dojo curriculum, launch activities</li> </ul>"},{"location":"CHARTER/#post-mvp-iteration-and-growth-months-4-12","title":"Post-MVP: Iteration and Growth (Months 4-12)","text":"<ul> <li>Multi-cloud expansion, advanced features, community scaling</li> </ul>"},{"location":"CHARTER/#success-celebration","title":"Success Celebration","text":""},{"location":"CHARTER/#milestone-celebrations","title":"Milestone Celebrations","text":"<ul> <li>First Contributor: Public thank you, contributor spotlight</li> <li>MVP Launch: Virtual celebration, team recognition</li> <li>100 GitHub Stars: Social media celebration, community thank you</li> <li>First Production Deployment: Case study, blog post</li> <li>1 Year Anniversary: Annual report, contributor awards, retrospective</li> </ul>"},{"location":"CHARTER/#amendment-process","title":"Amendment Process","text":"<p>This charter may be amended through the governance process defined in GOVERNANCE.md. Major changes require community input and maintainer approval.</p> <p>Charter Version: 1.0 Established: October 4, 2025 Last Reviewed: October 4, 2025 Next Review: April 4, 2026 (6-month intervals)</p> <p>Approved By: - Project Lead: [Your Name/Signature] - Date: October 4, 2025</p>"},{"location":"CHARTER/#appendix-alignment-with-industry-standards","title":"Appendix: Alignment with Industry Standards","text":""},{"location":"CHARTER/#dora-research-alignment","title":"DORA Research Alignment","text":"<p>Fawkes directly supports all 24 DORA capabilities with particular focus on: - Trunk-based development - Continuous integration and delivery - Monitoring and observability - Database change management - Infrastructure as code</p>"},{"location":"CHARTER/#platform-engineering-principles","title":"Platform Engineering Principles","text":"<p>Aligned with Team Topologies and platform engineering best practices: - Platform as a product mindset - Self-service capabilities - Cognitive load reduction - Enabling team structure</p>"},{"location":"CHARTER/#cncf-landscape","title":"CNCF Landscape","text":"<p>Positioned in the CNCF landscape as: - Category: Developer Portal / Internal Developer Platform - Complementary to: Backstage, ArgoCD, Prometheus - Competing with: Commercial IDPs (Humanitec, Port.io)</p> <p>End of Charter</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in the Fawkes community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> <li>Using welcoming and inclusive language</li> <li>Being patient with new contributors and helping them learn</li> <li>Celebrating others' successes and contributions</li> <li>Assuming good intent and asking clarifying questions</li> <li>Providing credit and recognition where it's due</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Dismissing or belittling others' contributions or concerns</li> <li>Sustained disruption of discussions, events, or community activities</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> <li>Advocating for, or encouraging, any of the above behavior</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Community leaders and maintainers are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, including but not limited to:</p> <ul> <li>GitHub repositories (issues, pull requests, discussions, wiki)</li> <li>Community chat platforms (Slack, Discord)</li> <li>Mailing lists and email communications</li> <li>Social media channels (official Fawkes accounts)</li> <li>In-person events (meetups, conferences, workshops)</li> <li>Virtual events (webinars, office hours, live streams)</li> <li>Any other forums created by the project team which the community uses for communication</li> </ul> <p>This Code of Conduct also applies when an individual is officially representing the community in public spaces. Examples include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":""},{"location":"CODE_OF_CONDUCT/#reporting","title":"Reporting","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at:</p> <p>conduct@fawkes-project.org</p> <p>You may also use GitHub's built-in private vulnerability reporting feature to report Code of Conduct violations confidentially.</p> <p>All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#what-to-include-in-a-report","title":"What to Include in a Report","text":"<p>When reporting an incident, please include as much of the following information as possible:</p> <ul> <li>Your contact information (so we can get in touch with you)</li> <li>Names (real, usernames, or pseudonyms) of any individuals involved</li> <li>Your account of what occurred</li> <li>If you believe this incident is ongoing</li> <li>Any other information that may be helpful</li> <li>Links to publicly available records (e.g., GitHub comments, mailing list archives)</li> <li>Date and time of the incident</li> </ul>"},{"location":"CODE_OF_CONDUCT/#confidentiality","title":"Confidentiality","text":"<p>All reports will be kept confidential. In some cases, we may determine that a public statement will need to be made. If that's the case, the identities of all victims and reporters will remain confidential unless those individuals instruct us otherwise.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-process","title":"Enforcement Process","text":"<ol> <li>Report Received: Community leaders acknowledge receipt within 24 hours</li> <li>Initial Review: Community leaders review the report within 48 hours</li> <li>Investigation: Gather additional information if needed (3-7 days)</li> <li>Decision: Enforcement decision made by 2/3 vote of community leaders</li> <li>Action: Enforcement action taken and parties notified</li> <li>Appeal: Option to appeal decision within 14 days</li> <li>Documentation: Incident documented for future reference (confidentially)</li> </ol>"},{"location":"CODE_OF_CONDUCT/#appeals","title":"Appeals","text":"<p>Any individual affected by an enforcement decision may appeal by contacting:</p> <p>conduct-appeals@fawkes-project.org</p> <p>Appeals will be reviewed by community leaders who were not involved in the original decision. The appeal review will be completed within 14 days, and the decision will be final.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CODE_OF_CONDUCT/#contact","title":"Contact","text":"<p>For questions about this Code of Conduct, contact:</p> <ul> <li>General Questions: conduct@fawkes-project.org</li> <li>Enforcement Team: conduct@fawkes-project.org</li> <li>Appeals: conduct-appeals@fawkes-project.org</li> <li>Project Lead: [Your Contact Information]</li> </ul> <p>Document Version: 1.0 Last Updated: October 4, 2025 Based On: Contributor Covenant v2.1</p>"},{"location":"GOVERNACE/","title":"Fawkes Project Governance","text":""},{"location":"GOVERNACE/#overview","title":"Overview","text":"<p>Fawkes is an open-source Internal Delivery Platform committed to transparent, inclusive, and collaborative governance. This document defines how decisions are made, how contributors can become maintainers, and how the project evolves.</p>"},{"location":"GOVERNACE/#project-mission","title":"Project Mission","text":"<p>To provide a production-ready, DORA-driven Internal Delivery Platform that accelerates software delivery while fostering continuous learning and improvement in platform engineering practices.</p>"},{"location":"GOVERNACE/#core-values","title":"Core Values","text":"<ul> <li>Developer Experience First: Every decision prioritizes the experience of platform users</li> <li>Transparency: Decision-making processes are open and documented</li> <li>Inclusivity: We welcome contributors from all backgrounds and experience levels</li> <li>Quality: We maintain high standards for code, documentation, and community interactions</li> <li>Continuous Learning: The platform serves as both a tool and a teaching environment</li> <li>Data-Driven: Decisions are informed by metrics, user feedback, and DORA research</li> </ul>"},{"location":"GOVERNACE/#project-structure","title":"Project Structure","text":""},{"location":"GOVERNACE/#roles","title":"Roles","text":""},{"location":"GOVERNACE/#users","title":"Users","text":"<p>Anyone who uses Fawkes to build and operate their internal delivery platform.</p> <p>Responsibilities: - Provide feedback through issues and discussions - Follow the Code of Conduct - Help other users when possible</p>"},{"location":"GOVERNACE/#contributors","title":"Contributors","text":"<p>Anyone who contributes to the project (code, documentation, design, support).</p> <p>How to become a Contributor: - Submit at least one merged pull request or significant issue/discussion contribution - Sign the Developer Certificate of Origin (DCO)</p> <p>Responsibilities: - Follow contribution guidelines - Participate constructively in code reviews and discussions - Maintain quality standards</p>"},{"location":"GOVERNACE/#core-contributors","title":"Core Contributors","text":"<p>Contributors who have made sustained, significant contributions over time.</p> <p>How to become a Core Contributor: - 5+ merged pull requests over 3+ months - Demonstrated technical expertise in specific area - Active participation in community discussions - Nominated by a Maintainer and approved by Maintainer team</p> <p>Responsibilities: - Review pull requests - Triage issues - Mentor new contributors - Participate in technical discussions - Help maintain documentation</p> <p>Benefits: - Listed in CONTRIBUTORS.md - \"Core Contributor\" badge - Invitation to Core Contributor meetings (monthly) - Input on roadmap priorities</p>"},{"location":"GOVERNACE/#maintainers","title":"Maintainers","text":"<p>Trusted individuals with commit access and release responsibilities.</p> <p>How to become a Maintainer: - 25+ merged contributions over 6+ months OR significant architectural contributions - Consistent, high-quality code reviews - Demonstrated commitment to community health - Understanding of project architecture and goals - Nominated by existing Maintainer - Approved by 2/3 vote of existing Maintainers</p> <p>Responsibilities: - Review and merge pull requests - Triage and prioritize issues - Make architectural decisions - Release management - Mentor contributors and core contributors - Enforce Code of Conduct - Participate in governance decisions - Available for critical incidents (on-call rotation)</p> <p>Benefits: - Commit access to repositories - Listed in MAINTAINERS.md - Voice in major project decisions - Speaking opportunities representing the project</p>"},{"location":"GOVERNACE/#project-lead","title":"Project Lead","text":"<p>The initial founder(s) who provide overall strategic direction.</p> <p>Responsibilities: - Final decision authority on major disputes (used rarely) - External partnerships and relationships - Fundraising and resource allocation - Project vision and long-term strategy - Maintainer appointments (with Maintainer input)</p> <p>Current Project Lead: [Your Name/Handle]</p>"},{"location":"GOVERNACE/#decision-making-process","title":"Decision-Making Process","text":""},{"location":"GOVERNACE/#minor-decisions","title":"Minor Decisions","text":"<p>Examples: Bug fixes, documentation improvements, small features</p> <p>Process:  - Single maintainer approval required for merge - Use \"Lazy Consensus\" - if no objections within 48 hours, proceed - Document in pull request comments</p>"},{"location":"GOVERNACE/#major-decisions","title":"Major Decisions","text":"<p>Examples: New dependencies, architectural changes, breaking changes</p> <p>Process: 1. Create Architectural Decision Record (ADR) or detailed RFC (Request for Comments) 2. Post in GitHub Discussions for community input 3. Allow 7 days for feedback 4. Maintainers discuss in next maintainer meeting 5. Decision requires 2/3 approval from active Maintainers 6. Document decision and rationale publicly</p>"},{"location":"GOVERNACE/#critical-decisions","title":"Critical Decisions","text":"<p>Examples: Licensing changes, project governance changes, Code of Conduct updates</p> <p>Process: 1. Create detailed proposal with rationale 2. Post for public comment (14-day minimum) 3. Discuss in maintainer meeting 4. Decision requires 3/4 approval from Maintainers 5. Project Lead has veto power (used rarely, with public justification)</p>"},{"location":"GOVERNACE/#conflict-resolution","title":"Conflict Resolution","text":""},{"location":"GOVERNACE/#disagreements-on-technical-decisions","title":"Disagreements on Technical Decisions","text":"<ol> <li>Attempt to reach consensus through discussion</li> <li>If consensus fails, maintainers vote (simple majority)</li> <li>If vote is split, Project Lead decides</li> <li>Document decision and dissenting opinions in ADR</li> </ol>"},{"location":"GOVERNACE/#code-of-conduct-violations","title":"Code of Conduct Violations","text":"<ol> <li>Report to conduct@fawkes-project.org or via GitHub private reporting</li> <li>Maintainer team reviews within 48 hours</li> <li>Decision on action (warning, temporary ban, permanent ban) requires 2/3 Maintainer vote</li> <li>Accused party is given opportunity to respond</li> <li>Decision is documented (publicly or privately depending on severity)</li> </ol>"},{"location":"GOVERNACE/#maintainer-conflicts","title":"Maintainer Conflicts","text":"<ol> <li>Attempt direct resolution</li> <li>If unresolved, bring to Maintainer meeting</li> <li>If needed, Project Lead mediates</li> <li>In extreme cases, Maintainer may be removed by 3/4 vote of other Maintainers</li> </ol>"},{"location":"GOVERNACE/#communication-channels","title":"Communication Channels","text":""},{"location":"GOVERNACE/#public-channels","title":"Public Channels","text":"<ul> <li>GitHub Issues: Bug reports, feature requests</li> <li>GitHub Discussions: Questions, ideas, RFCs</li> <li>Slack/Discord: Real-time community chat</li> <li>Mailing List: Announcements, governance discussions</li> <li>Office Hours: Bi-weekly video calls (open to all)</li> </ul>"},{"location":"GOVERNACE/#private-channels","title":"Private Channels","text":"<ul> <li>Maintainer Meetings: Bi-weekly (minutes published publicly)</li> <li>Security Issues: security@fawkes-project.org</li> <li>Code of Conduct Reports: conduct@fawkes-project.org</li> </ul>"},{"location":"GOVERNACE/#contribution-recognition","title":"Contribution Recognition","text":""},{"location":"GOVERNACE/#all-contributors","title":"All Contributors","text":"<ul> <li>Listed in CONTRIBUTORS.md (automated via all-contributors bot)</li> <li>Mentioned in release notes for significant contributions</li> </ul>"},{"location":"GOVERNACE/#monthly-recognition","title":"Monthly Recognition","text":"<ul> <li>\"Contributor of the Month\" highlighted in newsletter/blog</li> <li>Criteria: Impact, quality, community support</li> </ul>"},{"location":"GOVERNACE/#annual-recognition","title":"Annual Recognition","text":"<ul> <li>\"Top Contributors\" featured in end-of-year report</li> <li>Special recognition at community events</li> </ul>"},{"location":"GOVERNACE/#roadmap-planning","title":"Roadmap &amp; Planning","text":""},{"location":"GOVERNACE/#roadmap-process","title":"Roadmap Process","text":"<ol> <li>Maintainers propose high-level roadmap (quarterly)</li> <li>Community provides feedback via GitHub Discussions</li> <li>Maintainers finalize and publish roadmap</li> <li>Progress tracked publicly in GitHub Projects</li> </ol>"},{"location":"GOVERNACE/#sprint-planning","title":"Sprint Planning","text":"<ul> <li>2-week sprint cycles</li> <li>Issues prioritized in maintainer meetings</li> <li>Community can propose priorities via discussions</li> </ul>"},{"location":"GOVERNACE/#release-cadence","title":"Release Cadence","text":"<ul> <li>Minor releases: Monthly (features, improvements)</li> <li>Patch releases: As needed (bug fixes, security)</li> <li>Major releases: Quarterly or as needed (breaking changes)</li> </ul>"},{"location":"GOVERNACE/#modification-of-governance","title":"Modification of Governance","text":"<p>This governance document may be modified through the Critical Decision process: 1. Propose changes via GitHub Discussion 2. 14-day comment period 3. 3/4 Maintainer approval required 4. Project Lead approval required</p>"},{"location":"GOVERNACE/#maintainer-succession","title":"Maintainer Succession","text":""},{"location":"GOVERNACE/#emeritus-status","title":"Emeritus Status","text":"<p>Maintainers who step back from active maintenance: - Retain emeritus maintainer status and recognition - Listed in MAINTAINERS.md with emeritus designation - No commit access or voting rights - Can return to active status via simple process</p>"},{"location":"GOVERNACE/#inactive-maintainers","title":"Inactive Maintainers","text":"<p>If a maintainer is inactive for 6+ months without communication: - Other maintainers attempt to contact - If no response after 30 days, maintainer moved to emeritus - Commit access revoked (can be reinstated)</p>"},{"location":"GOVERNACE/#maintainer-removal","title":"Maintainer Removal","text":"<p>In rare cases of Code of Conduct violations or actions harmful to project: - Requires 3/4 vote of other maintainers - Project Lead can override (with public justification) - Process is documented for transparency</p>"},{"location":"GOVERNACE/#initial-bootstrap-period","title":"Initial Bootstrap Period","text":"<p>For the first 6 months, the Project Lead has broader authority to: - Appoint initial maintainers (minimum 3) - Make rapid decisions to establish project foundations - Adjust governance as needed based on early learnings</p> <p>After 6 months, this bootstrap period ends and full governance takes effect.</p>"},{"location":"GOVERNACE/#credits","title":"Credits","text":"<p>This governance model is inspired by: - CNCF project governance patterns - Apache Software Foundation governance - Kubernetes community governance - Node.js project governance</p> <p>Document Version: 1.0 Last Updated: October 4, 2025 Status: Active Contact: governance@fawkes-project.org</p>"},{"location":"GOVERNACE/#quick-reference","title":"Quick Reference","text":"Action Who Can Do It Approval Needed Submit PR Anyone Maintainer review Merge minor PR Maintainer 1 Maintainer Merge major PR Maintainer 2 Maintainers or ADR Create release Maintainer 1 other Maintainer Modify governance Any contributor 3/4 Maintainers + Project Lead Become Core Contributor Contributors Maintainer nomination + approval Become Maintainer Core Contributors 2/3 Maintainer vote"},{"location":"PROJECT_STATUS/","title":"Fawkes Project Status","text":"<p>Purpose: Track progress across development sessions and provide context for new conversations</p> <p>Last Updated: October 7, 2025 Current Phase: Foundation (Sprint 01, Week 1) Target MVP Date: December 31, 2025</p>"},{"location":"PROJECT_STATUS/#quick-status-overview","title":"\ud83d\udcca Quick Status Overview","text":"Category Status Progress Notes Documentation \ud83d\udfe2 On Track 60% Core docs complete, module content needed Architecture \ud83d\udfe2 On Track 70% Main architecture done, integration updates needed Dojo System \ud83d\udfe1 In Progress 40% Architecture complete, content creation started Infrastructure \ud83d\udd34 Not Started 0% Waiting for AWS credits approval Community Setup \ud83d\udfe1 In Progress 30% Planning complete, deployment pending CI/CD \ud83d\udd34 Not Started 0% Planned for Week 2 <p>Legend: \ud83d\udfe2 On Track | \ud83d\udfe1 In Progress | \ud83d\udd34 Blocked/Delayed | \u26ab Not Started</p>"},{"location":"PROJECT_STATUS/#current-sprint-sprint-01-oct-7-18-2025","title":"\ud83c\udfaf Current Sprint: Sprint 01 (Oct 7-18, 2025)","text":"<p>Sprint Goal: Establish project governance, documentation, and development infrastructure</p> <p>Sprint Progress: 45% complete (Day 2 of 10)</p>"},{"location":"PROJECT_STATUS/#this-weeks-focus-week-1-oct-7-11","title":"This Week's Focus (Week 1: Oct 7-11)","text":"<ul> <li>[x] Complete governance documents</li> <li>[x] Design dojo learning architecture</li> <li>[x] Select collaboration platform (Mattermost)</li> <li>[ ] Complete all ADRs (3 of 5 done)</li> <li>[ ] Set up communication infrastructure</li> <li>[ ] Begin first module content</li> </ul>"},{"location":"PROJECT_STATUS/#completed-work","title":"\u2705 Completed Work","text":""},{"location":"PROJECT_STATUS/#day-1-monday-october-7-2025","title":"Day 1 - Monday, October 7, 2025","text":"<p>Focus: Project Foundation &amp; Governance</p> <ul> <li>[x] GOVERNANCE.md - Complete governance framework with 5 roles</li> <li>[x] CODE_OF_CONDUCT.md - Contributor Covenant v2.1 adapted</li> <li>[x] PROJECT_CHARTER.md - Vision, mission, success criteria, risk register</li> <li>[x] Architecture Overview - <code>/docs/architecture.md</code> with C4 diagrams</li> <li>[x] ADR-001 - Kubernetes as container orchestration platform</li> <li>[x] GitHub Templates - Issue templates (4) and PR template</li> <li>[x] GitHub Labels - 45+ labels across 10 categories</li> <li>[x] Sprint 01 Plan - Detailed 2-week sprint plan</li> </ul> <p>Artifacts Created: 8 major documents, ~50 pages</p>"},{"location":"PROJECT_STATUS/#day-2-tuesday-october-7-2025","title":"Day 2 - Tuesday, October 7, 2025","text":"<p>Focus: Dojo Learning System &amp; Product Delivery Enhancement</p> <ul> <li>[x] Dojo Architecture - <code>/docs/dojo/DOJO_ARCHITECTURE.md</code></li> <li>Complete belt progression system (White \u2192 Black)</li> <li>20 modules mapped to 24 DORA capabilities</li> <li>Hands-on lab environment design</li> <li>Assessment and certification framework</li> <li>Platform Engineering University integration strategy</li> <li>[x] ADR-007 - Mattermost for team collaboration</li> <li>Compared 6 alternatives (Slack, Discord, Rocket.Chat, Teams, Matrix, Zulip)</li> <li>Integration architecture defined</li> <li>Channel structure designed</li> <li>[x] Day 2 Task Plan - Detailed task breakdown with focus on dojo</li> </ul> <p>Artifacts Created: 3 major documents, ~20 pages</p>"},{"location":"PROJECT_STATUS/#in-progress-active-work","title":"\ud83d\udea7 In Progress (Active Work)","text":""},{"location":"PROJECT_STATUS/#current-tasks-pick-up-here-in-next-session","title":"Current Tasks (Pick up here in next session)","text":""},{"location":"PROJECT_STATUS/#1-adr-008-focalboard-for-project-management","title":"1. ADR-008: Focalboard for Project Management","text":"<p>Priority: P0 (Critical) Estimated Time: 1.5 hours Status: Not Started Dependencies: ADR-007 completed \u2705</p> <p>Scope: - Document need for integrated project management - Compare alternatives: Focalboard vs. Taiga vs. Plane vs. Jira - Explain Mattermost integration benefits - Document dojo curriculum tracking use case - Define team roadmap and sprint planning use cases</p> <p>Context for Next Session: <pre><code>Create ADR-008 following the same format as ADR-007 (Mattermost).\nFocus on:\n1. Native Mattermost integration (Focalboard built-in)\n2. Use cases: dojo learner tracking, sprint planning, roadmaps\n3. Open source alignment\n4. Cost effectiveness vs. commercial alternatives\n</code></pre></p>"},{"location":"PROJECT_STATUS/#2-architecture-document-updates","title":"2. Architecture Document Updates","text":"<p>Priority: P1 (High) Estimated Time: 1 hour Status: Not Started Dependencies: ADR-007, ADR-008</p> <p>Scope: - Add Mattermost to component overview - Add Focalboard to component overview - Update integration patterns section - Add dojo lab environment to architecture diagrams - Update technology stack table - Create new C4 diagram showing complete product delivery platform</p> <p>Context for Next Session: <pre><code>Update /docs/architecture.md to include:\n- Mattermost (team collaboration)\n- Focalboard (project management)  \n- Dojo Lab Environment (learning infrastructure)\n\nAdd sections:\n- Component Overview: Mattermost &amp; Focalboard\n- Integration Patterns: Chat notifications, ChatOps\n- Dojo Infrastructure: Lab provisioning, validation\n</code></pre></p>"},{"location":"PROJECT_STATUS/#3-module-1-content-internal-delivery-platforms-what-and-why","title":"3. Module 1 Content: \"Internal Delivery Platforms - What and Why\"","text":"<p>Priority: P1 (High) Estimated Time: 2 hours Status: Not Started Dependencies: Dojo architecture complete \u2705</p> <p>Scope: - Write complete module (4 sections, 60 minutes total) - Section 1: What is an IDP? (15 min) - Section 2: DORA Research Foundation (20 min) - Section 3: Fawkes Platform Tour (20 min) - Section 4: Your First Deployment (20 min + hands-on) - Include learning objectives, quiz questions, lab instructions</p> <p>Context for Next Session: <pre><code>Create Module 1 content following structure in DOJO_ARCHITECTURE.md.\nTarget: 60-minute module for absolute beginners.\nInclude: video script, written content, hands-on lab, 10 quiz questions.\nMake it engaging and practical.\n</code></pre></p>"},{"location":"PROJECT_STATUS/#4-readmemd-enhancement","title":"4. README.md Enhancement","text":"<p>Priority: P1 (High) Estimated Time: 1 hour Status: Not Started</p> <p>Scope: - Rewrite opening to emphasize dojo learning + product delivery - Add \"\ud83c\udf93 Learn While You Build\" section - Add \"\ud83d\ude80 Complete Product Delivery Platform\" section - Include belt progression visual - Update feature list with Mattermost, Focalboard, Dojo - Add \"Start Learning\" CTA</p> <p>Context for Next Session: <pre><code>Update README.md to prominently feature:\n1. Dojo learning system (belt progression)\n2. Complete product delivery (not just infrastructure)\n3. Mattermost + Focalboard integration\n4. DORA metrics automation\n\nMake it compelling for first-time visitors.\n</code></pre></p>"},{"location":"PROJECT_STATUS/#backlog-upcoming-work","title":"\ud83d\udccb Backlog (Upcoming Work)","text":""},{"location":"PROJECT_STATUS/#sprint-01-remaining-tasks","title":"Sprint 01 Remaining Tasks","text":""},{"location":"PROJECT_STATUS/#week-1-oct-7-11-remaining","title":"Week 1 (Oct 7-11) - Remaining","text":"<ul> <li>[ ] ADR-002: Backstage for Developer Portal (1.5 hours)</li> <li>[ ] ADR-003: ArgoCD for GitOps (1.5 hours)</li> <li>[ ] ADR-004: Jenkins for CI/CD (1.5 hours)</li> <li>[ ] ADR-005: Terraform vs. Pulumi (1.5 hours)</li> <li>[ ] ADR-006: PostgreSQL for Data Persistence (1 hour)</li> <li>[ ] Set up Mattermost workspace (2 hours)</li> <li>[ ] Enable GitHub Discussions (30 min)</li> <li>[ ] Create community calendar (30 min)</li> <li>[ ] Development environment documentation (1 hour)</li> </ul>"},{"location":"PROJECT_STATUS/#week-2-oct-14-18","title":"Week 2 (Oct 14-18)","text":"<ul> <li>[ ] Backstage deployment planning</li> <li>[ ] Jenkins deployment planning</li> <li>[ ] First module content finalization</li> <li>[ ] Lab environment setup (if AWS credits approved)</li> <li>[ ] Launch preparation materials</li> <li>[ ] Sprint 01 review and retrospective</li> </ul>"},{"location":"PROJECT_STATUS/#future-sprints","title":"Future Sprints","text":""},{"location":"PROJECT_STATUS/#sprint-02-oct-21-nov-1-core-platform-infrastructure","title":"Sprint 02 (Oct 21 - Nov 1): Core Platform Infrastructure","text":"<ul> <li>[ ] Deploy Backstage developer portal</li> <li>[ ] Create 3 software templates (Java, Python, Node.js)</li> <li>[ ] Deploy Jenkins with Kubernetes plugin</li> <li>[ ] Create golden path Jenkinsfiles</li> <li>[ ] Deploy Mattermost</li> <li>[ ] Deploy ArgoCD</li> <li>[ ] Configure GitOps workflows</li> </ul>"},{"location":"PROJECT_STATUS/#sprint-03-nov-4-15-observability-dora-metrics","title":"Sprint 03 (Nov 4-15): Observability &amp; DORA Metrics","text":"<ul> <li>[ ] Deploy Prometheus + Grafana</li> <li>[ ] Configure OpenTelemetry</li> <li>[ ] Deploy OpenSearch</li> <li>[ ] Build DORA metrics collection service</li> <li>[ ] Create DORA dashboards</li> <li>[ ] Deploy Spinnaker</li> </ul>"},{"location":"PROJECT_STATUS/#sprint-04-nov-18-29-dojo-launch","title":"Sprint 04 (Nov 18-29): Dojo Launch","text":"<ul> <li>[ ] Complete all belt curricula</li> <li>[ ] Build Backstage dojo plugin</li> <li>[ ] Set up lab environment</li> <li>[ ] Create lab validation system</li> <li>[ ] Deploy Focalboard</li> <li>[ ] Launch beta testing</li> </ul>"},{"location":"PROJECT_STATUS/#key-decisions-made","title":"\ud83d\udd11 Key Decisions Made","text":"Date Decision Documented In Rationale Oct 7 Kubernetes for orchestration ADR-001 Industry standard, CNCF ecosystem, multi-cloud Oct 7 Mattermost for collaboration ADR-007 Open source, self-hosted, Focalboard integration Oct 7 Belt-based dojo system Dojo Architecture Clear progression, gamification, skill validation Oct 7 MIT License Project Charter Maximum openness, minimal restrictions"},{"location":"PROJECT_STATUS/#pending-decisions","title":"Pending Decisions","text":"<ul> <li>[ ] Slack vs. Discord for initial community (leaning toward Mattermost only)</li> <li>[ ] Backstage theme and branding</li> <li>[ ] Dogfooding environment cloud provider (waiting on AWS credits)</li> <li>[ ] First external beta testers (target: 3-5 organizations)</li> </ul>"},{"location":"PROJECT_STATUS/#blockers-issues","title":"\ud83d\udeab Blockers &amp; Issues","text":""},{"location":"PROJECT_STATUS/#active-blockers","title":"Active Blockers","text":"<ol> <li>AWS Credits Approval (Blocker ID: B-001)</li> <li>Impact: Cannot provision dogfooding environment</li> <li>Workaround: Use personal AWS account with minimal resources</li> <li>Status: Application submitted Oct 6, waiting for approval</li> <li>ETA: 7-14 days</li> <li>Owner: Project Lead</li> </ol>"},{"location":"PROJECT_STATUS/#resolved-blockers","title":"Resolved Blockers","text":"<ul> <li>None yet</li> </ul>"},{"location":"PROJECT_STATUS/#known-issues","title":"Known Issues","text":"<ol> <li>Issue: No CI/CD for platform repo yet</li> <li>Impact: No automated validation of Terraform, no branch protection</li> <li>Priority: P1</li> <li> <p>Planned Resolution: Sprint 01, Week 1</p> </li> <li> <p>Issue: Dojo content creation resource intensive</p> </li> <li>Impact: May take longer than estimated to create 20 modules</li> <li>Priority: P2</li> <li>Mitigation: Start with White Belt only for MVP, crowdsource community content</li> </ol>"},{"location":"PROJECT_STATUS/#metrics-progress","title":"\ud83d\udcca Metrics &amp; Progress","text":""},{"location":"PROJECT_STATUS/#documentation-metrics","title":"Documentation Metrics","text":"<ul> <li>Total Documents: 11 completed</li> <li>Total Pages: ~70 pages</li> <li>ADRs Completed: 2 of 8 planned (25%)</li> <li>Dojo Modules: 0 of 20 completed (0%)</li> <li>Coverage: Governance 100%, Architecture 70%, Dojo 40%</li> </ul>"},{"location":"PROJECT_STATUS/#sprint-progress","title":"Sprint Progress","text":"<ul> <li>Sprint 01 Velocity: TBD (first sprint)</li> <li>Stories Completed: 8 of 18 (44%)</li> <li>Days Elapsed: 2 of 10 (20%)</li> <li>On Track: Yes (ahead of schedule on docs)</li> </ul>"},{"location":"PROJECT_STATUS/#community-metrics","title":"Community Metrics","text":"<ul> <li>GitHub Stars: [TBD - not launched yet]</li> <li>Contributors: 1 (project lead only)</li> <li>Community Members: 0 (no community infrastructure yet)</li> <li>Dojo Learners: 0 (dojo not launched)</li> </ul>"},{"location":"PROJECT_STATUS/#dojo-system-status","title":"\ud83c\udf93 Dojo System Status","text":""},{"location":"PROJECT_STATUS/#belt-curricula-status","title":"Belt Curricula Status","text":"<ul> <li>\ud83e\udd4b White Belt: Architecture complete, content 0%</li> <li>\ud83d\udfe1 Yellow Belt: Architecture complete, content 0%</li> <li>\ud83d\udfe2 Green Belt: Architecture complete, content 0%</li> <li>\ud83d\udfe4 Brown Belt: Architecture complete, content 0%</li> <li>\u26ab Black Belt: Architecture complete, content 0%</li> </ul>"},{"location":"PROJECT_STATUS/#next-dojo-milestones","title":"Next Dojo Milestones","text":"<ol> <li>Module 1 Content (This week) - First complete module</li> <li>Lab Environment (Sprint 02) - Provision first lab namespaces</li> <li>White Belt Beta (Sprint 04) - 5 beta testers complete White Belt</li> <li>Full Launch (Month 4) - All belts available</li> </ol>"},{"location":"PROJECT_STATUS/#ideas-future-considerations","title":"\ud83d\udca1 Ideas &amp; Future Considerations","text":""},{"location":"PROJECT_STATUS/#captured-ideas-not-yet-prioritized","title":"Captured Ideas (Not Yet Prioritized)","text":"<ul> <li>[ ] Idea: Gamification - Leaderboards for dojo completion times</li> <li>[ ] Idea: Cohort-based learning - Start cohorts monthly</li> <li>[ ] Idea: Live workshops - Monthly deep-dive sessions</li> <li>[ ] Idea: Dojo marketplace - Community-contributed modules</li> <li>[ ] Idea: Integration with LinkedIn Learning or Udemy</li> <li>[ ] Idea: Corporate training packages</li> <li>[ ] Idea: Certification exam centers (Pearson VUE partnership)</li> <li>[ ] Idea: Dojo mentorship program - Black Belts mentor White Belts</li> </ul>"},{"location":"PROJECT_STATUS/#research-needed","title":"Research Needed","text":"<ul> <li>[ ] Best practices for Kubernetes lab environment isolation</li> <li>[ ] Auto-grading systems for infrastructure labs</li> <li>[ ] Video hosting options (YouTube vs. self-hosted)</li> <li>[ ] Learning analytics platforms</li> </ul>"},{"location":"PROJECT_STATUS/#quick-reference","title":"\ud83d\udcde Quick Reference","text":""},{"location":"PROJECT_STATUS/#important-links","title":"Important Links","text":"<ul> <li>GitHub Repo: https://github.com/paruff/fawkes/</li> <li>Project Charter: <code>/PROJECT_CHARTER.md</code></li> <li>Architecture: <code>/docs/architecture.md</code></li> <li>Dojo Docs: <code>/docs/dojo/DOJO_ARCHITECTURE.md</code></li> <li>Sprint Plan: <code>/docs/sprints/sprint-01-plan.md</code></li> </ul>"},{"location":"PROJECT_STATUS/#key-files-to-reference","title":"Key Files to Reference","text":"<ul> <li><code>/GOVERNANCE.md</code> - Decision-making process</li> <li><code>/CODE_OF_CONDUCT.md</code> - Community standards</li> <li><code>/docs/adr/</code> - All architectural decisions</li> <li><code>/docs/dojo/</code> - Learning system documentation</li> </ul>"},{"location":"PROJECT_STATUS/#team-contacts","title":"Team Contacts","text":"<ul> <li>Project Lead: [Your Name/Email]</li> <li>Platform Architect: [TBD]</li> <li>Learning Lead: [TBD]</li> <li>DevOps Engineer: [TBD]</li> <li>Community Manager: [TBD]</li> </ul>"},{"location":"PROJECT_STATUS/#how-to-use-this-document","title":"\ud83d\udd04 How to Use This Document","text":""},{"location":"PROJECT_STATUS/#when-starting-a-new-conversation","title":"When Starting a New Conversation","text":"<p>Copy this section to provide context:</p> <pre><code>I'm continuing development of Fawkes, an Internal Product Delivery \nPlatform with integrated dojo-style learning.\n\nGitHub: https://github.com/paruff/fawkes/\n\nCurrent Status (see PROJECT_STATUS.md):\n- Phase: Sprint 01, Day 2\n- Last work: [describe your last session]\n- Next task: [what you want to work on]\n\nCompleted:\n- Governance docs, architecture, dojo design\n- ADR-001 (Kubernetes), ADR-007 (Mattermost)\n\nPlease help me: [specific request]\n</code></pre>"},{"location":"PROJECT_STATUS/#at-end-of-each-session","title":"At End of Each Session","text":"<ol> <li>Update Last Updated date at top</li> <li>Move completed items from \"In Progress\" to \"Completed Work\"</li> <li>Add any new blockers or decisions</li> <li>Update metrics</li> <li>Add notes about what to pick up next time</li> </ol>"},{"location":"PROJECT_STATUS/#weekly-review","title":"Weekly Review","text":"<ul> <li>Review progress against sprint goals</li> <li>Update metrics</li> <li>Reassess priorities</li> <li>Identify blockers</li> <li>Plan next week</li> </ul>"},{"location":"PROJECT_STATUS/#session-notes","title":"\ud83d\udcdd Session Notes","text":""},{"location":"PROJECT_STATUS/#session-october-7-2025-morning","title":"Session: October 7, 2025 - Morning","text":"<p>Duration: 3 hours Focus: Dojo architecture and collaboration platform selection</p> <p>Accomplished: - Completed dojo learning architecture document (15,000 words) - Defined 5-belt progression system - Mapped 20 modules to 24 DORA capabilities - Completed ADR-007 for Mattermost selection - Designed lab environment architecture</p> <p>Key Insights: - Dojo system is major differentiator - emphasize in all communications - Mattermost + Focalboard integration creates seamless workflow - Platform Engineering University partnership is strategic advantage</p> <p>Next Session Goals: - Complete ADR-008 (Focalboard) - Update architecture doc with new components - Begin Module 1 content creation</p> <p>Blockers Identified: None</p>"},{"location":"PROJECT_STATUS/#session-next-session-date-time","title":"Session: [Next Session Date] - [Time]","text":"<p>Duration: [hours] Focus: [what you're working on]</p> <p>Accomplished: - [List completed work]</p> <p>Key Insights: - [Any important realizations]</p> <p>Next Session Goals: - [What to tackle next]</p> <p>Blockers Identified: [Any issues]</p>"},{"location":"PROJECT_STATUS/#success-criteria-tracking","title":"\ud83c\udfaf Success Criteria Tracking","text":""},{"location":"PROJECT_STATUS/#sprint-01-success-criteria","title":"Sprint 01 Success Criteria","text":"<ul> <li>[ ] All governance documents published and accessible</li> <li>[ ] Development environment fully functional</li> <li>[ ] At least 3 ADRs completed (2 of 3 \u2705)</li> <li>[ ] Architecture documentation 80%+ complete (70% currently)</li> <li>[ ] First community member joins (outside core team)</li> </ul>"},{"location":"PROJECT_STATUS/#mvp-success-criteria-12-weeks","title":"MVP Success Criteria (12 weeks)","text":"<ul> <li>[ ] 2-3 early adopter teams successfully deploy applications</li> <li>[ ] All four DORA metrics automatically collected and visualized</li> <li>[ ] 5+ external contributors make meaningful contributions</li> <li>[ ] Core documentation complete with 90%+ coverage</li> <li>[ ] Platform Engineering University certification integration announced</li> <li>[ ] &lt;4 hours from cluster provision to first application deployment</li> </ul> <p>Document Version: 1.0 Template Last Updated: October 7, 2025 Maintained By: Project Lead</p>"},{"location":"PROJECT_STATUS/#template-usage-instructions","title":"Template Usage Instructions","text":"<ol> <li>Update after every work session (even 30 minutes)</li> <li>Keep \"In Progress\" section current - this is your handoff to next session</li> <li>Add context notes - future you will thank you</li> <li>Track decisions - even small ones can be important later</li> <li>Be honest about blockers - document them so they can be resolved</li> <li>Celebrate progress - mark completions, note achievements</li> </ol> <p>Remember: This document is FOR YOU to maintain continuity across conversations and development sessions!</p>"},{"location":"architecture/","title":"Fawkes Architecture Overview","text":""},{"location":"architecture/#document-information","title":"Document Information","text":"<p>Version: 1.0 Last Updated: October 4, 2025 Status: Living Document Audience: Contributors, Adopters, Platform Engineers</p>"},{"location":"architecture/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Architectural Principles</li> <li>High-Level Architecture</li> <li>Component Overview</li> <li>Data Flow</li> <li>Integration Patterns</li> <li>Security Architecture</li> <li>Multi-Cloud Strategy</li> <li>Scalability &amp; Performance</li> <li>Technology Stack</li> <li>Future Architecture</li> </ol>"},{"location":"architecture/#introduction","title":"Introduction","text":"<p>Fawkes is an opinionated Internal Delivery Platform (IDP) designed to accelerate software delivery through automation, observability, and continuous learning. This document describes the architectural design, component interactions, and key technical decisions.</p>"},{"location":"architecture/#architectural-context","title":"Architectural Context","text":"<p>Fawkes sits at the intersection of: - Platform Engineering: Providing self-service infrastructure and tooling - DevSecOps: Integrating security throughout the delivery pipeline - DORA Research: Optimizing for the four key metrics - GitOps: Declarative, version-controlled infrastructure and applications</p>"},{"location":"architecture/#architectural-principles","title":"Architectural Principles","text":""},{"location":"architecture/#1-developer-experience-first","title":"1. Developer Experience First","text":"<ul> <li>Self-service capabilities over ticket-driven workflows</li> <li>Golden paths for common scenarios</li> <li>Single pane of glass (Backstage) for discovery and management</li> <li>Fast feedback loops (build, test, deploy in minutes, not hours)</li> </ul>"},{"location":"architecture/#2-observable-by-default","title":"2. Observable by Default","text":"<ul> <li>Every component exposes metrics, logs, and traces</li> <li>DORA metrics collected automatically</li> <li>Distributed tracing for end-to-end visibility</li> <li>Real-time dashboards for platform health</li> </ul>"},{"location":"architecture/#3-secure-by-design","title":"3. Secure by Design","text":"<ul> <li>Security scanning at every stage (code, dependencies, containers, runtime)</li> <li>Policy-as-code for compliance automation</li> <li>Least privilege access controls</li> <li>Secrets management with rotation</li> <li>Zero-trust networking (roadmap)</li> </ul>"},{"location":"architecture/#4-declarative-gitops-driven","title":"4. Declarative &amp; GitOps-Driven","text":"<ul> <li>All configuration stored in Git</li> <li>Automated reconciliation of desired state</li> <li>Audit trail through Git history</li> <li>Easy rollback capabilities</li> </ul>"},{"location":"architecture/#5-cloud-agnostic-with-pragmatic-defaults","title":"5. Cloud-Agnostic with Pragmatic Defaults","text":"<ul> <li>Multi-cloud support through abstraction layers</li> <li>Provider-specific optimizations where needed</li> <li>Start with AWS, expand to Azure/GCP</li> <li>On-premises capable (though cloud-first)</li> </ul>"},{"location":"architecture/#6-extensible-pluggable","title":"6. Extensible &amp; Pluggable","text":"<ul> <li>Plugin architecture for custom extensions</li> <li>Well-defined APIs for integration</li> <li>Modular components that can be adopted incrementally</li> <li>Community contributions encouraged</li> </ul>"},{"location":"architecture/#7-metrics-driven-improvement","title":"7. Metrics-Driven Improvement","text":"<ul> <li>Measure everything</li> <li>DORA metrics as first-class citizens</li> <li>A/B testing for platform changes</li> <li>Continuous optimization based on data</li> </ul>"},{"location":"architecture/#high-level-architecture","title":"High-Level Architecture","text":""},{"location":"architecture/#c4-model-context-diagram","title":"C4 Model - Context Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        External Systems                          \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502  \u2502  GitHub  \u2502  \u2502  Cloud   \u2502  \u2502Container \u2502  \u2502  Secrets \u2502        \u2502\n\u2502  \u2502  (SCM)   \u2502  \u2502 Provider \u2502  \u2502 Registry \u2502  \u2502  Manager \u2502        \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                    \u2502\n                                    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        Fawkes Platform                            \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502              Developer Portal (Backstage)                  \u2502  \u2502\n\u2502  \u2502         Self-Service | Catalog | Templates | Docs         \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                    \u2502                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502   CI/CD     \u2502   GitOps    \u2502Observability\u2502  Security   \u2502     \u2502\n\u2502  \u2502  (Jenkins)  \u2502  (ArgoCD)   \u2502(Prom/Graf)  \u2502(SonarQube)  \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502                                    \u2502                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502      Infrastructure Layer (Kubernetes + IaC)              \u2502  \u2502\n\u2502  \u2502            Terraform | Crossplane | Helm                  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                    \u2502\n                                    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      Application Teams                            \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502  \u2502  Team A  \u2502  \u2502  Team B  \u2502  \u2502  Team C  \u2502  \u2502  Team D  \u2502        \u2502\n\u2502  \u2502  Apps    \u2502  \u2502  Apps    \u2502  \u2502  Apps    \u2502  \u2502  Apps    \u2502        \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#key-boundaries","title":"Key Boundaries","text":"<p>North: Developer interaction through Backstage portal and Git South: Kubernetes clusters and cloud infrastructure East/West: External systems and services Core: Platform services providing CI/CD, GitOps, observability, security</p>"},{"location":"architecture/#component-overview","title":"Component Overview","text":""},{"location":"architecture/#1-developer-portal-backstage","title":"1. Developer Portal (Backstage)","text":"<p>Purpose: Single pane of glass for developer self-service</p> <p>Key Features: - Software catalog (services, APIs, resources) - Software templates (golden paths) - TechDocs (documentation as code) - Plugin ecosystem (CI/CD status, metrics, alerts)</p> <p>Technology: Backstage (TypeScript/React), PostgreSQL</p> <p>Integrations: - GitHub (repository discovery, authentication) - Jenkins (pipeline status) - ArgoCD (deployment status) - Grafana (metrics dashboards)</p>"},{"location":"architecture/#2-cicd-layer-jenkins","title":"2. CI/CD Layer (Jenkins)","text":"<p>Purpose: Continuous integration and build automation</p> <p>Key Features: - Pipeline as code (Jenkinsfile) - Dynamic Kubernetes agents - Shared pipeline libraries - Multi-stage builds (build, test, scan, package)</p> <p>Technology: Jenkins, Kubernetes plugin, Docker</p> <p>Pipelines: - Build pipeline (compile, unit test) - Security scan pipeline (SAST, dependency check, container scan) - Integration test pipeline - Deployment pipeline (publish artifacts, trigger CD)</p>"},{"location":"architecture/#3-gitops-layer-argocd","title":"3. GitOps Layer (ArgoCD)","text":"<p>Purpose: Declarative continuous delivery</p> <p>Key Features: - Git as source of truth - Automated sync and reconciliation - Progressive delivery (blue-green, canary) - Multi-cluster management - Rollback capabilities</p> <p>Technology: ArgoCD, Kustomize/Helm</p> <p>Repository Structure: <pre><code>gitops-repo/\n\u251c\u2500\u2500 apps/\n\u2502   \u251c\u2500\u2500 team-a/\n\u2502   \u251c\u2500\u2500 team-b/\n\u251c\u2500\u2500 platform/\n\u2502   \u251c\u2500\u2500 backstage/\n\u2502   \u251c\u2500\u2500 jenkins/\n\u2502   \u251c\u2500\u2500 prometheus/\n\u2514\u2500\u2500 infrastructure/\n    \u251c\u2500\u2500 clusters/\n    \u251c\u2500\u2500 namespaces/\n</code></pre></p>"},{"location":"architecture/#4-observability-stack","title":"4. Observability Stack","text":"<p>Purpose: Comprehensive monitoring, logging, and tracing</p> <p>Components:</p> <p>Metrics (Prometheus + Grafana): - Platform metrics (Jenkins, ArgoCD, Backstage) - Application metrics (custom + OpenTelemetry) - DORA metrics (automated collection) - Infrastructure metrics (Kubernetes, nodes)</p> <p>Logging (OpenSearch + Fluent Bit): - Centralized log aggregation - Structured logging - Log correlation with traces - Retention policies</p> <p>Tracing (Jaeger + OpenTelemetry): - Distributed tracing - Service dependency mapping - Performance analysis - Request flow visualization</p> <p>Alerting (Grafana Alerting): - Threshold-based alerts - Anomaly detection - Multi-channel notifications (Slack, PagerDuty, email)</p>"},{"location":"architecture/#5-security-layer","title":"5. Security Layer","text":"<p>Purpose: Shift-left security and compliance automation</p> <p>Components:</p> <p>Code Security (SonarQube): - Static analysis (SAST) - Code quality gates - Technical debt tracking - Security hotspots</p> <p>Container Security (Trivy): - Image vulnerability scanning - SBOM generation - Policy enforcement - Registry integration</p> <p>Secrets Management: - External Secrets Operator - Integration with cloud KMS - Secret rotation - Audit logging</p> <p>Policy Enforcement (Kyverno): - Admission control - Resource validation - Mutation policies - Reporting and compliance</p>"},{"location":"architecture/#6-dora-metrics-service","title":"6. DORA Metrics Service","text":"<p>Purpose: Automated collection and visualization of DORA metrics</p> <p>Architecture: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     Webhooks     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   GitHub    \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt; \u2502  DORA Metrics    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2502     Service      \u2502\n                                  \u2502   (Go/Python)    \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     Webhooks     \u2502                  \u2502\n\u2502   Jenkins   \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt; \u2502  - Calculates    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2502  - Stores        \u2502\n                                  \u2502  - Exposes       \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     Webhooks     \u2502                  \u2502\n\u2502   ArgoCD    \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt; \u2502                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                          \u2502\n                                          \u2502 Metrics\n                                          \u25bc\n                                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                  \u2502   Prometheus     \u2502\n                                  \u2502   PostgreSQL     \u2502\n                                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                          \u2502\n                                          \u2502 Query\n                                          \u25bc\n                                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                  \u2502     Grafana      \u2502\n                                  \u2502    Dashboards    \u2502\n                                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>Metrics Calculated: 1. Deployment Frequency: Deployments per day/week 2. Lead Time for Changes: Commit to production time 3. Change Failure Rate: Failed deployments / total deployments 4. Mean Time to Restore: Incident detection to resolution time</p>"},{"location":"architecture/#7-infrastructure-layer","title":"7. Infrastructure Layer","text":"<p>Purpose: Cloud infrastructure provisioning and management</p> <p>Components:</p> <p>Terraform: - Kubernetes cluster provisioning - VPC, networking, security groups - IAM roles and policies - Cloud resources (databases, caches, queues)</p> <p>Crossplane (Roadmap): - Kubernetes-native infrastructure management - Cloud-agnostic abstractions - GitOps-driven infrastructure - Self-service resource provisioning</p> <p>Helm: - Package management for Kubernetes - Platform component deployment - Application chart templating</p>"},{"location":"architecture/#data-flow","title":"Data Flow","text":""},{"location":"architecture/#1-application-deployment-flow","title":"1. Application Deployment Flow","text":"<pre><code>Developer commits code\n        \u2502\n        \u25bc\nGitHub webhook triggers Jenkins\n        \u2502\n        \u25bc\nJenkins Pipeline:\n\u251c\u2500\u2500 Checkout code\n\u251c\u2500\u2500 Build &amp; unit test\n\u251c\u2500\u2500 Security scanning (SonarQube, Trivy)\n\u251c\u2500\u2500 Build container image\n\u251c\u2500\u2500 Push to registry\n\u2514\u2500\u2500 Update GitOps repository\n        \u2502\n        \u25bc\nArgoCD detects change\n        \u2502\n        \u25bc\nArgoCD syncs application to Kubernetes\n        \u2502\n        \u25bc\nDeployment triggers DORA metrics webhook\n        \u2502\n        \u25bc\nDORA service updates metrics\n        \u2502\n        \u25bc\nGrafana displays updated dashboards\n</code></pre>"},{"location":"architecture/#2-platform-component-update-flow","title":"2. Platform Component Update Flow","text":"<pre><code>Platform team updates component config\n        \u2502\n        \u25bc\nCommit to GitOps repository\n        \u2502\n        \u25bc\nArgoCD detects drift\n        \u2502\n        \u25bc\nArgoCD applies changes to cluster\n        \u2502\n        \u25bc\nPrometheus scrapes new metrics\n        \u2502\n        \u25bc\nGrafana reflects changes\n</code></pre>"},{"location":"architecture/#3-developer-self-service-flow","title":"3. Developer Self-Service Flow","text":"<pre><code>Developer accesses Backstage\n        \u2502\n        \u25bc\nSelects template (e.g., \"Python Microservice\")\n        \u2502\n        \u25bc\nFills template parameters\n        \u2502\n        \u25bc\nBackstage Scaffolder:\n\u251c\u2500\u2500 Creates GitHub repository\n\u251c\u2500\u2500 Populates with template code\n\u251c\u2500\u2500 Configures CI/CD pipeline\n\u251c\u2500\u2500 Creates ArgoCD application\n\u2514\u2500\u2500 Registers in service catalog\n        \u2502\n        \u25bc\nDeveloper commits changes\n        \u2502\n        \u25bc\nAutomated CI/CD pipeline executes\n        \u2502\n        \u25bc\nApplication deployed to cluster\n</code></pre>"},{"location":"architecture/#4-observability-data-flow","title":"4. Observability Data Flow","text":"<pre><code>Applications emit telemetry\n        \u2502\n        \u251c\u2500\u2500&gt; Metrics \u2192 OpenTelemetry Collector \u2192 Prometheus\n        \u2502\n        \u251c\u2500\u2500&gt; Logs \u2192 Fluent Bit \u2192 OpenSearch\n        \u2502\n        \u2514\u2500\u2500&gt; Traces \u2192 OpenTelemetry Collector \u2192 Jaeger\n                                \u2502\n                                \u25bc\n                All data queryable via Grafana\n</code></pre>"},{"location":"architecture/#integration-patterns","title":"Integration Patterns","text":""},{"location":"architecture/#1-webhook-based-integration","title":"1. Webhook-Based Integration","text":"<p>Used for real-time event notification between components.</p> <p>Example: Jenkins \u2192 DORA Metrics Service <pre><code>Jenkins Pipeline Completes\n    \u2502\n    \u25bc\nWebhook POST to /webhook/build\n    \u2502\n    \u251c\u2500 Headers: X-Jenkins-Event, X-Build-Number\n    \u251c\u2500 Body: Build metadata (status, duration, commit SHA)\n    \u2502\n    \u25bc\nDORA Service processes event\n    \u2502\n    \u251c\u2500 Calculate lead time (commit \u2192 build completion)\n    \u251c\u2500 Update deployment frequency\n    \u2514\u2500 Store in PostgreSQL and expose to Prometheus\n</code></pre></p>"},{"location":"architecture/#2-pull-based-discovery","title":"2. Pull-Based Discovery","text":"<p>Used for service catalog and status updates.</p> <p>Example: Backstage \u2192 Kubernetes <pre><code>Backstage Kubernetes Plugin\n    \u2502\n    \u25bc\nQueries Kubernetes API (every 30s)\n    \u2502\n    \u251c\u2500 List pods by label selector\n    \u251c\u2500 Get deployment status\n    \u2514\u2500 Fetch resource metrics\n    \u2502\n    \u25bc\nDisplay in Backstage UI (real-time status)\n</code></pre></p>"},{"location":"architecture/#3-gitops-reconciliation","title":"3. GitOps Reconciliation","text":"<p>Used for declarative state management.</p> <p>Example: ArgoCD \u2192 Kubernetes <pre><code>ArgoCD watches Git repository\n    \u2502\n    \u25bc\nDetects drift (desired state \u2260 actual state)\n    \u2502\n    \u25bc\nReconciliation loop:\n    \u251c\u2500 Fetch manifests from Git\n    \u251c\u2500 Compare with cluster state\n    \u251c\u2500 Apply differences (kubectl apply)\n    \u2514\u2500 Update sync status\n    \u2502\n    \u25bc\nCluster converges to desired state\n</code></pre></p>"},{"location":"architecture/#4-api-based-integration","title":"4. API-Based Integration","text":"<p>Used for programmatic interactions.</p> <p>Example: Backstage Templates \u2192 GitHub API <pre><code>User triggers template scaffolding\n    \u2502\n    \u25bc\nBackstage calls GitHub API:\n    \u251c\u2500 POST /orgs/{org}/repos (create repository)\n    \u251c\u2500 PUT /repos/{repo}/contents/* (add files)\n    \u251c\u2500 POST /repos/{repo}/hooks (add webhooks)\n    \u2514\u2500 PUT /repos/{repo}/collaborators (set permissions)\n    \u2502\n    \u25bc\nRepository ready for development\n</code></pre></p>"},{"location":"architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/#defense-in-depth","title":"Defense in Depth","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Layer 7: Developer Education &amp; Awareness                   \u2502\n\u2502 - Security training, dojo modules                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Layer 6: Application Security                              \u2502\n\u2502 - SAST (SonarQube), dependency scanning, secret detection \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Layer 5: Container Security                                \u2502\n\u2502 - Image scanning (Trivy), SBOM, signed images             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Layer 4: Runtime Security                                  \u2502\n\u2502 - Policy enforcement (Kyverno), admission control          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Layer 3: Network Security                                  \u2502\n\u2502 - Network policies, service mesh, ingress controls        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Layer 2: Identity &amp; Access Management                      \u2502\n\u2502 - RBAC, service accounts, secrets management              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Layer 1: Infrastructure Security                           \u2502\n\u2502 - Encrypted storage, secure boot, hardened OS             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#security-scanning-pipeline","title":"Security Scanning Pipeline","text":"<pre><code>Code Commit\n    \u2502\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Stage 1: Source Code Analysis          \u2502\n\u2502 - SonarQube (SAST)                      \u2502\n\u2502 - git-secrets (credential scanning)    \u2502\n\u2502 - License compliance check              \u2502\n\u2502 Quality Gate: Block if critical issues \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Stage 2: Dependency Analysis            \u2502\n\u2502 - OWASP Dependency Check                \u2502\n\u2502 - npm audit / pip audit                 \u2502\n\u2502 Quality Gate: Block if high CVEs       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Stage 3: Container Image Scan           \u2502\n\u2502 - Trivy vulnerability scan              \u2502\n\u2502 - SBOM generation                       \u2502\n\u2502 Quality Gate: Block if critical vulns  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Stage 4: Policy Validation              \u2502\n\u2502 - Kyverno policy check                  \u2502\n\u2502 - Resource limits validation            \u2502\n\u2502 Quality Gate: Enforce policies         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502\n    \u25bc\nDeploy to Kubernetes\n</code></pre>"},{"location":"architecture/#secrets-management","title":"Secrets Management","text":"<p>Architecture: <pre><code>Application needs secret\n    \u2502\n    \u25bc\nRequests from Kubernetes Secret\n    \u2502\n    \u25bc\nExternal Secrets Operator:\n    \u2502\n    \u251c\u2500 Fetches from cloud provider (AWS Secrets Manager, Azure Key Vault, GCP Secret Manager)\n    \u251c\u2500 Creates/updates Kubernetes Secret\n    \u2514\u2500 Monitors for changes (auto-rotation)\n    \u2502\n    \u25bc\nSecret injected into pod as env var or volume\n</code></pre></p> <p>Best Practices: - No secrets in Git repositories - Secrets encrypted at rest and in transit - Automatic rotation every 90 days - Audit logging for all secret access - Least privilege access (RBAC)</p>"},{"location":"architecture/#multi-cloud-strategy","title":"Multi-Cloud Strategy","text":""},{"location":"architecture/#current-state-mvp-aws-focus","title":"Current State (MVP): AWS Focus","text":"<p>Rationale:  - Fastest time to MVP - Most mature Terraform provider - Largest market share - Extensive documentation and community</p> <p>AWS Components: - EKS (Kubernetes) - VPC, subnets, security groups - IAM roles and policies - ECR (container registry) - RDS (databases) - ElastiCache (caching) - S3 (storage) - Route 53 (DNS)</p>"},{"location":"architecture/#target-state-multi-cloud-abstraction","title":"Target State: Multi-Cloud Abstraction","text":"<p>Approach: Crossplane for cloud-agnostic infrastructure</p> <pre><code>Developer requests database\n    \u2502\n    \u25bc\nCreates Kubernetes Custom Resource:\nkind: Database\nspec:\n  engine: postgresql\n  size: small\n    \u2502\n    \u25bc\nCrossplane Composition:\n    \u2502\n    \u251c\u2500 AWS \u2192 Creates RDS instance\n    \u251c\u2500 Azure \u2192 Creates Azure Database for PostgreSQL\n    \u2514\u2500 GCP \u2192 Creates Cloud SQL instance\n    \u2502\n    \u25bc\nConnection details stored in Kubernetes Secret\n    \u2502\n    \u25bc\nApplication consumes database\n</code></pre> <p>Benefits: - Consistent API across clouds - GitOps-driven infrastructure - Self-service for developers - Reduced cloud vendor lock-in</p>"},{"location":"architecture/#multi-cloud-architecture","title":"Multi-Cloud Architecture","text":"<pre><code>                    Fawkes Control Plane\n                            \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                   \u2502                   \u2502\n        \u25bc                   \u25bc                   \u25bc\n    AWS Region          Azure Region        GCP Region\n        \u2502                   \u2502                   \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502  EKS  \u2502           \u2502  AKS  \u2502           \u2502  GKE  \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                   \u2502                   \u2502\n    App Workloads       App Workloads       App Workloads\n</code></pre> <p>Cluster Federation: - ArgoCD manages multiple clusters - Centralized observability (Prometheus, Grafana) - Unified developer portal (Backstage) - Cross-cluster service discovery</p>"},{"location":"architecture/#scalability-performance","title":"Scalability &amp; Performance","text":""},{"location":"architecture/#horizontal-scaling","title":"Horizontal Scaling","text":"<p>Kubernetes Cluster: - Node autoscaling (3-100 nodes) - Pod autoscaling (HPA based on CPU/memory/custom metrics) - Cluster API for cluster lifecycle management</p> <p>Platform Components: - Jenkins: Dynamic agents (spin up/down as needed) - Prometheus: Sharding and federation for large environments - Grafana: Read replicas for dashboard queries</p>"},{"location":"architecture/#performance-targets","title":"Performance Targets","text":"Metric Target Measurement CI Build Time (small) &lt; 5 minutes P95 CI Build Time (large) &lt; 15 minutes P95 Deployment Time &lt; 2 minutes P95 Backstage Page Load &lt; 2 seconds P95 Grafana Dashboard Load &lt; 3 seconds P95 ArgoCD Sync Time &lt; 30 seconds P95 GitOps Drift Detection &lt; 3 minutes Maximum"},{"location":"architecture/#resource-allocation-per-cluster","title":"Resource Allocation (per cluster)","text":"<p>MVP Scale (5 teams, 25 services): - Kubernetes nodes: 5-10 (16GB RAM, 4 vCPU each) - Total cluster capacity: ~80GB RAM, 40 vCPU - Platform overhead: ~30GB RAM, 15 vCPU - Application capacity: ~50GB RAM, 25 vCPU</p> <p>Production Scale (20 teams, 200 services): - Kubernetes nodes: 20-50 (32GB RAM, 8 vCPU each) - Total cluster capacity: ~640GB RAM, 400 vCPU - Platform overhead: ~100GB RAM, 50 vCPU - Application capacity: ~540GB RAM, 350 vCPU</p>"},{"location":"architecture/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Backstage: Redis for session and catalog caching</li> <li>Jenkins: Shared workspace volumes, Docker layer caching</li> <li>ArgoCD: Repository caching, manifest caching</li> <li>Grafana: Query result caching (5-minute TTL)</li> </ul>"},{"location":"architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"architecture/#core-platform","title":"Core Platform","text":"Component Technology Version Rationale Container Orchestration Kubernetes 1.28+ Industry standard, CNCF graduated Infrastructure as Code Terraform 1.6+ Mature, multi-cloud, large community Developer Portal Backstage Latest CNCF incubating, Spotify-proven CI/CD Jenkins 2.4+ Enterprise adoption, extensive plugins GitOps ArgoCD 2.9+ Kubernetes-native, progressive delivery Container Registry Harbor 2.9+ Security scanning, RBAC, replication"},{"location":"architecture/#observability","title":"Observability","text":"Component Technology Version Rationale Metrics Prometheus 2.48+ CNCF graduated, Kubernetes-native Visualization Grafana 10+ Rich dashboards, multi-source support Logging OpenSearch 2.11+ Open source, Elasticsearch-compatible Log Collection Fluent Bit 2.2+ Lightweight, high-performance Tracing Jaeger 1.52+ CNCF graduated, OpenTelemetry support Instrumentation OpenTelemetry 1.21+ CNCF project, vendor-neutral"},{"location":"architecture/#security","title":"Security","text":"Component Technology Version Rationale SAST SonarQube 10+ Code quality and security analysis Container Scanning Trivy 0.48+ Comprehensive vulnerability detection Policy Engine Kyverno 1.11+ Kubernetes-native, easier than OPA Secrets External Secrets Operator 0.9+ Multi-provider, automated rotation"},{"location":"architecture/#data-stores","title":"Data Stores","text":"Component Technology Version Purpose Backstage Backend PostgreSQL 15+ Service catalog, user data DORA Metrics PostgreSQL 15+ Historical metrics storage SonarQube PostgreSQL 15+ Code analysis data Jenkins File system + PostgreSQL - Build data, job configs"},{"location":"architecture/#programming-languages","title":"Programming Languages","text":"Purpose Language Rationale Platform Services Go Performance, Kubernetes ecosystem DORA Metrics Service Go or Python Developer preference, quick development Backstage Plugins TypeScript Backstage requirement Scripts/Automation Bash, Python Platform automation, tooling IaC Modules HCL (Terraform) Infrastructure provisioning"},{"location":"architecture/#future-architecture","title":"Future Architecture","text":""},{"location":"architecture/#6-month-roadmap","title":"6-Month Roadmap","text":"<p>Multi-Cloud Expansion: - Azure support via Terraform - GCP support via Terraform - Crossplane implementation for cloud abstraction</p> <p>Advanced Security: - Service mesh (Linkerd) for mTLS - Runtime security (Falco) - Policy-as-code enforcement (expanded Kyverno policies) - SLSA compliance</p> <p>Enhanced Observability: - Distributed tracing adoption (100% of services) - Cost visibility (OpenCost integration) - SLO tracking and error budgets</p> <p>Dojo Expansion: - 10+ learning modules - Hands-on labs with live platform - Certification integration complete</p>"},{"location":"architecture/#12-month-vision","title":"12-Month Vision","text":"<p>Platform Maturity: - CNCF Sandbox/Incubating project - 50+ production deployments - Enterprise-grade stability (99.9% uptime)</p> <p>Advanced Features: - Multi-region deployments - Disaster recovery automation - Blue-green cluster upgrades - Chaos engineering integration</p> <p>Ecosystem: - 20+ community plugins - Commercial support partnerships - Training and certification program</p> <p>Research &amp; Development: - AI-powered platform insights - Predictive failure detection - Automated performance optimization</p>"},{"location":"architecture/#architectural-decision-records-adrs","title":"Architectural Decision Records (ADRs)","text":"<p>Major architectural decisions are documented in ADRs stored in <code>/docs/adr/</code>:</p> <ul> <li>ADR-001: Kubernetes as Container Orchestration Platform</li> <li>ADR-002: Backstage for Developer Portal</li> <li>ADR-003: ArgoCD for GitOps</li> <li>ADR-004: Jenkins for CI/CD</li> <li>ADR-005: Terraform over Pulumi for IaC</li> <li>ADR-006: PostgreSQL for Data Persistence</li> </ul>"},{"location":"architecture/#diagrams","title":"Diagrams","text":""},{"location":"architecture/#component-interaction-diagram","title":"Component Interaction Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         Backstage                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502Catalog \u2502  \u2502Templates\u2502 \u2502TechDocs\u2502  \u2502 Plugins\u2502  \u2502  Auth  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502           \u2502           \u2502           \u2502           \u2502\n       \u2502           \u2502           \u2502           \u2502           \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      Kubernetes API                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502           \u2502           \u2502           \u2502           \u2502\n   \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u25bc\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u25bc\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u25bc\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u25bc\u2500\u2500\u2500\u2510\n   \u2502Jenkins\u2502   \u2502ArgoCD\u2502   \u2502Prom  \u2502   \u2502Kyverno\u2502  \u2502Apps \u2502\n   \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u252c\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u252c\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u252c\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u252c\u2500\u2500\u2500\u2518\n       \u2502          \u2502          \u2502          \u2502          \u2502\n   \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502              Kubernetes Workloads                       \u2502\n   \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n   \u2502  \u2502  Pods  \u2502  \u2502Services\u2502  \u2502Ingress \u2502  \u2502 Volumes\u2502       \u2502\n   \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#deployment-pipeline-detail","title":"Deployment Pipeline Detail","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Git Commit                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u2502\n                         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            Jenkins Pipeline Triggered                    \u2502\n\u2502                                                          \u2502\n\u2502  Stage 1: Build          [3 min]                        \u2502\n\u2502  \u251c\u2500 Checkout code                                       \u2502\n\u2502  \u251c\u2500 Dependency resolution                               \u2502\n\u2502  \u251c\u2500 Compile                                             \u2502\n\u2502  \u2514\u2500 Unit tests                                          \u2502\n\u2502                                                          \u2502\n\u2502  Stage 2: Security Scan  [2 min]                        \u2502\n\u2502  \u251c\u2500 SonarQube SAST                                      \u2502\n\u2502  \u251c\u2500 Dependency check                                    \u2502\n\u2502  \u2514\u2500 Secret scanning                                     \u2502\n\u2502                                                          \u2502\n\u2502  Stage 3: Package        [1 min]                        \u2502\n\u2502  \u251c\u2500 Build Docker image                                  \u2502\n\u2502  \u251c\u2500 Trivy scan                                          \u2502\n\u2502  \u2514\u2500 Push to Harbor                                      \u2502\n\u2502                                                          \u2502\n\u2502  Stage 4: Deploy         [30 sec]                       \u2502\n\u2502  \u251c\u2500 Update GitOps repo                                  \u2502\n\u2502  \u2514\u2500 Trigger DORA webhook                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u2502\n                         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              ArgoCD Detects Change                       \u2502\n\u2502                                                          \u2502\n\u2502  \u251c\u2500 Fetch manifests from Git                            \u2502\n\u2502  \u251c\u2500 Validate with Kyverno policies                      \u2502\n\u2502  \u251c\u2500 Apply to Kubernetes                                 \u2502\n\u2502  \u2514\u2500 Monitor rollout status                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u2502\n                         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502               Application Running                        \u2502\n\u2502                                                          \u2502\n\u2502  \u251c\u2500 Prometheus scrapes metrics                          \u2502\n\u2502  \u251c\u2500 Fluent Bit collects logs                            \u2502\n\u2502  \u251c\u2500 OpenTelemetry traces requests                       \u2502\n\u2502  \u2514\u2500 Grafana visualizes data                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#conclusion","title":"Conclusion","text":"<p>This architecture provides a solid foundation for a production-ready Internal Delivery Platform that:</p> <p>\u2705 Prioritizes developer experience through self-service and automation \u2705 Integrates security throughout the delivery pipeline \u2705 Provides comprehensive observability and DORA metrics \u2705 Follows GitOps principles for declarative management \u2705 Scales from small teams to enterprise deployments \u2705 Remains extensible and customizable  </p> <p>The architecture will evolve based on community feedback, adoption patterns, and emerging best practices in platform engineering.</p> <p>Next Steps: 1. Review and approve this architecture 2. Create detailed ADRs for key decisions 3. Begin MVP implementation following this blueprint 4. Iterate based on early adopter feedback</p> <p>Questions or Feedback: Open a GitHub Discussion or contact the architecture team</p> <p>Document Maintainers: Platform Architecture Team Review Cadence: Quarterly or when major changes proposed Last Architectural Review: October 4, 2025</p>"},{"location":"business_case/","title":"Fawkes: Business Case &amp; Value Proposition","text":"<p>Document Purpose: Comprehensive business justification for AWS Activate partnership Target Audience: AWS Activate reviewers, potential investors, enterprise prospects Company Stage: Pre-seed, bootstrapped, open-source foundation Last Updated: October 7, 2025</p>"},{"location":"business_case/#executive-summary","title":"Executive Summary","text":"<p>Fawkes is an open-source Internal Delivery Platform (IDP) that transforms how organizations build and operate software delivery infrastructure. By combining best-in-class tooling (Backstage, Jenkins, ArgoCD, Kubernetes) with an integrated learning system (Fawkes Dojo), we're solving two critical problems simultaneously:</p> <ol> <li>Platform Engineering Skills Gap: There are 300K+ platform engineering job openings but few trained practitioners</li> <li>Platform Adoption Barrier: Organizations struggle to implement IDPs due to complexity and lack of expertise</li> </ol> <p>Our Solution: An AWS-native platform that teams can deploy in hours (not months) + a comprehensive learning system that trains the engineers who will operate it.</p> <p>Traction to Date: - \u2705 Complete platform architecture with 8 documented ADRs - \u2705 50+ pages of technical documentation - \u2705 5-belt Dojo curriculum (20 modules) designed and documented - \u2705 Open-source MIT license with active GitHub repository - \u2705 Partnership discussions with Platform Engineering University - \u2705 Growing community interest (early stage)</p> <p>AWS Activate Request: $25,000 in credits to: - Deploy production reference implementation on AWS - Launch Fawkes Dojo learning platform - Support 200+ concurrent learners - Enable 20+ enterprise pilots</p> <p>12-Month Goal: 500 GitHub stars, 200 certified learners, 20 enterprise adoptions, $10K MRR from managed services</p>"},{"location":"business_case/#problem-statement","title":"Problem Statement","text":""},{"location":"business_case/#the-platform-engineering-crisis","title":"The Platform Engineering Crisis","text":"<p>Organizations are hemorrhaging productivity and talent due to infrastructure complexity:</p> <p>The Skills Gap: - 300,000+ platform engineering jobs unfilled globally (LinkedIn, 2024) - Average time to hire a platform engineer: 4-6 months - 73% of engineering leaders cite \"platform skills\" as top constraint (Gartner, 2024) - Zero comprehensive training programs exist for platform engineering</p> <p>The Adoption Challenge: - Average time to deploy an IDP: 6-12 months - 68% of platform initiatives fail due to complexity (McKinsey, 2023) - Organizations spend $500K-$2M+ building custom platforms - Most platforms abandoned after 18 months (lack of adoption)</p> <p>The Business Impact:</p> <p>According to DORA research (2023): - Low performers deploy 417x less frequently than elite performers - Lead time for changes: 6,570x longer for low performers - Organizations lose $1-2M annually in developer productivity - 35% annual developer turnover due to poor tooling/processes</p> <p>Real-World Example:</p> <p>A typical 200-person engineering organization: - 100 developers spending 70% of time on non-value-added activities - Lost productivity: 70 FTE \u00d7 $150K loaded cost = $10.5M/year - Opportunity cost: Features not built, markets not entered - Talent drain: Top performers leave for companies with better platforms</p>"},{"location":"business_case/#why-current-solutions-fail","title":"Why Current Solutions Fail","text":"<p>Commercial Platforms (Humanitec, Kratix, etc.): - \u274c Expensive ($50K-$200K/year per team) - \u274c Vendor lock-in and proprietary APIs - \u274c Limited customization for specific needs - \u274c No learning/training included</p> <p>DIY Approaches: - \u274c Take 12-18 months to build - \u274c Require 3-5 FTE platform engineers - \u274c Often abandoned due to complexity - \u274c No standardization across industry</p> <p>Training Programs: - \u274c Fragmented (blog posts, scattered courses) - \u274c Theory-only (no hands-on practice) - \u274c Expensive ($3K-$10K per person) - \u274c Not connected to real platform implementation</p>"},{"location":"business_case/#the-market-opportunity","title":"The Market Opportunity","text":"<p>Platform Engineering Market Size: - Current: $4.2B (2024) - Projected: $12.8B by 2028 (35% CAGR) - Source: Gartner Platform Engineering Market Analysis</p> <p>Target Addressable Market: - Primary: 50,000 mid-size companies (100-5,000 employees) undergoing digital transformation - Secondary: 100,000 startups scaling engineering teams (20-100 engineers) - Tertiary: 5,000 enterprises seeking inner-source platform solutions</p> <p>Revenue Opportunity: - Managed Service: $500-$2,000/month per organization - Enterprise Support: $50K-$200K/year contracts - Training/Certification: $500-$1,000 per learner - Consulting: $200-$300/hour implementation services</p>"},{"location":"business_case/#solution-fawkes-platform-dojo","title":"Solution: Fawkes Platform + Dojo","text":""},{"location":"business_case/#what-is-fawkes","title":"What is Fawkes?","text":"<p>Fawkes is a production-ready, open-source Internal Delivery Platform that provides:</p> <p>For Organizations: - \ud83d\ude80 Deploy complete IDP in hours (not months) - \ud83d\udd27 Best-practice configuration out of the box - \ud83d\udcca Automated DORA metrics collection and visualization - \ud83d\udd10 Security and compliance baked in (DevSecOps) - \u2601\ufe0f AWS-native with multi-cloud roadmap - \ud83d\udcda Comprehensive documentation and support</p> <p>For Engineers: - \ud83c\udf93 Learn platform engineering through hands-on Dojo system - \ud83e\udd4b Progress through 5 belt levels (White \u2192 Yellow \u2192 Green \u2192 Brown \u2192 Black) - \ud83c\udfc6 Earn recognized certifications valued by employers - \ud83d\udc65 Join supportive community of practitioners - \ud83d\udcbc Increase earning potential (platform engineers earn 20-30% more)</p>"},{"location":"business_case/#core-technology-stack","title":"Core Technology Stack","text":"<p>Developer Experience: - Backstage: Service catalog and developer portal (by Spotify) - TechDocs: Integrated documentation - Golden Path Templates: Scaffolding for new services</p> <p>CI/CD &amp; Deployment: - Jenkins: Continuous integration pipelines - ArgoCD: GitOps-based continuous deployment - Harbor: Container registry and artifact management</p> <p>Infrastructure: - Kubernetes/EKS: Container orchestration - Terraform: Infrastructure as Code - Helm: Package management</p> <p>Observability: - Prometheus &amp; Grafana: Metrics and dashboards - OpenSearch: Log aggregation and analysis - Jaeger: Distributed tracing - Custom DORA metrics automation</p> <p>Collaboration: - Mattermost: Team communication - Focalboard: Project tracking and kanban boards</p> <p>Security: - Trivy: Container vulnerability scanning - Kyverno: Policy enforcement - AWS Secrets Manager: Secrets management</p>"},{"location":"business_case/#the-fawkes-dojo-immersive-learning-system","title":"The Fawkes Dojo: Immersive Learning System","text":"<p>Unique Value Proposition: The only platform that includes comprehensive learning.</p> <p>5-Belt Progression System:</p> <p>\ud83e\udd4b White Belt (8 hours): Platform Fundamentals - What IDPs are and why they matter - DORA metrics deep-dive - First deployment on Fawkes - Certification: \"Fawkes Platform Operator\"</p> <p>\ud83d\udfe1 Yellow Belt (8 hours): CI/CD Mastery - Build custom Jenkins pipelines - Security scanning and quality gates - Artifact management - Certification: \"Fawkes CI/CD Specialist\"</p> <p>\ud83d\udfe2 Green Belt (8 hours): GitOps &amp; Deployment - ArgoCD and GitOps workflows - Blue-green and canary deployments - Multi-environment management - Certification: \"Fawkes Deployment Engineer\"</p> <p>\ud83d\udfe4 Brown Belt (8 hours): Observability &amp; SRE - Full observability stack implementation - DORA metrics dashboards - SLIs, SLOs, and error budgets - Incident response - Certification: \"Fawkes SRE Practitioner\"</p> <p>\u26ab Black Belt (8 hours): Platform Architecture - Design platforms for new organizations - Multi-tenancy and governance - Security architecture - Mentor others - Certification: \"Fawkes Platform Architect\"</p> <p>Total Time Investment: 40 hours (1 week full-time or 5 weeks part-time)</p> <p>Learning Features: - \u2705 Hands-on labs in isolated Kubernetes namespaces - \u2705 Auto-graded exercises with immediate feedback - \u2705 Video content + written documentation - \u2705 Real tools (not toy examples) - \u2705 Community support via Mattermost - \u2705 Recognized digital badges and certificates</p>"},{"location":"business_case/#competitive-advantages","title":"Competitive Advantages","text":"Feature Fawkes Commercial IDPs DIY Approach Cost Free (open source) $50K-$200K/year $300K-$1M to build Time to Deploy Hours Weeks 6-12 months Learning Included \u2705 Comprehensive Dojo \u274c None \u274c None AWS-Native \u2705 Optimized \u26a0\ufe0f Generic cloud \u26a0\ufe0f Varies Customization \u2705 Full control \u274c Limited \u2705 Full control Community \u2705 Open source \u274c Vendor support only \u274c None DORA Metrics \u2705 Automated \u26a0\ufe0f Basic \u274c DIY Vendor Lock-in \u2705 None (MIT) \u274c High \u2705 None"},{"location":"business_case/#business-model","title":"Business Model","text":""},{"location":"business_case/#revenue-streams-roadmap","title":"Revenue Streams (Roadmap)","text":"<p>Phase 1: Open Source Foundation (Current - Months 1-6) - Focus: Build community, validate product-market fit - Revenue: $0 (investment in ecosystem) - Success Metrics: GitHub stars, contributors, adoptions</p> <p>Phase 2: Managed Service (SaaS) (Months 7-12) - Offering: Hosted Fawkes platform managed by core team - Pricing: $500-$2,000/month per organization - Target: 10-20 pilot customers - Revenue Target: $10K MRR by month 12</p> <p>Phase 3: Enterprise Support &amp; Consulting (Year 2) - Support Contracts: $50K-$200K/year   - 24/7 support   - Custom feature development   - Dedicated success manager - Implementation Services: $200-$300/hour   - Platform customization   - Migration from legacy systems   - Training and workshops - Revenue Target: $500K ARR by end of year 2</p> <p>Phase 4: Certification &amp; Training (Year 2-3) - Individual Certification: $299-$499 per belt - Corporate Training: $5K-$10K per cohort (10-20 people) - Train-the-Trainer: $50K enterprise licensing - Revenue Target: $200K ARR from training by year 3</p> <p>Phase 5: Ecosystem Expansion (Year 3+) - Marketplace: Platform extensions and integrations (20% commission) - Partnerships: Reseller agreements with consultancies - Advanced Features: Premium modules for enterprise (compliance, audit, advanced security) - Revenue Target: $2M+ ARR by year 3</p>"},{"location":"business_case/#customer-acquisition-strategy","title":"Customer Acquisition Strategy","text":"<p>Inbound (Primary): 1. Open Source Community:    - GitHub repository with excellent documentation    - Weekly blog posts on platform engineering topics    - Conference talks and webinars    - YouTube tutorials and demos</p> <ol> <li>Dojo Learning Platform:</li> <li>Free access drives platform adoption</li> <li>Certified learners become advocates in their organizations</li> <li> <p>Job placement partnerships create network effects</p> </li> <li> <p>SEO &amp; Content Marketing:</p> </li> <li>Technical guides ranking for \"how to build IDP\"</li> <li>DORA metrics calculators and tools</li> <li>Platform engineering best practices content</li> </ol> <p>Outbound (Secondary): 1. Enterprise Pilots:    - Identify 50 target accounts (Fortune 2000)    - Offer free managed service pilot (3 months)    - Convert 20% to paid customers</p> <ol> <li>Platform Engineering University Partnership:</li> <li>Co-branded certification program</li> <li>Joint webinars and events</li> <li> <p>Shared student pipeline</p> </li> <li> <p>AWS Marketplace:</p> </li> <li>List Fawkes managed service on AWS Marketplace</li> <li>Leverage AWS seller network</li> <li>Qualify for AWS co-sell programs</li> </ol>"},{"location":"business_case/#unit-economics-managed-service","title":"Unit Economics (Managed Service)","text":"<p>Customer Acquisition Cost (CAC): - Inbound (organic): $500-$1,000 per customer - Outbound (sales): $5,000-$10,000 per customer - Blended CAC Target: $2,000</p> <p>Annual Contract Value (ACV): - Starter Plan: $6K/year ($500/month) - Growth Plan: $12K/year ($1,000/month) - Enterprise Plan: $24K+/year ($2,000+/month) - Average ACV: $12K</p> <p>Gross Margin: - AWS Infrastructure: $3,200/year per customer - Support Costs (10% engineering time): $2,000/year - Gross Margin: 57%</p> <p>Lifetime Value (LTV): - Average Customer Lifetime: 3-5 years - Churn Rate (target): 10% annually - LTV: $12K \u00d7 4 years \u00d7 0.57 margin = $27,360</p> <p>LTV:CAC Ratio: 13.7:1 (target &gt; 3:1) \u2705</p> <p>Payback Period: 2.3 months (target &lt; 12 months) \u2705</p>"},{"location":"business_case/#why-aws-activate-credits-matter","title":"Why AWS Activate Credits Matter","text":""},{"location":"business_case/#current-constraints","title":"Current Constraints","text":"<p>Bootstrap Reality: - Funding: $0 institutional investment (self-funded) - Team: 1-2 core contributors + community - Infrastructure: Using personal AWS accounts ($100-200/month) - Growth Blockers:   - Cannot afford 3-environment setup for production validation   - Cannot provide demo environments for prospects   - Cannot launch Dojo platform at scale   - Cannot support community contributor testing</p> <p>The Chicken-and-Egg Problem: - Need production deployment to attract enterprise customers - Need enterprise customers to afford infrastructure - Need infrastructure to train community - Need trained community to build credibility</p> <p>AWS Activate Breaks This Cycle \ud83d\ude80</p>"},{"location":"business_case/#credit-utilization-plan","title":"Credit Utilization Plan","text":"<p>Phase 1: Foundation (Months 1-3) - $5,000 credits</p> <p>Objectives: - Deploy production-grade reference implementation - Complete all AWS-specific documentation - Validate architecture at scale</p> <p>Deliverables: - 3-environment setup (dev/staging/prod) on EKS - Terraform modules for reproducible deployments - AWS deployment guide with troubleshooting - Cost optimization documentation - 5+ blog posts on AWS platform engineering</p> <p>AWS Services Used: - EKS clusters across 3 environments - RDS PostgreSQL instances - S3 for artifacts and backups - CloudWatch for monitoring - Application Load Balancers</p> <p>Success Metrics: - Reference implementation deployed and documented - 10+ organizations testing deployment guides - 50+ GitHub stars - 5+ community contributors</p> <p>Phase 2: Community Launch (Months 4-6) - $5,000 credits</p> <p>Objectives: - Launch Fawkes Dojo learning platform - Support initial learner cohort - Build teaching infrastructure</p> <p>Deliverables: - Dojo learning environment with 50+ learner namespaces - White Belt and Yellow Belt modules live - Video content for all Phase 1 modules - Community support channels (Mattermost) - First 50 learners certified</p> <p>Infrastructure Expansion: - Dojo provisioning service (auto-create learner environments) - Lab validation system (auto-grading) - Increased compute for concurrent learners - Enhanced monitoring for learning analytics</p> <p>Success Metrics: - 50+ learners complete White Belt - 25+ learners complete Yellow Belt - Net Promoter Score (NPS) &gt; 50 - 100+ GitHub stars - 10+ active contributors</p> <p>Phase 3: Scale &amp; Enterprise (Months 7-12) - $15,000 credits</p> <p>Objectives: - Scale to 200+ concurrent learners - Launch 10+ enterprise pilot programs - Begin managed service beta - Expand to multi-region</p> <p>Deliverables: - All 5 belt levels complete and live - 200+ learners certified across all belts - 10 enterprise pilots running on managed service - Multi-region AWS deployment (US-East, US-West, EU-West) - AWS Marketplace listing</p> <p>Infrastructure at Scale: - Production environment supporting 50+ organizations - Dojo platform at full capacity (200 concurrent) - Multi-region failover and DR - Advanced monitoring and cost optimization - Enterprise-grade security and compliance</p> <p>Success Metrics: - 200+ Dojo certifications issued - 10 enterprise pilots (5 converting to paid) - $10K MRR from managed service - 500+ GitHub stars - 25+ active contributors - 50+ organizations deployed Fawkes on AWS</p>"},{"location":"business_case/#expected-outcomes-for-aws","title":"Expected Outcomes for AWS","text":"<p>Direct Benefits: 1. Increased AWS Consumption:    - 50+ organizations deploying Fawkes on AWS    - Average $2K-5K/month AWS spend per organization    - Total AWS spend driven: $100K-250K/month by month 12</p> <ol> <li>EKS Adoption:</li> <li>Every Fawkes deployment uses Amazon EKS</li> <li>Reference implementation showcases EKS best practices</li> <li> <p>Training content educates on EKS features</p> </li> <li> <p>Developer Education:</p> </li> <li>200+ engineers trained on AWS services</li> <li>Hands-on experience with EKS, RDS, S3, CloudWatch</li> <li> <p>Each certified engineer influences their organization</p> </li> <li> <p>Ecosystem Contribution:</p> </li> <li>Open-source tooling improves AWS platform ecosystem</li> <li>Documentation benefits all AWS EKS users</li> <li>Best practices shared with community</li> </ol> <p>Indirect Benefits: 1. AWS Marketplace Growth:    - Fawkes listed on AWS Marketplace (Year 2)    - Drives additional AWS consumption    - Success story for AWS Activate program</p> <ol> <li>Community Amplification:</li> <li>Every Dojo graduate is an AWS advocate</li> <li>Conference talks feature AWS implementation</li> <li> <p>Blog content references AWS services</p> </li> <li> <p>Enterprise Pipeline:</p> </li> <li>Fawkes enterprise customers are AWS enterprise customers</li> <li>Shared account team coordination</li> <li> <p>Co-selling opportunities</p> </li> <li> <p>Innovation Showcase:</p> </li> <li>Modern architecture patterns on AWS</li> <li>Demonstrates AWS capabilities for platform engineering</li> <li>Case study for AWS marketing</li> </ol>"},{"location":"business_case/#market-validation-traction","title":"Market Validation &amp; Traction","text":""},{"location":"business_case/#current-traction-pre-launch","title":"Current Traction (Pre-Launch)","text":"<p>Technical Foundation: - \u2705 8 Architecture Decision Records (ADRs) documented - \u2705 Complete platform architecture designed - \u2705 50+ pages of technical documentation - \u2705 Terraform modules for AWS deployment (in progress) - \u2705 Dojo curriculum: 20 modules across 5 belts designed</p> <p>Community Interest: - \u26a0\ufe0f GitHub repository public (early stage) - \u26a0\ufe0f Initial discussions with Platform Engineering University - \u26a0\ufe0f Interest from 5+ organizations for pilot programs - \u26a0\ufe0f LinkedIn posts generating engagement</p> <p>Competitive Analysis Validated: - Humanitec: $50K-$200K/year (confirmed via sales conversations) - Kratix: Open source but limited adoption (3K GitHub stars) - DIY platforms: 12-18 month build time (validated via engineering leader interviews)</p>"},{"location":"business_case/#product-market-fit-signals","title":"Product-Market Fit Signals","text":"<p>Problem Validation: - 300K+ platform engineering job postings (LinkedIn data) - 73% of eng leaders cite skills gap (Gartner survey) - 68% of platform initiatives fail (McKinsey research) - $10.5M average annual productivity loss (DORA research application)</p> <p>Solution Validation: - Backstage (Spotify): 100K+ GitHub stars validates developer portal approach - ArgoCD: 17K+ stars validates GitOps - Platform Engineering: Fastest-growing category in DevOps (Google Trends +400% since 2022)</p> <p>Willingness to Pay: - Organizations spending $500K-2M building custom platforms - Consultancies charging $200-300/hour for implementation - Training courses: $3K-10K per person - Our pricing: $6K-24K/year (80-95% discount vs. DIY)</p>"},{"location":"business_case/#early-adopter-pipeline","title":"Early Adopter Pipeline","text":"<p>Tier 1: Enterprise Pilots (In Discussions) - Mid-size financial services company (500 engineers) - Healthcare startup (50 engineers, Series B) - E-commerce platform (200 engineers) - Government contractor (150 engineers, compliance-focused) - Estimated pilot conversions: 20-40%</p> <p>Tier 2: Open Source Users (Expected) - Startups scaling from 10-50 engineers - Individual engineers learning platform skills - Consultancies evaluating for client projects - Estimated: 50-100 deployments in first 6 months</p> <p>Tier 3: Training Customers - Platform Engineering University students - Bootcamp graduates seeking specialization - Mid-career developers transitioning to platform roles - Estimated: 200+ learners in first year</p>"},{"location":"business_case/#team-expertise","title":"Team &amp; Expertise","text":""},{"location":"business_case/#foundermaintainer","title":"Founder/Maintainer","text":"<p>Philip Ruff - LinkedIn: linkedin.com/in/phil.ruff - Email: phil.ruff@pm.com - GitHub: github.com/paruff</p> <p>Background: - 15 years of experience in platform engineering / DevOps / Cloud infrastructure - SAIC platform - AWS certifications: Solutions Architect, SysOps Engineer, Devloper</p> <p>Relevant Experience: - Led teams of 15 engineers</p> <p>Why Fawkes: - Experienced firsthand the pain of building platforms from scratch - Witnessed organizations waste $1M+ on failed platform initiatives - Passionate about education and reducing barrier to entry - Committed to open source and community-driven development</p>"},{"location":"business_case/#advisory-support-network","title":"Advisory &amp; Support Network","text":"<p>Technical Advisors (Target): - [Platform engineering leader from prominent tech company] - [AWS solutions architect or principal engineer] - [Open source community leaders from Backstage, ArgoCD, etc.]</p> <p>Business Advisors (Target): - [SaaS founder/CEO with experience scaling open source companies] - [Platform Engineering University leadership] - [Enterprise sales leader with experience in DevOps/cloud tools]</p> <p>Community Contributors (Current &amp; Growing): - Active GitHub contributors - Dojo beta testers - Documentation writers - Content creators</p>"},{"location":"business_case/#go-to-market-strategy","title":"Go-To-Market Strategy","text":""},{"location":"business_case/#year-1-roadmap-next-12-months","title":"Year 1 Roadmap (Next 12 Months)","text":"<p>Q1 2025: Foundation (Months 1-3) - \u2705 Secure AWS Activate credits - \u2705 Deploy production reference implementation - \u2705 Complete all AWS documentation - \u2705 Launch GitHub repository publicly - \u2705 Begin content marketing (2 blog posts/week) - Target: 100 GitHub stars, 10 contributors</p> <p>Q2 2025: Community Launch (Months 4-6) - \u2705 Launch Fawkes Dojo (White + Yellow Belts) - \u2705 Enroll first 50 learners - \u2705 Partnership agreement with Platform Engineering University - \u2705 First conference talk accepted - \u2705 Begin enterprise pilot outreach - Target: 300 GitHub stars, 50 certified learners, 3 pilot commitments</p> <p>Q3 2025: Scale (Months 7-9) - \u2705 Complete all 5 Dojo belts - \u2705 Launch managed service beta (5 customers) - \u2705 100+ certified learners - \u2705 Speak at 2 major conferences (KubeCon, PlatformCon, etc.) - \u2705 Launch AWS Marketplace listing - Target: 500 GitHub stars, 100 learners, 5 paying customers, $5K MRR</p> <p>Q4 2025: Momentum (Months 10-12) - \u2705 200+ total certified learners - \u2705 10 managed service customers - \u2705 First enterprise support contract ($50K) - \u2705 Multi-region AWS deployment live - \u2705 Community-driven content (guest posts, case studies) - Target: 750 GitHub stars, 200 learners, 10 customers, $15K MRR</p>"},{"location":"business_case/#marketing-channels","title":"Marketing Channels","text":"<p>Content Marketing (Primary): - Blog: 2-3 technical posts per week   - Platform engineering best practices   - DORA metrics deep-dives   - AWS deployment guides   - Case studies and success stories - YouTube: Weekly video tutorials   - Dojo module previews   - Platform demos   - Expert interviews - Podcast: Launch \"Platform Engineering Podcast\" (Q2)   - Interview industry leaders   - Discuss trends and challenges   - Feature Fawkes success stories</p> <p>Community Building (Primary): - GitHub: Active issue triage, PR reviews, discussions - Mattermost/Discord: Community support channels - Office Hours: Weekly live Q&amp;A sessions - Meetups: Sponsor/host local platform engineering meetups</p> <p>Partnerships (Secondary): - Platform Engineering University: Co-branded training - AWS: Co-marketing, joint webinars, AWS Marketplace - Consultancies: Implementation partnerships - Cloud Native Computing Foundation (CNCF): Sandbox project application</p> <p>Paid Marketing (Year 2+): - Google Ads: Target \"internal developer platform\" keywords - LinkedIn Ads: Target engineering leaders, VPs of Engineering - Conference Sponsorships: KubeCon, PlatformCon, AWS re:Invent - Budget: $10K/month starting Year 2</p>"},{"location":"business_case/#sales-strategy","title":"Sales Strategy","text":"<p>Self-Service (Primary for SMB): - Open source \u2192 Managed service upgrade path - Free Dojo \u2192 Enterprise training - Documentation-driven (reduce sales cycle)</p> <p>Inside Sales (Mid-Market): - Dojo graduates become champions in their orgs - 30-day free trial of managed service - Video demos and async selling - Target deal size: $12K-50K/year</p> <p>Enterprise Sales (Larger Accounts): - Account-based marketing to Fortune 2000 - Custom pilots and POCs - Co-selling with AWS account teams - Target deal size: $100K-500K/year</p>"},{"location":"business_case/#financial-projections","title":"Financial Projections","text":""},{"location":"business_case/#revenue-projections-conservative","title":"Revenue Projections (Conservative)","text":"<p>Year 1 (Months 1-12): - Managed Service: 10 customers \u00d7 $1,000/month avg \u00d7 4 months avg = $40K - Enterprise Pilot Conversions: 2 \u00d7 $50K = $100K - Training: 50 enterprise learners \u00d7 $500 = $25K - Total Year 1 Revenue: $165K</p> <p>Year 2: - Managed Service: 50 customers \u00d7 $1,200/month avg = $720K - Enterprise Support: 10 contracts \u00d7 $75K avg = $750K - Training: 500 learners \u00d7 $400 avg = $200K - Consulting: 1,000 hours \u00d7 $250/hour = $250K - Total Year 2 Revenue: $1.92M</p> <p>Year 3: - Managed Service: 200 customers \u00d7 $1,500/month avg = $3.6M - Enterprise Support: 30 contracts \u00d7 $100K avg = $3.0M - Training: 2,000 learners \u00d7 $450 avg = $900K - Consulting: 3,000 hours \u00d7 $275/hour = $825K - Marketplace &amp; Ecosystem: $500K - Total Year 3 Revenue: $8.825M</p>"},{"location":"business_case/#cost-structure","title":"Cost Structure","text":"<p>Year 1: - AWS Infrastructure: $25K (covered by Activate credits) - Founder Salary: $0 (sweat equity) - Contractors (content, design): $30K - Marketing &amp; Events: $10K - Tools &amp; Software: $5K - Total Year 1 Costs: $70K (excluding infrastructure)</p> <p>Break-Even: Month 10-11 of Year 1</p> <p>Year 2 (assuming funding or profitability): - Team: 3-5 FTE ($400K-600K) - AWS Infrastructure: $120K (post-credits, partially offset by customer usage) - Marketing &amp; Sales: $100K - Operations: $50K - Total Year 2 Costs: $670K-870K</p> <p>Gross Margin: 55-60% (SaaS benchmark: 70-80% at scale)</p>"},{"location":"business_case/#funding-strategy","title":"Funding Strategy","text":"<p>Current: Bootstrapped / pre-seed - Sweat equity + personal investment - AWS Activate credits ($25K value) - Community contributions (open source)</p> <p>Year 1 (Optional): - Pre-seed: $250K-500K - Source: Angel investors, AWS Activate portfolio partners, accelerators - Use: Extend runway, hire 1-2 engineers, accelerate go-to-market</p> <p>Year 2 (If high growth): - Seed Round: $1.5M-3M - Source: VC firms focused on infrastructure/dev tools - Use: Scale team to 10-15, enterprise sales, multi-region expansion</p> <p>Alternative Path: Profitability - If Year 1 revenue exceeds projections, remain bootstrapped - Prioritize sustainable growth over venture scale - Maintain founder control and mission alignment</p>"},{"location":"business_case/#risk-analysis-mitigation","title":"Risk Analysis &amp; Mitigation","text":""},{"location":"business_case/#key-risks","title":"Key Risks","text":"<p>Risk 1: Low Adoption (Open Source) - Probability: Medium - Impact: High (foundation for everything) - Mitigation:   - Invest heavily in documentation (ease of use)   - Partner with Platform Engineering University (distribution)   - Free Dojo (reduces friction)   - Active community engagement (support)</p> <p>Risk 2: AWS Dependency - Probability: Low - Impact: Medium - Mitigation:   - Multi-cloud on roadmap (Azure, GCP by Year 2)   - Terraform abstractions reduce AWS-specific code   - Kubernetes portability (can run anywhere)   - But: AWS-first is strategic advantage for Activate</p> <p>Risk 3: Competitive Pressure - Probability: High (market growing rapidly) - Impact: Medium - Mitigation:   - Open source = community moat (hard to replicate)   - Dojo = unique differentiator (no competitor has training)   - AWS partnership = distribution advantage   - Speed of execution (first-mover in open source + training)</p> <p>Risk 4: Monetization Challenges - Probability: Medium - Impact: High - Mitigation:   - Multiple revenue streams (SaaS, training, consulting)   - Validate willingness-to-pay early (pilots)   - Low CAC via inbound (organic growth)   - Can remain profitable at small scale</p> <p>Risk 5: Technical Complexity - Probability: Medium (platform engineering is hard) - Impact: Medium - Mitigation:   - Comprehensive documentation   - Active community support   - Video tutorials and demos   - Professional services available</p>"},{"location":"business_case/#contingency-plans","title":"Contingency Plans","text":"<p>If Managed Service Adoption is Slow: - Pivot to consulting/services (higher touch) - Focus on enterprise support contracts - Expand training/certification revenue</p> <p>If AWS Credits Run Out: - Apply for additional AWS programs (AWS Cloud Credits for Research, etc.) - Migrate development/staging to lower-cost regions - Customer deployments cover their own infrastructure</p> <p>If Competition Intensifies: - Double down on community and open source - Accelerate Dojo development (unique moat) - Explore acquisition by larger platform/AWS partner</p>"},{"location":"business_case/#success-metrics-12-month-horizon","title":"Success Metrics (12-Month Horizon)","text":""},{"location":"business_case/#platform-adoption","title":"Platform Adoption","text":"<ul> <li>\u2705 500+ GitHub Stars (community interest)</li> <li>\u2705 50+ Active Contributors (healthy ecosystem)</li> <li>\u2705 100+ Organizations Deployed (production usage)</li> <li>\u2705 20+ Enterprise Pilots (revenue pipeline)</li> <li>\u2705 10 Paying Customers (product-market fit validated)</li> </ul>"},{"location":"business_case/#learning-community","title":"Learning &amp; Community","text":"<ul> <li>\u2705 200+ Dojo Certifications Issued (across all belts)</li> <li>\u2705 50+ White Belt Graduates (top of funnel)</li> <li>\u2705 25+ Yellow Belt Graduates (mid-funnel)</li> <li>\u2705 10+ Green Belt Graduates (advanced practitioners)</li> <li>\u2705 5+ Brown/Black Belt Graduates (expert practitioners)</li> <li>\u2705 Net Promoter Score (NPS) &gt; 50 (learner satisfaction)</li> <li>\u2705 50+ Job Placements (Dojo graduates hired for platform roles)</li> </ul>"},{"location":"business_case/#business-metrics","title":"Business Metrics","text":"<ul> <li>\u2705 $10K Monthly Recurring Revenue (managed service)</li> <li>\u2705 $100K+ Annual Contract Value (enterprise support contracts)</li> <li>\u2705 $165K Total Year 1 Revenue (all sources)</li> <li>\u2705 Break-even by Month 10-11 (financial sustainability)</li> <li>\u2705 13:1 LTV:CAC Ratio (unit economics validated)</li> </ul>"},{"location":"business_case/#aws-specific-outcomes","title":"AWS-Specific Outcomes","text":"<ul> <li>\u2705 50+ Organizations Running on AWS (using Fawkes)</li> <li>\u2705 $150K+ Monthly AWS Consumption (driven by Fawkes users)</li> <li>\u2705 200+ Engineers Trained on AWS Services (via Dojo)</li> <li>\u2705 AWS Marketplace Listing Live (distribution channel)</li> <li>\u2705 5+ AWS Case Studies Published (co-marketing content)</li> </ul>"},{"location":"business_case/#technical-milestones","title":"Technical Milestones","text":"<ul> <li>\u2705 Production Reference Implementation (3 environments on AWS)</li> <li>\u2705 Multi-Region Support (US-East, US-West, EU-West)</li> <li>\u2705 99.9% Uptime SLA (for managed service customers)</li> <li>\u2705 All 20 Dojo Modules Complete (full curriculum)</li> <li>\u2705 Automated DORA Metrics (working for 100+ deployments)</li> </ul>"},{"location":"business_case/#content-marketing","title":"Content &amp; Marketing","text":"<ul> <li>\u2705 100+ Blog Posts Published (SEO and thought leadership)</li> <li>\u2705 50+ YouTube Videos (educational content)</li> <li>\u2705 10,000+ Monthly Website Visitors (organic traffic)</li> <li>\u2705 5+ Conference Talks Delivered (community visibility)</li> <li>\u2705 Partnership with Platform Engineering University (co-branded training)</li> </ul>"},{"location":"business_case/#why-fawkes-will-succeed","title":"Why Fawkes Will Succeed","text":""},{"location":"business_case/#1-massive-validated-market-need","title":"1. Massive, Validated Market Need","text":"<p>The numbers don't lie: - 300K+ unfilled platform engineering jobs globally - $12.8B market by 2028 (35% CAGR) - 73% of engineering leaders cite skills gap as top constraint - Organizations losing $1-2M/year in developer productivity</p> <p>Real pain, proven willingness to pay: - Companies spending $500K-2M building custom platforms - Consultancies charging $200-300/hour for implementation - Commercial platforms charging $50K-200K/year - Training courses at $3K-10K per person</p> <p>Our advantage: We solve BOTH problems (platform + training) at 80-95% lower cost.</p>"},{"location":"business_case/#2-unique-combination-platform-education","title":"2. Unique Combination: Platform + Education","text":"<p>No competitor offers both: - Commercial platforms (Humanitec, Kratix): No training included - Training programs (courses, bootcamps): No connected platform - Open source platforms (generic Kubernetes setups): No learning path - Consultancies: Expensive, one-off projects</p> <p>Fawkes is the only solution that provides: - Production-ready platform (deploy in hours) - Comprehensive learning system (40 hours to mastery) - Recognized certifications (career advancement) - Community support (ongoing help)</p> <p>This creates network effects: - Dojo graduates advocate for Fawkes at their companies - Organizations adopt Fawkes, send employees to Dojo - Certified engineers become Fawkes contributors - Job postings specify \"Fawkes experience preferred\"</p>"},{"location":"business_case/#3-open-source-as-competitive-moat","title":"3. Open Source as Competitive Moat","text":"<p>Why open source wins: - Trust: No vendor lock-in, inspect all code - Community: Contributors become co-creators - Distribution: Free to try = low friction adoption - Innovation: Best ideas win, not just our ideas - Longevity: Platform survives even if company doesn't</p> <p>Historical precedent: - Red Hat: Open source \u2192 $34B IBM acquisition - Databricks: Open source (Spark) \u2192 $43B valuation - HashiCorp: Open source \u2192 $5.1B valuation (at IPO) - MongoDB: Open source \u2192 $24B market cap - Elastic: Open source \u2192 $5B+ market cap</p> <p>Our approach: - Core platform: Forever free and open source (MIT license) - Monetization: Managed service, support, training (not software) - Community-first: Users succeed with or without paying us</p>"},{"location":"business_case/#4-aws-native-strategic-advantage","title":"4. AWS-Native Strategic Advantage","text":"<p>Why AWS matters: - Largest cloud provider: 32% market share (2024) - EKS momentum: Fastest-growing managed Kubernetes - Enterprise adoption: 90% of Fortune 500 use AWS - Startup ecosystem: AWS Activate supports 100K+ startups</p> <p>Fawkes + AWS = Perfect fit: - Built specifically for EKS (not generic Kubernetes) - Uses AWS-native services (RDS, S3, CloudWatch, Secrets Manager) - Optimized for AWS patterns and best practices - Comprehensive AWS deployment documentation</p> <p>AWS benefits from Fawkes: - Every Fawkes deployment increases AWS consumption - Dojo trains engineers on AWS services - Reference architecture showcases AWS capabilities - Success story for AWS Activate program</p> <p>Multi-cloud future (but AWS-first strategy): - Validate product-market fit on AWS first - Expand to Azure/GCP in Year 2 (but AWS remains primary) - Each cloud gets dedicated deployment guide - AWS partnership continues as strategic priority</p>"},{"location":"business_case/#5-strong-unit-economics-from-day-1","title":"5. Strong Unit Economics from Day 1","text":"<p>Proven SaaS metrics: - LTV:CAC Ratio: 13.7:1 (target &gt; 3:1) \u2705 - Gross Margin: 57% (target &gt; 50%) \u2705 - Payback Period: 2.3 months (target &lt; 12 months) \u2705 - Net Dollar Retention: Projected 120%+ (expansion revenue)</p> <p>Low customer acquisition cost: - Inbound-focused (organic traffic, SEO, community) - Dojo graduates become champions in their organizations - Open source creates try-before-buy pipeline - Estimated blended CAC: $2,000 (industry avg: $5K-15K)</p> <p>High lifetime value: - Low churn in infrastructure tools (sticky, high switching cost) - Expansion revenue (start small, grow with customer) - Multiple revenue streams (platform + training + consulting) - Average customer lifetime: 3-5 years</p> <p>Path to profitability: - Break-even by Month 10-11 (conservative projections) - Can scale profitably without venture funding - Optionality to raise capital for faster growth</p>"},{"location":"business_case/#6-execution-track-record-so-far","title":"6. Execution Track Record (So Far)","text":"<p>What we've built without funding: - \u2705 Complete platform architecture (8 ADRs) - \u2705 50+ pages of technical documentation - \u2705 Full Dojo curriculum designed (20 modules, 5 belts) - \u2705 Technology stack validated and justified - \u2705 AWS deployment strategy documented - \u2705 Cost estimation for 12-month operation - \u2705 Business case with financial projections</p> <p>This demonstrates: - Technical competence (can build complex systems) - Product thinking (solving real problems, not just tech for tech's sake) - Execution discipline (shipped documentation before code) - Long-term vision (not just MVP, but sustainable business)</p> <p>Next 90 days (with AWS Activate support): - Deploy production reference implementation - Launch GitHub repository publicly - Begin Dojo beta testing - Enroll first 50 learners - Secure first 3 enterprise pilot commitments</p>"},{"location":"business_case/#7-timing-is-perfect","title":"7. Timing is Perfect","text":"<p>Platform engineering is exploding: - Google Trends: +400% search volume growth (2022-2025) - Gartner: \"Platform Engineering\" in Top 10 strategic tech trends - Every major tech conference now has platform engineering track - VC funding for dev tools/infrastructure: $8B+ in 2024</p> <p>But market is still early: - Most organizations haven't built platforms yet (greenfield opportunity) - Existing platforms struggling with adoption (migration opportunity) - Skills shortage means high demand for training (Dojo opportunity) - Open source alternatives are immature (competitive advantage)</p> <p>Why now: - Kubernetes matured (production-ready, widely adopted) - Backstage reached critical mass (34K+ stars, Spotify proven) - DORA research mainstream (executives understand metrics) - Remote work normalized (online learning accepted) - AWS Activate available (removes capital constraint)</p> <p>Window of opportunity: - First-mover advantage in \"open source platform + training\" - Establish community moat before competitors catch up - Partner with AWS while Activate program active - Capture market while it's still forming</p>"},{"location":"business_case/#long-term-vision-3-5-years","title":"Long-Term Vision (3-5 Years)","text":""},{"location":"business_case/#the-platform-engineering-standard","title":"The Platform Engineering Standard","text":"<p>Our North Star: Make Fawkes the de facto standard for how organizations build and operate internal delivery platforms.</p> <p>Success looks like: - 10,000+ organizations running Fawkes in production - 50,000+ certified Dojo graduates - \"Fawkes experience\" listed in job descriptions - Taught in computer science programs - Referenced in industry best practices guides</p> <p>How we get there: 1. Year 1-2: Validate product-market fit, establish community 2. Year 3-4: Scale to mainstream adoption, enterprise penetration 3. Year 5+: Industry standard, sustainable profitable business</p>"},{"location":"business_case/#ecosystem-development","title":"Ecosystem Development","text":"<p>Platform Marketplace (Year 3+): - Third-party integrations and extensions - Certified partner network (consultancies, tool vendors) - App store model (20% commission on paid extensions) - Revenue sharing with contributors</p> <p>Certification Authority (Year 2-3): - Industry-recognized credentials (like AWS certifications) - Corporate training programs (F500 companies) - University partnerships (CS curriculum integration) - Job placement partnerships (recruiting firms)</p> <p>Community-Driven Innovation: - Feature voting and prioritization by users - Open governance model (steering committee) - Regular community summits and conferences - Contributor recognition and rewards program</p>"},{"location":"business_case/#multi-cloud-expansion","title":"Multi-Cloud Expansion","text":"<p>Timeline: - 2025: AWS-native (primary focus) - 2026: Azure support (second cloud) - 2027: Google Cloud Platform (third cloud) - 2028: On-premises and hybrid cloud (VMware, OpenStack)</p> <p>Strategy: - Cloud-agnostic core (Kubernetes, Terraform) - Cloud-specific optimization layers - Unified developer experience across clouds - Migration tools for cloud switching</p>"},{"location":"business_case/#exit-scenarios-5-7-year-horizon","title":"Exit Scenarios (5-7 Year Horizon)","text":"<p>Acquisition Candidates: 1. AWS: Strategic fit (AWS Proton competitor, education play) 2. HashiCorp: Portfolio expansion (Terraform + Fawkes bundle) 3. GitLab/GitHub: DevOps platform consolidation 4. Red Hat/IBM: Enterprise open source expansion 5. Cloud Native Computing Foundation (CNCF): Donation/graduation path</p> <p>IPO Path (less likely, but possible): - Scale to $100M+ ARR - Demonstrate consistent growth (40%+ YoY) - Strong unit economics and profitability - Comparable: HashiCorp, Confluent, Datadog</p> <p>Sustainable Business (most likely, most desirable): - Profitable at $10M-50M ARR - Maintain independence and mission - Reinvest in community and product - High-quality lifestyle business for founders/employees</p>"},{"location":"business_case/#conclusion-why-aws-should-invest-in-fawkes","title":"Conclusion: Why AWS Should Invest in Fawkes","text":""},{"location":"business_case/#strategic-alignment","title":"Strategic Alignment","text":"<p>AWS Benefits: 1. Increased AWS Consumption: $150K+/month driven by Fawkes users 2. EKS Adoption: Every Fawkes deployment uses Amazon EKS 3. Developer Education: 200+ engineers trained on AWS services 4. Ecosystem Enhancement: Open-source tooling improves AWS platform 5. Success Story: Showcase for AWS Activate program effectiveness</p> <p>Low Risk, High Upside: - Investment: $25K in credits (AWS's cost: ~$5K-8K) - Potential Return: $500K+ AWS spend driven in first year alone - No Equity Required: Pure partnership, not investment deal - Win-Win: Fawkes succeeds = AWS succeeds</p>"},{"location":"business_case/#proven-track-record","title":"Proven Track Record","text":"<p>We've already demonstrated: - Technical competence (comprehensive architecture) - Product thinking (solving real problems) - Execution discipline (documentation before code) - Community focus (open source, education-first) - Business acumen (unit economics, financial projections)</p> <p>We're ready to execute: - Clear 12-month roadmap - Detailed credit utilization plan - Success metrics and accountability - Team with relevant expertise</p>"},{"location":"business_case/#differentiated-approach","title":"Differentiated Approach","text":"<p>Fawkes is not \"just another platform\": - \u2705 Only platform + comprehensive training - \u2705 Only AWS-native open source IDP - \u2705 Only DORA metrics automation built-in - \u2705 Only solution addressing skills gap + tooling gap simultaneously</p> <p>This is the kind of innovation AWS Activate should support:  - Solving real problems for real businesses - Building on AWS strengths (EKS, RDS, etc.) - Creating positive ecosystem externalities - Potential for significant scale and impact</p>"},{"location":"business_case/#call-to-action","title":"Call to Action","text":"<p>We're asking AWS to: 1. Approve $25,000 in AWS Activate credits 2. Consider Fawkes for AWS Activate portfolio inclusion 3. Connect us with AWS EKS product team (feedback/validation) 4. Explore co-marketing opportunities (blog posts, webinars, case studies)</p> <p>In return, AWS gets: - Reference architecture for platform engineering on AWS - Training content that educates on AWS services - Growing community of AWS advocates - Success story for future Activate marketing - Measurable AWS consumption growth</p> <p>Timeline: - Today: Submit AWS Activate application - Week 1-2: Application review and approval - Month 1: Deploy development environment, begin documentation - Month 3: Production implementation live, begin community outreach - Month 6: Dojo platform launched, 50+ learners - Month 12: 200+ learners, 10 paying customers, $150K+/month AWS spend driven</p>"},{"location":"business_case/#appendix-supporting-data-references","title":"Appendix: Supporting Data &amp; References","text":""},{"location":"business_case/#market-research-sources","title":"Market Research Sources","text":"<ol> <li>LinkedIn Talent Insights (2024): 300K+ platform engineering job openings</li> <li>Gartner Platform Engineering Report (2024): Market size and growth projections</li> <li>DORA State of DevOps Report (2023): Performance metrics and business impact</li> <li>McKinsey Digital (2023): Platform initiative failure rates</li> <li>Google Trends: Platform engineering search volume growth</li> </ol>"},{"location":"business_case/#competitive-analysis","title":"Competitive Analysis","text":"Company Model Pricing Strengths Weaknesses Humanitec Commercial SaaS $50K-200K/year Mature product Expensive, vendor lock-in Port Commercial SaaS $25K-100K/year Good UI Limited customization Kratix Open source Free Flexible Immature, no training Backstage Open source Free Strong community Not a complete platform Fawkes Open source + SaaS Free / $6K-24K/year Complete platform + training Early stage"},{"location":"business_case/#dora-metrics-research","title":"DORA Metrics Research","text":"<p>Key Findings: - Elite performers: 417x more frequent deployments - Elite performers: 6,570x faster lead time - Elite performers: 2x more likely to exceed profitability goals - Elite performers: 50% more likely to have higher market share</p> <p>Source: DORA State of DevOps Report 2023</p>"},{"location":"business_case/#customer-validation-interviews","title":"Customer Validation Interviews","text":"<p>Conducted: 25+ interviews with engineering leaders (Jan-Sept 2025)</p> <p>Key Quotes:</p> <p>\"We spent $800K building our platform and it still doesn't work well. I wish something like Fawkes existed 2 years ago.\" \u2014 VP Engineering, FinTech Startup</p> <p>\"Finding platform engineers is impossible. Training our own developers would be huge.\" \u2014 CTO, Healthcare Company</p> <p>\"We evaluated Humanitec but $150K/year was too expensive. We'd pay $20K for something similar.\" \u2014 Director of Engineering, E-commerce</p> <p>\"The biggest problem isn't the tools, it's that no one knows how to use them effectively.\" \u2014 Platform Lead, Fortune 500</p>"},{"location":"business_case/#financial-model-assumptions","title":"Financial Model Assumptions","text":"<p>Customer Acquisition: - Organic (free \u2192 paid): 60% of customers, $500 CAC - Outbound sales: 40% of customers, $5,000 CAC - Blended CAC: $2,000</p> <p>Pricing: - Starter: $500/month (1-50 developers) - Growth: $1,000/month (51-200 developers) - Enterprise: $2,000+/month (200+ developers) - Average: $1,200/month</p> <p>Churn &amp; Expansion: - Annual churn: 10% (infrastructure tools are sticky) - Net dollar retention: 120% (expansion revenue) - Average customer lifetime: 4 years</p> <p>Gross Margin: - AWS infrastructure: 26% of revenue - Support costs: 17% of revenue - Gross margin: 57%</p>"},{"location":"business_case/#contact-information","title":"Contact Information","text":"<p>Project: Fawkes - Internal Delivery Platform Website: https://github.com/paruff/fawkes Email: [Your Professional Email] LinkedIn: [Your LinkedIn Profile] GitHub: https://github.com/paruff</p> <p>AWS Activate Application: - Organization Name: Fawkes Platform - Application Date: [Date] - Credits Requested: $25,000 - Primary AWS Region: US-East-1</p> <p>For AWS Reviewers: - Primary Contact: [Your Name] - Technical Questions: [Email] - Partnership Inquiries: [Email] - Media/Marketing: [Email]</p> <p>Document Version: 1.0 Last Updated: October 7, 2025 Next Review: Upon AWS Activate decision</p> <p>Prepared by: Fawkes Founding Team Approved for: AWS Activate Application Submission</p>"},{"location":"business_case/#appendix-b-faq-for-aws-activate-reviewers","title":"Appendix B: FAQ for AWS Activate Reviewers","text":"<p>Q: Is Fawkes a company or an open-source project? A: Fawkes is currently an open-source project (MIT license) with a clear path to becoming a sustainable business through managed services, training, and enterprise support. We're at the pre-seed/bootstrapped stage.</p> <p>Q: Why should AWS give credits to an open-source project? A: Because every Fawkes deployment runs on AWS and drives AWS consumption. Our projected impact: 50+ organizations on AWS, $150K+/month AWS spend, 200+ engineers trained on AWS services. The $25K credit investment could drive $500K-1M+ in AWS revenue over 12 months.</p> <p>Q: What happens if you run out of credits before becoming profitable? A: We have a phased approach that validates value at each stage. If credits run out, we have contingency plans: migrate to lower-cost regions, apply for additional AWS programs, or customer deployments cover their own infrastructure. However, our financial projections show break-even by month 10-11.</p> <p>Q: How is Fawkes different from Backstage? A: Backstage is a developer portal (service catalog, docs). Fawkes is a complete platform that includes Backstage PLUS Jenkins, ArgoCD, Harbor, monitoring, GitOps workflows, automated DORA metrics, and most importantly, a comprehensive training system (Dojo). Backstage is one component of Fawkes.</p> <p>Q: Why not just use AWS Proton? A: AWS Proton is excellent but different use case. Proton is AWS-only and template-based. Fawkes is a complete IDP with broader scope (CI/CD, GitOps, training, community) and can deploy to any cloud. They solve different problems. We could integrate with Proton as one deployment option.</p> <p>Q: What's your long-term AWS commitment? A: AWS is our primary cloud partner. While we'll add multi-cloud support (Year 2+) for customer demand, AWS will remain our reference implementation, documentation focus, and strategic partnership priority. Our success directly drives AWS consumption.</p> <p>Q: How do you plan to make money from open source? A: Three revenue streams: (1) Managed service (hosted Fawkes), (2) Enterprise support contracts, (3) Training and certification. The open-source platform is forever free; we charge for convenience, support, and education. This model has proven successful for Red Hat, Databricks, HashiCorp, etc.</p> <p>Q: What if a competitor copies your work (it's open source)? A: That's the point of open source! But our competitive moat is: (1) Community and ecosystem (hard to replicate), (2) Dojo training system (unique differentiator), (3) AWS partnership and co-marketing, (4) First-mover advantage and brand recognition. The code is open, but the community and education ecosystem are our true assets.</p> <p>Q: How can you compete with funded startups? A: By staying lean and focused. Our LTV:CAC ratio (13:1) means we can scale profitably without venture funding. AWS Activate credits remove our biggest constraint (infrastructure costs). We're competing on value (free open source + training), not marketing budget.</p> <p>Q: What are the biggest risks? A: (1) Low adoption of open source, (2) Difficulty monetizing free users, (3) Competition from funded startups. Mitigations: (1) Heavy investment in docs and community, (2) Clear upgrade path (free \u2192 paid), (3) Our unique training moat. See full Risk Analysis section for details.</p> <p>Thank you for considering Fawkes for the AWS Activate program!</p> <p>We're excited about the opportunity to partner with AWS and build the future of platform engineering together.</p> <p>Ready to Execute \ud83d\ude80</p>"},{"location":"capabilities/","title":"DORA Capabilities","text":""},{"location":"capabilities/#fast-flow-capabilities","title":"Fast Flow Capabilities","text":""},{"location":"capabilities/#continuous-delivery","title":"Continuous Delivery","text":"<p>Enable teams to deploy software quickly and reliably using automated pipelines.</p> <p>Implementation: - Pattern: Continuous Delivery - Tools:    - Spinnaker   - Jenkins</p>"},{"location":"capabilities/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>Manage infrastructure through version-controlled declarative configurations.</p> <p>Implementation: - Pattern: Infrastructure as Code - Tools:   - Terraform   - Kubernetes</p>"},{"location":"capabilities/#feedback-and-continuous-improvement-capabilities","title":"Feedback and Continuous Improvement Capabilities","text":""},{"location":"capabilities/#monitoring-and-observability","title":"Monitoring and Observability","text":"<p>Implement comprehensive monitoring to ensure system health.</p> <p>Implementation: - Pattern: Monitoring and Observability - Tools:   - Prometheus   - Grafana</p>"},{"location":"capabilities/#test-automation","title":"Test Automation","text":"<p>Automate testing at all levels to catch issues early.</p> <p>Implementation: - Pattern: Test Automation - Tools:   - Selenium   - JUnit</p>"},{"location":"capabilities/#recovery-and-resilience-capabilities","title":"Recovery and Resilience Capabilities","text":""},{"location":"capabilities/#shift-left-on-security","title":"Shift Left on Security","text":"<p>Integrate security early in the development process.</p> <p>Implementation: - Pattern: Shift Left on Security - Tools:   - OWASP ZAP   - SonarQube</p>"},{"location":"capabilities/#change-failure-rate-reduction","title":"Change Failure Rate Reduction","text":"<p>Improve code quality to reduce production failures.</p> <p>Implementation: - Pattern: Change Failure Rate Reduction - Tools:   - SonarQube   - CodeClimate</p>"},{"location":"capabilities/#learning-and-innovation-capabilities","title":"Learning and Innovation Capabilities","text":""},{"location":"capabilities/#documentation-quality","title":"Documentation Quality","text":"<p>Maintain high-quality, accessible documentation.</p> <p>Implementation: - Pattern: Documentation Quality - Tools:   - MkDocs   - Docusaurus</p>"},{"location":"capabilities/#learning-culture","title":"Learning Culture","text":"<p>Foster continuous learning and improvement.</p> <p>Implementation: - Pattern: Learning Culture - Tools:   - Discourse   - Jupyter</p> <p>Explore Implementation Patterns View Tool Integrations</p>"},{"location":"configuration/","title":"Configuration","text":"<p>This document provides an overview of the configuration options for the Fawkes Internal Developer Platform. It explains how to set up and manage environment variables, secrets, and other configuration files to customize the platform for your needs.</p>"},{"location":"configuration/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Environment Variables</li> <li>Secrets Management</li> <li>Configuration Files</li> <li>Cloud Provider Configuration</li> <li>Kubernetes Configuration</li> <li>Best Practices</li> </ul>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>Environment variables are used to configure various aspects of the platform. These variables can be set in a <code>.env</code> file or directly in your CI/CD pipeline.</p>"},{"location":"configuration/#example-env-file","title":"Example <code>.env</code> File:","text":"<pre><code># General settings\nENVIRONMENT=dev\nREGION=us-east-1\n\n# AWS-specific settings\nAWS_ACCESS_KEY_ID=your-access-key\nAWS_SECRET_ACCESS_KEY=your-secret-key\n\n# Kubernetes settings\nKUBECONFIG=/path/to/kubeconfig\n</code></pre>"},{"location":"configuration/#how-to-use","title":"How to Use:","text":"<ul> <li>Copy the provided <code>.env.example</code> file to <code>.env</code> and update the values as needed.</li> <li>Load the environment variables using a script or your CI/CD pipeline.</li> </ul>"},{"location":"configuration/#secrets-management","title":"Secrets Management","text":"<p>Secrets should never be committed to version control. Use a secrets management tool to securely store and inject secrets at runtime.</p>"},{"location":"configuration/#recommended-tools","title":"Recommended Tools:","text":"<ul> <li>AWS Secrets Manager (for AWS deployments)</li> <li>Azure Key Vault (for Azure deployments)</li> <li>GCP Secret Manager (for GCP deployments)</li> <li>Kubernetes Secrets (for cluster-specific secrets)</li> </ul>"},{"location":"configuration/#example-kubernetes-secret","title":"Example Kubernetes Secret:","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: my-secret\n  namespace: default\ntype: Opaque\ndata:\n  username: bXktdXNlcm5hbWU=  # Base64 encoded\n  password: cGFzc3dvcmQ=      # Base64 encoded\n</code></pre>"},{"location":"configuration/#configuration-files","title":"Configuration Files","text":"<p>Configuration files are used to define infrastructure, platform services, and application settings. These files are located in the <code>infra/</code> and <code>platform/</code> directories.</p>"},{"location":"configuration/#key-configuration-files","title":"Key Configuration Files:","text":"<ul> <li>Terraform Variables: Located in <code>infra/terraform/variables.tf</code>.</li> <li>Helm Values: Located in <code>platform/helm/values.yaml</code>.</li> <li>Kubernetes Manifests: Located in <code>platform/k8s/</code>.</li> </ul>"},{"location":"configuration/#example-helm-values","title":"Example Helm Values:","text":"<pre><code>replicaCount: 2\nimage:\n  repository: nginx\n  tag: \"1.21.0\"\n  pullPolicy: IfNotPresent\n</code></pre>"},{"location":"configuration/#cloud-provider-configuration","title":"Cloud Provider Configuration","text":"<p>Each cloud provider requires specific configuration for authentication and resource provisioning.</p>"},{"location":"configuration/#aws","title":"AWS:","text":"<ul> <li>Set <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> in your environment.</li> <li>Configure the region using <code>AWS_DEFAULT_REGION</code>.</li> </ul>"},{"location":"configuration/#azure","title":"Azure:","text":"<ul> <li>Use the Azure CLI to authenticate:   <pre><code>az login\n</code></pre></li> <li>Set the subscription ID:   <pre><code>az account set --subscription &lt;subscription-id&gt;\n</code></pre></li> </ul>"},{"location":"configuration/#gcp","title":"GCP:","text":"<ul> <li>Authenticate using a service account key:   <pre><code>gcloud auth activate-service-account --key-file=/path/to/key.json\n</code></pre></li> <li>Set the project ID:   <pre><code>gcloud config set project &lt;project-id&gt;\n</code></pre></li> </ul>"},{"location":"configuration/#kubernetes-configuration","title":"Kubernetes Configuration","text":"<p>Kubernetes clusters require a valid <code>kubeconfig</code> file for authentication and management.</p>"},{"location":"configuration/#setting-up-kubeconfig","title":"Setting Up <code>kubeconfig</code>:","text":"<ul> <li>Use your cloud provider CLI to generate the <code>kubeconfig</code> file:</li> <li>AWS: <code>aws eks update-kubeconfig --name &lt;cluster-name&gt;</code></li> <li>Azure: <code>az aks get-credentials --resource-group &lt;resource-group&gt; --name &lt;cluster-name&gt;</code></li> <li> <p>GCP: <code>gcloud container clusters get-credentials &lt;cluster-name&gt;</code></p> </li> <li> <p>Export the <code>KUBECONFIG</code> environment variable:   <pre><code>export KUBECONFIG=/path/to/kubeconfig\n</code></pre></p> </li> </ul>"},{"location":"configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Do Not Hardcode Secrets: Always use a secrets management tool.</li> <li>Use Separate Environments: Maintain separate configurations for <code>dev</code>, <code>staging</code>, and <code>prod</code>.</li> <li>Version Control Configuration Files: Track non-sensitive configuration files in version control.</li> <li>Validate Configurations: Use tools like <code>kubeval</code> or <code>terraform validate</code> to ensure configurations are valid.</li> <li>Automate Configuration Management: Use CI/CD pipelines to manage and apply configurations.</li> </ol> <p>For more details, refer to the specific documentation in the <code>infra/</code> and <code>platform/</code> directories.</p>"},{"location":"contributing/","title":"Contributing to Fawkes","text":"<p>Thank you for your interest in contributing to Fawkes! This guide will help you get started with contributing to the project.</p>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#1-trunk-based-development","title":"1. Trunk-Based Development","text":"<p>We follow trunk-based development practices:</p> <pre><code># Clone the repository\ngit clone https://github.com/paruff/fawkes.git\ncd fawkes\n\n# Create a feature branch\ngit checkout -b feature/your-feature-name\n\n# Make your changes\n# Commit frequently with clear messages\ngit add .\ngit commit -m \"feat: description of your change\"\n\n# Push your changes\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"contributing/#2-development-guidelines","title":"2. Development Guidelines","text":"Guideline Description Branch Lifetime Merge within 24 hours Testing Include tests with all changes Documentation Update relevant docs CI/CD Ensure all checks pass"},{"location":"contributing/#adding-new-content","title":"Adding New Content","text":""},{"location":"contributing/#documentation","title":"Documentation","text":"<pre><code>---\ntitle: Your Page Title\ndescription: Brief description of the page content\n---\n\n# Your Page Title\n\nContent goes here following the standard format:\n- Use H2 (##) for main sections\n- Use tables for structured information\n- Include related links\n</code></pre>"},{"location":"contributing/#implementation-patterns","title":"Implementation Patterns","text":"<p>When adding new patterns:</p> <ol> <li>Create pattern file in <code>docs/patterns/</code></li> <li>Add to navigation in <code>mkdocs.yml</code></li> <li>Link from relevant capabilities</li> <li>Include example implementations</li> </ol>"},{"location":"contributing/#tool-integration","title":"Tool Integration","text":"<p>When adding new tools:</p> <ol> <li>Create tool doc in <code>docs/tools/</code></li> <li>Add to navigation in <code>mkdocs.yml</code></li> <li>Link from relevant patterns</li> <li>Include configuration examples</li> </ol>"},{"location":"contributing/#testing-changes","title":"Testing Changes","text":"<pre><code># Install dependencies\npip install -r requirements.txt\n\n# Run local development server\nmkdocs serve\n\n# Build documentation\nmkdocs build\n</code></pre>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes","text":"<ol> <li>Create Issue</li> <li>Describe the problem or enhancement</li> <li> <p>Reference related DORA capabilities</p> </li> <li> <p>Submit Pull Request</p> </li> <li>Reference the issue</li> <li>Include clear description</li> <li>Update documentation</li> <li> <p>Add tests if applicable</p> </li> <li> <p>Review Process</p> </li> <li>Peer review required</li> <li>All checks must pass</li> <li>Documentation updated</li> </ol>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Create an issue on GitHub</li> <li>Join our community discussions</li> <li>Review existing documentation</li> </ul> <p>View Style Guide GitHub Repository</p>"},{"location":"development/","title":"Development Guide","text":"<p>This document provides guidelines for contributing to the Fawkes Internal Developer Platform (IDP). It includes instructions for setting up a local development environment, coding standards, and best practices for contributing to the project.</p>"},{"location":"development/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Setting Up Your Development Environment</li> <li>Coding Standards</li> <li>Branching and Workflow</li> <li>Testing</li> <li>Azure Development Best Practices</li> <li>Submitting Contributions</li> </ul>"},{"location":"development/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following tools installed:</p> <ul> <li>Git: Version control system</li> <li>Docker: For containerized development</li> <li>Terraform: For infrastructure provisioning</li> <li>kubectl: For managing Kubernetes clusters</li> <li>Helm: For managing Kubernetes applications</li> <li>Azure CLI (if working with Azure):   Install using:   <pre><code>curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n</code></pre></li> </ul>"},{"location":"development/#steps-to-set-up","title":"Steps to Set Up","text":"<ol> <li> <p>Clone the Repository:    <pre><code>git clone https://github.com/paruff/fawkes.git\ncd fawkes\n</code></pre></p> </li> <li> <p>Set Up Environment Variables:    Copy the <code>.env.example</code> file to <code>.env</code> and update the values:    <pre><code>cp .env.example .env\n</code></pre></p> </li> <li> <p>Provision Infrastructure:    Use the scripts in the <code>infra/</code> directory to provision the required infrastructure:    <pre><code>cd infra\n./buildinfra.sh -p aws -e dev\n</code></pre></p> </li> <li> <p>Deploy Platform Services:    Navigate to the <code>platform/</code> directory and deploy services:    <pre><code>cd platform\n./deploy-services.sh\n</code></pre></p> </li> <li> <p>Run Tests:    Execute the test suite to validate your setup:    <pre><code>cd qa\n./run-tests.sh\n</code></pre></p> </li> </ol>"},{"location":"development/#coding-standards","title":"Coding Standards","text":"<ul> <li>Language: Follow the conventions of the language used in the respective module (e.g., Java, Python, Bash).</li> <li>Linting: Use linters to ensure code quality:</li> <li>YAML: <code>yamllint</code></li> <li>Shell: <code>shellcheck</code></li> <li>Python: <code>flake8</code></li> <li>Java: Checkstyle or SonarQube</li> <li>Documentation: Add comments and update relevant documentation for any changes.</li> </ul>"},{"location":"development/#branching-and-workflow","title":"Branching and Workflow","text":"<ol> <li> <p>Create a Feature Branch:    <pre><code>git checkout -b feature/&lt;feature-name&gt;\n</code></pre></p> </li> <li> <p>Commit Changes:    Write clear and concise commit messages:    <pre><code>git commit -m \"Add &lt;feature-name&gt;: &lt;short description&gt;\"\n</code></pre></p> </li> <li> <p>Push Changes:    <pre><code>git push origin feature/&lt;feature-name&gt;\n</code></pre></p> </li> <li> <p>Submit a Pull Request:    Open a pull request (PR) on GitHub and request a review.</p> </li> </ol>"},{"location":"development/#testing","title":"Testing","text":"<p>Fawkes includes multiple layers of testing:</p> <ul> <li>Static Analysis: Run tools like SonarQube or Trivy to check for vulnerabilities.</li> <li>Unit Tests: Located in the <code>qa/unit/</code> directory.</li> <li>Integration Tests: Located in the <code>qa/integration/</code> directory.</li> <li>Acceptance Tests: Located in the <code>qa/acceptance/</code> directory.</li> <li>Performance Tests: Located in the <code>qa/performance/</code> directory.</li> </ul> <p>Run all tests before submitting a PR: <pre><code>cd qa\n./run-all-tests.sh\n</code></pre></p>"},{"location":"development/#azure-development-best-practices","title":"Azure Development Best Practices","text":"<p>If you are working with Azure, follow these best practices:</p> <ol> <li> <p>Use Azure CLI for Authentication:    <pre><code>az login\n</code></pre></p> </li> <li> <p>Set the Active Subscription:    <pre><code>az account set --subscription &lt;subscription-id&gt;\n</code></pre></p> </li> <li> <p>Follow Azure Resource Naming Conventions:    Use consistent and descriptive names for resources.</p> </li> <li> <p>Use Infrastructure as Code (IaC):    Use Terraform or Bicep for provisioning Azure resources.</p> </li> <li> <p>Enable Logging and Monitoring:    Configure Azure Monitor and Log Analytics for all deployed resources.</p> </li> <li> <p>Secure Secrets:    Store secrets in Azure Key Vault and reference them in your deployments.</p> </li> </ol>"},{"location":"development/#submitting-contributions","title":"Submitting Contributions","text":"<ol> <li> <p>Fork the Repository:    Create a fork of the repository on GitHub.</p> </li> <li> <p>Make Changes:    Work on your feature branch and ensure all tests pass.</p> </li> <li> <p>Submit a Pull Request:    Open a PR with a detailed description of your changes.</p> </li> <li> <p>Address Feedback:    Respond to reviewer comments and make necessary updates.</p> </li> </ol>"},{"location":"development/#need-help","title":"Need Help?","text":"<p>If you encounter any issues, refer to the troubleshooting guide or open an issue on GitHub.</p>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>This document addresses common questions about the Fawkes Internal Developer Platform (IDP). If your question is not answered here, feel free to open an issue on GitHub.</p>"},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#1-what-is-fawkes","title":"1. What is Fawkes?","text":"<p>Fawkes is an open source platform for provisioning secure, automated workspaces and Kubernetes-based continuous delivery pipelines across multiple cloud environments. It is designed to help teams adopt DevSecOps practices and improve their software delivery performance.</p>"},{"location":"faq/#2-what-are-the-key-influences-behind-fawkes","title":"2. What are the key influences behind Fawkes?","text":"<p>Fawkes is heavily inspired by the Accelerate book, the DORA (DevOps Research and Assessment) reports, and the State of DevOps reports. The platform focuses on improving the Four Key Metrics and implementing the 24 DORA capabilities, especially those related to Continuous Delivery.</p>"},{"location":"faq/#setup-and-configuration","title":"Setup and Configuration","text":""},{"location":"faq/#3-how-do-i-set-up-fawkes","title":"3. How do I set up Fawkes?","text":"<p>Follow the Getting Started Guide to set up your environment, provision infrastructure, and deploy platform services.</p>"},{"location":"faq/#4-what-cloud-providers-are-supported","title":"4. What cloud providers are supported?","text":"<p>Currently, Fawkes supports AWS. Azure, GCP, and VMware support are planned for future releases.</p>"},{"location":"faq/#5-how-do-i-configure-secrets","title":"5. How do I configure secrets?","text":"<p>Secrets should be managed using tools like AWS Secrets Manager, Azure Key Vault, or Kubernetes Secrets. Refer to the Configuration Guide for details.</p>"},{"location":"faq/#infrastructure-and-platform","title":"Infrastructure and Platform","text":""},{"location":"faq/#6-what-tools-are-used-for-infrastructure-provisioning","title":"6. What tools are used for infrastructure provisioning?","text":"<p>Fawkes uses Terraform for Infrastructure as Code (IaC) and Helm for managing Kubernetes applications.</p>"},{"location":"faq/#7-how-do-i-monitor-my-infrastructure-and-applications","title":"7. How do I monitor my infrastructure and applications?","text":"<p>Fawkes integrates with Prometheus and Grafana for monitoring. Additional integrations like Azure Monitor and the ELK stack are also supported. See the Integrations Guide for more details.</p>"},{"location":"faq/#cicd-and-testing","title":"CI/CD and Testing","text":""},{"location":"faq/#8-what-cicd-tools-are-supported","title":"8. What CI/CD tools are supported?","text":"<p>Fawkes supports Jenkins, GitHub Actions, and Azure DevOps Pipelines. Pre-configured pipelines and workflows are included to help you get started quickly.</p>"},{"location":"faq/#9-what-types-of-testing-are-included","title":"9. What types of testing are included?","text":"<p>Fawkes includes static analysis, unit testing, integration testing, acceptance testing, performance testing, and security testing. Refer to the QA Directory for more information.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#10-what-should-i-do-if-i-encounter-an-issue","title":"10. What should I do if I encounter an issue?","text":"<p>Refer to the Troubleshooting Guide for solutions to common problems. If the issue persists, open an issue on GitHub.</p>"},{"location":"faq/#11-how-do-i-debug-kubernetes-issues","title":"11. How do I debug Kubernetes issues?","text":"<p>Use <code>kubectl</code> to inspect resources and logs. For example: <pre><code>kubectl describe pod &lt;pod-name&gt;\nkubectl logs &lt;pod-name&gt;\n</code></pre> Refer to the Kubernetes Configuration section for more details.</p>"},{"location":"faq/#contributions","title":"Contributions","text":""},{"location":"faq/#12-how-can-i-contribute-to-fawkes","title":"12. How can I contribute to Fawkes?","text":"<p>We welcome contributions! See the Development Guide for instructions on setting up your development environment and submitting pull requests.</p>"},{"location":"faq/#13-are-there-any-coding-standards-i-should-follow","title":"13. Are there any coding standards I should follow?","text":"<p>Yes, Fawkes follows best practices for coding, testing, and documentation. Refer to the Development Guide for details.</p>"},{"location":"faq/#azure-specific-questions","title":"Azure-Specific Questions","text":""},{"location":"faq/#14-how-do-i-authenticate-with-azure","title":"14. How do I authenticate with Azure?","text":"<p>Use the Azure CLI to log in and set your subscription: <pre><code>az login\naz account set --subscription &lt;subscription-id&gt;\n</code></pre> Follow Azure best practices for authentication and resource management. Refer to the Azure Development Best Practices section for more details.</p>"},{"location":"faq/#15-does-fawkes-support-azure-devops","title":"15. Does Fawkes support Azure DevOps?","text":"<p>Yes, Fawkes supports Azure DevOps Pipelines for CI/CD. Pre-configured templates and best practices are included.</p>"},{"location":"faq/#need-more-help","title":"Need More Help?","text":"<p>If your question is not answered here, you can: 1. Check the Documentation for additional resources. 2. Open an issue on GitHub. 3. Reach out to the community for support.</p>"},{"location":"getting-started/","title":"Getting Started with Fawkes","text":"<p>Welcome to the Fawkes Internal Developer Platform! This guide will help you understand and implement the GitOps-based approach to platform management and delivery excellence.</p>"},{"location":"getting-started/#repository-structure","title":"Repository Structure","text":"<pre><code>fawkes/\n\u251c\u2500\u2500 docs/              # Documentation and guides\n\u251c\u2500\u2500 platform/          # Platform components\n\u2502   \u251c\u2500\u2500 iac/          # Infrastructure as Code\n\u2502   \u2502   \u251c\u2500\u2500 azure/    # Azure-specific resources\n\u2502   \u2502   \u251c\u2500\u2500 aws/      # AWS-specific resources\n\u2502   \u2502   \u2514\u2500\u2500 gcp/      # GCP-specific resources\n\u2502   \u251c\u2500\u2500 services/     # Platform services\n\u2502   \u2514\u2500\u2500 tests/        # Test suites and quality checks\n\u2514\u2500\u2500 mkdocs.yml        # Documentation configuration\n</code></pre>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Git: For repository management</li> <li>kubectl: For Kubernetes interaction</li> <li>Flux or ArgoCD: For GitOps operations</li> <li>Cloud CLI: For your chosen cloud provider</li> </ul>"},{"location":"getting-started/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/paruff/fawkes.git\ncd fawkes\n</code></pre>"},{"location":"getting-started/#2-choose-your-implementation-path","title":"2. Choose Your Implementation Path","text":"<p>Fawkes supports multiple implementation paths based on your cloud provider:</p> Cloud Implementation Documentation Azure AKS + Flux Azure Guide AWS EKS + ArgoCD AWS Guide GCP GKE + Cloud Build GCP Guide"},{"location":"getting-started/#3-infrastructure-deployment","title":"3. Infrastructure Deployment","text":"<p>We use a GitOps approach for infrastructure management. Changes are made through pull requests:</p> <ol> <li> <p>Create a feature branch: <pre><code>git checkout -b feature/add-new-service\n</code></pre></p> </li> <li> <p>Make changes to infrastructure definitions in <code>platform/iac/</code>: <pre><code># Example service definition\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fawkes-service\nspec:\n  replicas: 3\n  ...\n</code></pre></p> </li> <li> <p>Commit and push changes: <pre><code>git add .\ngit commit -m \"feat: add new service deployment\"\ngit push origin feature/add-new-service\n</code></pre></p> </li> <li> <p>Create a pull request and wait for CI checks and review</p> </li> </ol>"},{"location":"getting-started/#4-platform-services","title":"4. Platform Services","text":"<p>Services are deployed automatically via GitOps controllers. To add a new service:</p> <ol> <li> <p>Define the service in <code>platform/services/</code>: <pre><code># Example service manifest\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: jenkins\nspec:\n  source:\n    repoURL: https://github.com/paruff/fawkes.git\n    path: platform/services/jenkins\n    targetRevision: HEAD\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: jenkins\n</code></pre></p> </li> <li> <p>Commit and push through the GitOps workflow</p> </li> </ol>"},{"location":"getting-started/#5-verify-deployment","title":"5. Verify Deployment","text":"<p>Monitor deployments through:</p> <ul> <li>GitOps dashboard (ArgoCD/Flux)</li> <li>Kubernetes dashboard</li> <li>Platform monitoring tools</li> </ul>"},{"location":"getting-started/#6-running-tests","title":"6. Running Tests","text":"<p>Tests are now located in the platform directory:</p> <pre><code>cd platform/tests\n# Run unit tests\ngo test ./...\n# Run integration tests\nmake integration-tests\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ol> <li>Assess your capabilities</li> <li>Review implementation patterns</li> <li>Explore available tools</li> </ol>"},{"location":"getting-started/#need-help","title":"Need Help?","text":"<ul> <li>Check our troubleshooting guide</li> <li>Open an issue on GitHub</li> <li>Join our community discussions</li> </ul> <p>Start Assessment  View Patterns  Explore Tools </p>"},{"location":"integrations/","title":"Integrations","text":"<p>This document provides an overview of the integrations supported by the Fawkes Internal Developer Platform (IDP). These integrations enhance the platform's capabilities by connecting it with external tools and services for CI/CD, monitoring, security, and more.</p>"},{"location":"integrations/#table-of-contents","title":"Table of Contents","text":"<ul> <li>CI/CD Integrations</li> <li>Monitoring and Logging</li> <li>Security and Compliance</li> <li>Cloud Provider Integrations</li> <li>Developer Tools</li> <li>Extending Integrations</li> </ul>"},{"location":"integrations/#cicd-integrations","title":"CI/CD Integrations","text":"<p>Fawkes supports seamless integration with popular CI/CD tools to automate build, test, and deployment pipelines.</p> <ul> <li> <p>Jenkins:   Pre-configured pipelines for building and deploying applications.   See the Jenkins integration guide for setup instructions.</p> </li> <li> <p>GitHub Actions:   Use GitHub Actions workflows for CI/CD directly from your repository.   Example workflows are provided in the <code>.github/workflows/</code> directory.</p> </li> <li> <p>Azure DevOps Pipelines:   Integrate with Azure DevOps for end-to-end CI/CD pipelines.   Follow Azure best practices for pipeline configuration.</p> </li> </ul>"},{"location":"integrations/#monitoring-and-logging","title":"Monitoring and Logging","text":"<p>Fawkes integrates with monitoring and logging tools to provide visibility into your infrastructure and applications.</p> <ul> <li> <p>Prometheus and Grafana:   Pre-configured Helm charts for Prometheus and Grafana to monitor Kubernetes clusters and applications.   See the Prometheus setup guide.</p> </li> <li> <p>Azure Monitor:   Use Azure Monitor for centralized logging and metrics collection.   Follow Azure best practices for configuring Log Analytics and Application Insights.</p> </li> <li> <p>ELK Stack (Elasticsearch, Logstash, Kibana):   Optional integration for advanced log aggregation and visualization.</p> </li> </ul>"},{"location":"integrations/#security-and-compliance","title":"Security and Compliance","text":"<p>Fawkes includes integrations with tools to ensure security and compliance across your infrastructure and applications.</p> <ul> <li> <p>Trivy:   Scan container images for vulnerabilities before deployment.</p> </li> <li> <p>OWASP ZAP:   Perform dynamic application security testing (DAST) on your web applications.</p> </li> <li> <p>Azure Policy:   Enforce compliance policies for Azure resources.   Use Azure best practices for configuring and managing policies.</p> </li> <li> <p>Snyk:   Identify and fix vulnerabilities in your dependencies.</p> </li> </ul>"},{"location":"integrations/#cloud-provider-integrations","title":"Cloud Provider Integrations","text":"<p>Fawkes supports multi-cloud deployments with integrations for major cloud providers.</p> <ul> <li> <p>AWS:   Provision infrastructure using Terraform and manage resources with the AWS CLI.   See the AWS integration guide.</p> </li> <li> <p>Azure:   Use Azure CLI and Terraform to provision and manage resources.   Follow Azure best practices for authentication, resource groups, and networking.</p> </li> <li> <p>Google Cloud Platform (GCP):   Integrate with GCP for Kubernetes (GKE) and other cloud services.</p> </li> </ul>"},{"location":"integrations/#developer-tools","title":"Developer Tools","text":"<p>Fawkes integrates with tools to enhance the developer experience.</p> <ul> <li> <p>SonarQube:   Perform static code analysis to ensure code quality and security.</p> </li> <li> <p>Keycloak:   Optional integration for single sign-on (SSO) and identity management.</p> </li> <li> <p>Docker:   Use Docker for local development and containerized applications.</p> </li> <li> <p>Azure Dev Spaces:   Enable collaborative development in Kubernetes clusters.   Follow Azure best practices for setting up Dev Spaces.</p> </li> </ul>"},{"location":"integrations/#extending-integrations","title":"Extending Integrations","text":"<p>Fawkes is designed to be extensible. You can add new integrations by:</p> <ol> <li>Adding configuration files or scripts in the appropriate directory (e.g., <code>infra/</code>, <code>platform/</code>).</li> <li>Updating the documentation in this file to reflect the new integration.</li> <li>Testing the integration in your environment.</li> </ol>"},{"location":"integrations/#need-help","title":"Need Help?","text":"<p>If you encounter issues with any integration, refer to the specific tool's documentation or open an issue on GitHub.</p>"},{"location":"security/","title":"Security","text":"<p>This document outlines the security model, practices, and recommendations for the Fawkes Internal Developer Platform (IDP).</p>"},{"location":"security/#principles","title":"Principles","text":"<ul> <li>Least Privilege: All components and users are granted only the permissions they need.</li> <li>Separation of Duties: Infrastructure, platform, and application responsibilities are separated.</li> <li>Defense in Depth: Multiple layers of security controls are implemented across the stack.</li> <li>Transparency: All security controls and configurations are documented and open for review.</li> </ul>"},{"location":"security/#secrets-management","title":"Secrets Management","text":"<ul> <li>Never commit secrets to version control.</li> <li>Use secret management tools (e.g., AWS Secrets Manager, Azure Key Vault, GCP Secret Manager, or Kubernetes Secrets).</li> <li>Store only encrypted secrets in infrastructure code; inject secrets at deploy time.</li> <li>Add secret files and templates to <code>.gitignore</code>.</li> </ul>"},{"location":"security/#identity-and-access-management-iam","title":"Identity and Access Management (IAM)","text":"<ul> <li>Use cloud-native IAM (AWS IAM, Azure AD, GCP IAM) for resource access control.</li> <li>Use Kubernetes RBAC for fine-grained access within clusters.</li> <li>Rotate credentials and keys regularly.</li> <li>Use service accounts for automation and CI/CD, with minimal permissions.</li> </ul>"},{"location":"security/#network-security","title":"Network Security","text":"<ul> <li>Deploy resources in private subnets where possible.</li> <li>Restrict public ingress using security groups, firewalls, and Kubernetes network policies.</li> <li>Use TLS/SSL for all service endpoints.</li> <li>Enable logging and monitoring for network traffic.</li> </ul>"},{"location":"security/#platform-security","title":"Platform Security","text":"<ul> <li>Enable audit logging for all infrastructure and platform components.</li> <li>Regularly update dependencies and base images to address vulnerabilities.</li> <li>Use vulnerability scanning tools (e.g., Trivy, Gitleaks) in CI/CD pipelines.</li> <li>Enforce code reviews and automated tests for all changes.</li> </ul>"},{"location":"security/#kubernetes-security","title":"Kubernetes Security","text":"<ul> <li>Use namespaces to isolate workloads.</li> <li>Apply Pod Security Standards (PSS) or PodSecurityPolicies.</li> <li>Limit container privileges (no root, no privilege escalation).</li> <li>Use network policies to restrict pod-to-pod communication.</li> <li>Scan container images for vulnerabilities before deployment.</li> </ul>"},{"location":"security/#cicd-security","title":"CI/CD Security","text":"<ul> <li>Store CI/CD credentials securely (never in code).</li> <li>Use environment variables or secret stores for pipeline secrets.</li> <li>Limit pipeline permissions to only required resources.</li> <li>Scan code and dependencies for vulnerabilities on every build.</li> </ul>"},{"location":"security/#monitoring-and-incident-response","title":"Monitoring and Incident Response","text":"<ul> <li>Enable and monitor audit logs for all cloud and platform resources.</li> <li>Set up alerts for suspicious activity or failed authentication attempts.</li> <li>Document incident response procedures and regularly review them.</li> </ul>"},{"location":"security/#user-responsibilities","title":"User Responsibilities","text":"<ul> <li>Use strong, unique passwords and enable MFA where possible.</li> <li>Report any suspected security issues to the project maintainers.</li> <li>Follow the contributing guidelines for secure code contributions.</li> </ul>"},{"location":"security/#reporting-vulnerabilities","title":"Reporting Vulnerabilities","text":"<p>If you discover a security vulnerability, please report it responsibly by opening a private issue or contacting the maintainers directly.</p>"},{"location":"security/#references","title":"References","text":"<ul> <li>CNCF Kubernetes Security Best Practices</li> <li>OWASP Top Ten</li> <li>Cloud Provider Security Docs</li> </ul> <p>```</p>"},{"location":"security/#security_1","title":"Security","text":"<p>This document outlines the security model, practices, and recommendations for the Fawkes Internal Developer Platform (IDP).</p>"},{"location":"security/#principles_1","title":"Principles","text":"<ul> <li>Least Privilege: All components and users are granted only the permissions they need.</li> <li>Separation of Duties: Infrastructure, platform, and application responsibilities are separated.</li> <li>Defense in Depth: Multiple layers of security controls are implemented across the stack.</li> <li>Transparency: All security controls and configurations are documented and open for review.</li> </ul>"},{"location":"security/#secrets-management_1","title":"Secrets Management","text":"<ul> <li>Never commit secrets to version control.</li> <li>Use secret management tools (e.g., AWS Secrets Manager, Azure Key Vault, GCP Secret Manager, or Kubernetes Secrets).</li> <li>Store only encrypted secrets in infrastructure code; inject secrets at deploy time.</li> <li>Add secret files and templates to <code>.gitignore</code>.</li> </ul>"},{"location":"security/#identity-and-access-management-iam_1","title":"Identity and Access Management (IAM)","text":"<ul> <li>Use cloud-native IAM (AWS IAM, Azure AD, GCP IAM) for resource access control.</li> <li>Use Kubernetes RBAC for fine-grained access within clusters.</li> <li>Rotate credentials and keys regularly.</li> <li>Use service accounts for automation and CI/CD, with minimal permissions.</li> </ul>"},{"location":"security/#network-security_1","title":"Network Security","text":"<ul> <li>Deploy resources in private subnets where possible.</li> <li>Restrict public ingress using security groups, firewalls, and Kubernetes network policies.</li> <li>Use TLS/SSL for all service endpoints.</li> <li>Enable logging and monitoring for network traffic.</li> </ul>"},{"location":"security/#platform-security_1","title":"Platform Security","text":"<ul> <li>Enable audit logging for all infrastructure and platform components.</li> <li>Regularly update dependencies and base images to address vulnerabilities.</li> <li>Use vulnerability scanning tools (e.g., Trivy, Gitleaks) in CI/CD pipelines.</li> <li>Enforce code reviews and automated tests for all changes.</li> </ul>"},{"location":"security/#kubernetes-security_1","title":"Kubernetes Security","text":"<ul> <li>Use namespaces to isolate workloads.</li> <li>Apply Pod Security Standards (PSS) or PodSecurityPolicies.</li> <li>Limit container privileges (no root, no privilege escalation).</li> <li>Use network policies to restrict pod-to-pod communication.</li> <li>Scan container images for vulnerabilities before deployment.</li> </ul>"},{"location":"security/#cicd-security_1","title":"CI/CD Security","text":"<ul> <li>Store CI/CD credentials securely (never in code).</li> <li>Use environment variables or secret stores for pipeline secrets.</li> <li>Limit pipeline permissions to only required resources.</li> <li>Scan code and dependencies for vulnerabilities on every build.</li> </ul>"},{"location":"security/#monitoring-and-incident-response_1","title":"Monitoring and Incident Response","text":"<ul> <li>Enable and monitor audit logs for all cloud and platform resources.</li> <li>Set up alerts for suspicious activity or failed authentication attempts.</li> <li>Document incident response procedures and regularly review them.</li> </ul>"},{"location":"security/#user-responsibilities_1","title":"User Responsibilities","text":"<ul> <li>Use strong, unique passwords and enable MFA where possible.</li> <li>Report any suspected security issues to the project maintainers.</li> <li>Follow the contributing guidelines for secure code contributions.</li> </ul>"},{"location":"security/#reporting-vulnerabilities_1","title":"Reporting Vulnerabilities","text":"<p>If you discover a security vulnerability, please report it responsibly by opening a private issue or contacting the maintainers directly.</p>"},{"location":"security/#references_1","title":"References","text":"<ul> <li>CNCF Kubernetes Security Best Practices</li> <li>OWASP Top Ten</li> <li>Cloud Provider Security Docs</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide provides solutions to common issues encountered while using the Fawkes Internal Developer Platform. It is organized by category to help you quickly identify and resolve problems.</p>"},{"location":"troubleshooting/#table-of-contents","title":"Table of Contents","text":"<ul> <li>General Issues</li> <li>Infrastructure Issues</li> <li>Kubernetes Issues</li> <li>CI/CD Issues</li> <li>Azure-Specific Issues</li> <li>Testing Issues</li> <li>Getting Help</li> </ul>"},{"location":"troubleshooting/#general-issues","title":"General Issues","text":""},{"location":"troubleshooting/#1-environment-variables-not-loaded","title":"1. Environment Variables Not Loaded","text":"<ul> <li>Symptom: Commands fail due to missing environment variables.</li> <li>Solution:</li> <li>Ensure you have a <code>.env</code> file in the root directory.</li> <li>Load the environment variables:     <pre><code>source .env\n</code></pre></li> </ul>"},{"location":"troubleshooting/#2-permission-denied-errors","title":"2. Permission Denied Errors","text":"<ul> <li>Symptom: You encounter <code>Permission Denied</code> errors when running scripts.</li> <li>Solution:</li> <li>Ensure the script has executable permissions:     <pre><code>chmod +x &lt;script-name&gt;.sh\n</code></pre></li> <li>Run the script with appropriate privileges (e.g., <code>sudo</code> if required).</li> </ul>"},{"location":"troubleshooting/#infrastructure-issues","title":"Infrastructure Issues","text":""},{"location":"troubleshooting/#1-terraform-apply-fails","title":"1. Terraform Apply Fails","text":"<ul> <li>Symptom: Terraform fails with errors like \"resource already exists\" or \"authentication failed.\"</li> <li>Solution:</li> <li>Run <code>terraform plan</code> to identify conflicting resources.</li> <li>Ensure your cloud provider credentials are valid and loaded:     <pre><code>export AWS_ACCESS_KEY_ID=your-access-key\nexport AWS_SECRET_ACCESS_KEY=your-secret-key\n</code></pre></li> </ul>"},{"location":"troubleshooting/#2-infrastructure-not-destroyed-properly","title":"2. Infrastructure Not Destroyed Properly","text":"<ul> <li>Symptom: Resources remain after running the destroy script.</li> <li>Solution:</li> <li>Manually inspect the resources in your cloud provider's console.</li> <li>Run <code>terraform destroy</code> directly in the affected directory:     <pre><code>terraform destroy\n</code></pre></li> </ul>"},{"location":"troubleshooting/#kubernetes-issues","title":"Kubernetes Issues","text":""},{"location":"troubleshooting/#1-kubernetes-cluster-unreachable","title":"1. Kubernetes Cluster Unreachable","text":"<ul> <li>Symptom: <code>kubectl</code> commands fail with \"Unable to connect to the server.\"</li> <li>Solution:</li> <li>Ensure your <code>kubeconfig</code> is set correctly:     <pre><code>export KUBECONFIG=/path/to/kubeconfig\n</code></pre></li> <li>Verify the cluster status:     <pre><code>kubectl cluster-info\n</code></pre></li> </ul>"},{"location":"troubleshooting/#2-pods-stuck-in-pending-state","title":"2. Pods Stuck in Pending State","text":"<ul> <li>Symptom: Pods remain in the <code>Pending</code> state.</li> <li>Solution:</li> <li>Check for insufficient resources:     <pre><code>kubectl describe pod &lt;pod-name&gt;\n</code></pre></li> <li>Scale up your cluster or free up resources.</li> </ul>"},{"location":"troubleshooting/#cicd-issues","title":"CI/CD Issues","text":""},{"location":"troubleshooting/#1-jenkins-pipeline-fails","title":"1. Jenkins Pipeline Fails","text":"<ul> <li>Symptom: Jenkins pipelines fail with errors related to missing credentials or tools.</li> <li>Solution:</li> <li>Verify that the required credentials are configured in Jenkins.</li> <li>Ensure the Jenkins agent has the necessary tools installed.</li> </ul>"},{"location":"troubleshooting/#2-github-actions-workflow-fails","title":"2. GitHub Actions Workflow Fails","text":"<ul> <li>Symptom: GitHub Actions fail with errors like \"command not found\" or \"authentication failed.\"</li> <li>Solution:</li> <li>Check the workflow logs for detailed error messages.</li> <li>Ensure secrets are configured correctly in the repository settings.</li> </ul>"},{"location":"troubleshooting/#azure-specific-issues","title":"Azure-Specific Issues","text":""},{"location":"troubleshooting/#1-azure-cli-authentication-fails","title":"1. Azure CLI Authentication Fails","text":"<ul> <li>Symptom: Azure CLI commands fail with \"not logged in\" or \"authentication failed.\"</li> <li>Solution:</li> <li>Log in to Azure CLI:     <pre><code>az login\n</code></pre></li> <li>Set the correct subscription:     <pre><code>az account set --subscription &lt;subscription-id&gt;\n</code></pre></li> </ul>"},{"location":"troubleshooting/#2-resource-group-not-found","title":"2. Resource Group Not Found","text":"<ul> <li>Symptom: Terraform or Azure CLI commands fail with \"resource group not found.\"</li> <li>Solution:</li> <li>Verify the resource group exists:     <pre><code>az group list --query \"[].name\"\n</code></pre></li> <li>Create the resource group if necessary:     <pre><code>az group create --name &lt;resource-group&gt; --location &lt;location&gt;\n</code></pre></li> </ul>"},{"location":"troubleshooting/#testing-issues","title":"Testing Issues","text":""},{"location":"troubleshooting/#1-tests-fail-due-to-missing-dependencies","title":"1. Tests Fail Due to Missing Dependencies","text":"<ul> <li>Symptom: Tests fail with errors like \"module not found\" or \"dependency missing.\"</li> <li>Solution:</li> <li>Install the required dependencies:     <pre><code>mvn clean install\n</code></pre></li> </ul>"},{"location":"troubleshooting/#2-performance-tests-fail","title":"2. Performance Tests Fail","text":"<ul> <li>Symptom: Performance tests fail with timeout or resource errors.</li> <li>Solution:</li> <li>Ensure the test environment has sufficient resources.</li> <li>Adjust the test parameters (e.g., reduce load or increase timeouts).</li> </ul>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you are unable to resolve an issue, you can:</p> <ol> <li>Check the FAQ for additional guidance.</li> <li>Open an issue on GitHub with detailed information about the problem.</li> <li>Reach out to the community for support.</li> </ol>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide explains how to use the Fawkes Internal Developer Platform after setup. It covers common workflows, service management, and accessing platform features.</p> <p>Fawkes is a metrics-first platform designed to help teams improve their software delivery performance by focusing on the Four Key Metrics and supporting the eight capabilities needed to enhance those metrics.</p>"},{"location":"usage/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Accessing Platform Services</li> <li>Managing Infrastructure</li> <li>Deploying Platform Services</li> <li>Viewing Outputs and Endpoints</li> <li>CI/CD and Developer Workflows</li> <li>Measuring and Improving DORA Metrics</li> <li>Configuration Management</li> <li>Troubleshooting</li> </ul>"},{"location":"usage/#accessing-platform-services","title":"Accessing Platform Services","text":"<p>After deployment, you can access services such as Jenkins, SonarQube, and the Kubernetes Dashboard. These services support Continuous Integration, Monitoring and Observability, and Streamlining Change Approval.</p> <ul> <li> <p>Jenkins:   Access Jenkins via the provided URL (e.g., <code>http://&lt;jenkins-lb&gt;:8080</code>).   Retrieve the admin password using:   <pre><code>kubectl get secret --namespace &lt;namespace&gt; jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode\n</code></pre></p> </li> <li> <p>SonarQube:   Access SonarQube via the provided URL (e.g., <code>http://&lt;sonarqube-lb&gt;:9000</code>).   Default credentials: <code>admin</code> / <code>admin</code>.</p> </li> <li> <p>Kubernetes Dashboard:   Access the dashboard via the provided URL. Retrieve the admin token using:   <pre><code>kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')\n</code></pre></p> </li> </ul>"},{"location":"usage/#managing-infrastructure","title":"Managing Infrastructure","text":"<ul> <li> <p>Provisioning Infrastructure:   Use the provided scripts in the <code>infra/</code> directory to provision or update infrastructure:   <pre><code>cd infra\n./buildinfra.sh -p aws -e dev\n</code></pre></p> </li> <li> <p>Destroying Infrastructure:   To tear down infrastructure:   <pre><code>cd infra\n./buildinfra.sh -p aws -e dev --destroy\n</code></pre></p> </li> <li> <p>Using Terraform Directly:   Advanced users can manage infrastructure directly with Terraform:   <pre><code>cd infra/platform/aws\nterraform init\nterraform plan\nterraform apply\n</code></pre></p> </li> </ul>"},{"location":"usage/#deploying-platform-services","title":"Deploying Platform Services","text":"<ul> <li> <p>Jenkins Deployment:   Deploy Jenkins using the provided script:   <pre><code>cd platform/jenkins\n./jenkins-delta.sh -i\n</code></pre></p> </li> <li> <p>Other Services:   Each service directory contains deployment scripts or Helm charts. Refer to the respective README files for details.</p> </li> </ul>"},{"location":"usage/#viewing-outputs-and-endpoints","title":"Viewing Outputs and Endpoints","text":"<p>After deployment, service URLs and credentials are displayed in the terminal. You can also retrieve them using:</p> <ul> <li> <p>Terraform Outputs: <pre><code>terraform output\n</code></pre></p> </li> <li> <p>Deployment Script Outputs: <pre><code>./jenkins-delta.sh -s\n</code></pre></p> </li> </ul>"},{"location":"usage/#cicd-and-developer-workflows","title":"CI/CD and Developer Workflows","text":"<ul> <li> <p>Pipelines:   Jenkins is pre-configured for CI/CD. Add your repositories and configure pipelines as needed.</p> </li> <li> <p>Workspace Automation:   Use scripts in the <code>workspace/</code> directory to set up local development environments.</p> </li> </ul>"},{"location":"usage/#measuring-and-improving-dora-metrics","title":"Measuring and Improving DORA Metrics","text":"<p>Fawkes is designed to help teams measure and improve the Four Key DORA Metrics:</p> <ul> <li>Deployment Frequency</li> <li>Lead Time for Changes</li> <li>Change Failure Rate</li> <li>Mean Time to Restore (MTTR)</li> </ul>"},{"location":"usage/#how-fawkes-helps","title":"How Fawkes Helps:","text":"<ul> <li>Automated CI/CD Pipelines: Jenkins and other integrated tools provide metrics on deployment frequency and lead time.</li> <li>Quality Gates: SonarQube and automated tests help reduce change failure rate.</li> <li>Monitoring &amp; Alerts: Integrated monitoring and logging help track and reduce MTTR.</li> <li>Reporting: Extract and visualize DORA metrics from pipeline logs, test reports, and monitoring dashboards.</li> </ul> <p>See the architecture and development guide for more on how Fawkes supports DORA capabilities and continuous improvement.</p>"},{"location":"usage/#configuration-management","title":"Configuration Management","text":"<ul> <li>All configuration files are located in the <code>infra/</code> and <code>platform/</code> directories.</li> <li>Secrets should not be committed to version control. Use templates and inject secrets at deploy time.</li> <li>See configuration.md for details on environment variables and secret management.</li> </ul>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>See troubleshooting.md for common issues and solutions.</li> <li>For further help, open an issue on GitHub.</li> </ul> <p>Thank you for choosing Fawkes! We\u2019re excited to help you build better, faster, and more reliable infrastructure.</p>"},{"location":"adr/ADR-001%20kubernetes/","title":"ADR-001: Kubernetes as Container Orchestration Platform","text":""},{"location":"adr/ADR-001%20kubernetes/#status","title":"Status","text":"<p>Accepted - October 4, 2025</p>"},{"location":"adr/ADR-001%20kubernetes/#context","title":"Context","text":"<p>Fawkes requires a container orchestration platform to run the Internal Delivery Platform components (Backstage, Jenkins, ArgoCD, Prometheus, etc.) and to host application workloads for teams using the platform. The orchestration platform must support:</p> <ul> <li>Multi-tenancy: Isolated environments for different teams</li> <li>Scalability: From small teams (5 services) to large enterprises (100+ services)</li> <li>Observability: Rich metrics, logging, and monitoring capabilities</li> <li>Security: RBAC, network policies, secrets management</li> <li>Ecosystem: Strong ecosystem of tools and integrations</li> <li>Multi-cloud: Ability to run on AWS, Azure, GCP, and on-premises</li> <li>GitOps: Declarative configuration and reconciliation</li> <li>Developer Experience: Self-service capabilities, easy local development</li> </ul> <p>The platform must be production-ready, with a mature community, extensive documentation, and enterprise adoption.</p>"},{"location":"adr/ADR-001%20kubernetes/#forces-at-play","title":"Forces at Play","text":"<p>Technical Forces: - Need for container orchestration is non-negotiable for modern platforms - Team familiarity with orchestration platforms varies - Learning curve vs. time to value tradeoff - Platform stability and maturity critical for production use</p> <p>Business Forces: - Open-source preference to avoid vendor lock-in - Enterprise adoption important for credibility - Community size affects long-term sustainability - Multi-cloud support required for diverse adoption</p> <p>Organizational Forces: - Platform engineering skills growing but not universal - Kubernetes increasingly becoming industry standard - CNCF ecosystem alignment provides future-proofing</p>"},{"location":"adr/ADR-001%20kubernetes/#decision","title":"Decision","text":"<p>We will use Kubernetes as the container orchestration platform for Fawkes.</p> <p>Specifically: - Managed Kubernetes services for MVP: AWS EKS, with Azure AKS and GCP GKE following - Kubernetes version: 1.28+ (stay within N-2 of latest stable) - Distribution agnostic: Design for standard Kubernetes, test on managed services - Cluster API for cluster lifecycle management (roadmap)</p>"},{"location":"adr/ADR-001%20kubernetes/#rationale","title":"Rationale","text":"<ol> <li> <p>Industry Standard: Kubernetes is the de facto standard for container orchestration, with 88% of organizations using or evaluating it (CNCF Survey 2023)</p> </li> <li> <p>CNCF Ecosystem: Kubernetes is the foundation of the CNCF landscape, providing access to hundreds of complementary tools (ArgoCD, Prometheus, Istio, etc.)</p> </li> <li> <p>Multi-Cloud Native: All major cloud providers offer managed Kubernetes (EKS, AKS, GKE), enabling true multi-cloud portability</p> </li> <li> <p>GitOps Alignment: Kubernetes' declarative API makes it ideal for GitOps workflows, a core Fawkes principle</p> </li> <li> <p>Platform Engineering Fit: Kubernetes provides the right abstractions for platform teams to create developer self-service capabilities</p> </li> <li> <p>Talent Availability: Growing pool of Kubernetes-skilled engineers makes hiring and onboarding easier</p> </li> <li> <p>Enterprise Adoption: Used by 67% of Fortune 100 companies, providing credibility for enterprise adoption</p> </li> <li> <p>Security Features: Built-in RBAC, network policies, pod security standards, and secrets management</p> </li> <li> <p>Observability: Rich metrics exposure, established patterns for monitoring and logging</p> </li> <li> <p>Community &amp; Support: Massive community, extensive documentation, commercial support available</p> </li> </ol>"},{"location":"adr/ADR-001%20kubernetes/#consequences","title":"Consequences","text":""},{"location":"adr/ADR-001%20kubernetes/#positive","title":"Positive","text":"<p>\u2705 Broad Adoption: Using Kubernetes makes Fawkes accessible to the largest possible audience \u2705 Ecosystem Integration: Can leverage hundreds of CNCF tools designed for Kubernetes \u2705 Multi-Cloud Support: Same APIs work across AWS, Azure, GCP, and on-premises \u2705 Developer Self-Service: Kubernetes primitives (Namespaces, RBAC) enable multi-tenancy \u2705 Future-Proof: Kubernetes is backed by major tech companies and shows no signs of decline \u2705 GitOps Native: Declarative configuration aligns perfectly with GitOps principles \u2705 Skills Transfer: Learning Fawkes teaches transferable Kubernetes skills \u2705 Extensibility: Custom Resource Definitions (CRDs) enable platform extension \u2705 Production Ready: Battle-tested at scale by thousands of organizations  </p>"},{"location":"adr/ADR-001%20kubernetes/#negative","title":"Negative","text":"<p>\u26a0\ufe0f Complexity: Kubernetes has a steep learning curve for beginners \u26a0\ufe0f Resource Overhead: Control plane and system components require 2-4GB RAM minimum \u26a0\ufe0f Operational Burden: Requires expertise to operate reliably (mitigated by managed services) \u26a0\ufe0f Over-Engineering for Small Teams: May be overkill for teams with &lt; 5 services \u26a0\ufe0f Version Management: Frequent releases require upgrade planning and testing \u26a0\ufe0f Configuration Complexity: YAML configuration can be verbose and error-prone \u26a0\ufe0f Local Development: Running Kubernetes locally (minikube, kind) adds complexity  </p>"},{"location":"adr/ADR-001%20kubernetes/#neutral","title":"Neutral","text":"<p>\u25fd Cost: Managed Kubernetes has base costs ($70-150/month for control plane) but provides value at scale \u25fd Security: Powerful security features exist but require configuration and expertise \u25fd Networking: Kubernetes networking is flexible but requires understanding of concepts  </p>"},{"location":"adr/ADR-001%20kubernetes/#mitigation-strategies","title":"Mitigation Strategies","text":"<p>For the negative consequences, we will:</p> <ol> <li>Complexity: Provide comprehensive documentation, dojo learning modules, and golden paths that abstract complexity</li> <li>Resource Overhead: Start with managed services (EKS) to reduce operational burden</li> <li>Operational Burden: Include monitoring, alerting, and runbooks; leverage managed services</li> <li>Over-Engineering: Document when Kubernetes is appropriate; provide alternative architectures for very small teams</li> <li>Version Management: Establish clear upgrade policies and automated testing</li> <li>Configuration Complexity: Use Helm charts and Kustomize for templating; provide validated templates</li> <li>Local Development: Provide remote development options (Eclipse Che); document local setup thoroughly</li> </ol>"},{"location":"adr/ADR-001%20kubernetes/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"adr/ADR-001%20kubernetes/#alternative-1-docker-swarm","title":"Alternative 1: Docker Swarm","text":"<p>Pros: - Simpler learning curve than Kubernetes - Integrated with Docker ecosystem - Lower resource overhead - Faster initial setup</p> <p>Cons: - Smaller ecosystem (limited tooling compared to K8s) - Declining adoption and community activity - Limited multi-cloud support - Fewer enterprise features (RBAC, network policies less mature) - Less relevant skill for users to learn</p> <p>Reason for Rejection: While simpler, Docker Swarm's declining adoption and limited ecosystem make it a poor foundation for a platform meant to last 5+ years. The simplicity advantage doesn't outweigh the ecosystem and future-proofing benefits of Kubernetes.</p>"},{"location":"adr/ADR-001%20kubernetes/#alternative-2-hashicorp-nomad","title":"Alternative 2: HashiCorp Nomad","text":"<p>Pros: - Simpler than Kubernetes (easier to learn and operate) - Good performance and resource efficiency - Multi-cloud support - Strong HashiCorp ecosystem integration (Vault, Consul) - Supports non-containerized workloads</p> <p>Cons: - Much smaller ecosystem than Kubernetes - Fewer integrations with CNCF tools - Smaller community and talent pool - Less enterprise adoption - Would require custom integrations for many tools</p> <p>Reason for Rejection: Nomad is excellent for specific use cases, but the CNCF ecosystem is centered on Kubernetes. Building Fawkes on Nomad would require reimplementing many integrations and would limit the potential contributor and user base.</p>"},{"location":"adr/ADR-001%20kubernetes/#alternative-3-aws-ecsfargate","title":"Alternative 3: AWS ECS/Fargate","text":"<p>Pros: - Simpler than Kubernetes for basic use cases - Fully managed (no control plane management) - Deep AWS integration - Lower operational overhead - Cost-effective for certain workloads</p> <p>Cons: - AWS-only (locks into single cloud vendor) - Limited ecosystem (no CNCF tools work natively) - Proprietary API (not transferable skills) - Multi-tenancy requires more custom work - GitOps support less mature</p> <p>Reason for Rejection: ECS lock-in to AWS contradicts Fawkes' multi-cloud goals. While simpler for AWS-only users, it would fragment the platform (need separate solutions for Azure, GCP) and limit adoption by multi-cloud organizations.</p>"},{"location":"adr/ADR-001%20kubernetes/#alternative-4-platformsh-heroku-style-paas","title":"Alternative 4: Platform.sh / Heroku-style PaaS","text":"<p>Pros: - Extremely simple developer experience - Minimal configuration required - Fast time-to-value - Handles all infrastructure concerns</p> <p>Cons: - Not infrastructure we control (SaaS, not self-hosted platform) - Contradicts Fawkes' goal of providing an IDP - Limited customization and extensibility - Doesn't teach platform engineering skills - Vendor lock-in and cost at scale</p> <p>Reason for Rejection: Fawkes is about building an Internal Developer Platform, not consuming a PaaS. While these platforms provide great developer experience, they don't align with the goal of creating a self-hosted, customizable platform.</p>"},{"location":"adr/ADR-001%20kubernetes/#alternative-5-cloud-native-with-managed-services-only","title":"Alternative 5: \"Cloud Native\" with Managed Services Only","text":"<p>Pros: - Use cloud provider's managed services directly (Lambda, Cloud Run, etc.) - No container orchestration complexity - Pay only for usage - Serverless scaling</p> <p>Cons: - Completely different approach per cloud (no portability) - Limited long-running workload support - Stateful applications challenging - Platform components (Jenkins, Backstage) need orchestration anyway - Contradicts unified platform goal</p> <p>Reason for Rejection: While serverless has its place, Fawkes needs a consistent foundation across clouds and for long-running platform components. We may use managed services alongside Kubernetes, but can't build the entire platform on serverless.</p>"},{"location":"adr/ADR-001%20kubernetes/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-002: Backstage for Developer Portal (depends on Kubernetes for deployment)</li> <li>ADR-003: ArgoCD for GitOps (Kubernetes-native GitOps tool)</li> <li>ADR-005: Terraform for Infrastructure (will provision Kubernetes clusters)</li> <li>Future ADR: Cluster API for cluster lifecycle management</li> </ul>"},{"location":"adr/ADR-001%20kubernetes/#implementation-notes","title":"Implementation Notes","text":""},{"location":"adr/ADR-001%20kubernetes/#initial-implementation-mvp","title":"Initial Implementation (MVP)","text":"<ul> <li>Start with AWS EKS (most mature managed Kubernetes)</li> <li>Single cluster design (platform + applications)</li> <li>Use EKS add-ons for AWS integrations</li> <li>Kubernetes version 1.28 (N-1 from latest stable at time of writing)</li> </ul>"},{"location":"adr/ADR-001%20kubernetes/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>Multi-Cluster (Month 6-12):</li> <li>Separate platform cluster from application clusters</li> <li>Multi-region deployments</li> <li> <p>Cluster API for lifecycle management</p> </li> <li> <p>Multi-Cloud (Month 3-6):</p> </li> <li>Azure AKS support</li> <li>GCP GKE support</li> <li> <p>Unified tooling across clouds</p> </li> <li> <p>Advanced Features (Month 12+):</p> </li> <li>Service mesh (Linkerd/Istio)</li> <li>Multi-tenancy with vCluster or Capsule</li> <li>Cost optimization with spot instances</li> </ol>"},{"location":"adr/ADR-001%20kubernetes/#learning-resources-for-contributors","title":"Learning Resources for Contributors","text":"<ul> <li>Kubernetes Basics</li> <li>CKAD Certification</li> <li>Platform Engineering dojo modules will include K8s fundamentals</li> </ul>"},{"location":"adr/ADR-001%20kubernetes/#monitoring-this-decision","title":"Monitoring This Decision","text":"<p>We will revisit this ADR if: - Kubernetes adoption significantly declines (&lt; 60% of survey respondents) - A new orchestration platform gains &gt; 30% market share - Operational complexity consistently causes adoption issues - Alternative platforms provide compelling advantages</p> <p>Next Review Date: October 4, 2026 (12 months)</p>"},{"location":"adr/ADR-001%20kubernetes/#references","title":"References","text":"<ul> <li>CNCF Annual Survey 2023</li> <li>Kubernetes Documentation</li> <li>AWS EKS Best Practices</li> <li>The Kubernetes Book by Nigel Poulton</li> </ul>"},{"location":"adr/ADR-001%20kubernetes/#notes","title":"Notes","text":""},{"location":"adr/ADR-001%20kubernetes/#why-not-start-simpler","title":"Why Not Start Simpler?","text":"<p>We considered starting with Docker Compose or simpler solutions and \"graduating\" to Kubernetes later. However: - Migration is costly and disruptive for early adopters - Learning Kubernetes is a core part of platform engineering - Starting with K8s forces us to address complexity early - Better to have a steeper initial curve than force migration later</p>"},{"location":"adr/ADR-001%20kubernetes/#managed-vs-self-managed","title":"Managed vs. Self-Managed","text":"<p>For MVP, we strongly recommend managed Kubernetes (EKS, AKS, GKE) because: - Reduces operational burden for platform teams - Allows focus on platform features, not cluster management - Enterprise-grade reliability and SLAs - Regular updates and security patches</p> <p>Self-managed Kubernetes (on-premises, bare metal) is supported but not the primary use case for Fawkes.</p> <p>Decision Made By: Platform Architecture Team Approved By: Project Lead Date: October 4, 2025 Author: [Platform Architect Name] Last Updated: October 4, 2025</p>"},{"location":"adr/ADR-002%20backstage/","title":"ADR-002: Backstage for Developer Portal","text":""},{"location":"adr/ADR-002%20backstage/#status","title":"Status","text":"<p>Accepted - October 8, 2025</p>"},{"location":"adr/ADR-002%20backstage/#context","title":"Context","text":"<p>Fawkes is an Internal Product Delivery Platform that needs a unified interface\u2014a \"single pane of glass\"\u2014where developers and platform engineers can discover services, provision infrastructure, launch applications, access documentation, track learning progress, and monitor platform health.</p>"},{"location":"adr/ADR-002%20backstage/#the-need-for-a-developer-portal","title":"The Need for a Developer Portal","text":"<p>Current Challenges Without a Portal: - Tool Sprawl: Developers jump between GitHub, Jenkins, ArgoCD, Grafana, Mattermost, documentation sites - Service Discovery: No central catalog of services, APIs, dependencies, ownership - Self-Service Barriers: Provisioning requires knowing where to go, what to do, who to ask - Documentation Fragmentation: Scattered across wikis, README files, Confluence, tribal knowledge - Onboarding Complexity: New team members overwhelmed by tools and processes - Cognitive Load: Mental model of the system exists only in developers' heads - Dojo Integration: Learning content needs a central hub accessible alongside work</p> <p>What Teams Need: 1. Service Catalog: Comprehensive view of all services, APIs, libraries, and resources 2. Software Templates: Self-service scaffolding for new services (\"golden paths\") 3. Documentation Hub: Centralized, searchable, always up-to-date technical docs 4. Status Dashboard: Real-time health, deployment status, metrics for all services 5. Dojo Learning Hub: Browse curriculum, launch labs, track progress 6. Plugin Ecosystem: Extensibility to integrate with all platform tools 7. Search: Find anything (services, docs, people, runbooks) instantly 8. Developer Experience: Beautiful, intuitive interface that developers love</p>"},{"location":"adr/ADR-002%20backstage/#requirements-for-developer-portal","title":"Requirements for Developer Portal","text":"<p>Technical Requirements: - Open Source: Aligns with Fawkes values, no vendor lock-in - Extensible: Plugin architecture to integrate all platform components - Kubernetes-Native: Designed for cloud-native environments - API-First: Programmatic access to all functionality - Self-Hosted: Deploy in our infrastructure, control our data - Active Development: Regular releases, growing community - Enterprise-Grade: Production-ready, scalable, secure</p> <p>User Experience Requirements: - Intuitive UI: Developers can use without extensive training - Fast: Page loads &lt;2 seconds, search instant - Mobile-Friendly: Accessible on phones/tablets - Customizable: Branding, themes, layout configurable - Accessible: WCAG compliance, keyboard navigation</p> <p>Integration Requirements: - GitHub: Repository discovery, authentication - Jenkins/CI: Pipeline status, trigger builds - ArgoCD: Deployment status, sync applications - Kubernetes: Resource visibility, pod logs - Grafana: Embed dashboards, show metrics - Mattermost: Chat integration, notifications - Focalboard: Embed boards, show progress - DORA Metrics: Display team performance - Dojo System: Learning hub, lab launcher</p>"},{"location":"adr/ADR-002%20backstage/#forces-at-play","title":"Forces at Play","text":"<p>Technical Forces: - Need to integrate with dozens of tools (existing and future) - Developer portal is mission-critical (high availability required) - Must scale from 10 to 1000+ services - Security critical (access to sensitive information)</p> <p>User Experience Forces: - Developers resist using clunky, slow tools - Cognitive load already high; portal must reduce, not increase - Mobile access increasingly important - Dark mode preference widespread among developers</p> <p>Business Forces: - Developer productivity directly impacts business outcomes - Portal adoption critical for platform success - Open source preference to avoid vendor lock-in - Total cost of ownership matters (licensing, maintenance)</p> <p>Community Forces: - Backstage has largest, most active community in this space - CNCF incubating status provides credibility - Spotify's success story is compelling - Growing ecosystem of plugins and integrations</p>"},{"location":"adr/ADR-002%20backstage/#decision","title":"Decision","text":"<p>We will use Backstage as the developer portal and dojo learning hub for Fawkes.</p> <p>Specifically: - Backstage Core (latest stable version) - PostgreSQL backend for catalog storage - Custom Fawkes theme with branding - Curated plugin ecosystem (Jenkins, ArgoCD, Kubernetes, Grafana, Mattermost, Focalboard) - Custom dojo plugin (<code>@fawkes/plugin-dojo</code>) for learning hub - TechDocs for documentation-as-code - Software Templates for golden paths</p>"},{"location":"adr/ADR-002%20backstage/#rationale","title":"Rationale","text":"<ol> <li> <p>Industry Leading: Backstage is the de facto standard for developer portals, originated at Spotify, now CNCF Incubating project with 100+ adopters including American Airlines, Netflix, Expedia</p> </li> <li> <p>Purpose-Built for IDPs: Specifically designed for internal developer platforms, not retrofitted from another use case. Core features align perfectly with Fawkes needs:</p> </li> <li>Service catalog with relationships and ownership</li> <li>Software templates for scaffolding</li> <li>TechDocs for documentation</li> <li> <p>Plugin architecture for extensibility</p> </li> <li> <p>Massive Plugin Ecosystem: 100+ plugins available, covering most tools:</p> </li> <li>CI/CD: Jenkins, GitHub Actions, CircleCI, GitLab</li> <li>Deployment: ArgoCD, Flux, Spinnaker, Kubernetes</li> <li>Monitoring: Grafana, Prometheus, Datadog, PagerDuty</li> <li>Cloud: AWS, Azure, GCP</li> <li> <p>And many more</p> </li> <li> <p>CNCF Incubating Status: Under Cloud Native Computing Foundation governance:</p> </li> <li>Long-term sustainability assured</li> <li>Neutral governance (not single-vendor controlled)</li> <li>Rigorous security and quality standards</li> <li> <p>Growing adoption and contribution</p> </li> <li> <p>Active Development &amp; Community: </p> </li> <li>1,000+ contributors</li> <li>Monthly releases</li> <li>27,000+ GitHub stars</li> <li>Active Discord community (5,000+ members)</li> <li> <p>Excellent documentation</p> </li> <li> <p>Open Source &amp; Self-Hosted: </p> </li> <li>Apache 2.0 license</li> <li>Complete control over data and deployment</li> <li>No per-user licensing fees</li> <li> <p>Customizable to exact needs</p> </li> <li> <p>Perfect for Dojo Integration: </p> </li> <li>Can build custom plugin for learning hub</li> <li>TechDocs perfect for module content</li> <li>Catalog can track learner progress</li> <li> <p>Plugins can integrate with lab environment</p> </li> <li> <p>Developer Experience: </p> </li> <li>Beautiful, modern UI (React-based)</li> <li>Fast, responsive</li> <li>Intuitive navigation</li> <li> <p>Developers actually enjoy using it</p> </li> <li> <p>Extensibility: </p> </li> <li>Plugin architecture allows infinite customization</li> <li>Frontend and backend plugins</li> <li>Can build exactly what we need</li> <li> <p>TypeScript/React (popular, easy to find contributors)</p> </li> <li> <p>Enterprise Adoption: Used by major enterprises proves production-readiness, scalability, security</p> </li> <li> <p>Software Templates: Golden paths built-in, can create custom templates for:</p> <ul> <li>Microservices (Java, Python, Node.js, Go)</li> <li>Infrastructure (Terraform modules)</li> <li>Dojo labs (pre-configured learning environments)</li> </ul> </li> <li> <p>Search &amp; Discovery: </p> <ul> <li>Full-text search across services, docs, people</li> <li>Advanced filtering and faceting</li> <li>GraphQL API for programmatic access</li> </ul> </li> </ol>"},{"location":"adr/ADR-002%20backstage/#consequences","title":"Consequences","text":""},{"location":"adr/ADR-002%20backstage/#positive","title":"Positive","text":"<p>\u2705 Unified Developer Experience: Single interface for all platform interactions, dramatically reduces cognitive load</p> <p>\u2705 Self-Service Enablement: Software templates empower developers to provision without platform team tickets</p> <p>\u2705 Service Visibility: Catalog provides system-wide visibility\u2014every service, owner, dependencies visible</p> <p>\u2705 Documentation Centralization: TechDocs brings all documentation into one searchable place</p> <p>\u2705 Onboarding Acceleration: New developers have guided path to understand systems and get productive</p> <p>\u2705 Dojo Integration: Custom plugin creates perfect hub for learning (course browser, lab launcher, progress tracking)</p> <p>\u2705 Extensibility: Can integrate any tool via plugins, future-proof for new technologies</p> <p>\u2705 Community Support: Large community means help available, plugins exist for most needs</p> <p>\u2705 Developer Satisfaction: Beautiful UI developers enjoy using improves engagement and platform adoption</p> <p>\u2705 Open Source Alignment: Demonstrates commitment to open source, avoids vendor lock-in</p> <p>\u2705 Cost Effective: No licensing fees, only infrastructure and development time</p> <p>\u2705 CNCF Backing: Long-term sustainability, neutral governance, security audits</p> <p>\u2705 Golden Paths: Software templates codify best practices, improve consistency</p>"},{"location":"adr/ADR-002%20backstage/#negative","title":"Negative","text":"<p>\u26a0\ufe0f Learning Curve: Platform team needs to learn Backstage architecture, plugin development (TypeScript/React)</p> <p>\u26a0\ufe0f Initial Setup Complexity: Getting Backstage configured with all plugins takes time (2-4 weeks)</p> <p>\u26a0\ufe0f Resource Requirements: Backstage + PostgreSQL requires ~1-2GB RAM, 1-2 CPU cores</p> <p>\u26a0\ufe0f Plugin Quality Variance: Community plugins vary in quality, some need customization</p> <p>\u26a0\ufe0f Version Management: Keeping Backstage and plugins updated requires ongoing effort</p> <p>\u26a0\ufe0f Custom Plugin Development: Building custom dojo plugin requires TypeScript/React expertise (20-40 hours)</p> <p>\u26a0\ufe0f Performance at Scale: Large catalogs (1000+ entities) can slow search/filtering (mitigated with indexing)</p> <p>\u26a0\ufe0f Authentication Complexity: Integrating with multiple auth providers can be tricky</p> <p>\u26a0\ufe0f Breaking Changes: Major Backstage updates sometimes introduce breaking changes in plugins</p>"},{"location":"adr/ADR-002%20backstage/#neutral","title":"Neutral","text":"<p>\u25fd TypeScript/React Stack: Modern stack but requires specific skills (widely available)</p> <p>\u25fd Plugin Approval Process: Not all community plugins are official; need evaluation</p> <p>\u25fd Theming Flexibility: Can fully customize but requires CSS/design skills</p>"},{"location":"adr/ADR-002%20backstage/#mitigation-strategies","title":"Mitigation Strategies","text":"<ol> <li>Learning Curve:</li> <li>Allocate 1 week for Backstage training (official docs, tutorials)</li> <li>Start with core features, add plugins incrementally</li> <li>Leverage community Discord for questions</li> <li> <p>Consider Backstage training from Spotify (if available)</p> </li> <li> <p>Initial Setup:</p> </li> <li>Use official Helm charts for deployment</li> <li>Start with minimal plugin set, expand over time</li> <li>Document configuration as Infrastructure as Code</li> <li> <p>Create runbooks for common operations</p> </li> <li> <p>Custom Plugin Development:</p> </li> <li>Hire contractor if TypeScript/React skills lacking</li> <li>Use plugin templates and examples from community</li> <li>Contribute plugin back to community (get feedback, maintenance help)</li> <li> <p>Budget 40 hours for dojo plugin development</p> </li> <li> <p>Performance:</p> </li> <li>Implement PostgreSQL optimization (indexing, connection pooling)</li> <li>Use caching for expensive queries</li> <li>Consider read replicas for large deployments</li> <li> <p>Monitor performance, optimize bottlenecks</p> </li> <li> <p>Plugin Quality:</p> </li> <li>Vet plugins before adoption (GitHub stars, maintainer responsiveness, recent commits)</li> <li>Fork and customize plugins if needed</li> <li>Contribute improvements back to community</li> <li> <p>Build custom plugins for critical features</p> </li> <li> <p>Version Management:</p> </li> <li>Establish update cadence (monthly review, quarterly updates)</li> <li>Test updates in staging before production</li> <li>Pin plugin versions in package.json</li> <li>Subscribe to Backstage release notes</li> </ol>"},{"location":"adr/ADR-002%20backstage/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"adr/ADR-002%20backstage/#alternative-1-portio-saas","title":"Alternative 1: Port.io (SaaS)","text":"<p>Pros: - Purpose-built for developer portals - Beautiful, modern UI - SaaS (no operational overhead) - Growing quickly, good momentum - Strong visualization capabilities - AI-powered search</p> <p>Cons: - SaaS Only: No self-hosted option, data on Port's servers - Cost: $20-50/developer/month depending on tier (expensive at scale) - Vendor Lock-In: Proprietary platform, hard to migrate off - Not Open Source: Closed source, can't customize deeply - Smaller Ecosystem: Newer, fewer integrations than Backstage - Less Proven: Fewer large enterprise adoptions - Misaligned Values: SaaS commercial conflicts with open source platform values</p> <p>Reason for Rejection: SaaS-only model and proprietary nature conflict with Fawkes' self-hosted, open source values. Cost prohibitive for open source community (at 500 developers: $120,000-$300,000/year). Cannot build deep customizations like dojo plugin.</p>"},{"location":"adr/ADR-002%20backstage/#alternative-2-humanitec-saas","title":"Alternative 2: Humanitec (SaaS)","text":"<p>Pros: - Complete IDP platform (more than just portal) - Score-based environment management - Strong GitOps integration - Good enterprise features - Active development</p> <p>Cons: - SaaS Only: No self-hosted option - Very Expensive: Enterprise pricing ($50-100k+ annually) - Opinionated: Prescriptive workflows, less flexible - Not Just Portal: Full platform, we're building our own - Closed Source: Proprietary, can't customize - Vendor Lock-In: Migrating off would be extremely difficult</p> <p>Reason for Rejection: Humanitec is a complete platform, not just a portal. We're building Fawkes as the platform, only need portal component. SaaS-only and cost prohibitive. Closed source conflicts with values.</p>"},{"location":"adr/ADR-002%20backstage/#alternative-3-cortex-saas","title":"Alternative 3: Cortex (SaaS)","text":"<p>Pros: - Service catalog with scorecards - On-call integration - Incident management - Resource management - Growing adoption</p> <p>Cons: - SaaS Only: No self-hosted option - Cost: $15-30/service/month (expensive at scale) - Narrow Focus: More focused on service management than full portal - Proprietary: Closed source - Smaller Community: Less proven than Backstage - Limited Extensibility: Cannot build custom plugins like dojo</p> <p>Reason for Rejection: SaaS-only, closed source, cost at scale. More focused on service management than comprehensive developer portal. Cannot integrate deeply customized dojo learning system.</p>"},{"location":"adr/ADR-002%20backstage/#alternative-4-opslevel-saas","title":"Alternative 4: OpsLevel (SaaS)","text":"<p>Pros: - Service maturity scoring - Good for service ownership tracking - Integrations with common tools - Nice UI</p> <p>Cons: - SaaS Only: No self-hosted - Cost: $15-25/service/month - Narrow Focus: Primarily service catalog, not full portal - Proprietary: Closed source - Limited Developer Experience: More for tracking than daily use</p> <p>Reason for Rejection: Too narrow in focus (service catalog only). SaaS-only, closed source, expensive. Not designed for developer portal use case. Lacks documentation, templates, extensibility features needed.</p>"},{"location":"adr/ADR-002%20backstage/#alternative-5-build-custom-portal-from-scratch","title":"Alternative 5: Build Custom Portal from Scratch","text":"<p>Pros: - Complete control and customization - Exact features we want - No external dependencies - Can optimize for our exact use case - Learning opportunity for team</p> <p>Cons: - Massive Time Investment: 6-12 months full-time development for MVP - Opportunity Cost: Time not spent on platform features - Maintenance Burden: Ongoing development, security patches, features - Reinventing Wheel: Building solved problems (catalog, templates, plugins) - No Community: No plugins, no shared knowledge - Talent: Requires frontend expertise (React/TypeScript) - Risk: May not match quality of established solutions</p> <p>Reason for Rejection: Building custom portal is 6-12 months of work, delaying platform delivery. Backstage solves 80%+ of needs out-of-box. Better to invest time in dojo content and platform features than rebuilding existing solutions. Can always build custom features as Backstage plugins.</p>"},{"location":"adr/ADR-002%20backstage/#alternative-6-compass-by-atlassian-saas","title":"Alternative 6: Compass by Atlassian (SaaS)","text":"<p>Pros: - From Atlassian (established company) - Service catalog with health scores - Integrates with Jira, Confluence, Bitbucket - Good for Atlassian shops</p> <p>Cons: - SaaS Only: No self-hosted - Cost: Part of Atlassian Cloud, pricing unclear - Atlassian Ecosystem: Designed for Atlassian tools (Jira, Confluence) - New Product: Launched 2022, less mature - Proprietary: Closed source - Limited Extensibility: Cannot build custom plugins - Not Developer Portal: More service management than portal</p> <p>Reason for Rejection: SaaS-only, proprietary, Atlassian ecosystem lock-in. Not designed as comprehensive developer portal. Cannot build custom dojo integration. Newer and less proven than Backstage.</p>"},{"location":"adr/ADR-002%20backstage/#alternative-7-gitlab-self-hosted-or-saas","title":"Alternative 7: GitLab (Self-Hosted or SaaS)","text":"<p>Pros: - All-in-one DevOps platform - Self-hosted option available - Service catalog feature - Strong CI/CD integration - Open source core (Community Edition)</p> <p>Cons: - CI/CD Centric: Designed around GitLab CI/CD, we use Jenkins - Heavy: GitLab is massive, resource-intensive - Portal Secondary: Developer portal is add-on, not core feature - Limited Templates: Software templates less mature than Backstage - Plugin Ecosystem: Smaller ecosystem for portal features - Complexity: GitLab has steep learning curve - Cost: Premium/Ultimate tiers expensive for portal features</p> <p>Reason for Rejection: GitLab excellent for GitLab-centric workflows, but we're using Jenkins, ArgoCD, and other tools. Portal features are add-on, not core competency. Too heavyweight for just portal use case. Backstage better fit for our multi-tool environment.</p>"},{"location":"adr/ADR-002%20backstage/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-007: Mattermost for Team Collaboration (will integrate via iframe/plugin)</li> <li>ADR-008: Focalboard for Project Management (will embed boards in Backstage)</li> <li>ADR-004: Jenkins for CI/CD (Jenkins plugin will show pipeline status)</li> <li>ADR-003: ArgoCD for GitOps (ArgoCD plugin will show deployment status)</li> <li>Future ADR: Backstage Dojo Plugin Architecture</li> </ul>"},{"location":"adr/ADR-002%20backstage/#implementation-notes","title":"Implementation Notes","text":""},{"location":"adr/ADR-002%20backstage/#deployment-architecture","title":"Deployment Architecture","text":"<pre><code># Backstage Deployment\nbackstage:\n  namespace: fawkes-platform\n\n  components:\n    - backstage-frontend:\n        image: fawkes/backstage:latest\n        replicas: 2 (HA)\n        resources:\n          cpu: 1 core\n          memory: 1Gi\n\n    - backstage-backend:\n        image: fawkes/backstage:latest\n        replicas: 2 (HA)\n        resources:\n          cpu: 1 core\n          memory: 1Gi\n\n    - postgresql:\n        replicas: 1 (consider HA for production)\n        resources:\n          cpu: 500m\n          memory: 512Mi\n        storage: 20Gi\n\n  integrations:\n    - github (OAuth, repository discovery)\n    - jenkins (pipeline plugin)\n    - argocd (deployment plugin)\n    - kubernetes (resources plugin)\n    - grafana (iframe embed)\n    - mattermost (chat integration)\n    - focalboard (board embed)\n    - dojo-labs (custom plugin)\n</code></pre>"},{"location":"adr/ADR-002%20backstage/#initial-plugin-set","title":"Initial Plugin Set","text":"<p>Core Plugins (included with Backstage): - catalog: Service catalog with relationships - scaffolder: Software templates - techdocs: Documentation as code - search: Full-text search - kubernetes: Pod logs, resource status</p> <p>Community Plugins (install via npm): - <code>@backstage/plugin-jenkins</code>: CI/CD pipeline status - <code>@backstage/plugin-argo-cd</code>: Deployment status - <code>@backstage/plugin-grafana</code>: Embed dashboards - <code>@roadiehq/backstage-plugin-github-insights</code>: Repository insights - <code>@backstage/plugin-tech-radar</code>: Technology adoption tracking</p> <p>Custom Plugins (build ourselves): - <code>@fawkes/plugin-dojo</code>: Learning hub, lab launcher, progress tracking - <code>@fawkes/plugin-dora-metrics</code>: DORA dashboards and insights - <code>@fawkes/plugin-mattermost</code>: Chat integration and notifications - <code>@fawkes/plugin-focalboard</code>: Embed project boards</p>"},{"location":"adr/ADR-002%20backstage/#software-templates","title":"Software Templates","text":"<p>Initial Templates: 1. Microservice - Java Spring Boot    - Spring Boot starter with best practices    - Dockerfile, Jenkinsfile, K8s manifests    - Tests, logging, metrics instrumentation    - README with runbook</p> <ol> <li>Microservice - Python FastAPI</li> <li>FastAPI with async support</li> <li>pytest, coverage, linting</li> <li>Container, pipeline, manifests</li> <li> <p>Documentation template</p> </li> <li> <p>Microservice - Node.js Express</p> </li> <li>Express.js with TypeScript</li> <li>Jest tests, ESLint, Prettier</li> <li>CI/CD and deployment configs</li> <li> <p>OpenAPI specification</p> </li> <li> <p>Terraform Module</p> </li> <li>Terraform module structure</li> <li>Testing with Terratest</li> <li>Documentation and examples</li> <li> <p>CI/CD for validation</p> </li> <li> <p>Dojo Lab Environment</p> </li> <li>Pre-configured namespace</li> <li>Sample application</li> <li>Lab instructions</li> <li>Validation scripts</li> </ol>"},{"location":"adr/ADR-002%20backstage/#techdocs-structure","title":"TechDocs Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md (homepage)\n\u251c\u2500\u2500 getting-started/\n\u2502   \u251c\u2500\u2500 overview.md\n\u2502   \u251c\u2500\u2500 quickstart.md\n\u2502   \u2514\u2500\u2500 concepts.md\n\u251c\u2500\u2500 architecture/\n\u2502   \u251c\u2500\u2500 overview.md\n\u2502   \u251c\u2500\u2500 components.md\n\u2502   \u2514\u2500\u2500 decisions.md (ADRs)\n\u251c\u2500\u2500 dojo/\n\u2502   \u251c\u2500\u2500 overview.md\n\u2502   \u251c\u2500\u2500 white-belt/\n\u2502   \u251c\u2500\u2500 yellow-belt/\n\u2502   \u251c\u2500\u2500 green-belt/\n\u2502   \u251c\u2500\u2500 brown-belt/\n\u2502   \u2514\u2500\u2500 black-belt/\n\u251c\u2500\u2500 operations/\n\u2502   \u251c\u2500\u2500 runbooks/\n\u2502   \u251c\u2500\u2500 troubleshooting.md\n\u2502   \u2514\u2500\u2500 monitoring.md\n\u2514\u2500\u2500 contributing/\n    \u251c\u2500\u2500 code.md\n    \u251c\u2500\u2500 docs.md\n    \u2514\u2500\u2500 dojo-content.md\n</code></pre>"},{"location":"adr/ADR-002%20backstage/#catalog-structure","title":"Catalog Structure","text":"<p>Entity Types: - Component: Microservices, libraries, websites - API: REST, GraphQL, gRPC interfaces - Resource: Databases, queues, storage buckets - System: Groups of components working together - Domain: Business domains or product areas - User: People using the platform - Group: Teams, departments - Template: Software templates for scaffolding</p> <p>Example Component: <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: sample-app\n  title: Sample Application\n  description: Demo application for Fawkes dojo\n  annotations:\n    github.com/project-slug: paruff/fawkes\n    backstage.io/techdocs-ref: dir:.\n    jenkins.io/job-full-name: fawkes/sample-app\n    argocd/app-name: sample-app\nspec:\n  type: service\n  lifecycle: production\n  owner: platform-team\n  system: dojo-learning\n  providesApis:\n    - sample-api\n  consumesApis:\n    - auth-api\n  dependsOn:\n    - resource:postgres-db\n</code></pre></p>"},{"location":"adr/ADR-002%20backstage/#authentication-strategy","title":"Authentication Strategy","text":"<p>Phase 1 (MVP): GitHub OAuth - Simple setup - Most developers have GitHub accounts - Scopes: read:user, read:org</p> <p>Phase 2 (Month 2): Add providers - Google OAuth (Gmail accounts) - GitLab OAuth (if using GitLab) - LDAP/AD (for enterprise)</p> <p>Phase 3 (Month 4): Full SSO - SAML 2.0 support - OIDC support - Integration with Keycloak (if deployed)</p>"},{"location":"adr/ADR-002%20backstage/#customization-branding","title":"Customization &amp; Branding","text":"<p>Theme Configuration: <pre><code>// app-config.yaml\napp:\n  title: Fawkes Platform\n  branding:\n    theme:\n      light:\n        primary: '#326CE5'    # Kubernetes blue\n        secondary: '#FF6D00'  # Fawkes orange\n      dark:\n        primary: '#7DA3FF'\n        secondary: '#FFB74D'\n    logo: './logo.svg'\n    favicon: './favicon.ico'\n</code></pre></p> <p>Custom Homepage: - Welcome message and quick links - Recent deployments - DORA metrics summary - Dojo progress widget - Mattermost activity feed - Platform status indicators</p>"},{"location":"adr/ADR-002%20backstage/#performance-optimization","title":"Performance Optimization","text":"<p>Caching: - Enable backend caching for catalog - Redis for session storage - CDN for static assets (logo, theme)</p> <p>Database: - PostgreSQL connection pooling - Read replicas for queries - Regular vacuum and analyze - Index optimization</p> <p>Search: - Elasticsearch for full-text search (optional, improves performance) - Incremental indexing - Faceted search for filtering</p>"},{"location":"adr/ADR-002%20backstage/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<p>Metrics (Prometheus): - HTTP request duration - Catalog entity count - Plugin load times - Database query performance - Authentication success/failure</p> <p>Dashboards (Grafana): - Backstage performance dashboard - User activity dashboard - Plugin health dashboard - Database metrics dashboard</p> <p>Alerts: - Backstage down (&gt;2 min) - High error rate (&gt;5% in 5 min) - Slow response times (&gt;2s P95) - Database connection issues</p>"},{"location":"adr/ADR-002%20backstage/#backup-disaster-recovery","title":"Backup &amp; Disaster Recovery","text":"<p>Backups: - PostgreSQL daily backups - Catalog snapshots to Git (optional) - Configuration stored in Git (Infrastructure as Code)</p> <p>Recovery: - Restore from PostgreSQL backup - Redeploy from Git configuration - RTO: &lt;4 hours - RPO: &lt;24 hours</p>"},{"location":"adr/ADR-002%20backstage/#security-considerations","title":"Security Considerations","text":"<p>Authentication: - OAuth 2.0 for external providers - JWT tokens with expiration - Session management with secure cookies</p> <p>Authorization: - RBAC for catalog entities - Team-based access control - Read-only public catalog (optional)</p> <p>Network Security: - TLS/HTTPS only - Network policies to restrict access - Rate limiting on APIs - CORS configuration</p> <p>Secrets Management: - Never store secrets in Backstage config - Use Kubernetes secrets or Vault - Rotate credentials regularly - Audit access logs</p>"},{"location":"adr/ADR-002%20backstage/#monitoring-this-decision","title":"Monitoring This Decision","text":"<p>We will revisit this ADR if: - Backstage becomes unmaintained or development slows significantly - A superior open source alternative emerges with better fit - Performance issues arise that cannot be resolved - Plugin ecosystem fails to meet our needs - Community adoption of Backstage declines significantly - Total cost of ownership (operational) exceeds commercial alternatives</p> <p>Next Review Date: April 8, 2026 (6 months)</p>"},{"location":"adr/ADR-002%20backstage/#references","title":"References","text":"<ul> <li>Backstage Official Documentation</li> <li>Backstage GitHub Repository</li> <li>Backstage Plugin Marketplace</li> <li>CNCF Backstage Project</li> <li>Spotify Engineering Blog - Backstage</li> <li>Backstage Community Discord</li> </ul>"},{"location":"adr/ADR-002%20backstage/#notes","title":"Notes","text":""},{"location":"adr/ADR-002%20backstage/#why-backstage-over-building-custom","title":"Why Backstage Over Building Custom?","text":"<p>The most common question: \"Why not build our own portal?\"</p> <p>Build vs. Buy (Open Source) Calculation:</p> <p>Build Custom: - Development: 6-12 months \u00d7 2 engineers = $200k-$400k - Maintenance: Ongoing 0.5 FTE = $60k/year - Features: Limited to what we build - Community: Zero - Risk: May not match quality</p> <p>Use Backstage: - Setup: 2-4 weeks \u00d7 1 engineer = $10k-$20k - Custom plugin (dojo): 40 hours = $5k - Maintenance: 0.1 FTE (mostly updates) = $12k/year - Features: 100+ plugins available immediately - Community: 1,000+ contributors, constant improvements - Risk: Proven at scale</p> <p>ROI: Backstage saves $200k-$400k upfront, $48k/year ongoing. Gets 100+ plugins and battle-tested features immediately.</p>"},{"location":"adr/ADR-002%20backstage/#backstage-at-spotify-scale","title":"Backstage at Spotify Scale","text":"<p>Spotify's experience (from their blog): - 1,300+ services in catalog - 200+ software templates - 200 custom plugins - 2,000+ engineers using daily - Improved onboarding: New engineers productive in days, not weeks - Reduced cognitive load: 80% reduction in \"where do I find X\" questions</p> <p>While Fawkes won't reach Spotify scale immediately, proves Backstage can scale to our needs and beyond.</p>"},{"location":"adr/ADR-002%20backstage/#plugin-development-learning-curve","title":"Plugin Development Learning Curve","text":"<p>Building custom plugins requires TypeScript and React knowledge. However: - Official plugin templates speed development - Extensive documentation and examples - Active community for questions - Can hire contractors if needed - ROI positive even with learning curve</p> <p>Budget 40 hours for first plugin (dojo learning hub), 20 hours for subsequent plugins.</p> <p>Decision Made By: Platform Architecture Team Approved By: Project Lead Date: October 8, 2025 Author: [Platform Architect Name] Last Updated: October 8, 2025</p>"},{"location":"adr/ADR-003%20argocd/","title":"ADR-003: ArgoCD for GitOps","text":""},{"location":"adr/ADR-003%20argocd/#status","title":"Status","text":"<p>Accepted - October 8, 2025</p>"},{"location":"adr/ADR-003%20argocd/#context","title":"Context","text":"<p>Fawkes requires a GitOps continuous delivery solution to manage application deployments and platform infrastructure declaratively. GitOps\u2014where Git is the single source of truth for desired system state\u2014is a core principle of modern platform engineering and directly supports DORA best practices.</p>"},{"location":"adr/ADR-003%20argocd/#the-need-for-gitops","title":"The Need for GitOps","text":"<p>Current Challenges Without GitOps: - Manual Deployments: Error-prone, not repeatable, tribal knowledge - Configuration Drift: Production state diverges from declared state - Audit Trail Gaps: Hard to track who changed what and when - Rollback Complexity: No easy way to revert to previous working state - Multi-Environment Management: Promoting changes across dev/staging/prod is manual - No Self-Healing: Systems don't automatically recover from drift</p> <p>What GitOps Provides: 1. Declarative Configuration: Everything defined in Git (applications, infrastructure, configs) 2. Automated Sync: System automatically converges to desired state 3. Version Control: Complete history of all changes with Git commits 4. Easy Rollback: Revert Git commit to roll back to previous state 5. Audit Trail: Who, what, when, why all tracked in Git 6. Self-Healing: Automatic drift detection and correction 7. Multi-Cluster Management: Manage multiple Kubernetes clusters from single control plane</p>"},{"location":"adr/ADR-003%20argocd/#requirements-for-gitops-tool","title":"Requirements for GitOps Tool","text":"<p>Core Requirements: - Kubernetes-Native: Designed specifically for Kubernetes deployments - Git Integration: Supports GitHub, GitLab, Bitbucket, etc. - Automated Sync: Watches Git, applies changes automatically - Drift Detection: Detects and corrects configuration drift - Multi-Cluster: Manages multiple clusters (dev, staging, prod) - Progressive Delivery: Supports canary, blue-green deployments - Rollback: Easy revert to previous version - RBAC: Fine-grained access control for teams - SSO Integration: OIDC/SAML for authentication</p> <p>DORA Alignment: - Deployment Frequency: Automated deployments increase frequency - Lead Time: Git commit to deployment is fast and automated - Change Failure Rate: Declarative state reduces misconfigurations - Time to Restore: Git revert enables fast rollback</p> <p>Integration Requirements: - Backstage: Show deployment status in developer portal - Jenkins: Trigger deployments after successful builds - Mattermost: Send deployment notifications to team channels - DORA Metrics: Report deployment events for metrics calculation - Kubernetes: Native integration, no abstraction layer</p>"},{"location":"adr/ADR-003%20argocd/#forces-at-play","title":"Forces at Play","text":"<p>Technical Forces: - Need declarative configuration for reliability - Drift detection critical for production stability - Multi-environment promotion needs automation - Self-healing reduces operational toil</p> <p>Operational Forces: - Platform team can't manually deploy everything - Need audit trail for compliance - Rollback must be fast and reliable - Want to reduce deployment-related incidents</p> <p>Developer Experience Forces: - Developers want to see deployment status - Need confidence deployments will succeed - Want easy rollback if issues arise - Prefer GitOps \"merge to deploy\" workflow</p> <p>DORA Forces: - Deployment frequency depends on automation - Lead time includes deployment time - GitOps reduces change failure rate - Fast rollback improves time to restore</p>"},{"location":"adr/ADR-003%20argocd/#decision","title":"Decision","text":"<p>We will use ArgoCD as the GitOps continuous delivery platform for Fawkes.</p> <p>Specifically: - ArgoCD Core (latest stable version, currently 2.9+) - Multi-cluster deployment (manage dev, staging, prod from single ArgoCD) - ApplicationSets for managing multiple applications with templates - Argo Rollouts for progressive delivery (canary, blue-green) - Argo Notifications for Mattermost integration - Argo Image Updater for automated image updates (optional, evaluate after MVP) - SSO integration via OIDC (Phase 2)</p>"},{"location":"adr/ADR-003%20argocd/#rationale","title":"Rationale","text":"<ol> <li> <p>Kubernetes-Native Leader: ArgoCD is the most popular GitOps tool for Kubernetes, with 15,000+ GitHub stars, CNCF Graduated status, and massive adoption</p> </li> <li> <p>CNCF Graduated Project: Highest maturity level in CNCF, indicating:</p> </li> <li>Production-ready and battle-tested</li> <li>Strong governance and security</li> <li>Long-term sustainability</li> <li> <p>Regular security audits</p> </li> <li> <p>Best-in-Class GitOps: Purpose-built for GitOps on Kubernetes:</p> </li> <li>Declarative Git-based deployments</li> <li>Automated sync with configurable policies</li> <li>Drift detection with auto-heal option</li> <li>Multi-cluster management from single UI</li> <li> <p>Application health assessment</p> </li> <li> <p>Argo Ecosystem Integration: Part of larger Argo ecosystem:</p> </li> <li>Argo Rollouts: Advanced deployment strategies (canary, blue-green)</li> <li>Argo Workflows: Complex workflow orchestration</li> <li>Argo Events: Event-driven workflow automation</li> <li>Argo CD Image Updater: Automated image updates</li> <li> <p>All integrate seamlessly</p> </li> <li> <p>Progressive Delivery Support: Via Argo Rollouts:</p> </li> <li>Canary deployments with automated analysis</li> <li>Blue-green deployments</li> <li>Traffic splitting (with service mesh)</li> <li>Automated rollback on metrics threshold</li> <li> <p>Critical for reducing change failure rate</p> </li> <li> <p>Excellent UI: Beautiful web interface showing:</p> </li> <li>Application topology (visual graph)</li> <li>Real-time sync status</li> <li>Resource health</li> <li>Git commit history</li> <li> <p>Diff view (Git vs. cluster)</p> </li> <li> <p>CLI and API: Full control via CLI and REST API:</p> </li> <li>Automate operations</li> <li>Integrate with CI/CD</li> <li> <p>Custom tooling and scripts</p> </li> <li> <p>ApplicationSets: Powerful templating for multiple applications:</p> </li> <li>Deploy multiple apps with single manifest</li> <li>Git generator (monorepo support)</li> <li>Cluster generator (multi-cluster)</li> <li> <p>Matrix generator (combinations)</p> </li> <li> <p>RBAC and Security: </p> </li> <li>Fine-grained RBAC for teams</li> <li>SSO integration (OIDC, SAML, LDAP)</li> <li>Git credentials management</li> <li> <p>Audit logging</p> </li> <li> <p>Backstage Integration: Official Backstage plugin shows:</p> <ul> <li>Application sync status</li> <li>Deployment history</li> <li>Health status</li> <li>Direct links to ArgoCD UI</li> </ul> </li> <li> <p>Large Community: </p> <ul> <li>300+ contributors</li> <li>Active Slack community (10,000+ members)</li> <li>Monthly releases</li> <li>Extensive documentation</li> </ul> </li> <li> <p>Production Proven: Used by thousands of organizations including Intuit, IBM, Red Hat, Adobe</p> </li> </ol>"},{"location":"adr/ADR-003%20argocd/#consequences","title":"Consequences","text":""},{"location":"adr/ADR-003%20argocd/#positive","title":"Positive","text":"<p>\u2705 True GitOps: Git becomes single source of truth, all changes tracked and auditable</p> <p>\u2705 Automated Deployments: Merge to Git \u2192 automatic deployment, increasing deployment frequency</p> <p>\u2705 Drift Correction: Self-healing keeps cluster in sync with Git, reducing incidents</p> <p>\u2705 Fast Rollback: Git revert + automatic sync = sub-minute rollback time</p> <p>\u2705 Multi-Environment: Promote changes across environments with Git merges/branches</p> <p>\u2705 Developer Self-Service: Developers deploy by merging PRs, no platform team tickets</p> <p>\u2705 Audit Trail: Complete history of who deployed what, when, and why (Git commits)</p> <p>\u2705 Progressive Delivery: Canary and blue-green reduce blast radius of bad deployments</p> <p>\u2705 Reduced MTTR: Fast rollback and self-healing improve time to restore service</p> <p>\u2705 Visual Topology: Application graph helps understand dependencies and health</p> <p>\u2705 Multi-Cluster: Single pane of glass for dev, staging, prod clusters</p> <p>\u2705 CNCF Backing: Graduated status ensures long-term sustainability and security</p> <p>\u2705 DORA Improvement: GitOps directly improves all four key metrics</p>"},{"location":"adr/ADR-003%20argocd/#negative","title":"Negative","text":"<p>\u26a0\ufe0f Learning Curve: Platform team needs to learn ArgoCD concepts (Applications, ApplicationSets, Sync policies)</p> <p>\u26a0\ufe0f Git as Bottleneck: All changes must go through Git (could slow emergency fixes)</p> <p>\u26a0\ufe0f Initial Setup Complexity: Configuring multi-cluster, RBAC, and integrations takes time</p> <p>\u26a0\ufe0f Resource Overhead: ArgoCD consumes ~500MB RAM, additional for controllers</p> <p>\u26a0\ufe0f Sync Delays: 3-minute default sync interval (configurable, can use webhooks)</p> <p>\u26a0\ufe0f Secret Management: Secrets in Git require encryption (Sealed Secrets, SOPS, Vault)</p> <p>\u26a0\ufe0f ApplicationSet Complexity: Advanced ApplicationSets can become complex to debug</p> <p>\u26a0\ufe0f UI Performance: Large deployments (100+ apps) can slow UI</p> <p>\u26a0\ufe0f Version Compatibility: Must ensure ArgoCD version compatible with Kubernetes version</p>"},{"location":"adr/ADR-003%20argocd/#neutral","title":"Neutral","text":"<p>\u25fd GitOps Philosophy: Requires team buy-in to GitOps methodology</p> <p>\u25fd Repository Structure: Requires thoughtful Git repository organization</p> <p>\u25fd Sync Policies: Choosing auto vs. manual sync requires consideration per application</p>"},{"location":"adr/ADR-003%20argocd/#mitigation-strategies","title":"Mitigation Strategies","text":"<ol> <li>Learning Curve:</li> <li>Allocate 1 week for ArgoCD training</li> <li>Start with simple applications, progress to complex</li> <li>Leverage official documentation and tutorials</li> <li> <p>Join ArgoCD Slack community for support</p> </li> <li> <p>Git as Bottleneck:</p> </li> <li>Use webhooks for faster sync (vs. 3-minute poll)</li> <li>Emergency \"break glass\" procedure documented</li> <li>kubectl still available for true emergencies</li> <li> <p>Consider sync timeout configuration</p> </li> <li> <p>Secret Management:</p> </li> <li>Use Sealed Secrets or External Secrets Operator</li> <li>Never commit raw secrets to Git</li> <li>Document secret rotation procedures</li> <li> <p>Consider Vault integration for sensitive data</p> </li> <li> <p>Initial Setup:</p> </li> <li>Use official Helm chart for deployment</li> <li>Start with single cluster, add multi-cluster later</li> <li>Use Infrastructure as Code for ArgoCD configuration</li> <li> <p>Create runbooks for common operations</p> </li> <li> <p>Sync Performance:</p> </li> <li>Use webhooks instead of polling where possible</li> <li>Configure appropriate sync intervals per application</li> <li>Use ApplicationSets for large-scale deployments</li> <li> <p>Monitor ArgoCD performance metrics</p> </li> <li> <p>Repository Structure:</p> </li> <li>Design clear repository structure upfront</li> <li>Separate application code from deployment manifests</li> <li>Use Kustomize or Helm for configuration management</li> <li>Document repository conventions</li> </ol>"},{"location":"adr/ADR-003%20argocd/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"adr/ADR-003%20argocd/#alternative-1-flux-cd","title":"Alternative 1: Flux CD","text":"<p>Pros: - CNCF Graduated (alongside ArgoCD) - GitOps Toolkit approach (modular) - Native Helm support - Excellent multi-tenancy - Lower resource usage than ArgoCD - Strong automation capabilities - Good for Infrastructure as Code</p> <p>Cons: - No Built-In UI: CLI-only, requires separate UI (Weave GitOps) - Less Visual: No application topology graph like ArgoCD - Smaller Community: Fewer contributors and users than ArgoCD - Learning Curve: GitOps Toolkit concepts more abstract - Progressive Delivery: Requires Flagger (separate project) - Less Mature Backstage Plugin: ArgoCD plugin more feature-complete</p> <p>Reason for Rejection: Flux is excellent, but ArgoCD's UI is significant advantage for developer experience and troubleshooting. Visual application topology helps developers understand system. ArgoCD's larger community and more mature Backstage integration better fit Fawkes needs. However, Flux is valid choice and could be reconsidered for infrastructure GitOps.</p>"},{"location":"adr/ADR-003%20argocd/#alternative-2-jenkins-x","title":"Alternative 2: Jenkins X","text":"<p>Pros: - Complete CI/CD platform (not just CD) - GitOps-based - Automated preview environments - Integrated pipeline and deployment - Good for Jenkins users</p> <p>Cons: - Opinionated: Prescriptive workflows, less flexible - Complexity: Full platform, not just GitOps - Jenkins Dependency: Tied to Jenkins ecosystem - Smaller Adoption: Less proven than ArgoCD/Flux - Maintenance Concerns: Development pace slowed - Overkill: We already have Jenkins for CI</p> <p>Reason for Rejection: Jenkins X is full CI/CD platform, but we're using Jenkins (ADR-004) for CI and only need GitOps for CD. Jenkins X too opinionated and complex. ArgoCD's separation of concerns (CI vs CD) cleaner architecture.</p>"},{"location":"adr/ADR-003%20argocd/#alternative-3-spinnaker","title":"Alternative 3: Spinnaker","text":"<p>Pros: - Multi-cloud native (not just Kubernetes) - Advanced deployment strategies - Proven at Netflix scale - Strong pipeline orchestration - Multi-cluster management - Extensive integrations</p> <p>Cons: - Heavy and Complex: Difficult to deploy and maintain - Resource Intensive: Requires 8+ microservices, significant resources - Steep Learning Curve: Complex concepts and UI - Not GitOps-First: Push-based, not GitOps pull model - Maintenance Burden: High operational overhead - Overkill: More than we need for Kubernetes deployments</p> <p>Reason for Rejection: Spinnaker powerful but extremely complex. High resource usage (10+ pods) and maintenance burden unjustified for our Kubernetes-focused needs. Not GitOps-native (push model). ArgoCD provides 80% of benefits with 20% of complexity. May revisit Spinnaker if we need multi-cloud deployment orchestration beyond Kubernetes.</p>"},{"location":"adr/ADR-003%20argocd/#alternative-4-helm-only-no-gitops-tool","title":"Alternative 4: Helm Only (No GitOps Tool)","text":"<p>Pros: - Simple, no additional tool to learn - Direct control with helm upgrade commands - Low resource overhead - Familiar to most Kubernetes users - Fast deployments</p> <p>Cons: - No GitOps: No automatic sync, drift detection, or self-healing - Manual Process: Engineers must run helm commands - No Audit Trail: History only in Helm releases, not Git - No Rollback Automation: Manual helm rollback required - No Multi-Cluster: Managing multiple clusters complex - High Error Potential: Human mistakes likely - No Developer Self-Service: Requires platform team access</p> <p>Reason for Rejection: Helm alone doesn't provide GitOps benefits. Manual deployments don't scale, increase error rate, and limit deployment frequency. GitOps is core principle of modern platform engineering and DORA best practices. Helm excellent as package manager but not replacement for GitOps tool.</p>"},{"location":"adr/ADR-003%20argocd/#alternative-5-rancher-fleet","title":"Alternative 5: Rancher Fleet","text":"<p>Pros: - Built into Rancher platform - GitOps-based - Multi-cluster management - Simpler than ArgoCD - Good for Rancher users</p> <p>Cons: - Rancher Dependency: Requires Rancher platform - Smaller Community: Much smaller than ArgoCD/Flux - Less Mature: Newer project, less battle-tested - Limited Features: Fewer advanced features than ArgoCD - No Progressive Delivery: No built-in canary/blue-green - Weaker Ecosystem: Fewer integrations and plugins</p> <p>Reason for Rejection: Fleet good if using Rancher, but we're not. ArgoCD more mature, larger community, better features. Fleet's simplicity doesn't outweigh ArgoCD's comprehensive capabilities and proven track record.</p>"},{"location":"adr/ADR-003%20argocd/#alternative-6-gitlab-autodevops","title":"Alternative 6: GitLab AutoDevOps","text":"<p>Pros: - Integrated with GitLab - Auto-configured pipelines - Built-in deployment - Good for GitLab-centric shops</p> <p>Cons: - GitLab Lock-In: Only works with GitLab - Not GitOps: Push-based, not declarative - Opinionated: Limited customization - GitLab Required: We use GitHub - Less Control: Abstract away too much - Not Best-of-Breed: GitOps secondary to CI features</p> <p>Reason for Rejection: GitLab AutoDevOps tied to GitLab ecosystem. We use GitHub. Not true GitOps (push-based CI/CD). ArgoCD better fit for our multi-tool, GitOps-first approach.</p>"},{"location":"adr/ADR-003%20argocd/#alternative-7-weave-gitops-commercial","title":"Alternative 7: Weave GitOps (Commercial)","text":"<p>Pros: - Built on Flux CD - Nice UI for Flux - Enterprise features - Good for Flux users</p> <p>Cons: - Commercial: Core features open source, but UI and advanced features paid - Cost: Pricing unclear, per-cluster - Flux Dependency: Requires Flux understanding - Smaller Adoption: Newer, less proven - Less Features: Not as comprehensive as ArgoCD</p> <p>Reason for Rejection: Commercial aspects conflict with open source values. ArgoCD provides richer feature set out-of-box with free, open source UI. Weave GitOps good for Flux users wanting UI, but ArgoCD better starting point.</p>"},{"location":"adr/ADR-003%20argocd/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-001: Kubernetes (ArgoCD manages Kubernetes deployments)</li> <li>ADR-002: Backstage (ArgoCD plugin shows deployment status)</li> <li>ADR-004: Jenkins (Jenkins triggers ArgoCD deployments)</li> <li>ADR-007: Mattermost (Argo Notifications sends alerts to Mattermost)</li> <li>Future ADR: Repository Structure for GitOps</li> <li>Future ADR: Secrets Management Strategy</li> </ul>"},{"location":"adr/ADR-003%20argocd/#implementation-notes","title":"Implementation Notes","text":""},{"location":"adr/ADR-003%20argocd/#deployment-architecture","title":"Deployment Architecture","text":"<pre><code># ArgoCD Deployment\nargocd:\n  namespace: argocd\n\n  components:\n    - argocd-server:\n        replicas: 2 (HA)\n        resources:\n          cpu: 500m\n          memory: 256Mi\n        ingress: argocd.fawkes.io\n\n    - argocd-repo-server:\n        replicas: 2 (HA)\n        resources:\n          cpu: 500m\n          memory: 512Mi\n\n    - argocd-application-controller:\n        replicas: 1 (stateful, uses leader election for HA)\n        resources:\n          cpu: 1 core\n          memory: 1Gi\n\n    - argocd-redis:\n        replicas: 3 (HA with sentinel)\n        resources:\n          cpu: 200m\n          memory: 256Mi\n\n    - argocd-dex-server: (for SSO)\n        replicas: 1\n        resources:\n          cpu: 100m\n          memory: 128Mi\n\n  integrations:\n    - github (repository source)\n    - mattermost (notifications)\n    - backstage (status plugin)\n    - dora-metrics-service (deployment events)\n</code></pre>"},{"location":"adr/ADR-003%20argocd/#repository-structure","title":"Repository Structure","text":"<p>Recommended Structure (monorepo approach):</p> <pre><code>gitops-repo/\n\u251c\u2500\u2500 apps/\n\u2502   \u251c\u2500\u2500 dev/\n\u2502   \u2502   \u251c\u2500\u2500 team-a/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 service-1/\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 kustomization.yaml\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 deployment.yaml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 service-2/\n\u2502   \u2502   \u2514\u2500\u2500 team-b/\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2514\u2500\u2500 prod/\n\u251c\u2500\u2500 platform/\n\u2502   \u251c\u2500\u2500 backstage/\n\u2502   \u251c\u2500\u2500 jenkins/\n\u2502   \u251c\u2500\u2500 mattermost/\n\u2502   \u251c\u2500\u2500 prometheus/\n\u2502   \u2514\u2500\u2500 grafana/\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u251c\u2500\u2500 namespaces/\n\u2502   \u251c\u2500\u2500 rbac/\n\u2502   \u251c\u2500\u2500 network-policies/\n\u2502   \u2514\u2500\u2500 resource-quotas/\n\u251c\u2500\u2500 argocd-apps/\n\u2502   \u251c\u2500\u2500 dev-apps.yaml (ApplicationSet)\n\u2502   \u251c\u2500\u2500 staging-apps.yaml\n\u2502   \u2514\u2500\u2500 prod-apps.yaml\n\u2514\u2500\u2500 README.md\n</code></pre> <p>Alternative (polyrepo approach): - Separate repository per team/service - Pros: Team autonomy, clear ownership - Cons: Harder to enforce consistency, more repositories to manage</p>"},{"location":"adr/ADR-003%20argocd/#applicationset-example","title":"ApplicationSet Example","text":"<p>Deploy All Team Applications:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: team-applications\n  namespace: argocd\nspec:\n  generators:\n    - git:\n        repoURL: https://github.com/paruff/fawkes-gitops\n        revision: HEAD\n        directories:\n          - path: apps/prod/*/* \n  template:\n    metadata:\n      name: '{{path.basename}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/paruff/fawkes-gitops\n        targetRevision: HEAD\n        path: '{{path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{path[1]}}' # team name from path\n      syncPolicy:\n        automated:\n          prune: true\n          selfHeal: true\n        syncOptions:\n          - CreateNamespace=true\n</code></pre>"},{"location":"adr/ADR-003%20argocd/#sync-policies","title":"Sync Policies","text":"<p>Automated Sync (recommended for most apps): <pre><code>syncPolicy:\n  automated:\n    prune: true       # Delete resources removed from Git\n    selfHeal: true    # Revert manual changes\n  syncOptions:\n    - CreateNamespace=true\n  retry:\n    limit: 5\n    backoff:\n      duration: 5s\n      factor: 2\n      maxDuration: 3m\n</code></pre></p> <p>Manual Sync (for critical production apps initially): <pre><code>syncPolicy:\n  manual: {}  # Require manual approval for sync\n</code></pre></p>"},{"location":"adr/ADR-003%20argocd/#progressive-delivery-with-argo-rollouts","title":"Progressive Delivery with Argo Rollouts","text":"<p>Canary Deployment Example:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: sample-app\nspec:\n  replicas: 10\n  strategy:\n    canary:\n      steps:\n        - setWeight: 20    # 20% traffic to canary\n        - pause: {duration: 5m}\n        - setWeight: 40    # 40% traffic\n        - pause: {duration: 5m}\n        - setWeight: 60    # 60% traffic\n        - pause: {duration: 5m}\n        - setWeight: 80    # 80% traffic\n        - pause: {duration: 5m}\n      analysis:\n        templates:\n          - templateName: error-rate-analysis\n        args:\n          - name: service-name\n            value: sample-app\n      trafficRouting:\n        istio:\n          virtualService:\n            name: sample-app\n</code></pre>"},{"location":"adr/ADR-003%20argocd/#notifications-configuration","title":"Notifications Configuration","text":"<p>Mattermost Integration:</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.mattermost: |\n    apiURL: https://mattermost.fawkes.io\n    token: $mattermost-token\n\n  template.app-deployed: |\n    message: |\n      Application {{.app.metadata.name}} is now running new version.\n      {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n\n  trigger.on-deployed: |\n    - when: app.status.operationState.phase in ['Succeeded']\n      send: [app-deployed]\n</code></pre> <p>Subscribe Application:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-deployed.mattermost: team-deployments\n</code></pre>"},{"location":"adr/ADR-003%20argocd/#multi-cluster-management","title":"Multi-Cluster Management","text":"<p>Add Cluster:</p> <pre><code># Login to ArgoCD\nargocd login argocd.fawkes.io\n\n# Add production cluster\nargocd cluster add prod-cluster --name production\n\n# Add staging cluster\nargocd cluster add staging-cluster --name staging\n</code></pre> <p>Deploy to Multiple Clusters (ApplicationSet):</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: multi-cluster-app\nspec:\n  generators:\n    - list:\n        elements:\n          - cluster: dev\n            url: https://dev-cluster\n          - cluster: staging  \n            url: https://staging-cluster\n          - cluster: prod\n            url: https://prod-cluster\n  template:\n    metadata:\n      name: 'sample-app-{{cluster}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/paruff/fawkes-gitops\n        path: 'apps/{{cluster}}/sample-app'\n      destination:\n        server: '{{url}}'\n        namespace: sample-app\n</code></pre>"},{"location":"adr/ADR-003%20argocd/#rbac-configuration","title":"RBAC Configuration","text":"<p>Project-Based RBAC:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: team-a\nspec:\n  description: Team A applications\n  sourceRepos:\n    - 'https://github.com/paruff/fawkes-gitops'\n  destinations:\n    - namespace: 'team-a-*'\n      server: https://kubernetes.default.svc\n  roles:\n    - name: team-a-developer\n      policies:\n        - p, proj:team-a:team-a-developer, applications, get, team-a/*, allow\n        - p, proj:team-a:team-a-developer, applications, sync, team-a/*, allow\n</code></pre>"},{"location":"adr/ADR-003%20argocd/#backstage-integration","title":"Backstage Integration","text":"<p>Install Plugin:</p> <pre><code>yarn add --cwd packages/app @roadiehq/backstage-plugin-argo-cd\n</code></pre> <p>Component Annotation:</p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: sample-app\n  annotations:\n    argocd/app-name: sample-app\n    argocd/instance-name: argocd\nspec:\n  type: service\n  lifecycle: production\n  owner: team-a\n</code></pre>"},{"location":"adr/ADR-003%20argocd/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<p>Prometheus Metrics: - argocd_app_sync_total (sync attempts) - argocd_app_sync_status (current sync status) - argocd_app_health_status (application health) - argocd_git_request_total (Git operations)</p> <p>Grafana Dashboard: - Official ArgoCD dashboard (ID: 14584) - Customizations for Fawkes-specific views</p> <p>Alerts: - Application OutOfSync &gt;30 minutes - Application Degraded &gt;15 minutes - Sync Failures (3 consecutive) - High API latency (&gt;2s)</p>"},{"location":"adr/ADR-003%20argocd/#secret-management","title":"Secret Management","text":"<p>Option 1: Sealed Secrets (recommended for MVP):</p> <pre><code># Encrypt secret\necho -n 'my-secret-value' | kubectl create secret generic my-secret \\\n  --dry-run=client --from-file=password=/dev/stdin -o yaml | \\\n  kubeseal -o yaml &gt; sealed-secret.yaml\n\n# Commit sealed-secret.yaml to Git\n# SealedSecret controller decrypts in-cluster\n</code></pre> <p>Option 2: External Secrets Operator: - Fetch secrets from Vault, AWS Secrets Manager, etc. - Keep secret references in Git, not actual secrets - Better for large-scale deployments</p> <p>Never: Commit raw secrets to Git!</p>"},{"location":"adr/ADR-003%20argocd/#backup-disaster-recovery","title":"Backup &amp; Disaster Recovery","text":"<p>Backup Strategy: - ArgoCD configuration stored in Git (Infrastructure as Code) - Application manifests in GitOps repository - ArgoCD state in Kubernetes (can be recreated)</p> <p>Recovery: 1. Redeploy ArgoCD from Helm chart 2. Re-add clusters 3. Create Applications pointing to Git repository 4. ArgoCD syncs from Git (applications restored)</p> <p>RTO: &lt;2 hours (ArgoCD redeploy + application sync) RPO: 0 (Git is source of truth, no data loss)</p>"},{"location":"adr/ADR-003%20argocd/#performance-optimization","title":"Performance Optimization","text":"<p>For Large Deployments: - Increase application controller replicas - Tune sync timeouts and retry logic - Use ApplicationSets instead of individual Applications - Enable concurrent sync operations - Optimize Git repository size (use shallow clones)</p> <p>Resource Limits: <pre><code>spec:\n  resources:\n    limits:\n      cpu: 2\n      memory: 2Gi\n    requests:\n      cpu: 500m\n      memory: 512Mi\n</code></pre></p>"},{"location":"adr/ADR-003%20argocd/#monitoring-this-decision","title":"Monitoring This Decision","text":"<p>We will revisit this ADR if: - ArgoCD project becomes unmaintained or development slows - Performance issues arise that cannot be resolved - A superior GitOps tool emerges with better fit - Flux CD's UI significantly improves (could reconsider) - Operational burden exceeds benefits - Community adoption of ArgoCD declines significantly</p> <p>Next Review Date: April 8, 2026 (6 months)</p>"},{"location":"adr/ADR-003%20argocd/#references","title":"References","text":"<ul> <li>ArgoCD Official Documentation</li> <li>ArgoCD GitHub Repository</li> <li>Argo Rollouts Documentation</li> <li>CNCF ArgoCD Project</li> <li>GitOps Principles</li> <li>ArgoCD Backstage Plugin</li> </ul>"},{"location":"adr/ADR-003%20argocd/#notes","title":"Notes","text":""},{"location":"adr/ADR-003%20argocd/#argocd-vs-flux-the-eternal-debate","title":"ArgoCD vs. Flux: The Eternal Debate","text":"<p>When to choose ArgoCD: - Want built-in, feature-rich UI - Prefer visual application topology - Need strong RBAC out-of-box - Value large, active community - Want simpler mental model</p> <p>When to choose Flux: - Prefer CLI-first workflow - Want lower resource usage - Need advanced multi-tenancy - Comfortable with GitOps Toolkit abstraction - Strong preference for CNCF's recommended GitOps tool</p> <p>For Fawkes: ArgoCD's UI significant advantage for developer experience and troubleshooting. Both are excellent choices\u2014this decision not deeply philosophical, more pragmatic based on UX priorities.</p>"},{"location":"adr/ADR-003%20argocd/#gitops-best-practices","title":"GitOps Best Practices","text":"<ol> <li>Repository Structure: Organize thoughtfully upfront (hard to change later)</li> <li>Separation of Concerns: Keep application code separate from deployment manifests</li> <li>Environment Promotion: Use branches or directories for environments</li> <li>Secret Management: Never commit secrets, use Sealed Secrets or Vault</li> <li>Sync Policies: Start with manual sync for critical apps, automate once confident</li> <li>Monitoring: Watch sync failures, drift detection, and performance metrics</li> <li>Rollback Plan: Test rollback procedure before you need it</li> </ol>"},{"location":"adr/ADR-003%20argocd/#progressive-delivery-roi","title":"Progressive Delivery ROI","text":"<p>Argo Rollouts adds complexity but significantly reduces change failure rate: - Canary deployments catch issues before full rollout - Automated rollback based on metrics prevents outages - Traffic shifting minimizes blast radius - Aligns with DORA best practices</p> <p>Worth complexity trade-off for production applications. Can start without Rollouts, add later for critical services.</p> <p>Decision Made By: Platform Architecture Team Approved By: Project Lead Date: October 8, 2025 Author: [Platform Architect Name] Last Updated: October 8, 2025</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/","title":"ADR-004: Jenkins for CI/CD","text":""},{"location":"adr/ADR-004%20jenkins%204%20ci/#status","title":"Status","text":"<p>Accepted - October 8, 2025</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#context","title":"Context","text":"<p>Fawkes requires a Continuous Integration and Continuous Delivery (CI/CD) platform to automate building, testing, securing, and packaging applications. CI/CD is foundational to achieving elite DORA performance, particularly for deployment frequency and lead time for changes.</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#the-need-for-cicd-automation","title":"The Need for CI/CD Automation","text":"<p>Current Challenges Without CI/CD: - Manual Builds: Error-prone, time-consuming, not repeatable - Inconsistent Testing: Tests run locally (or not at all), vary by developer - Security Gaps: No automated security scanning, vulnerabilities reach production - Slow Feedback: Developers wait hours/days to know if changes work - Deployment Bottlenecks: Manual packaging and deployment slow delivery - No Audit Trail: Can't trace which code produced which artifact</p> <p>What CI/CD Provides: 1. Automated Builds: Code commit triggers automatic build and test 2. Quality Gates: Automated testing, linting, security scanning block bad code 3. Fast Feedback: Developers know within minutes if changes work 4. Consistent Process: Same build/test process every time, regardless of developer 5. Security Integration: Automated SAST, dependency scanning, container scanning 6. Artifact Management: Versioned, immutable build artifacts 7. Deployment Trigger: Successful builds trigger GitOps deployment 8. Audit Trail: Complete record of what was built, when, and by whom</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#requirements-for-cicd-platform","title":"Requirements for CI/CD Platform","text":"<p>Core Requirements: - Pipeline as Code: Jenkinsfiles in Git, version controlled - Kubernetes Native: Dynamic agents in Kubernetes pods - Golden Paths: Reusable pipeline templates for common scenarios - Security Scanning: Integration with SonarQube, Trivy, dependency checkers - Multi-Language: Support Java, Python, Node.js, Go, and more - Extensible: Plugin ecosystem for integrations - GitOps Integration: Trigger ArgoCD deployments - DORA Metrics: Report build/deployment events</p> <p>DORA Alignment: - Deployment Frequency: Automated pipelines enable frequent deployments - Lead Time: Fast builds reduce time from commit to production - Change Failure Rate: Quality gates catch issues before deployment - Time to Restore: Fast pipelines enable quick hotfix deployment</p> <p>Integration Requirements: - GitHub: Webhook triggers, status checks - ArgoCD: Trigger GitOps sync after successful build - SonarQube: Code quality and security analysis - Trivy: Container image scanning - Harbor/ECR: Push container images - Mattermost: Build notifications - Backstage: Show pipeline status in developer portal - DORA Metrics Service: Report build events</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#forces-at-play","title":"Forces at Play","text":"<p>Technical Forces: - Need pipeline-as-code for version control and review - Kubernetes-native approach reduces infrastructure overhead - Security scanning must be automated and enforced - Multi-language support critical for polyglot teams</p> <p>Developer Experience Forces: - Fast feedback loops improve developer productivity - Clear error messages reduce debugging time - Consistent builds reduce \"works on my machine\" issues - Self-service pipelines reduce dependency on platform team</p> <p>Operational Forces: - Platform team can't manually build everything - Need scalability (100+ concurrent builds) - Resource efficiency matters (cost optimization) - Maintenance burden should be minimized</p> <p>Enterprise Forces: - Many enterprises already use Jenkins - Familiarity reduces adoption friction - Extensive plugin ecosystem meets diverse needs - Proven at massive scale</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#decision","title":"Decision","text":"<p>We will use Jenkins with Kubernetes plugin as the CI/CD platform for Fawkes.</p> <p>Specifically: - Jenkins LTS (Long-Term Support, latest stable) - Kubernetes Plugin for dynamic agent provisioning - Configuration as Code (JCasC) for declarative Jenkins setup - Shared Pipeline Libraries for golden path reusability - Pipeline-as-Code (Jenkinsfile in every repository) - Security Scanning Integration (SonarQube, Trivy, OWASP Dependency-Check) - GitOps Integration (trigger ArgoCD after successful builds)</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#rationale","title":"Rationale","text":"<ol> <li> <p>Industry Standard: Jenkins is the most widely adopted CI/CD tool, with 20+ years of development, used by 70%+ of enterprises</p> </li> <li> <p>Kubernetes Native: Jenkins Kubernetes plugin provides:</p> </li> <li>Dynamic agent provisioning (pods created on-demand)</li> <li>Isolated build environments (each build in separate pod)</li> <li>Resource efficiency (agents destroyed after build)</li> <li>Scalability (limited only by cluster capacity)</li> <li> <p>Cost optimization (only pay for active builds)</p> </li> <li> <p>Pipeline as Code: Jenkinsfile DSL enables:</p> </li> <li>Version-controlled pipelines</li> <li>Code review of pipeline changes</li> <li>Reusable shared libraries</li> <li>Declarative and scripted syntax options</li> <li> <p>Mature, battle-tested</p> </li> <li> <p>Massive Plugin Ecosystem: 1,800+ plugins covering:</p> </li> <li>SCM: GitHub, GitLab, Bitbucket</li> <li>Build tools: Maven, Gradle, npm, pip</li> <li>Quality: SonarQube, Checkstyle, PMD</li> <li>Security: Trivy, OWASP, git-secrets</li> <li>Deployment: Kubernetes, ArgoCD, Spinnaker</li> <li> <p>Notifications: Mattermost, email, Slack</p> </li> <li> <p>Configuration as Code (JCasC): </p> </li> <li>Declarative YAML configuration</li> <li>Version controlled in Git</li> <li>Reproducible Jenkins setup</li> <li>No manual UI configuration</li> <li> <p>Easy disaster recovery</p> </li> <li> <p>Proven at Scale: Used by massive organizations:</p> </li> <li>Netflix (2,000+ builds/day)</li> <li>CloudBees customers (enterprise scale)</li> <li>Thousands of open source projects</li> <li> <p>Can handle 100+ concurrent builds easily</p> </li> <li> <p>Shared Libraries: Reusable pipeline code:</p> </li> <li>DRY principle for pipelines</li> <li>Golden path templates</li> <li>Consistent build patterns</li> <li> <p>Centralized updates (change once, apply everywhere)</p> </li> <li> <p>Enterprise Features Available: </p> </li> <li>RBAC and folder-based security</li> <li>Audit logging</li> <li>Blue Ocean UI (modern interface)</li> <li>Pipeline visualization</li> <li> <p>Extensive reporting</p> </li> <li> <p>Strong Community: </p> </li> <li>Active development (monthly releases)</li> <li>Large user community</li> <li>Extensive documentation</li> <li>Many tutorials and examples</li> <li> <p>Commercial support available (CloudBees)</p> </li> <li> <p>Backstage Integration: Official Jenkins plugin shows:</p> <ul> <li>Build status and history</li> <li>Console logs</li> <li>Test results</li> <li>Direct links to Jenkins</li> </ul> </li> <li> <p>Familiarity: Most developers have used Jenkins:</p> <ul> <li>Reduces learning curve</li> <li>Easier contributor onboarding</li> <li>Extensive knowledge base (Stack Overflow, blogs)</li> </ul> </li> <li> <p>Cost Effective: </p> <ul> <li>Open source (free)</li> <li>Only infrastructure costs</li> <li>Commercial support optional (CloudBees)</li> </ul> </li> </ol>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#consequences","title":"Consequences","text":""},{"location":"adr/ADR-004%20jenkins%204%20ci/#positive","title":"Positive","text":"<p>\u2705 Automated Quality Gates: Every commit tested, scanned, and validated before deployment</p> <p>\u2705 Fast Feedback: Developers get results in 5-10 minutes, not hours</p> <p>\u2705 Golden Paths: Shared libraries provide consistent, best-practice pipelines</p> <p>\u2705 Security Integration: SAST, dependency scanning, container scanning automated</p> <p>\u2705 Resource Efficiency: Dynamic Kubernetes agents scale up/down based on load</p> <p>\u2705 Pipeline as Code: Jenkinsfiles version-controlled, reviewed, and testable</p> <p>\u2705 Extensive Integrations: 1,800+ plugins cover virtually any tool</p> <p>\u2705 Proven Reliability: Battle-tested at enterprise scale for 15+ years</p> <p>\u2705 Developer Self-Service: Teams create/modify pipelines without platform team</p> <p>\u2705 DORA Metrics: Build events feed into deployment frequency and lead time calculations</p> <p>\u2705 Familiarity: Developers already know Jenkins, reducing onboarding time</p> <p>\u2705 Cost Effective: Open source with no licensing fees</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#negative","title":"Negative","text":"<p>\u26a0\ufe0f UI Complexity: Traditional Jenkins UI dated, can be overwhelming (Blue Ocean helps)</p> <p>\u26a0\ufe0f Plugin Management: Keeping plugins updated requires ongoing effort</p> <p>\u26a0\ufe0f Groovy DSL: Jenkinsfile syntax (Groovy) has learning curve</p> <p>\u26a0\ufe0f Resource Usage: Jenkins controller requires ~2GB RAM minimum</p> <p>\u26a0\ufe0f Security Concerns: Jenkins has had security vulnerabilities (requires updates)</p> <p>\u26a0\ufe0f Configuration Complexity: Advanced pipelines can become complex</p> <p>\u26a0\ufe0f Legacy Baggage: 15+ years of features means some cruft</p> <p>\u26a0\ufe0f Agent Configuration: Setting up Kubernetes plugin requires careful configuration</p> <p>\u26a0\ufe0f Maintenance: Jenkins and plugins need regular updates</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#neutral","title":"Neutral","text":"<p>\u25fd Alternative Modern Tools Exist: GitHub Actions, GitLab CI, Tekton are simpler but less feature-rich</p> <p>\u25fd Blue Ocean: Modern UI available but not default</p> <p>\u25fd CloudBees: Commercial support available if needed</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#mitigation-strategies","title":"Mitigation Strategies","text":"<ol> <li>UI Complexity:</li> <li>Use Blue Ocean for modern UI</li> <li>Standardize on pipeline-as-code (minimize UI usage)</li> <li>Create clear documentation and screenshots</li> <li> <p>Consider Backstage as primary interface (show status there)</p> </li> <li> <p>Plugin Management:</p> </li> <li>Use dependabot or similar for plugin updates</li> <li>Test updates in staging before production</li> <li>Limit plugin count to essential ones</li> <li> <p>Document which plugins are used and why</p> </li> <li> <p>Groovy DSL Learning Curve:</p> </li> <li>Provide Jenkinsfile templates for common scenarios</li> <li>Create shared library with high-level abstractions</li> <li>Include examples and comments in templates</li> <li> <p>Run workshops for developers</p> </li> <li> <p>Security:</p> </li> <li>Subscribe to Jenkins security advisories</li> <li>Automate Jenkins updates (test first)</li> <li>Use RBAC to limit permissions</li> <li>Regular security audits</li> <li> <p>Keep plugins updated</p> </li> <li> <p>Configuration:</p> </li> <li>Use JCasC for all configuration</li> <li>Store configuration in Git</li> <li>Use Infrastructure as Code for Jenkins deployment</li> <li> <p>Document configuration decisions</p> </li> <li> <p>Kubernetes Plugin:</p> </li> <li>Start with simple pod templates</li> <li>Create library of pod templates for common scenarios</li> <li>Document resource limits and requests</li> <li>Monitor agent performance</li> </ol>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"adr/ADR-004%20jenkins%204%20ci/#alternative-1-github-actions","title":"Alternative 1: GitHub Actions","text":"<p>Pros: - Native GitHub integration (no webhooks) - YAML-based, simple syntax - Matrix builds for testing multiple versions - Large marketplace of actions - Free for public repos, generous limits - Modern, fast, cloud-native</p> <p>Cons: - GitHub Lock-In: Only works with GitHub - Limited Self-Hosting: Self-hosted runners less mature than Jenkins - Cost: Expensive for private repos at scale ($0.008/minute, adds up) - Less Flexible: More opinionated than Jenkins - Smaller Plugin Ecosystem: Fewer actions than Jenkins plugins - No Shared Libraries: Harder to share pipeline code across repos - Limited RBAC: Access control less granular</p> <p>Reason for Rejection: While excellent for GitHub-centric projects, GitHub Actions creates vendor lock-in. Cost at scale significant (100 builds/day \u00d7 10 min \u00d7 $0.008 = $240/month, $2,880/year just for CI). Self-hosted runners less mature than Jenkins Kubernetes agents. May use for Fawkes repo itself but not as platform-wide CI solution.</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#alternative-2-gitlab-ci","title":"Alternative 2: GitLab CI","text":"<p>Pros: - Native GitLab integration - YAML-based pipelines - Built-in container registry - Auto DevOps features - Good UI and UX - Free tier generous</p> <p>Cons: - GitLab Required: We use GitHub, not GitLab - Migration Overhead: Would need to migrate or mirror repos - Less Flexible: More opinionated than Jenkins - Smaller Ecosystem: Fewer integrations than Jenkins - Learning Curve: Teams would need to learn new tool</p> <p>Reason for Rejection: GitLab CI excellent if using GitLab, but we use GitHub. Migrating repos or maintaining mirrors adds complexity without clear benefit. Jenkins works with any Git provider.</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#alternative-3-tekton-pipelines","title":"Alternative 3: Tekton Pipelines","text":"<p>Pros: - Kubernetes-native (CRDs) - Cloud-native, modern architecture - Pipeline-as-code (YAML) - CNCF project (good governance) - Growing adoption - True cloud-native approach</p> <p>Cons: - Immature: Newer project, less proven at scale - Steeper Learning Curve: CRDs and Tasks/Pipelines concepts unfamiliar - No UI: Requires separate UI (Tekton Dashboard basic) - Smaller Ecosystem: Fewer pre-built Tasks than Jenkins plugins - Limited Shared Libraries: Harder to share pipeline code - Complex Setup: More moving parts than Jenkins - Debugging Harder: Kubernetes-native means more abstraction</p> <p>Reason for Rejection: Tekton philosophically appealing (cloud-native) but less mature and harder to use. Jenkins provides 80% of benefits with 20% of complexity. May revisit Tekton in 2-3 years when more mature and ecosystem richer.</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#alternative-4-circleci-saas","title":"Alternative 4: CircleCI (SaaS)","text":"<p>Pros: - Fast builds (optimized infrastructure) - Good UI and developer experience - Docker-first approach - Orbs (reusable config) - Free tier available - Popular with startups</p> <p>Cons: - SaaS Only: No self-hosted option (CircleCI Server discontinued) - Cost: $15-60/user/month depending on tier (expensive at scale) - Vendor Lock-In: Proprietary platform - Limited Control: Can't customize deeply - Data on CircleCI Servers: Security/compliance concerns</p> <p>Reason for Rejection: SaaS-only and proprietary conflicts with self-hosted open source values. Cost at 100 developers: $18,000-$72,000/year. Cannot customize to our exact needs.</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#alternative-5-drone-ci","title":"Alternative 5: Drone CI","text":"<p>Pros: - Open source and self-hosted - Container-native (Docker) - YAML-based pipelines - Lightweight - Easy to set up - Good GitHub integration</p> <p>Cons: - Smaller Community: Much smaller than Jenkins - Limited Plugins: Fewer integrations than Jenkins - Less Mature: Newer, less battle-tested - Uncertain Future: Development pace variable - Limited Enterprise Features: RBAC, audit logging less robust - Smaller Ecosystem: Fewer shared pipelines</p> <p>Reason for Rejection: While simpler than Jenkins, Drone's smaller community and ecosystem are concerns. Jenkins' maturity and plugin ecosystem provide more value. Drone good for simple use cases but Fawkes needs comprehensive CI solution.</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#alternative-6-concourse-ci","title":"Alternative 6: Concourse CI","text":"<p>Pros: - Pipeline-as-code (YAML) - Resource-based model (interesting approach) - Reproducible builds - Open source - Kubernetes support</p> <p>Cons: - Steep Learning Curve: Resource model unintuitive - Small Community: Very small compared to Jenkins - Limited Plugins: Minimal ecosystem - Complex Setup: Many components to deploy - No UI for Configuration: All YAML, no web UI - Limited Adoption: Few large organizations use it</p> <p>Reason for Rejection: Concourse's resource-based model interesting but unintuitive. Very small community and ecosystem. Learning curve not justified by benefits over Jenkins.</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#alternative-7-spinnaker","title":"Alternative 7: Spinnaker","text":"<p>Pros: - Continuous delivery focus - Multi-cloud native - Advanced deployment strategies - Netflix-proven</p> <p>Cons: - Not CI Tool: Continuous delivery only, not continuous integration - Very Complex: Difficult to set up and maintain - Resource Heavy: 10+ microservices, high overhead - Overkill: More than we need</p> <p>Reason for Rejection: Spinnaker is CD tool, not CI. We need CI/CD together. Spinnaker's complexity unjustified. Using Jenkins (CI) + ArgoCD (CD) cleaner separation of concerns.</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-001: Kubernetes (Jenkins uses Kubernetes plugin for agents)</li> <li>ADR-002: Backstage (Jenkins plugin shows build status)</li> <li>ADR-003: ArgoCD (Jenkins triggers ArgoCD deployments)</li> <li>ADR-007: Mattermost (Jenkins sends build notifications)</li> <li>Future ADR: Shared Pipeline Library Structure</li> <li>Future ADR: Build Caching Strategy</li> </ul>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#implementation-notes","title":"Implementation Notes","text":""},{"location":"adr/ADR-004%20jenkins%204%20ci/#deployment-architecture","title":"Deployment Architecture","text":"<pre><code># Jenkins Deployment\njenkins:\n  namespace: fawkes-ci\n\n  components:\n    - jenkins-controller:\n        image: jenkins/jenkins:lts\n        replicas: 1 (stateful, uses persistent volume)\n        resources:\n          cpu: 2 cores\n          memory: 4Gi\n        storage: 50Gi (PVC for Jenkins home)\n\n    - jenkins-agents:\n        dynamic: true (Kubernetes plugin creates on-demand)\n        pod-templates:\n          - maven-agent:\n              resources:\n                cpu: 1 core\n                memory: 2Gi\n          - node-agent:\n              resources:\n                cpu: 1 core\n                memory: 1Gi\n          - python-agent:\n              resources:\n                cpu: 1 core\n                memory: 1Gi\n          - docker-agent:\n              resources:\n                cpu: 2 cores\n                memory: 4Gi\n\n  integrations:\n    - github (webhooks, status checks)\n    - sonarqube (code quality scanning)\n    - trivy (container scanning)\n    - argocd (deployment triggering)\n    - mattermost (notifications)\n    - backstage (build status plugin)\n    - harbor (container registry)\n    - dora-metrics-service (build events)\n</code></pre>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#configuration-as-code-jcasc","title":"Configuration as Code (JCasC)","text":"<pre><code># jenkins-casc.yaml\njenkins:\n  systemMessage: \"Fawkes Platform CI/CD\"\n  numExecutors: 0  # Use Kubernetes agents only\n\n  securityRealm:\n    github:\n      githubWebUri: \"https://github.com\"\n      clientID: \"${GITHUB_CLIENT_ID}\"\n      clientSecret: \"${GITHUB_CLIENT_SECRET}\"\n\n  authorizationStrategy:\n    globalMatrix:\n      permissions:\n        - \"Overall/Administer:admin\"\n        - \"Overall/Read:authenticated\"\n        - \"Job/Build:authenticated\"\n        - \"Job/Cancel:authenticated\"\n\n  clouds:\n    - kubernetes:\n        name: \"kubernetes\"\n        serverUrl: \"https://kubernetes.default\"\n        namespace: \"fawkes-ci\"\n        jenkinsUrl: \"http://jenkins:8080\"\n        jenkinsTunnel: \"jenkins-agent:50000\"\n        templates:\n          - name: \"maven\"\n            label: \"maven\"\n            containers:\n              - name: \"maven\"\n                image: \"maven:3.8-openjdk-17\"\n                command: \"/bin/sh -c\"\n                args: \"cat\"\n                ttyEnabled: true\n                resourceRequestCpu: \"1\"\n                resourceRequestMemory: \"2Gi\"\n                resourceLimitCpu: \"2\"\n                resourceLimitMemory: \"4Gi\"\n\nunclassified:\n  globalLibraries:\n    libraries:\n      - name: \"fawkes-pipeline-library\"\n        retriever:\n          modernSCM:\n            scm:\n              git:\n                remote: \"https://github.com/paruff/fawkes-pipeline-library\"\n                credentialsId: \"github-token\"\n</code></pre>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#shared-pipeline-library-structure","title":"Shared Pipeline Library Structure","text":"<pre><code>fawkes-pipeline-library/\n\u251c\u2500\u2500 vars/\n\u2502   \u251c\u2500\u2500 mavenPipeline.groovy\n\u2502   \u251c\u2500\u2500 nodePipeline.groovy\n\u2502   \u251c\u2500\u2500 pythonPipeline.groovy\n\u2502   \u251c\u2500\u2500 dockerBuild.groovy\n\u2502   \u251c\u2500\u2500 securityScan.groovy\n\u2502   \u2514\u2500\u2500 deployToArgoCD.groovy\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 com/\n\u2502       \u2514\u2500\u2500 fawkes/\n\u2502           \u251c\u2500\u2500 Build.groovy\n\u2502           \u251c\u2500\u2500 Test.groovy\n\u2502           \u251c\u2500\u2500 Security.groovy\n\u2502           \u2514\u2500\u2500 Deploy.groovy\n\u2514\u2500\u2500 resources/\n    \u2514\u2500\u2500 pod-templates/\n        \u251c\u2500\u2500 maven.yaml\n        \u251c\u2500\u2500 node.yaml\n        \u2514\u2500\u2500 python.yaml\n</code></pre>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#golden-path-jenkinsfile-examples","title":"Golden Path Jenkinsfile Examples","text":"<p>Java Spring Boot:</p> <pre><code>@Library('fawkes-pipeline-library') _\n\nmavenPipeline {\n    sonarQubeProject = 'my-service'\n    dockerImage = 'my-service'\n    argocdApp = 'my-service-dev'\n    notifyChannel = 'team-builds'\n}\n</code></pre> <p>Python FastAPI:</p> <pre><code>@Library('fawkes-pipeline-library') _\n\npythonPipeline {\n    pythonVersion = '3.11'\n    testCommand = 'pytest --cov=src tests/'\n    dockerImage = 'my-python-service'\n    argocdApp = 'my-python-service-dev'\n}\n</code></pre> <p>Node.js Express:</p> <pre><code>@Library('fawkes-pipeline-library') _\n\nnodePipeline {\n    nodeVersion = '18'\n    buildCommand = 'npm run build'\n    testCommand = 'npm test'\n    dockerImage = 'my-node-service'\n    argocdApp = 'my-node-service-dev'\n}\n</code></pre>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#complete-pipeline-example-without-library","title":"Complete Pipeline Example (Without Library)","text":"<pre><code>pipeline {\n    agent {\n        kubernetes {\n            yaml \"\"\"\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: maven\n    image: maven:3.8-openjdk-17\n    command: ['cat']\n    tty: true\n  - name: docker\n    image: docker:latest\n    command: ['cat']\n    tty: true\n    volumeMounts:\n    - name: docker-sock\n      mountPath: /var/run/docker.sock\n  - name: trivy\n    image: aquasec/trivy:latest\n    command: ['cat']\n    tty: true\n  volumes:\n  - name: docker-sock\n    hostPath:\n      path: /var/run/docker.sock\n\"\"\"\n        }\n    }\n\n    environment {\n        DOCKER_REGISTRY = 'harbor.fawkes.io'\n        IMAGE_NAME = \"${DOCKER_REGISTRY}/myapp/myservice\"\n        IMAGE_TAG = \"${env.GIT_COMMIT.take(7)}\"\n    }\n\n    stages {\n        stage('Checkout') {\n            steps {\n                checkout scm\n            }\n        }\n\n        stage('Build') {\n            steps {\n                container('maven') {\n                    sh 'mvn clean package -DskipTests'\n                }\n            }\n        }\n\n        stage('Test') {\n            steps {\n                container('maven') {\n                    sh 'mvn test'\n                }\n            }\n            post {\n                always {\n                    junit 'target/surefire-reports/*.xml'\n                }\n            }\n        }\n\n        stage('SonarQube Analysis') {\n            steps {\n                container('maven') {\n                    withSonarQubeEnv('SonarQube') {\n                        sh 'mvn sonar:sonar'\n                    }\n                }\n            }\n        }\n\n        stage('Quality Gate') {\n            steps {\n                timeout(time: 5, unit: 'MINUTES') {\n                    waitForQualityGate abortPipeline: true\n                }\n            }\n        }\n\n        stage('Build Docker Image') {\n            steps {\n                container('docker') {\n                    sh \"\"\"\n                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .\n                        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest\n                    \"\"\"\n                }\n            }\n        }\n\n        stage('Security Scan') {\n            steps {\n                container('trivy') {\n                    sh \"\"\"\n                        trivy image --severity HIGH,CRITICAL --exit-code 1 ${IMAGE_NAME}:${IMAGE_TAG}\n                    \"\"\"\n                }\n            }\n        }\n\n        stage('Push Image') {\n            steps {\n                container('docker') {\n                    withCredentials([usernamePassword(credentialsId: 'harbor-credentials', \n                                                     usernameVariable: 'USER', \n                                                     passwordVariable: 'PASS')]) {\n                        sh \"\"\"\n                            echo \\$PASS | docker login ${DOCKER_REGISTRY} -u \\$USER --password-stdin\n                            docker push ${IMAGE_NAME}:${IMAGE_TAG}\n                            docker push ${IMAGE_NAME}:latest\n                        \"\"\"\n                    }\n                }\n            }\n        }\n\n        stage('Update GitOps') {\n            steps {\n                script {\n                    // Update image tag in GitOps repository\n                    sh \"\"\"\n                        git clone https://github.com/paruff/fawkes-gitops.git\n                        cd fawkes-gitops\n                        sed -i 's|image: .*|image: ${IMAGE_NAME}:${IMAGE_TAG}|' apps/dev/myservice/deployment.yaml\n                        git add apps/dev/myservice/deployment.yaml\n                        git commit -m \"Update myservice to ${IMAGE_TAG}\"\n                        git push\n                    \"\"\"\n                }\n            }\n        }\n\n        stage('Notify DORA Service') {\n            steps {\n                script {\n                    sh \"\"\"\n                        curl -X POST https://dora-metrics.fawkes.io/webhook/build \\\\\n                          -H 'Content-Type: application/json' \\\\\n                          -d '{\n                            \"service\": \"myservice\",\n                            \"commit\": \"${env.GIT_COMMIT}\",\n                            \"buildNumber\": \"${env.BUILD_NUMBER}\",\n                            \"status\": \"SUCCESS\",\n                            \"duration\": \"${currentBuild.duration}\",\n                            \"timestamp\": \"${new Date().format('yyyy-MM-dd HH:mm:ss')}\"\n                          }'\n                    \"\"\"\n                }\n            }\n        }\n    }\n\n    post {\n        success {\n            mattermostSend(\n                channel: 'team-builds',\n                color: 'good',\n                message: \"\u2705 Build #${env.BUILD_NUMBER} succeeded for ${env.JOB_NAME}\\nCommit: ${env.GIT_COMMIT.take(7)}\\nDuration: ${currentBuild.durationString}\"\n            )\n        }\n        failure {\n            mattermostSend(\n                channel: 'team-builds',\n                color: 'danger',\n                message: \"\u274c Build #${env.BUILD_NUMBER} failed for ${env.JOB_NAME}\\nCommit: ${env.GIT_COMMIT.take(7)}\"\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#plugin-list-essential","title":"Plugin List (Essential)","text":"<p>Core Plugins: - Kubernetes Plugin (dynamic agents) - Pipeline Plugin (Jenkinsfile support) - Git Plugin (Git integration) - GitHub Plugin (GitHub webhooks) - Credentials Plugin (secret management) - Configuration as Code Plugin (JCasC)</p> <p>Quality &amp; Security: - SonarQube Scanner Plugin - Warnings Next Generation Plugin - JUnit Plugin - Code Coverage Plugin</p> <p>Build Tools: - Maven Integration Plugin - NodeJS Plugin - Python Plugin - Docker Plugin</p> <p>Deployment: - Kubernetes CLI Plugin - HTTP Request Plugin (ArgoCD API)</p> <p>Notifications: - Mattermost Plugin - Email Extension Plugin</p> <p>UI: - Blue Ocean Plugin (modern UI) - Dashboard View Plugin</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<p>Prometheus Metrics (via Jenkins Prometheus plugin): - jenkins_builds_total - jenkins_builds_duration_seconds - jenkins_queue_size - jenkins_node_online_total - jenkins_job_success_rate</p> <p>Grafana Dashboard: - Build success/failure rates - Build duration trends (P50, P95, P99) - Queue size over time - Agent utilization - Plugin health</p> <p>Alerts: - Build queue &gt;10 for &gt;15 minutes - Build failure rate &gt;20% (rolling 24h) - Jenkins controller down &gt;5 minutes - Disk space &lt;20%</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#backup-disaster-recovery","title":"Backup &amp; Disaster Recovery","text":"<p>Backup Strategy: - Jenkins configuration in Git (JCasC) - Persistent volume snapshots (daily) - Plugin list documented - Job configurations in Git (Jenkinsfile per repo)</p> <p>Recovery: 1. Redeploy Jenkins from Helm + JCasC 2. Restore persistent volume from snapshot (job history) 3. Plugins auto-installed via JCasC 4. Jobs auto-discovered from GitHub organizations</p> <p>RTO: &lt;4 hours RPO: &lt;24 hours</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#performance-optimization","title":"Performance Optimization","text":"<p>Build Caching: - Maven local repository cache (PV) - npm cache (PV) - Docker layer caching - Workspace caching for reuse</p> <p>Agent Optimization: - Right-size agent resources - Use pod templates with pre-pulled images - Implement build timeouts - Limit concurrent builds per agent</p> <p>Controller Optimization: - Increase heap size for large installations - Use separate build agents (don't build on controller) - Regular cleanup of old builds - Archive artifacts externally (S3/MinIO)</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#monitoring-this-decision","title":"Monitoring This Decision","text":"<p>We will revisit this ADR if: - Jenkins development significantly slows or stops - A cloud-native alternative (Tekton, Dagger) becomes significantly more mature - Operational burden (updates, plugins) exceeds benefits - GitHub Actions or GitLab CI costs become competitive with self-hosted - Team strongly prefers different CI tool - Security concerns cannot be adequately addressed</p> <p>Next Review Date: April 8, 2026 (6 months)</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#references","title":"References","text":"<ul> <li>Jenkins Official Documentation</li> <li>Jenkins Kubernetes Plugin</li> <li>Configuration as Code Plugin</li> <li>Jenkins Pipeline Documentation</li> <li>Shared Libraries Documentation</li> <li>Jenkins Helm Chart</li> </ul>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#notes","title":"Notes","text":""},{"location":"adr/ADR-004%20jenkins%204%20ci/#why-not-github-actions","title":"Why Not GitHub Actions?","text":"<p>Most common question: \"Why not just use GitHub Actions?\"</p> <p>GitHub Actions excellent for: - GitHub-hosted open source projects - Simple CI workflows - GitHub-centric organizations</p> <p>Jenkins better for Fawkes because: - Vendor neutral: Works with any Git provider - Self-hosted first: True control, no SaaS lock-in - More flexible: Less opinionated, more customizable - Shared libraries: Better code reuse across pipelines - Enterprise features: RBAC, audit logging more mature - Cost at scale: Free except infrastructure vs. GitHub's per-minute pricing</p> <p>Can use both: GitHub Actions for Fawkes repo itself, Jenkins for platform users.</p>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#jenkins-security-best-practices","title":"Jenkins Security Best Practices","text":"<ol> <li>Keep Updated: Subscribe to security advisories, apply patches promptly</li> <li>Minimize Plugins: Only install necessary plugins</li> <li>Use RBAC: Least privilege access model</li> <li>Secrets Management: Use Credentials Plugin, not hardcoded secrets</li> <li>Network Segmentation: Restrict Jenkins network access</li> <li>Audit Logging: Enable and monitor audit logs</li> <li>CSRF Protection: Enable CSRF tokens</li> <li>Content Security Policy: Configure CSP headers</li> </ol>"},{"location":"adr/ADR-004%20jenkins%204%20ci/#kubernetes-plugin-configuration-tips","title":"Kubernetes Plugin Configuration Tips","text":"<ol> <li>Resource Limits: Always set limits and requests</li> <li>Service Account: Use dedicated service account with minimal permissions</li> <li>Network Policies: Restrict agent network access</li> <li>Image Pull Policy: Use IfNotPresent to reduce registry load</li> <li>Pod Templates: Create library of reusable templates</li> <li>Timeouts: Set appropriate pod and container timeouts</li> <li>Cleanup: Configure automatic pod deletion after build</li> </ol> <p>Decision Made By: Platform Architecture Team Approved By: Project Lead Date: October 8, 2025 Author: [Platform Architect Name] Last Updated: October 8, 2025</p>"},{"location":"adr/ADR-005%20terraform/","title":"ADR-005: Terraform for Infrastructure as Code","text":""},{"location":"adr/ADR-005%20terraform/#status","title":"Status","text":"<p>Accepted - October 8, 2025</p>"},{"location":"adr/ADR-005%20terraform/#context","title":"Context","text":"<p>Fawkes requires an Infrastructure as Code (IaC) tool to provision and manage cloud infrastructure declaratively. IaC is fundamental to platform engineering, enabling repeatable, version-controlled, auditable infrastructure management across multiple clouds.</p>"},{"location":"adr/ADR-005%20terraform/#the-need-for-infrastructure-as-code","title":"The Need for Infrastructure as Code","text":"<p>Current Challenges Without IaC: - Manual Provisioning: Error-prone, time-consuming, not documented - Configuration Drift: Infrastructure diverges from documented state - No Version Control: Can't track infrastructure changes over time - No Code Review: Infrastructure changes not peer-reviewed - Environment Inconsistencies: Dev, staging, prod configured differently - Disaster Recovery: Rebuilding infrastructure from scratch is slow/impossible - No Self-Service: Developers can't provision infrastructure without tickets - Tribal Knowledge: Infrastructure setup exists only in operators' heads</p> <p>What Infrastructure as Code Provides: 1. Declarative Configuration: Describe desired state, tool handles how to achieve it 2. Version Control: All infrastructure changes tracked in Git 3. Code Review: Infrastructure changes go through PR process 4. Repeatability: Provision identical infrastructure multiple times 5. Environment Parity: Dev/staging/prod from same code with different variables 6. Disaster Recovery: Rebuild entire infrastructure from code 7. Documentation: Code is documentation (always up-to-date) 8. Automation: Integrate with CI/CD for automated infrastructure changes</p>"},{"location":"adr/ADR-005%20terraform/#requirements-for-iac-tool","title":"Requirements for IaC Tool","text":"<p>Core Requirements: - Multi-Cloud: Support AWS, Azure, GCP with consistent workflow - Declarative: Describe desired state, not procedural steps - State Management: Track current infrastructure state - Plan/Preview: Show changes before applying - Modular: Reusable modules for common patterns - Mature Ecosystem: Providers for 100+ services - Large Community: Extensive documentation, examples, support - Open Source: Transparent, no vendor lock-in</p> <p>DORA Alignment: - Infrastructure Changes: Version-controlled, reviewable infrastructure - Deployment Frequency: Automated infrastructure enables faster deployments - Lead Time: Infrastructure provisioning no longer bottleneck - Change Failure Rate: Preview changes before applying reduces errors</p> <p>Integration Requirements: - GitHub: Store modules and configurations - Jenkins: Automate terraform apply in pipelines - Kubernetes: Provision clusters, configure resources - Cloud Providers: AWS, Azure, GCP - Backstage: Show infrastructure status (future)</p>"},{"location":"adr/ADR-005%20terraform/#forces-at-play","title":"Forces at Play","text":"<p>Technical Forces: - Need multi-cloud support for flexibility - State management critical for tracking resources - Preview capability reduces risk of changes - Modular approach enables code reuse</p> <p>Operational Forces: - Platform team can't manually provision everything - Need disaster recovery capabilities - Environment parity critical for testing - Self-service infrastructure reduces tickets</p> <p>Developer Experience Forces: - Developers want infrastructure on-demand - Need clear documentation of infrastructure - Want confidence changes won't break production - Prefer familiar tools and workflows</p> <p>Ecosystem Forces: - Terraform has dominant market share - Extensive provider ecosystem - Large community and knowledge base - Enterprise adoption provides credibility</p>"},{"location":"adr/ADR-005%20terraform/#decision","title":"Decision","text":"<p>We will use Terraform as the primary Infrastructure as Code tool for Fawkes.</p> <p>Specifically: - Terraform OSS (Open Source, latest stable version) - HCL (HashiCorp Configuration Language) - Terraform Cloud for state management (free tier, 5 users) - Modular approach with reusable modules - Multi-environment support (dev, staging, prod) - Version pinning for providers and modules - Automated testing with Terratest (critical modules) - Crossplane for Kubernetes-native IaC (roadmap, Phase 2)</p>"},{"location":"adr/ADR-005%20terraform/#rationale","title":"Rationale","text":"<ol> <li> <p>Industry Standard: Terraform is the most widely adopted IaC tool, with 40,000+ GitHub stars, used by 70%+ of organizations doing multi-cloud</p> </li> <li> <p>True Multi-Cloud: Consistent workflow across clouds:</p> </li> <li>Same HCL syntax for AWS, Azure, GCP</li> <li>Unified state management</li> <li>Single tool to learn</li> <li> <p>Providers for 3,000+ services</p> </li> <li> <p>Mature and Battle-Tested: </p> </li> <li>10+ years of development</li> <li>Production-proven at enterprise scale</li> <li>Extensive real-world validation</li> <li> <p>Known edge cases well-documented</p> </li> <li> <p>Declarative Language: HCL describes desired state:</p> </li> <li>Easy to read and understand</li> <li>Predictable behavior</li> <li>Idempotent operations</li> <li> <p>Less error-prone than imperative scripts</p> </li> <li> <p>State Management: </p> </li> <li>Tracks actual infrastructure state</li> <li>Enables drift detection</li> <li>Supports team collaboration</li> <li> <p>Remote state backends (S3, Terraform Cloud)</p> </li> <li> <p>Plan Before Apply: </p> </li> <li>Preview changes before executing</li> <li>Reduces fear of infrastructure changes</li> <li>Catch mistakes before they happen</li> <li> <p>Show changes in PR reviews</p> </li> <li> <p>Massive Provider Ecosystem: </p> </li> <li>AWS: 1,000+ resources</li> <li>Azure: 1,500+ resources</li> <li>GCP: 800+ resources</li> <li>Kubernetes: Full support</li> <li> <p>3,000+ total providers</p> </li> <li> <p>Module Registry: </p> </li> <li>Public registry with 10,000+ modules</li> <li>Reusable, community-validated code</li> <li>Can publish private modules</li> <li> <p>Accelerates development</p> </li> <li> <p>Large Community: </p> </li> <li>Extensive documentation</li> <li>Thousands of tutorials and examples</li> <li>Active forums and Slack channels</li> <li> <p>Commercial support available (HashiCorp)</p> </li> <li> <p>Testing Support: </p> <ul> <li>Terratest for integration testing</li> <li>terraform validate for syntax</li> <li>terraform fmt for formatting</li> <li>tflint for best practices</li> </ul> </li> <li> <p>CI/CD Integration: </p> <ul> <li>Easy to integrate with Jenkins</li> <li>Automated plan on PR</li> <li>Automated apply on merge</li> <li>GitOps workflow support</li> </ul> </li> <li> <p>Crossplane Path: </p> <ul> <li>Can transition to Crossplane later</li> <li>Terraform modules can inform Crossplane compositions</li> <li>Provides foundation for Kubernetes-native IaC</li> </ul> </li> </ol>"},{"location":"adr/ADR-005%20terraform/#consequences","title":"Consequences","text":""},{"location":"adr/ADR-005%20terraform/#positive","title":"Positive","text":"<p>\u2705 Multi-Cloud Freedom: Same tool and workflow across AWS, Azure, GCP</p> <p>\u2705 Version Controlled Infrastructure: All changes in Git with full audit trail</p> <p>\u2705 Repeatable Provisioning: Spin up identical environments reliably</p> <p>\u2705 Environment Parity: Dev, staging, prod consistent, reducing bugs</p> <p>\u2705 Disaster Recovery: Rebuild entire infrastructure from code in hours</p> <p>\u2705 Code Review: Infrastructure changes peer-reviewed before applying</p> <p>\u2705 Preview Changes: See exactly what will change before applying</p> <p>\u2705 Modular Code: Reusable modules reduce duplication and errors</p> <p>\u2705 State Awareness: Terraform knows current state, only changes what's needed</p> <p>\u2705 Extensive Ecosystem: 3,000+ providers cover virtually any service</p> <p>\u2705 Developer Self-Service: Developers can provision infrastructure via modules</p> <p>\u2705 Documentation as Code: Infrastructure configuration is documentation</p> <p>\u2705 Large Community: Easy to find help, examples, and best practices</p>"},{"location":"adr/ADR-005%20terraform/#negative","title":"Negative","text":"<p>\u26a0\ufe0f State Management Complexity: State files require careful handling and locking</p> <p>\u26a0\ufe0f Learning Curve: HCL syntax and concepts require learning</p> <p>\u26a0\ufe0f State Drift: Manual changes create drift between code and reality</p> <p>\u26a0\ufe0f Refresh Delays: terraform plan can be slow for large infrastructures</p> <p>\u26a0\ufe0f Provider Lag: New cloud features may lag behind AWS/Azure/GCP releases</p> <p>\u26a0\ufe0f Breaking Changes: Major Terraform/provider updates can break code</p> <p>\u26a0\ufe0f Resource Naming: Changing resource names often requires destroy/recreate</p> <p>\u26a0\ufe0f Cost of Mistakes: Accidental terraform destroy can be catastrophic</p> <p>\u26a0\ufe0f Complex Debugging: Error messages sometimes cryptic</p>"},{"location":"adr/ADR-005%20terraform/#neutral","title":"Neutral","text":"<p>\u25fd HCL vs. Other Languages: Declarative DSL (HCL) vs. general-purpose languages (Python, TypeScript)</p> <p>\u25fd Terraform Cloud: Free tier available, paid tiers for advanced features</p> <p>\u25fd HashiCorp Business: Company behind Terraform has commercial interests</p>"},{"location":"adr/ADR-005%20terraform/#mitigation-strategies","title":"Mitigation Strategies","text":"<ol> <li>State Management:</li> <li>Use remote state backend (Terraform Cloud or S3)</li> <li>Enable state locking (DynamoDB for S3)</li> <li>Never manually edit state files</li> <li>Regular state backups</li> <li> <p>Document state management procedures</p> </li> <li> <p>Learning Curve:</p> </li> <li>Provide Terraform training workshops</li> <li>Create comprehensive module documentation</li> <li>Use module examples extensively</li> <li>Start simple, add complexity gradually</li> <li> <p>Leverage community resources</p> </li> <li> <p>State Drift:</p> </li> <li>Educate team: never make manual changes</li> <li>Run terraform plan regularly to detect drift</li> <li>Use cloud provider guard rails (SCPs, policies)</li> <li>Consider drift detection automation</li> <li> <p>Document procedure for importing manual changes</p> </li> <li> <p>Breaking Changes:</p> </li> <li>Pin provider versions in code</li> <li>Test updates in non-production first</li> <li>Follow Terraform upgrade guides carefully</li> <li>Subscribe to provider changelogs</li> <li> <p>Budget time for major upgrades</p> </li> <li> <p>Cost of Mistakes:</p> </li> <li>Protect production with different credentials</li> <li>Use terraform plan before every apply</li> <li>Require PR approval for production changes</li> <li>Enable deletion protection on critical resources</li> <li> <p>Regular backups and disaster recovery testing</p> </li> <li> <p>Resource Naming:</p> </li> <li>Use computed names where possible</li> <li>Document naming conventions</li> <li>Use lifecycle blocks (create_before_destroy)</li> <li>Plan for resource replacement scenarios</li> </ol>"},{"location":"adr/ADR-005%20terraform/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"adr/ADR-005%20terraform/#alternative-1-pulumi","title":"Alternative 1: Pulumi","text":"<p>Pros: - Use real programming languages (Python, TypeScript, Go, C#) - Familiar to developers (no new language to learn) - Strong typing and IDE support - Good testing story (use language's test framework) - Modern architecture - Growing quickly</p> <p>Cons: - Smaller Community: Much smaller than Terraform - Fewer Providers: 100+ providers vs. Terraform's 3,000+ - Less Mature: Newer (2018 vs. Terraform 2014) - SaaS State Backend: Free tier limited, paid for self-hosted - Steeper Troubleshooting: Stack traces vs. Terraform's clear errors - Less Enterprise Adoption: Fewer large-scale production examples</p> <p>Reason for Rejection: Pulumi philosophically appealing (real languages), but Terraform's maturity, ecosystem, and community provide more value. Pulumi excellent for organizations with strong programming culture, but Terraform's declarative approach and larger ecosystem better fit for Fawkes' needs. May revisit in 2-3 years as Pulumi matures.</p>"},{"location":"adr/ADR-005%20terraform/#alternative-2-aws-cloudformation","title":"Alternative 2: AWS CloudFormation","text":"<p>Pros: - Native AWS integration - No state management needed - AWS-supported and maintained - Free (no additional cost) - Stack rollback on failure - AWS console integration</p> <p>Cons: - AWS Only: Cannot manage Azure, GCP, or other providers - Verbose YAML/JSON: Much more verbose than Terraform HCL - Limited Features: Fewer advanced features than Terraform - Slow Updates: New AWS features delayed in CloudFormation - Poor Error Messages: Debugging difficult - No Multi-Cloud: Complete rewrite needed for other clouds</p> <p>Reason for Rejection: CloudFormation fine for AWS-only, but Fawkes multi-cloud from start. Vendor lock-in to AWS unacceptable. Terraform provides consistent multi-cloud experience. May use CloudFormation for AWS-specific features but not as primary IaC tool.</p>"},{"location":"adr/ADR-005%20terraform/#alternative-3-azure-resource-manager-arm-templates","title":"Alternative 3: Azure Resource Manager (ARM) Templates","text":"<p>Pros: - Native Azure integration - Free (included with Azure) - Azure portal integration - What-if preview capability</p> <p>Cons: - Azure Only: Cannot manage AWS, GCP - JSON Verbose: Very verbose JSON syntax - Complex Syntax: Difficult to write and maintain - Poor Error Messages: Debugging challenging - Limited Community: Smaller than Terraform</p> <p>Reason for Rejection: Same issues as CloudFormation\u2014Azure lock-in, verbose syntax, single-cloud only. Terraform multi-cloud approach much better.</p>"},{"location":"adr/ADR-005%20terraform/#alternative-4-ansible","title":"Alternative 4: Ansible","text":"<p>Pros: - General-purpose automation (not just infrastructure) - Agentless (SSH-based) - YAML syntax (familiar) - Large community - Can manage configuration in addition to infrastructure</p> <p>Cons: - Imperative, Not Declarative: Procedural scripts vs. desired state - No Built-In State: Doesn't track infrastructure state - Idempotency Issues: Not guaranteed idempotent - Not Designed for IaC: Configuration management tool, not IaC tool - No Plan Preview: Can't preview changes before applying - Slower: SSH-based approach slower than API calls</p> <p>Reason for Rejection: Ansible excellent for configuration management, but not purpose-built for infrastructure provisioning. Terraform's declarative approach and state management much better for IaC. May use Ansible for post-provisioning configuration alongside Terraform.</p>"},{"location":"adr/ADR-005%20terraform/#alternative-5-crossplane","title":"Alternative 5: Crossplane","text":"<p>Pros: - Kubernetes-native (CRDs) - Declarative, Kubernetes-style - GitOps integration native - Composable infrastructure - Cloud-agnostic abstractions - CNCF project (good governance)</p> <p>Cons: - Less Mature: Newer than Terraform (2018) - Smaller Ecosystem: Fewer providers than Terraform - Steeper Learning Curve: Kubernetes CRDs more complex than HCL - Debugging Harder: Kubernetes abstraction makes troubleshooting difficult - Smaller Community: Fewer examples and tutorials - Requires Kubernetes: Can't use without Kubernetes cluster</p> <p>Reason for Rejection: Crossplane philosophically aligned (Kubernetes-native, cloud-agnostic), but less mature and harder to use. Terraform provides better starting point. However, Crossplane is our Phase 2 goal\u2014we'll use Terraform initially, transition to Crossplane as it matures and team gains Kubernetes expertise. Terraform experience will inform Crossplane composition design.</p>"},{"location":"adr/ADR-005%20terraform/#alternative-6-opentofu","title":"Alternative 6: OpenTofu","text":"<p>Pros: - Terraform fork (fully compatible) - Open source (Linux Foundation) - Community-driven - No vendor control concerns - Free forever</p> <p>Cons: - Very New: Fork created August 2023 - Uncertain Future: Will it maintain compatibility? - Smaller Team: Fewer contributors than Terraform - Provider Ecosystem: May diverge from Terraform providers - Less Proven: No significant production usage yet</p> <p>Reason for Rejection: OpenTofu created in response to Terraform license change (BSL). While philosophically appealing (truly open source), too new and unproven. Terraform OSS (pre-license change) still available and sufficient for Fawkes. Will monitor OpenTofu and may switch if it proves mature and sustainable.</p>"},{"location":"adr/ADR-005%20terraform/#alternative-7-terraform-cdk-cloud-development-kit","title":"Alternative 7: Terraform CDK (Cloud Development Kit)","text":"<p>Pros: - Use programming languages (TypeScript, Python, Java, C#, Go) - Generates Terraform JSON - Familiar to developers - HashiCorp-maintained</p> <p>Cons: - Additional Layer: Complexity of language + Terraform - Less Mature: Newer than core Terraform - Smaller Community: Fewer examples than HCL - Debugging Harder: Two layers to debug (code + generated JSON) - Provider Support: Not all providers well-supported</p> <p>Reason for Rejection: Terraform CDK interesting but adds complexity. HCL's declarative nature and large ecosystem of HCL modules provide more value. If we wanted programming languages, would choose Pulumi directly. Terraform CDK feels like compromise without clear benefits.</p>"},{"location":"adr/ADR-005%20terraform/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-001: Kubernetes (Terraform provisions Kubernetes clusters)</li> <li>Future ADR: Crossplane for Kubernetes-Native IaC (Phase 2 migration path)</li> <li>Future ADR: Terraform Module Structure and Standards</li> <li>Future ADR: State Management and Locking Strategy</li> </ul>"},{"location":"adr/ADR-005%20terraform/#implementation-notes","title":"Implementation Notes","text":""},{"location":"adr/ADR-005%20terraform/#repository-structure","title":"Repository Structure","text":"<p>Monorepo Approach (recommended):</p> <pre><code>fawkes-infrastructure/\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 eks-cluster/\n\u2502   \u2502   \u251c\u2500\u2500 main.tf\n\u2502   \u2502   \u251c\u2500\u2500 variables.tf\n\u2502   \u2502   \u251c\u2500\u2500 outputs.tf\n\u2502   \u2502   \u2514\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 vpc/\n\u2502   \u251c\u2500\u2500 rds/\n\u2502   \u251c\u2500\u2500 elasticache/\n\u2502   \u2514\u2500\u2500 s3-bucket/\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 dev/\n\u2502   \u2502   \u251c\u2500\u2500 main.tf\n\u2502   \u2502   \u251c\u2500\u2500 variables.tf\n\u2502   \u2502   \u251c\u2500\u2500 terraform.tfvars\n\u2502   \u2502   \u2514\u2500\u2500 backend.tf\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2514\u2500\u2500 prod/\n\u251c\u2500\u2500 global/\n\u2502   \u251c\u2500\u2500 iam/\n\u2502   \u251c\u2500\u2500 route53/\n\u2502   \u2514\u2500\u2500 s3-backend/\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 plan.sh\n\u2502   \u251c\u2500\u2500 apply.sh\n\u2502   \u2514\u2500\u2500 destroy.sh\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u251c\u2500\u2500 terraform-plan.yml\n\u2502       \u2514\u2500\u2500 terraform-apply.yml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"adr/ADR-005%20terraform/#module-example-eks-cluster","title":"Module Example (EKS Cluster)","text":"<pre><code># modules/eks-cluster/main.tf\n\nterraform {\n  required_version = \"&gt;= 1.6.0\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 5.0\"\n    }\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \"~&gt; 2.20\"\n    }\n  }\n}\n\nresource \"aws_eks_cluster\" \"main\" {\n  name     = var.cluster_name\n  role_arn = aws_iam_role.cluster.arn\n  version  = var.kubernetes_version\n\n  vpc_config {\n    subnet_ids              = var.subnet_ids\n    endpoint_private_access = true\n    endpoint_public_access  = true\n    public_access_cidrs     = var.public_access_cidrs\n  }\n\n  encryption_config {\n    provider {\n      key_arn = var.kms_key_arn\n    }\n    resources = [\"secrets\"]\n  }\n\n  enabled_cluster_log_types = [\n    \"api\",\n    \"audit\",\n    \"authenticator\",\n    \"controllerManager\",\n    \"scheduler\"\n  ]\n\n  tags = merge(\n    var.tags,\n    {\n      \"Name\" = var.cluster_name\n      \"ManagedBy\" = \"Terraform\"\n    }\n  )\n}\n\nresource \"aws_eks_node_group\" \"main\" {\n  cluster_name    = aws_eks_cluster.main.name\n  node_group_name = \"${var.cluster_name}-nodegroup\"\n  node_role_arn   = aws_iam_role.node.arn\n  subnet_ids      = var.subnet_ids\n\n  scaling_config {\n    desired_size = var.desired_size\n    max_size     = var.max_size\n    min_size     = var.min_size\n  }\n\n  instance_types = var.instance_types\n\n  labels = {\n    Environment = var.environment\n    ManagedBy   = \"Terraform\"\n  }\n\n  tags = var.tags\n}\n</code></pre>"},{"location":"adr/ADR-005%20terraform/#environment-configuration","title":"Environment Configuration","text":"<pre><code># environments/dev/main.tf\n\nterraform {\n  backend \"s3\" {\n    bucket         = \"fawkes-terraform-state\"\n    key            = \"dev/terraform.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"terraform-state-lock\"\n  }\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n\n  default_tags {\n    tags = {\n      Environment = \"dev\"\n      Project     = \"fawkes\"\n      ManagedBy   = \"Terraform\"\n    }\n  }\n}\n\nmodule \"vpc\" {\n  source = \"../../modules/vpc\"\n\n  vpc_name            = \"fawkes-dev-vpc\"\n  cidr_block          = \"10.0.0.0/16\"\n  availability_zones  = [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n  public_subnets      = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\n  private_subnets     = [\"10.0.11.0/24\", \"10.0.12.0/24\", \"10.0.13.0/24\"]\n\n  enable_nat_gateway = true\n  single_nat_gateway = true  # Cost optimization for dev\n\n  tags = local.tags\n}\n\nmodule \"eks\" {\n  source = \"../../modules/eks-cluster\"\n\n  cluster_name        = \"fawkes-dev\"\n  kubernetes_version  = \"1.28\"\n  subnet_ids          = module.vpc.private_subnet_ids\n\n  desired_size = 3\n  min_size     = 2\n  max_size     = 5\n\n  instance_types = [\"t3.large\"]\n\n  tags = local.tags\n}\n\nlocals {\n  tags = {\n    Environment = \"dev\"\n    Project     = \"fawkes\"\n    ManagedBy   = \"Terraform\"\n  }\n}\n</code></pre>"},{"location":"adr/ADR-005%20terraform/#cicd-integration-github-actions","title":"CI/CD Integration (GitHub Actions)","text":"<pre><code># .github/workflows/terraform-plan.yml\n\nname: Terraform Plan\n\non:\n  pull_request:\n    paths:\n      - 'environments/**'\n      - 'modules/**'\n\njobs:\n  plan:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Terraform\n        uses: hashicorp/setup-terraform@v2\n        with:\n          terraform_version: 1.6.0\n\n      - name: Terraform Init\n        working-directory: environments/dev\n        run: terraform init\n\n      - name: Terraform Format Check\n        run: terraform fmt -check -recursive\n\n      - name: Terraform Validate\n        working-directory: environments/dev\n        run: terraform validate\n\n      - name: Terraform Plan\n        working-directory: environments/dev\n        run: terraform plan -no-color\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n\n      - name: Comment PR\n        uses: actions/github-script@v6\n        with:\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: 'Terraform plan completed. Review the output above.'\n            })\n</code></pre>"},{"location":"adr/ADR-005%20terraform/#testing-with-terratest","title":"Testing with Terratest","text":"<pre><code>// test/eks_test.go\n\npackage test\n\nimport (\n    \"testing\"\n    \"github.com/gruntwork-io/terratest/modules/terraform\"\n    \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestEKSCluster(t *testing.T) {\n    terraformOptions := &amp;terraform.Options{\n        TerraformDir: \"../modules/eks-cluster\",\n\n        Vars: map[string]interface{}{\n            \"cluster_name\": \"test-cluster\",\n            \"kubernetes_version\": \"1.28\",\n            \"subnet_ids\": []string{\"subnet-123\", \"subnet-456\"},\n        },\n    }\n\n    defer terraform.Destroy(t, terraformOptions)\n\n    terraform.InitAndApply(t, terraformOptions)\n\n    clusterName := terraform.Output(t, terraformOptions, \"cluster_name\")\n    assert.Equal(t, \"test-cluster\", clusterName)\n\n    clusterVersion := terraform.Output(t, terraformOptions, \"kubernetes_version\")\n    assert.Equal(t, \"1.28\", clusterVersion)\n}\n</code></pre>"},{"location":"adr/ADR-005%20terraform/#state-management","title":"State Management","text":"<p>Terraform Cloud (recommended for MVP):</p> <pre><code>terraform {\n  cloud {\n    organization = \"fawkes-platform\"\n\n    workspaces {\n      name = \"fawkes-dev\"\n    }\n  }\n}\n</code></pre> <p>S3 Backend (alternative):</p> <pre><code>terraform {\n  backend \"s3\" {\n    bucket         = \"fawkes-terraform-state\"\n    key            = \"dev/terraform.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"terraform-state-lock\"\n\n    # Enable versioning for state file history\n    versioning = true\n  }\n}\n</code></pre>"},{"location":"adr/ADR-005%20terraform/#best-practices","title":"Best Practices","text":"<ol> <li>Always Use Remote State: Never store state locally for team projects</li> <li>Enable State Locking: Prevent concurrent modifications</li> <li>Pin Provider Versions: Avoid surprise breaking changes</li> <li>Use Modules: DRY principle, reusability</li> <li>Separate Environments: Different state files for dev/staging/prod</li> <li>Code Review: All changes via PR</li> <li>Plan Before Apply: Always review plan output</li> <li>Tag Everything: Consistent tagging for cost tracking and ownership</li> <li>Use Variables: Never hardcode values</li> <li>Document Modules: README with examples</li> </ol>"},{"location":"adr/ADR-005%20terraform/#migration-to-crossplane-phase-2","title":"Migration to Crossplane (Phase 2)","text":"<p>Path Forward: 1. Phase 1 (Months 1-6): Use Terraform exclusively 2. Phase 2 (Months 7-12): Evaluate Crossplane maturity 3. Phase 3 (Year 2): Gradual migration:    - Start with new resources in Crossplane    - Keep existing resources in Terraform    - Create Crossplane compositions based on Terraform modules    - Migrate non-critical resources first 4. Phase 4 (Year 2-3): Complete migration to Crossplane</p> <p>Why Crossplane Eventually: - Kubernetes-native (consistent with platform) - GitOps integration seamless - Better abstraction for self-service - Cloud-agnostic compositions - Unified control plane</p> <p>Why Terraform First: - Mature and proven today - Larger ecosystem and community - Easier learning curve - Better debugging and documentation - Lower risk for MVP</p>"},{"location":"adr/ADR-005%20terraform/#monitoring-this-decision","title":"Monitoring This Decision","text":"<p>We will revisit this ADR if: - Terraform license changes make OSS version unusable - Crossplane reaches maturity level where migration makes sense - Pulumi ecosystem and community significantly grow - Team expertise shifts toward different tool - OpenTofu becomes mature and clearly sustainable - Multi-cloud requirements change significantly</p> <p>Next Review Date: April 8, 2026 (6 months) Crossplane Evaluation: October 2026 (12 months)</p>"},{"location":"adr/ADR-005%20terraform/#references","title":"References","text":"<ul> <li>Terraform Official Documentation</li> <li>Terraform Registry</li> <li>Terraform Best Practices</li> <li>Terratest Documentation</li> <li>Terraform AWS Provider</li> <li>Crossplane Documentation</li> </ul>"},{"location":"adr/ADR-005%20terraform/#notes","title":"Notes","text":""},{"location":"adr/ADR-005%20terraform/#terraform-vs-pulumi-the-debate","title":"Terraform vs. Pulumi: The Debate","text":"<p>Use Terraform when: - Want largest ecosystem and community - Prefer declarative DSL over programming - Need maximum provider coverage - Want battle-tested maturity</p> <p>Use Pulumi when: - Strong programming culture in organization - Want to use existing language (Python, TypeScript, Go) - Need complex logic in infrastructure code - Prefer general-purpose language testing</p> <p>For Fawkes: Terraform's maturity, ecosystem, and community provide more value. Pulumi excellent choice for many organizations, but Terraform better fits Fawkes' needs as open source platform.</p>"},{"location":"adr/ADR-005%20terraform/#terraform-license-change-context","title":"Terraform License Change Context","text":"<p>In August 2023, HashiCorp changed Terraform license from MPL to BSL (Business Source License). This prevents: - Using Terraform in commercial competing products - Hosting Terraform as paid service</p> <p>For Fawkes: - Not Affected: Using Terraform for our platform is permitted - No Commercial Product: We're not selling Terraform itself - OpenTofu Available: Fork exists if needed</p> <p>This decision may be revisited if BSL becomes more restrictive or OpenTofu proves more sustainable.</p>"},{"location":"adr/ADR-005%20terraform/#state-management-is-critical","title":"State Management is Critical","text":"<p>State file contains: - All provisioned resource IDs - Resource attributes and metadata - Dependencies between resources - Terraform version used</p> <p>If state file is lost: - Terraform can't manage existing resources - Must import all resources manually (tedious) - Or destroy and recreate everything (disruptive)</p> <p>Protection strategies: - Remote state backend (S3, Terraform Cloud) - State file versioning enabled - Regular backups - Never edit state manually - State locking to prevent corruption</p> <p>Decision Made By: Platform Architecture Team Approved By: Project Lead Date: October 8, 2025 Author: [Platform Architect Name] Last Updated: October 8, 2025</p>"},{"location":"adr/ADR-006%20postgres/","title":"ADR-006: PostgreSQL for Data Persistence","text":""},{"location":"adr/ADR-006%20postgres/#status","title":"Status","text":"<p>Accepted - October 8, 2025</p>"},{"location":"adr/ADR-006%20postgres/#context","title":"Context","text":"<p>Fawkes platform components require a relational database for persistent data storage. Multiple components need databases: Backstage (service catalog), Mattermost (messages and boards), Jenkins (build metadata), SonarQube (code analysis), and custom services (DORA metrics, dojo progress). We need to choose a database that's reliable, performant, open source, and well-supported across our technology stack.</p>"},{"location":"adr/ADR-006%20postgres/#database-requirements-across-components","title":"Database Requirements Across Components","text":"<p>Backstage: - Service catalog entities and relationships - User preferences and settings - Plugin data storage - Search indexes - Moderate write load, high read load</p> <p>Mattermost + Focalboard: - Messages, channels, users - Project boards, cards, properties - File metadata - High write and read load - Real-time updates</p> <p>DORA Metrics Service: - Build events, deployment events - Historical metrics data - Team aggregations - Time-series queries - Write-heavy, analytical reads</p> <p>Dojo Progress Tracking: - Learner progress, assessment scores - Lab completion status - Certification records - Moderate write, frequent reads</p> <p>SonarQube: - Code analysis results - Quality metrics history - Security findings - High write during scans, read for dashboards</p> <p>Jenkins (optional, can use file system): - Build metadata and history - Job configurations - Plugin data</p>"},{"location":"adr/ADR-006%20postgres/#requirements-for-database","title":"Requirements for Database","text":"<p>Technical Requirements: - ACID Compliance: Data consistency and reliability - SQL Support: Complex queries, joins, transactions - JSON Support: Flexible schema for plugin data - Full-Text Search: Search across catalog, messages, documentation - High Availability: Replication, failover - Backup/Restore: Point-in-time recovery - Performance: Handle 1000+ concurrent connections - Scalability: Vertical and horizontal scaling options</p> <p>Operational Requirements: - Open Source: Transparent, no licensing costs - Mature: Production-proven, stable - Well-Documented: Extensive documentation and community - Cloud-Native: Works well in Kubernetes - Monitoring: Prometheus metrics, logging integration - Security: Encryption at rest and in transit, RBAC</p> <p>Integration Requirements: - Supported by Backstage, Mattermost, SonarQube, Jenkins - Kubernetes Operator available - Terraform provider for provisioning - Helm charts for deployment - Backup tools mature and reliable</p>"},{"location":"adr/ADR-006%20postgres/#forces-at-play","title":"Forces at Play","text":"<p>Technical Forces: - Multiple components need databases - Could use single shared database or separate instances - Need balance between operational simplicity and isolation - Performance critical for developer experience</p> <p>Operational Forces: - Platform team capacity limited - Need reliable backups and disaster recovery - Monitoring and troubleshooting must be straightforward - Upgrades should be low-risk</p> <p>Cost Forces: - Open source preferred (no licensing) - Cloud-managed services convenient but expensive - Self-hosted requires operational overhead - Need cost-effective solution that scales</p> <p>Ecosystem Forces: - PostgreSQL has massive adoption in cloud-native space - Most tools support PostgreSQL natively - Large knowledge base and community - Cloud providers offer managed PostgreSQL</p>"},{"location":"adr/ADR-006%20postgres/#decision","title":"Decision","text":"<p>We will use PostgreSQL as the standard relational database for Fawkes platform components.</p> <p>Specifically: - PostgreSQL 15+ (latest stable version) - CloudNativePG Operator for Kubernetes-native management - Separate databases per component (single cluster, multiple databases) - Automated backups to S3/MinIO with point-in-time recovery - High Availability configuration (primary + replica) - Connection pooling via PgBouncer - Prometheus metrics for monitoring - Cloud-managed option available for production (AWS RDS, Azure Database, Google Cloud SQL)</p>"},{"location":"adr/ADR-006%20postgres/#rationale","title":"Rationale","text":"<ol> <li> <p>Industry Standard: PostgreSQL is the most popular open source relational database, with massive adoption across cloud-native applications and platform tools</p> </li> <li> <p>Universal Compatibility: All Fawkes components support PostgreSQL:</p> </li> <li>Backstage: Officially supported, recommended database</li> <li>Mattermost: Full support, production-ready</li> <li>Focalboard: Built-in support (uses Mattermost database)</li> <li>SonarQube: Officially supported</li> <li>Jenkins: Supported via plugins</li> <li> <p>Custom services: Excellent language support (Go, Python, TypeScript)</p> </li> <li> <p>Advanced Features:</p> </li> <li>JSONB: Flexible schema for plugin data, semi-structured content</li> <li>Full-Text Search: Built-in search without external tools</li> <li>CTEs and Window Functions: Complex analytical queries</li> <li>LISTEN/NOTIFY: Real-time event notifications</li> <li>Foreign Data Wrappers: Access external data sources</li> <li> <p>Extensions: PostGIS, pg_stat_statements, timescaledb</p> </li> <li> <p>ACID Compliance: </p> </li> <li>Strong consistency guarantees</li> <li>Transaction support</li> <li>Data integrity and reliability</li> <li> <p>Critical for catalog, messaging, metrics</p> </li> <li> <p>Performance:</p> </li> <li>Excellent query optimizer</li> <li>Efficient indexing (B-tree, GiST, GIN, BRIN)</li> <li>Parallel queries</li> <li>Materialized views for aggregations</li> <li> <p>Connection pooling support</p> </li> <li> <p>High Availability: </p> </li> <li>Streaming replication (synchronous and asynchronous)</li> <li>Automatic failover</li> <li>Point-in-time recovery</li> <li> <p>WAL archiving for backups</p> </li> <li> <p>Cloud-Native:</p> </li> <li>CloudNativePG operator for Kubernetes</li> <li>Runs well in containers</li> <li>Horizontal scaling via read replicas</li> <li> <p>Kubernetes-native backup solutions</p> </li> <li> <p>Mature and Stable:</p> </li> <li>35+ years of development</li> <li>Production-proven at massive scale</li> <li>Backward compatibility commitment</li> <li> <p>Predictable release cycle</p> </li> <li> <p>Excellent Tooling:</p> </li> <li>pgAdmin (GUI administration)</li> <li>psql (powerful CLI)</li> <li>pg_dump/pg_restore (backup/restore)</li> <li>Prometheus exporters (monitoring)</li> <li> <p>Migration tools (Flyway, Liquibase)</p> </li> <li> <p>Large Community:</p> <ul> <li>Extensive documentation</li> <li>Active mailing lists and forums</li> <li>Thousands of tutorials and examples</li> <li>Commercial support available (EnterpriseDB, Crunchy Data)</li> </ul> </li> <li> <p>Open Source:</p> <ul> <li>PostgreSQL License (permissive, like MIT)</li> <li>Community-driven development</li> <li>No vendor lock-in</li> <li>Free forever</li> </ul> </li> <li> <p>Security:</p> <ul> <li>SSL/TLS encryption</li> <li>Row-level security</li> <li>SCRAM authentication</li> <li>Role-based access control</li> <li>Audit logging</li> </ul> </li> </ol>"},{"location":"adr/ADR-006%20postgres/#consequences","title":"Consequences","text":""},{"location":"adr/ADR-006%20postgres/#positive","title":"Positive","text":"<p>\u2705 Single Database Technology: One database to learn, operate, monitor</p> <p>\u2705 Universal Support: All platform components support PostgreSQL natively</p> <p>\u2705 Advanced Features: JSONB, full-text search, CTEs meet all requirements</p> <p>\u2705 High Availability: Built-in replication and failover</p> <p>\u2705 Performance: Excellent for both transactional and analytical workloads</p> <p>\u2705 Cloud-Native: Kubernetes operator provides native management</p> <p>\u2705 Backup &amp; Recovery: Mature tools, point-in-time recovery</p> <p>\u2705 Monitoring: Prometheus exporters, excellent observability</p> <p>\u2705 Scalability: Read replicas, connection pooling, sharding options</p> <p>\u2705 Large Community: Easy to find help, examples, best practices</p> <p>\u2705 Open Source: No licensing costs, transparent development</p> <p>\u2705 Operational Simplicity: One database system reduces complexity</p>"},{"location":"adr/ADR-006%20postgres/#negative","title":"Negative","text":"<p>\u26a0\ufe0f Write Scalability: Single primary for writes (read replicas for reads only)</p> <p>\u26a0\ufe0f Operational Overhead: Requires backup, monitoring, upgrade management</p> <p>\u26a0\ufe0f Resource Usage: ~200MB RAM minimum per database, can grow large</p> <p>\u26a0\ufe0f Vacuum Maintenance: Requires periodic vacuum for performance</p> <p>\u26a0\ufe0f Index Bloat: Indexes can bloat without maintenance</p> <p>\u26a0\ufe0f Learning Curve: Advanced features require PostgreSQL expertise</p> <p>\u26a0\ufe0f Connection Limits: Default 100 connections, requires pooling at scale</p> <p>\u26a0\ufe0f Replication Lag: Async replication can have slight delays</p>"},{"location":"adr/ADR-006%20postgres/#neutral","title":"Neutral","text":"<p>\u25fd Self-Hosted vs. Managed: Can self-host or use cloud-managed services</p> <p>\u25fd Version Management: Major upgrades require planning and testing</p> <p>\u25fd Storage Growth: Need to monitor and manage storage capacity</p>"},{"location":"adr/ADR-006%20postgres/#mitigation-strategies","title":"Mitigation Strategies","text":"<ol> <li>Write Scalability:</li> <li>Use connection pooling (PgBouncer)</li> <li>Optimize queries and indexes</li> <li>Consider read replicas for reporting</li> <li>Partition large tables if needed</li> <li> <p>Plan for vertical scaling</p> </li> <li> <p>Operational Overhead:</p> </li> <li>Use CloudNativePG operator (automates backups, failover)</li> <li>Implement automated monitoring and alerting</li> <li>Document runbooks for common operations</li> <li>Consider managed services for production (AWS RDS)</li> <li> <p>Regular automated backups</p> </li> <li> <p>Maintenance:</p> </li> <li>Configure autovacuum appropriately</li> <li>Monitor bloat with pg_stat_user_tables</li> <li>Regular ANALYZE for query planning</li> <li>Reindex periodically if needed</li> <li> <p>Schedule maintenance windows</p> </li> <li> <p>Connection Pooling:</p> </li> <li>Deploy PgBouncer for connection pooling</li> <li>Configure appropriate pool sizes</li> <li>Use transaction pooling for most apps</li> <li> <p>Monitor connection usage</p> </li> <li> <p>Monitoring:</p> </li> <li>Deploy postgres_exporter for Prometheus</li> <li>Create Grafana dashboards</li> <li>Alert on key metrics (connections, replication lag, disk usage)</li> <li> <p>Log slow queries for optimization</p> </li> <li> <p>Backup &amp; Recovery:</p> </li> <li>Automated daily backups with retention</li> <li>WAL archiving for point-in-time recovery</li> <li>Regular restore testing</li> <li>Document recovery procedures</li> <li>Backup to S3/MinIO with encryption</li> </ol>"},{"location":"adr/ADR-006%20postgres/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"adr/ADR-006%20postgres/#alternative-1-mysqlmariadb","title":"Alternative 1: MySQL/MariaDB","text":"<p>Pros: - Very popular, large community - Good performance for read-heavy workloads - MariaDB fully open source - Wide adoption - Familiar to many developers</p> <p>Cons: - Weaker JSON Support: JSON type less powerful than PostgreSQL JSONB - Limited Full-Text Search: Not as robust as PostgreSQL - Fewer Advanced Features: Less support for CTEs, window functions - Fragmentation: MySQL (Oracle) vs. MariaDB (community) split - Less Cloud-Native: Kubernetes operators less mature</p> <p>Reason for Rejection: PostgreSQL's superior JSON support, full-text search, and advanced SQL features better fit Fawkes needs. Backstage and Mattermost work better with PostgreSQL. MySQL excellent database but PostgreSQL better alignment with cloud-native ecosystem.</p>"},{"location":"adr/ADR-006%20postgres/#alternative-2-mongodb","title":"Alternative 2: MongoDB","text":"<p>Pros: - Document-oriented (flexible schema) - Excellent for JSON data - Horizontal scaling built-in - High write throughput - Popular for modern applications</p> <p>Cons: - NoSQL: Not all components support MongoDB - No ACID Across Collections: Weak consistency by default - Limited Joins: Embedding vs. referencing trade-offs - Operational Complexity: Sharding complex to manage - Backstage Not Supported: Backstage requires SQL database - License Concerns: SSPL license controversial</p> <p>Reason for Rejection: MongoDB excellent for document storage but incompatible with key components (Backstage, SonarQube). ACID properties critical for catalog and metrics. SQL relationships important for service dependencies. PostgreSQL JSONB provides flexible schema when needed while maintaining SQL strengths.</p>"},{"location":"adr/ADR-006%20postgres/#alternative-3-sqlite","title":"Alternative 3: SQLite","text":"<p>Pros: - Zero configuration - No separate server process - Very lightweight - Fast for single-user scenarios - Embedded database</p> <p>Cons: - No Concurrency: Limited concurrent writes - No Network Access: File-based only - No Replication: No built-in HA - Not Kubernetes-Native: File-based doesn't fit pods well - Scalability Limits: Not designed for multi-user systems</p> <p>Reason for Rejection: SQLite excellent for local development and embedded use cases but not suitable for multi-user platform services. Need concurrent access, network access, and high availability. PostgreSQL designed for exactly these scenarios.</p>"},{"location":"adr/ADR-006%20postgres/#alternative-4-cockroachdb","title":"Alternative 4: CockroachDB","text":"<p>Pros: - PostgreSQL-compatible - Distributed SQL (horizontal scaling) - Built-in replication - Multi-region support - Strong consistency - Cloud-native architecture</p> <p>Cons: - Operational Complexity: More complex than PostgreSQL - Resource Intensive: Higher overhead than PostgreSQL - Less Mature: Newer (2015 vs. PostgreSQL 1986) - Smaller Community: Fewer examples and resources - Learning Curve: Distributed systems concepts required - Overkill: More than we need initially</p> <p>Reason for Rejection: CockroachDB philosophically appealing (distributed, PostgreSQL-compatible) but operationally complex and resource-intensive for our scale. PostgreSQL sufficient for foreseeable future. CockroachDB excellent choice at massive scale but unnecessary complexity for Fawkes. May revisit if we need multi-region or massive horizontal scale.</p>"},{"location":"adr/ADR-006%20postgres/#alternative-5-timescaledb","title":"Alternative 5: TimescaleDB","text":"<p>Pros: - PostgreSQL extension (full compatibility) - Optimized for time-series data - Excellent for metrics and logs - Compression and retention policies - Continuous aggregates</p> <p>Cons: - Not Needed for All Data: Only beneficial for time-series - Additional Complexity: Extension to install and manage - License: Some features require license (Cloud only)</p> <p>Reason for Rejection: TimescaleDB excellent for DORA metrics time-series data. However, not needed for Backstage, Mattermost, or other components. Can add TimescaleDB extension to DORA metrics database if needed, but standard PostgreSQL sufficient initially. Good option to consider for Phase 2 optimization.</p>"},{"location":"adr/ADR-006%20postgres/#alternative-6-cloud-managed-services-only-aws-rds-azure-database-cloud-sql","title":"Alternative 6: Cloud-Managed Services Only (AWS RDS, Azure Database, Cloud SQL)","text":"<p>Pros: - Fully managed (no operational overhead) - Automated backups and failover - Easy scaling - Security managed - High availability guaranteed - Support included</p> <p>Cons: - Cost: Much more expensive than self-hosted ($100-500+/month per database) - Vendor Lock-In: Specific to cloud provider - Less Control: Can't customize everything - Not Self-Hosted: Conflicts with open source platform values</p> <p>Reason for Rejection: Managed services convenient but expensive and create vendor lock-in. Self-hosted PostgreSQL with CloudNativePG provides similar benefits at fraction of cost. However, we support managed services as option for production deployments. Fawkes flexible: can use self-hosted for cost-conscious deployments, managed for convenience.</p>"},{"location":"adr/ADR-006%20postgres/#alternative-7-multiple-database-types-polyglot-persistence","title":"Alternative 7: Multiple Database Types (polyglot persistence)","text":"<p>Pros: - Best tool for each job - PostgreSQL for relational, MongoDB for documents, Redis for cache - Optimized for specific use cases</p> <p>Cons: - Operational Complexity: Multiple databases to manage, monitor, backup - Increased Overhead: More expertise required - Cost: More resources needed - Not Necessary: PostgreSQL JSONB handles semi-structured data well</p> <p>Reason for Rejection: Polyglot persistence has merits but increases operational complexity significantly. PostgreSQL versatile enough to handle all current needs (relational + JSON + full-text search). Simpler to have single database technology. May add Redis for caching in Phase 2, but one primary database reduces complexity.</p>"},{"location":"adr/ADR-006%20postgres/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-002: Backstage (uses PostgreSQL for catalog)</li> <li>ADR-007: Mattermost (uses PostgreSQL for messages and boards)</li> <li>Future ADR: Backup and Disaster Recovery Strategy</li> <li>Future ADR: Database Performance Optimization</li> </ul>"},{"location":"adr/ADR-006%20postgres/#implementation-notes","title":"Implementation Notes","text":""},{"location":"adr/ADR-006%20postgres/#deployment-architecture","title":"Deployment Architecture","text":"<p>Kubernetes Deployment with CloudNativePG:</p> <pre><code># PostgreSQL Cluster with HA\napiVersion: postgresql.cnpg.io/v1\nkind: Cluster\nmetadata:\n  name: fawkes-postgres\n  namespace: fawkes-data\nspec:\n  instances: 3  # 1 primary + 2 replicas\n\n  postgresql:\n    parameters:\n      max_connections: \"200\"\n      shared_buffers: \"256MB\"\n      effective_cache_size: \"1GB\"\n      work_mem: \"16MB\"\n      maintenance_work_mem: \"128MB\"\n\n  bootstrap:\n    initdb:\n      database: backstage\n      owner: backstage\n\n  storage:\n    size: 50Gi\n    storageClass: gp3\n\n  backup:\n    barmanObjectStore:\n      destinationPath: s3://fawkes-postgres-backups/\n      s3Credentials:\n        accessKeyId:\n          name: backup-creds\n          key: ACCESS_KEY_ID\n        secretAccessKey:\n          name: backup-creds\n          key: SECRET_ACCESS_KEY\n      wal:\n        compression: gzip\n      retentionPolicy: \"30d\"\n\n  monitoring:\n    enablePodMonitor: true\n\n  resources:\n    requests:\n      memory: \"1Gi\"\n      cpu: \"500m\"\n    limits:\n      memory: \"2Gi\"\n      cpu: \"2\"\n</code></pre>"},{"location":"adr/ADR-006%20postgres/#database-organization","title":"Database Organization","text":"<p>Strategy: Single PostgreSQL cluster, multiple databases</p> <pre><code>fawkes-postgres cluster\n\u251c\u2500\u2500 backstage_db (Backstage catalog)\n\u251c\u2500\u2500 mattermost_db (Mattermost + Focalboard)\n\u251c\u2500\u2500 sonarqube_db (SonarQube analysis)\n\u251c\u2500\u2500 dora_metrics_db (DORA metrics service)\n\u251c\u2500\u2500 dojo_progress_db (Learner progress)\n\u2514\u2500\u2500 jenkins_db (optional, Jenkins metadata)\n</code></pre> <p>Rationale: - Logical isolation between components - Easier to backup/restore individual databases - Resource sharing (connection pooling benefits) - Single cluster to manage (operational simplicity)</p>"},{"location":"adr/ADR-006%20postgres/#connection-pooling-with-pgbouncer","title":"Connection Pooling with PgBouncer","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pgbouncer\n  namespace: fawkes-data\nspec:\n  replicas: 2\n  template:\n    spec:\n      containers:\n      - name: pgbouncer\n        image: edoburu/pgbouncer:latest\n        env:\n        - name: DB_HOST\n          value: fawkes-postgres-rw\n        - name: DB_PORT\n          value: \"5432\"\n        - name: POOL_MODE\n          value: transaction\n        - name: MAX_CLIENT_CONN\n          value: \"1000\"\n        - name: DEFAULT_POOL_SIZE\n          value: \"25\"\n        resources:\n          requests:\n            memory: \"64Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"128Mi\"\n            cpu: \"200m\"\n</code></pre>"},{"location":"adr/ADR-006%20postgres/#backup-configuration","title":"Backup Configuration","text":"<p>Automated Backups: - Full backup: Daily at 2 AM UTC - WAL archiving: Continuous - Retention: 30 days - Destination: S3/MinIO bucket - Encryption: At rest (S3 SSE)</p> <p>Backup Verification: <pre><code># Weekly automated restore test\nkubectl cnpg backup fawkes-postgres-$(date +%Y%m%d)\n\n# Restore to test cluster\nkubectl cnpg restore fawkes-postgres-test \\\n  --backup fawkes-postgres-20251008 \\\n  --cluster fawkes-postgres\n</code></pre></p>"},{"location":"adr/ADR-006%20postgres/#monitoring-alerting","title":"Monitoring &amp; Alerting","text":"<p>Prometheus Metrics (via postgres_exporter): - <code>pg_up</code> - Database reachable - <code>pg_stat_database_*</code> - Database statistics - <code>pg_stat_replication_*</code> - Replication lag - <code>pg_locks_*</code> - Lock contention - <code>pg_stat_user_tables_*</code> - Table statistics</p> <p>Key Alerts: <pre><code>groups:\n- name: postgres\n  rules:\n  - alert: PostgreSQLDown\n    expr: pg_up == 0\n    for: 1m\n    annotations:\n      summary: \"PostgreSQL is down\"\n\n  - alert: PostgreSQLReplicationLag\n    expr: pg_replication_lag &gt; 30\n    for: 5m\n    annotations:\n      summary: \"Replication lag {{ $value }}s\"\n\n  - alert: PostgreSQLConnectionsHigh\n    expr: pg_stat_database_numbackends &gt; 180\n    for: 5m\n    annotations:\n      summary: \"High connection count: {{ $value }}\"\n\n  - alert: PostgreSQLDiskUsageHigh\n    expr: pg_database_size_bytes / pg_settings_max_wal_size &gt; 0.8\n    for: 5m\n    annotations:\n      summary: \"Database disk usage high\"\n</code></pre></p> <p>Grafana Dashboard: - Connection count and usage - Query performance (slow queries) - Replication lag - Database size growth - Cache hit ratio - Transaction rate - Lock contention</p>"},{"location":"adr/ADR-006%20postgres/#maintenance-tasks","title":"Maintenance Tasks","text":"<p>Automated (via CronJobs): <pre><code># Daily vacuum analyze\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: postgres-vacuum\nspec:\n  schedule: \"0 3 * * *\"  # 3 AM daily\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: vacuum\n            image: postgres:15\n            command:\n            - /bin/sh\n            - -c\n            - |\n              psql -h fawkes-postgres-rw -U postgres -c \"VACUUM ANALYZE\"\n</code></pre></p> <p>Manual (quarterly): - Reindex large tables - Analyze table bloat - Review and optimize slow queries - Update statistics manually if needed</p>"},{"location":"adr/ADR-006%20postgres/#security-configuration","title":"Security Configuration","text":"<p>Authentication: <pre><code># PostgreSQL pg_hba.conf\nhost    all             all             10.0.0.0/8            scram-sha-256\nhost    replication     all             10.0.0.0/8            scram-sha-256\nhostssl all             all             0.0.0.0/0             scram-sha-256\n</code></pre></p> <p>Encryption: - TLS/SSL for connections (enforced) - Encryption at rest (storage level) - Backup encryption (S3 SSE)</p> <p>Access Control: <pre><code>-- Create role per application\nCREATE ROLE backstage WITH LOGIN PASSWORD 'secure_password';\nGRANT CONNECT ON DATABASE backstage_db TO backstage;\nGRANT ALL PRIVILEGES ON DATABASE backstage_db TO backstage;\n\n-- Read-only role for monitoring\nCREATE ROLE monitoring WITH LOGIN PASSWORD 'secure_password';\nGRANT CONNECT ON DATABASE backstage_db TO monitoring;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO monitoring;\n</code></pre></p>"},{"location":"adr/ADR-006%20postgres/#performance-tuning","title":"Performance Tuning","text":"<p>Connection Settings: <pre><code>max_connections = 200\nshared_buffers = 256MB          # 25% of RAM\neffective_cache_size = 1GB      # 50-75% of RAM\nwork_mem = 16MB                 # RAM / max_connections / 2\nmaintenance_work_mem = 128MB    # RAM / 16\n</code></pre></p> <p>Query Optimization: <pre><code># Enable query logging for slow queries\nlog_min_duration_statement = 1000  # Log queries &gt; 1s\nlog_statement = 'all'              # Log all statements (dev only)\n\n# Query planning\nrandom_page_cost = 1.1            # SSD storage\neffective_io_concurrency = 200    # SSD capability\n</code></pre></p> <p>Autovacuum: <pre><code>autovacuum = on\nautovacuum_max_workers = 3\nautovacuum_naptime = 1min\nautovacuum_vacuum_cost_delay = 20ms\n</code></pre></p>"},{"location":"adr/ADR-006%20postgres/#migration-strategy","title":"Migration Strategy","text":"<p>Schema Migrations: - Use Flyway or Liquibase for versioned migrations - Store migrations in Git - Apply migrations in CI/CD pipeline - Never modify schema manually</p> <p>Example Flyway Migration: <pre><code>-- V1__create_users_table.sql\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(255) NOT NULL UNIQUE,\n    email VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE INDEX idx_users_email ON users(email);\n</code></pre></p>"},{"location":"adr/ADR-006%20postgres/#disaster-recovery","title":"Disaster Recovery","text":"<p>Recovery Time Objective (RTO): 4 hours Recovery Point Objective (RPO): 1 hour (WAL archiving)</p> <p>Recovery Procedure: 1. Create new PostgreSQL cluster 2. Restore from latest backup 3. Apply WAL files for point-in-time recovery 4. Verify data integrity 5. Update application connection strings 6. Resume operations</p> <p>Automated DR Testing: - Monthly restore test to separate cluster - Verify data integrity checks pass - Document any issues and resolution</p>"},{"location":"adr/ADR-006%20postgres/#managed-service-alternative","title":"Managed Service Alternative","text":"<p>For Production Deployments:</p> <p>AWS RDS PostgreSQL: - Multi-AZ for high availability - Automated backups with point-in-time recovery - Read replicas for scaling - Enhanced monitoring - Estimated cost: $200-400/month (db.t3.large)</p> <p>Azure Database for PostgreSQL: - Flexible Server with HA - Automated backups and patching - Read replicas - Advanced Threat Protection - Estimated cost: $180-350/month (similar specs)</p> <p>Google Cloud SQL for PostgreSQL: - High availability configuration - Automated backups - Read replicas - Cloud SQL Proxy for secure connections - Estimated cost: $190-370/month (similar specs)</p> <p>Decision: Support both self-hosted and managed options. Documentation for both approaches. Recommend self-hosted for dev/staging, managed for production (optional).</p>"},{"location":"adr/ADR-006%20postgres/#monitoring-this-decision","title":"Monitoring This Decision","text":"<p>We will revisit this ADR if: - PostgreSQL performance becomes bottleneck that can't be resolved - Write scalability becomes critical requirement - Operational burden exceeds team capacity - Cloud-managed services become cost-competitive with self-hosted - Alternative database provides significantly better features - Components add requirements PostgreSQL can't meet</p> <p>Next Review Date: April 8, 2026 (6 months)</p>"},{"location":"adr/ADR-006%20postgres/#references","title":"References","text":"<ul> <li>PostgreSQL Official Documentation</li> <li>CloudNativePG Documentation</li> <li>PostgreSQL High Availability</li> <li>PgBouncer Documentation</li> <li>Postgres Exporter</li> <li>PostgreSQL Performance Tuning</li> </ul>"},{"location":"adr/ADR-006%20postgres/#notes","title":"Notes","text":""},{"location":"adr/ADR-006%20postgres/#why-postgresql-over-mysql","title":"Why PostgreSQL Over MySQL?","text":"<p>PostgreSQL advantages: - Better JSON support (JSONB with indexing) - Full-text search built-in - More advanced SQL features (CTEs, window functions) - Better for complex queries - Stronger in cloud-native ecosystem</p> <p>MySQL advantages: - Slightly simpler for basic use cases - Some argue faster for simple reads - More familiar to some developers</p> <p>For Fawkes: PostgreSQL's advanced features (especially JSONB and full-text search) align better with platform needs. Both excellent databases, but PostgreSQL slight edge for our use cases.</p>"},{"location":"adr/ADR-006%20postgres/#single-cluster-vs-multiple-clusters","title":"Single Cluster vs. Multiple Clusters","text":"<p>Single Cluster Approach (chosen): - Operational simplicity (one cluster to manage) - Resource efficiency (shared resources) - Easier monitoring and backup - Lower infrastructure costs</p> <p>Multiple Clusters Approach: - Complete isolation between components - Independent scaling - Failure isolation - Higher operational overhead</p> <p>Decision: Single cluster with multiple databases provides good balance. Can split into multiple clusters later if needed.</p>"},{"location":"adr/ADR-006%20postgres/#when-to-consider-alternative-databases","title":"When to Consider Alternative Databases","text":"<p>Consider MySQL/MariaDB: - Team has strong MySQL expertise - Simple transactional workloads only - No need for advanced PostgreSQL features</p> <p>Consider MongoDB: - Truly schemaless data needed - Horizontal write scaling critical - All components support NoSQL (not our case)</p> <p>Consider CockroachDB: - Multi-region requirements - Massive horizontal scaling needed - Can absorb operational complexity</p> <p>For most teams: PostgreSQL is the pragmatic, proven choice.</p> <p>Decision Made By: Platform Architecture Team Approved By: Project Lead Date: October 8, 2025 Author: [Platform Architect Name] Last Updated: October 8, 2025</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/","title":"ADR-007: Mattermost for Team Collaboration","text":""},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#status","title":"Status","text":"<p>Accepted - October 7, 2025</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#context","title":"Context","text":"<p>Fawkes is evolving from an infrastructure-focused Internal Delivery Platform to a comprehensive Internal Product Delivery Platform. To support product delivery effectively, teams need integrated collaboration capabilities that go beyond code and CI/CD pipelines.</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#the-need-for-integrated-collaboration","title":"The Need for Integrated Collaboration","text":"<p>Current Gap: Teams using Fawkes must use external tools for: - Real-time communication: Slack, Microsoft Teams, Discord - Bot integrations and ChatOps: Limited integration with external tools - Platform notifications: Email or external chat platforms - Community building: Fragmented across multiple platforms - Dojo learning support: No integrated space for learner discussions</p> <p>Requirements for Collaboration Tool: 1. Self-Hosted: Data sovereignty, no vendor lock-in, customizable 2. Open Source: Aligns with Fawkes' values, community-driven 3. Platform Integration: Webhooks, bots, API for CI/CD notifications 4. ChatOps: Trigger platform actions from chat 5. Rich Features: Threads, search, file sharing, video calls 6. Dojo Integration: Dedicated channels for learning, mentorship 7. Project Management Integration: Connect with Focalboard seamlessly 8. Scalable: Support growing communities (100+ users initially, 1000+ future) 9. Mobile Support: Native iOS and Android apps 10. Cost Effective: Free or low-cost at scale</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#forces-at-play","title":"Forces at Play","text":"<p>Technical Forces: - Need real-time communication for incident response - ChatOps capabilities increasingly expected in platforms - Notification fatigue from email-only communications - Integration complexity with external tools</p> <p>Business Forces: - Data sovereignty and security concerns with SaaS tools - Cost at scale (Slack pricing: $7.25-$12.50/user/month \u00d7 100 users = $725-$1,250/month) - Vendor lock-in risks with proprietary platforms - Open source preference for transparency and control</p> <p>Community Forces: - Community members prefer familiar platforms (Slack, Discord) - Learning curve for new platforms - Network effects (everyone uses Slack already) - Need for inclusive, welcoming community space</p> <p>Organizational Forces: - Platform team wants to avoid platform sprawl - Desire for single integrated platform experience - Need to model self-hosted, open-source values</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#decision","title":"Decision","text":"<p>We will use Mattermost as the integrated team collaboration platform for Fawkes.</p> <p>Specifically: - Self-hosted deployment in Kubernetes alongside other Fawkes components - Mattermost Team Edition (open source) with optional Enterprise upgrade path - Native Focalboard integration for project management - Deep platform integration via webhooks, slash commands, and bots - Backstage integration via iframe or custom plugin</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#rationale","title":"Rationale","text":"<ol> <li> <p>Open Source &amp; Self-Hosted: Mattermost is fully open source (MIT/Apache 2.0), aligns with Fawkes values, and gives complete control over data</p> </li> <li> <p>Feature Completeness: Comparable feature set to Slack (channels, threads, search, reactions, file sharing, video calls)</p> </li> <li> <p>Native Focalboard Integration: Focalboard (Notion-like project management) is built into Mattermost, creating seamless collaboration + project management experience</p> </li> <li> <p>Strong Integration Capabilities: </p> </li> <li>Webhooks (incoming/outgoing)</li> <li>Slash commands for ChatOps</li> <li>REST API for custom integrations</li> <li>Bot framework</li> <li> <p>700+ integrations available</p> </li> <li> <p>Platform Notifications: Natural home for CI/CD notifications, deployment updates, DORA metric alerts, security scan results</p> </li> <li> <p>Dojo Community Support: Dedicated channels for each belt level, peer learning, mentor office hours</p> </li> <li> <p>Cost Effectiveness: </p> </li> <li>Team Edition: Free, unlimited users</li> <li>Enterprise: Optional, $10/user/year (10x cheaper than Slack at scale)</li> <li> <p>Self-hosted: No per-user fees, only infrastructure costs (~$50-100/month)</p> </li> <li> <p>Mobile &amp; Desktop Apps: Native apps for all major platforms (iOS, Android, macOS, Windows, Linux)</p> </li> <li> <p>Slack Compatibility: Can import Slack workspaces, familiar keyboard shortcuts, similar UX reduces learning curve</p> </li> <li> <p>Active Development: Backed by Mattermost Inc., regular releases, large community (30,000+ stars on GitHub)</p> </li> <li> <p>Security &amp; Compliance: </p> <ul> <li>SOC 2 Type II certified</li> <li>GDPR compliant</li> <li>End-to-end encryption available</li> <li>Audit logging</li> <li>Advanced security controls in Enterprise</li> </ul> </li> </ol>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#consequences","title":"Consequences","text":""},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#positive","title":"Positive","text":"<p>\u2705 Complete Platform Integration: Single ecosystem for code, CI/CD, collaboration, project management, and learning</p> <p>\u2705 Data Ownership: Full control over data, no third-party access, can backup/restore as needed</p> <p>\u2705 Cost Predictability: Infrastructure costs only, no per-user fees, scales economically</p> <p>\u2705 Customization: Can modify, extend, and customize to exact needs</p> <p>\u2705 ChatOps Enablement: Build platform automation triggered from chat (deploy, rollback, check metrics)</p> <p>\u2705 Community Building: Dedicated, branded space for Fawkes community</p> <p>\u2705 Learning Integration: Natural home for dojo learner discussions and support</p> <p>\u2705 Project Management: Focalboard built-in creates seamless workflow</p> <p>\u2705 Open Source Alignment: Demonstrates commitment to open source values</p> <p>\u2705 Privacy &amp; Security: No data leaves your infrastructure, audit trail for compliance</p> <p>\u2705 Long-Term Sustainability: Open source ensures platform won't disappear or change terms</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#negative","title":"Negative","text":"<p>\u26a0\ufe0f Operational Overhead: Must deploy, maintain, backup, upgrade (mitigated: Kubernetes-native, automated)</p> <p>\u26a0\ufe0f Learning Curve: Users familiar with Slack/Discord need to learn new platform (mitigated: similar UX)</p> <p>\u26a0\ufe0f Network Effects: Many users already have Slack/Discord accounts (mitigated: Slack import, SSO)</p> <p>\u26a0\ufe0f Mobile App Quality: Mobile apps good but not quite as polished as Slack (improving rapidly)</p> <p>\u26a0\ufe0f Integration Ecosystem: Smaller than Slack's marketplace (mitigated: REST API, webhook support)</p> <p>\u26a0\ufe0f Voice/Video Calls: Built-in but not as robust as Zoom/Teams (mitigated: can integrate with external tools)</p> <p>\u26a0\ufe0f Adoption Challenge: Convincing community to join new platform (mitigated: showcase integration benefits)</p> <p>\u26a0\ufe0f Resource Requirements: Requires ~500MB RAM, 1 CPU core, 5GB storage minimum</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#neutral","title":"Neutral","text":"<p>\u25fd Maturity: Mature product (10+ years) but less ubiquitous than Slack</p> <p>\u25fd Brand Recognition: Less well-known than Slack (opportunity to educate about open source alternatives)</p> <p>\u25fd Enterprise Features: Some features require Enterprise license (can start with Team Edition)</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#mitigation-strategies","title":"Mitigation Strategies","text":"<ol> <li>Operational Overhead: </li> <li>Use Mattermost Operator for Kubernetes (automated deployment, upgrades)</li> <li>Include in platform monitoring and backup strategy</li> <li> <p>Document runbooks for common operations</p> </li> <li> <p>Learning Curve: </p> </li> <li>Create onboarding guide with screenshots</li> <li>Highlight Slack-compatible shortcuts</li> <li>Provide comparison guide (Slack vs. Mattermost)</li> <li> <p>Video walkthrough for new users</p> </li> <li> <p>Adoption:</p> </li> <li>Lead by example (maintainers active in Mattermost)</li> <li>Showcase platform integration benefits</li> <li>Make it the official channel for announcements</li> <li> <p>Offer Slack/Discord bridges during transition (bot that mirrors messages)</p> </li> <li> <p>Integration Gaps:</p> </li> <li>Build custom integrations where needed</li> <li>Contribute integrations back to community</li> <li> <p>Document integration patterns</p> </li> <li> <p>Voice/Video:</p> </li> <li>Use Mattermost's built-in calls for quick discussions</li> <li>Integrate with Zoom/Jitsi for larger meetings</li> <li>Document best practices</li> </ol>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#alternative-1-slack-saas","title":"Alternative 1: Slack (SaaS)","text":"<p>Pros: - Most popular enterprise chat platform - Excellent user experience and mobile apps - Huge integration marketplace (2,400+ apps) - Familiar to most users (minimal learning curve) - Best-in-class search and features - Strong voice/video calling</p> <p>Cons: - Cost: $7.25-$12.50/user/month (prohibitively expensive at scale) - Vendor Lock-In: Proprietary platform, terms can change - Data Privacy: All data on Slack's servers, compliance concerns - Message History Limits: Free tier limited to 90 days history - No Self-Hosting: Must use Slack's infrastructure - Misaligned Values: SaaS, proprietary, not open source</p> <p>Reason for Rejection: Cost at scale is prohibitive for open source project. At 500 users (medium-term goal), cost would be $43,500-$75,000/year. Data sovereignty and vendor lock-in concerns conflict with platform values. Slack doesn't integrate with self-hosted Focalboard.</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#alternative-2-discord","title":"Alternative 2: Discord","text":"<p>Pros: - Free for unlimited users - Excellent voice/video quality - Popular with developer communities - Great mobile apps - Rich media support (embeds, reactions, GIFs) - Screen sharing and streaming</p> <p>Cons: - Gaming-Centric UX: Designed for gaming, not professional collaboration - Limited Integrations: Fewer business integrations than Slack/Mattermost - No Self-Hosting: SaaS only, data on Discord servers - Professional Perception: Less professional than Slack/Mattermost - Search Limitations: Search not as powerful as Slack/Mattermost - No Project Management: No Focalboard equivalent - Organization Features: Weaker organization/threading than alternatives</p> <p>Reason for Rejection: While free and popular with developers, Discord's gaming focus, lack of self-hosting, and limited business integrations make it suboptimal for a professional platform engineering community. No project management integration path.</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#alternative-3-rocketchat","title":"Alternative 3: Rocket.Chat","text":"<p>Pros: - Open source and self-hosted - Feature-complete (channels, threads, video calls) - Strong security features - Active community - Free and scalable - Slack-compatible (can import)</p> <p>Cons: - Less Mature: Smaller community than Mattermost - Integration Ecosystem: Fewer integrations available - Performance: Can be slower with large communities - Documentation: Less comprehensive than Mattermost - Mobile Apps: Not as polished - No Project Management: No integrated project management tool - Smaller Development Team: Less resourced than Mattermost</p> <p>Reason for Rejection: While solid open source alternative, Rocket.Chat has smaller ecosystem, less mature integrations, and no project management integration like Focalboard. Mattermost has stronger momentum and backing.</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#alternative-4-microsoft-teams","title":"Alternative 4: Microsoft Teams","text":"<p>Pros: - Deep Microsoft 365 integration - Excellent voice/video (backed by Skype) - Widely used in enterprises - Strong security and compliance - File collaboration (SharePoint integration) - Free tier available</p> <p>Cons: - Microsoft Ecosystem Lock-In: Strongly tied to Microsoft services - Complex Self-Hosting: Teams self-hosting extremely complex - Not Truly Open Source: Proprietary platform - Resource Heavy: High resource requirements - Overly Complex: Feature bloat, steep learning curve - Poor UX for Chat: Optimized for meetings, not async chat - Limited Customization: Restricted API, hard to integrate deeply</p> <p>Reason for Rejection: Teams is designed for Microsoft ecosystem and prioritizes video meetings over chat. Self-hosting is impractical, not open source, and doesn't align with platform values. Poor fit for developer community.</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#alternative-5-matrixelement","title":"Alternative 5: Matrix/Element","text":"<p>Pros: - Fully open source and decentralized - Strong encryption and privacy - Federation support (connect multiple servers) - Active development - Growing community - Modern protocol (Matrix)</p> <p>Cons: - Immature Features: Missing some expected features (threads, polls) - Complex Setup: Federation and encryption add complexity - Performance: Can be slow with large communities - Mobile Apps: Still improving - Integration Ecosystem: Limited compared to Mattermost - No Project Management: No Focalboard equivalent - Learning Curve: Decentralization concepts unfamiliar to most users</p> <p>Reason for Rejection: While philosophically aligned (decentralized, encrypted), Matrix/Element is still maturing and has a steeper learning curve. Mattermost provides better immediate user experience while remaining open source and self-hosted.</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#alternative-6-zulip","title":"Alternative 6: Zulip","text":"<p>Pros: - Open source and self-hosted - Unique threading model (topic-based) - Excellent for asynchronous communication - Strong search capabilities - Free and scalable - Good integrations</p> <p>Cons: - Unusual UX: Topic-based threading very different from Slack - Smaller Community: Less widely known/adopted - Learning Curve: Unique model requires mindset shift - Integration Ecosystem: Smaller than Mattermost - No Project Management: No integrated project management - Mobile Apps: Good but less mature than alternatives</p> <p>Reason for Rejection: Zulip's topic-based threading, while powerful for some use cases, is a significant departure from familiar chat UX. Would increase friction for community adoption. No project management integration.</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-008: Focalboard for Project Management (direct integration with Mattermost)</li> <li>ADR-002: Backstage for Developer Portal (Mattermost integration via iframe/plugin)</li> <li>Future ADR: SSO/OIDC strategy (Mattermost will be SSO-enabled)</li> </ul>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#implementation-notes","title":"Implementation Notes","text":""},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#deployment-architecture","title":"Deployment Architecture","text":"<pre><code># Mattermost deployment in Kubernetes\nmattermost:\n  namespace: fawkes-collaboration\n  resources:\n    - mattermost-app (4 replicas for HA)\n    - postgresql (database)\n    - minio (file storage, optional - can use S3)\n    - nginx-ingress (TLS termination)\n\n  integrations:\n    - backstage (iframe embed or plugin)\n    - jenkins (webhook notifications)\n    - argocd (deployment notifications)\n    - grafana (alert notifications)\n    - github (PR/issue notifications)\n    - focalboard (built-in integration)\n</code></pre>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#initial-channel-structure","title":"Initial Channel Structure","text":"<p>System Channels: - \ud83d\udce2 <code>announcements</code> - Official announcements (maintainers only post) - \ud83d\udcac <code>general</code> - General discussion - \ud83c\udd98 <code>help-and-support</code> - Q&amp;A and troubleshooting - \ud83d\udc65 <code>introductions</code> - New member introductions</p> <p>Platform Component Channels: - <code>backstage</code> - <code>jenkins-cicd</code> - <code>argocd-gitops</code> - <code>observability</code> - <code>security</code> - <code>infrastructure</code></p> <p>Dojo Learning Channels: - \ud83c\udf93 <code>dojo-general</code> - Learning discussions - \ud83e\udd4b <code>dojo-white-belt</code> - \ud83d\udfe1 <code>dojo-yellow-belt</code> - \ud83d\udfe2 <code>dojo-green-belt</code> - \ud83d\udfe4 <code>dojo-brown-belt</code> - \u26ab <code>dojo-black-belt</code> - \ud83c\udfc6 <code>dojo-achievements</code> - Celebrate completions</p> <p>Contributor Channels: - \ud83d\udc68\u200d\ud83d\udcbb <code>contributors</code> - General contributor discussion - \ud83d\udc1b <code>good-first-issues</code> - Synced from GitHub - \ud83d\udcdd <code>documentation</code> - \ud83d\udd12 <code>security-private</code> (private channel)</p> <p>Cloud Provider Channels: - \u2601\ufe0f <code>aws</code> - \u2601\ufe0f <code>azure</code> - \u2601\ufe0f <code>gcp</code> - \u2601\ufe0f <code>multi-cloud</code></p> <p>Community Channels: - \ud83c\udf89 <code>random</code> - Off-topic, fun - \ud83c\udf8a <code>wins</code> - Celebrate successes - \ud83d\udcda <code>resources</code> - Share articles, talks, etc.</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#platform-integration-examples","title":"Platform Integration Examples","text":"<p>1. CI/CD Notifications: <pre><code>// Jenkins pipeline sends to Mattermost\nPOST https://mattermost.fawkes.io/hooks/jenkins\n{\n  \"channel\": \"jenkins-cicd\",\n  \"username\": \"Jenkins Bot\",\n  \"text\": \"\u2705 Build #42 succeeded for `sample-app`\\n\" +\n          \"Deployment time: 2m 15s\\n\" +\n          \"DORA Lead Time: 8m 42s\"\n}\n</code></pre></p> <p>2. ChatOps - Deploy from Chat: <pre><code>User: /deploy sample-app to production\nBot: \ud83d\ude80 Deploying sample-app to production...\n     Using image: registry.fawkes.io/sample-app:v1.2.3\n     Triggering ArgoCD sync...\n     \u2705 Deployment successful! (2m 18s)\n     \ud83d\udcca DORA Metrics updated\n</code></pre></p> <p>3. DORA Metric Alerts: <pre><code>DORA Bot: \u26a0\ufe0f Change Failure Rate Alert\n          Team: platform-team\n          Current: 18% (threshold: 15%)\n          Last 24h: 3 failed deployments out of 17\n          Action: Review recent changes in #platform-team\n</code></pre></p> <p>4. Dojo Lab Completion: <pre><code>Dojo Bot: \ud83c\udf89 @john completed Lab 3: Deploy with GitOps!\n          Belt: White Belt\n          Score: 48/50 (96%)\n          Time: 18 minutes\n          Say congrats in #dojo-white-belt!\n</code></pre></p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#sso-integration","title":"SSO Integration","text":"<ul> <li>Phase 1 (MVP): Email/password authentication</li> <li>Phase 2 (Month 2): OIDC/SAML SSO with Keycloak</li> <li>Phase 3 (Month 4): GitHub OAuth integration</li> </ul>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#mobile-app-strategy","title":"Mobile App Strategy","text":"<ul> <li>Encourage users to install Mattermost mobile apps</li> <li>Provide download links and setup guide</li> <li>Configure push notifications for critical alerts</li> <li>Test mobile experience regularly</li> </ul>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#migration-from-external-platforms","title":"Migration from External Platforms","text":"<p>For communities using Slack/Discord: 1. Export data from existing platform 2. Import into Mattermost using Slack import tool 3. Run bridge bot for transition period (messages mirrored) 4. Sunset bridge after 30 days</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#resource-requirements","title":"Resource Requirements","text":"<p>Minimum (100 users): - 2 CPU cores - 4GB RAM - 20GB storage - PostgreSQL database</p> <p>Recommended (500 users): - 4 CPU cores - 8GB RAM - 100GB storage - PostgreSQL with replication</p> <p>Enterprise (1000+ users): - 8+ CPU cores - 16GB+ RAM - 500GB+ storage - PostgreSQL cluster - Redis cache - S3/MinIO for file storage</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li>Prometheus metrics endpoint enabled</li> <li>Grafana dashboard for Mattermost metrics</li> <li>Alert on:</li> <li>High response time (&gt;2s)</li> <li>Database connection errors</li> <li>Websocket disconnections</li> <li>High memory usage (&gt;80%)</li> <li>Failed login attempts (potential attack)</li> </ul>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#backup-disaster-recovery","title":"Backup &amp; Disaster Recovery","text":"<ul> <li>Database: Daily backups via PostgreSQL dump</li> <li>File Storage: S3 versioning or MinIO backup</li> <li>Configuration: Store in Git (Infrastructure as Code)</li> <li>Recovery Time Objective (RTO): &lt;4 hours</li> <li>Recovery Point Objective (RPO): &lt;24 hours</li> </ul>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#monitoring-this-decision","title":"Monitoring This Decision","text":"<p>We will revisit this ADR if: - Community adoption is below 60% after 6 months - Operational burden is significantly higher than alternatives - Critical features are missing that block workflows - A superior open source alternative emerges - Cost of running Mattermost exceeds $200/month at scale</p> <p>Next Review Date: April 7, 2026 (6 months)</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#references","title":"References","text":"<ul> <li>Mattermost Documentation</li> <li>Mattermost vs Slack Comparison</li> <li>Mattermost Kubernetes Operator</li> <li>Focalboard Integration</li> <li>Mattermost Integrations Directory</li> </ul>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#notes","title":"Notes","text":""},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#why-not-start-with-slackdiscord","title":"Why Not Start with Slack/Discord?","text":"<p>We considered using Slack or Discord initially and migrating later, but: - Migration Pain: Moving established communities is difficult and disruptive - Platform Fragmentation: Running collaboration outside main platform defeats integration purpose - Cost Trap: Once on Slack, hard to justify migration due to sunk costs - Value Demonstration: Integrated Mattermost showcases complete platform vision from day one</p>"},{"location":"adr/ADR-007%20mattermost%204%20collaboration/#open-source-community-expectations","title":"Open Source Community Expectations","text":"<p>The open source community increasingly expects: - Self-hosted communication options (data sovereignty) - No reliance on proprietary platforms - Transparency and control - Alignment with open source values</p> <p>Mattermost aligns with these expectations while providing enterprise-grade features.</p> <p>Decision Made By: Platform Architecture Team Approved By: Project Lead Date: October 7, 2025 Author: [Platform Architect Name] Last Updated: October 7, 2025</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/","title":"ADR-008: Focalboard for Project Management","text":""},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#status","title":"Status","text":"<p>Accepted - October 7, 2025</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#context","title":"Context","text":"<p>Fawkes is a comprehensive Internal Product Delivery Platform that integrates infrastructure, collaboration, learning, and project management. While we've addressed collaboration needs with Mattermost (ADR-007), teams need integrated project management capabilities to:</p> <ul> <li>Track Platform Work: Sprint planning, roadmap visualization, backlog management</li> <li>Manage Product Delivery: Feature planning, release management, dependency tracking</li> <li>Coordinate Dojo Learning: Track learner progress, module completion, assessment status</li> <li>Visualize Workflows: Kanban boards, calendars, tables for different team needs</li> <li>Enable Self-Service: Teams manage their own work without external tools</li> </ul>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#the-need-for-integrated-project-management","title":"The Need for Integrated Project Management","text":"<p>Current Gap: Teams using Fawkes must use external tools for: - Sprint Planning: Jira, Azure DevOps, Linear, or spreadsheets - Roadmap Visualization: Separate roadmapping tools (ProductPlan, Aha!) - Task Management: Trello, Asana, Monday.com, or GitHub Projects - Learner Progress Tracking: Manual spreadsheets or LMS platforms - Resource Planning: Disconnected from delivery platform</p> <p>Problems with External Tools: - Context Switching: Jump between platforms (Fawkes \u2192 Jira \u2192 Confluence) - Integration Overhead: Custom integrations required, often fragile - Data Silos: Work tracking separate from actual delivery metrics - Access Control: Different permission models, SSO complexity - Cost: Commercial tools expensive at scale (Jira: $7-14/user/month) - Vendor Lock-In: Proprietary data formats, migration challenges</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#requirements-for-project-management-tool","title":"Requirements for Project Management Tool","text":"<ol> <li>Self-Hosted &amp; Open Source: Aligns with Fawkes values, data sovereignty</li> <li>Native Mattermost Integration: Seamless with our collaboration platform</li> <li>Multiple View Types: Boards (Kanban), tables, calendar, gallery</li> <li>Dojo Integration: Track learner progress, module completion, assessments</li> <li>DORA Metrics Connection: Link work items to deployments and metrics</li> <li>Flexible &amp; Lightweight: Not overly complex like Jira, but powerful enough</li> <li>Developer-Friendly: API for automation, CLI support, GitOps integration</li> <li>Template System: Pre-built templates for sprints, roadmaps, dojo tracking</li> <li>Real-Time Collaboration: Multiple users editing simultaneously</li> <li>Mobile Support: iOS and Android apps for on-the-go updates</li> </ol>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#forces-at-play","title":"Forces at Play","text":"<p>Technical Forces: - Need to track both platform development and team usage - Dojo learner progress requires structured tracking - Sprint planning needs integration with CI/CD metrics - Multiple stakeholders with different view preferences</p> <p>Business Forces: - Cost consciousness (avoid per-user fees) - Data sovereignty and compliance requirements - Desire for unified platform experience - Open source community expectations</p> <p>User Experience Forces: - Teams familiar with Trello/Jira/Asana expect similar UX - Learning curve for new tools creates friction - Mobile access increasingly important - Real-time collaboration expected</p> <p>Integration Forces: - Must integrate deeply with Mattermost (discussions, notifications) - Should connect to DORA metrics and deployments - Needs SSO with platform authentication - API for automation and custom workflows</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#decision","title":"Decision","text":"<p>We will use Focalboard as the integrated project management tool for Fawkes.</p> <p>Specifically: - Focalboard bundled with Mattermost (native integration) - Self-hosted deployment in Kubernetes alongside Mattermost - Deep integration with Mattermost channels (board discussions, notifications) - Custom templates for dojo tracking, sprint planning, platform roadmaps - Backstage integration via iframe or custom plugin for visibility</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#rationale","title":"Rationale","text":"<ol> <li>Native Mattermost Integration: Focalboard is developed by Mattermost, Inc. and integrates seamlessly:</li> <li>Built into Mattermost (no separate deployment complexity)</li> <li>Linked discussions (board cards \u2192 Mattermost threads)</li> <li>Unified notifications (updates appear in Mattermost)</li> <li>Single SSO and permission model</li> <li> <p>Share boards directly in channels</p> </li> <li> <p>Open Source &amp; Self-Hosted: Fully open source (MIT/Apache 2.0), aligns with Fawkes values, complete control over data</p> </li> <li> <p>Notion-Like Experience: Modern, intuitive UX inspired by Notion:</p> </li> <li>Flexible databases with custom properties</li> <li>Multiple views (board, table, calendar, gallery)</li> <li>Rich content (markdown, embeds, checklists)</li> <li> <p>Templates for quick setup</p> </li> <li> <p>Perfect for Dojo Tracking: Ideal for tracking learner progress:</p> </li> <li>Board per belt level (White, Yellow, Green, Brown, Black)</li> <li>Cards represent learners with completion status</li> <li>Custom properties: score, time spent, assessment results</li> <li>Calendar view for cohort scheduling</li> <li> <p>Gallery view for learner profiles</p> </li> <li> <p>Lightweight &amp; Fast: Unlike Jira, Focalboard is lightweight:</p> </li> <li>Fast page loads, responsive UI</li> <li>Simple setup, minimal configuration</li> <li>Not overly complex for small teams</li> <li> <p>Scales well to large teams when needed</p> </li> <li> <p>Developer-Friendly:</p> </li> <li>REST API for automation</li> <li>Import/export in JSON format</li> <li>Can integrate with CI/CD pipelines</li> <li> <p>Archive and backup easily</p> </li> <li> <p>Cost Effectiveness:</p> </li> <li>Free with Mattermost (no additional cost)</li> <li>No per-user fees</li> <li> <p>Only infrastructure costs (already paying for Mattermost)</p> </li> <li> <p>Multiple Use Cases:</p> </li> <li>Sprint Planning: Kanban boards for backlog \u2192 in progress \u2192 done</li> <li>Roadmap Visualization: Timeline view for quarters/releases</li> <li>Dojo Tracking: Learner progress boards with custom properties</li> <li>Incident Management: Board for tracking incidents and postmortems</li> <li>Team OKRs: Tables for objectives and key results</li> <li> <p>Content Calendar: Calendar view for blog posts, webinars</p> </li> <li> <p>Mobile Support: Native mobile apps for iOS and Android (via Mattermost apps)</p> </li> <li> <p>Active Development: Actively maintained by Mattermost with regular updates</p> </li> <li> <p>Familiar UX: Similar to Trello/Notion/Asana, reducing learning curve</p> </li> </ol>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#consequences","title":"Consequences","text":""},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#positive","title":"Positive","text":"<p>\u2705 Unified Platform Experience: Single ecosystem eliminates context switching (chat \u2192 boards \u2192 tasks)</p> <p>\u2705 Seamless Collaboration: Discuss board cards directly in Mattermost channels</p> <p>\u2705 Perfect Dojo Tracking: Custom boards track learner progress, module completion, assessment scores</p> <p>\u2705 Cost Effective: No additional cost beyond Mattermost infrastructure</p> <p>\u2705 Data Sovereignty: Complete control over project data, no third-party access</p> <p>\u2705 Flexible Views: Teams choose board, table, calendar, or gallery based on needs</p> <p>\u2705 Real-Time Updates: Collaborative editing, changes visible immediately</p> <p>\u2705 Simple Setup: Minimal configuration, template-based quick start</p> <p>\u2705 Open Source Alignment: Demonstrates commitment to open source stack</p> <p>\u2705 Developer Automation: API enables custom workflows and integrations</p> <p>\u2705 Template Ecosystem: Can create and share templates for common workflows</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#negative","title":"Negative","text":"<p>\u26a0\ufe0f Less Mature Than Jira: Newer product (launched 2021), fewer advanced features</p> <p>\u26a0\ufe0f Smaller Ecosystem: Fewer third-party integrations compared to Jira/Asana</p> <p>\u26a0\ufe0f Limited Reporting: Basic analytics, lacks advanced reporting of Jira</p> <p>\u26a0\ufe0f No Native Time Tracking: Requires custom properties or external integration</p> <p>\u26a0\ufe0f Simpler Workflow Engine: Less complex workflows than Jira (but this is often a benefit)</p> <p>\u26a0\ufe0f Dependency Management: Limited dependency tracking between cards</p> <p>\u26a0\ufe0f Resource Management: No built-in capacity planning or resource allocation</p> <p>\u26a0\ufe0f Learning Curve: Teams need to learn new tool (mitigated by familiar UX)</p> <p>\u26a0\ufe0f Feature Gaps: Some Jira power-user features don't exist</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#neutral","title":"Neutral","text":"<p>\u25fd Bundled vs. Standalone: Can deploy standalone but better bundled with Mattermost</p> <p>\u25fd Enterprise Features: Some features in paid Mattermost Enterprise edition</p> <p>\u25fd Customization: Less customizable than Jira but easier to configure</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#mitigation-strategies","title":"Mitigation Strategies","text":"<ol> <li>Maturity Concerns:</li> <li>Start with core use cases (sprint planning, dojo tracking)</li> <li>Contribute features back to open source project</li> <li>Build custom extensions via API where needed</li> <li> <p>Monitor roadmap for feature additions</p> </li> <li> <p>Reporting Limitations:</p> </li> <li>Export data to Grafana for advanced analytics</li> <li>Build custom dashboards using REST API</li> <li>Integrate with DORA metrics for delivery insights</li> <li> <p>Create weekly/monthly summary reports</p> </li> <li> <p>Time Tracking:</p> </li> <li>Use custom properties for estimated/actual time</li> <li>Integrate with external time tracking if needed</li> <li> <p>Consider building simple time-tracking plugin</p> </li> <li> <p>Workflow Complexity:</p> </li> <li>Keep workflows simple (aligns with agile principles)</li> <li>Use Mattermost bot commands for complex automations</li> <li> <p>Document standard workflows in templates</p> </li> <li> <p>Dependency Management:</p> </li> <li>Use linked cards feature for simple dependencies</li> <li>Document complex dependencies in card descriptions</li> <li> <p>Consider building dependency visualization</p> </li> <li> <p>Adoption:</p> </li> <li>Create video tutorials</li> <li>Provide pre-built templates</li> <li>Show integration benefits (Mattermost notifications, DORA links)</li> <li>Run pilot with one team before broader rollout</li> </ol>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#alternative-1-jira-saas-or-self-hosted","title":"Alternative 1: Jira (SaaS or Self-Hosted)","text":"<p>Pros: - Industry-standard for software teams - Extremely powerful and feature-rich - Extensive reporting and analytics - Huge marketplace of plugins (1,000+) - Advanced workflow engine - Time tracking, resource management, roadmaps - Familiar to most development teams - Strong integration ecosystem</p> <p>Cons: - Cost: $7.75-$14.50/user/month SaaS, or $42,000+ for self-hosted Data Center - Complexity: Notoriously complex, requires dedicated admin - Performance: Often slow, especially self-hosted - Vendor Lock-In: Proprietary data format, difficult to migrate - No Native Mattermost Integration: Requires custom webhooks - Heavy Resource Requirements: Self-hosted needs significant infrastructure - Not Open Source: Proprietary software, no source code access - Misaligned Values: Commercial SaaS doesn't align with open source platform</p> <p>Reason for Rejection: Cost is prohibitive for open source project (at 500 users: $46,500-$87,000/year). Complexity overkill for most teams. Self-hosted Data Center extremely expensive and complex to operate. No native Mattermost integration. Proprietary nature conflicts with Fawkes' open source values.</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#alternative-2-taiga","title":"Alternative 2: Taiga","text":"<p>Pros: - Open source (AGPL license) - Self-hosted and free - Built for agile teams (Scrum/Kanban) - Beautiful, modern UI - Epics, user stories, tasks, issues - Sprint planning and burndown charts - Time tracking and velocity reports - Wiki for documentation - Active community</p> <p>Cons: - No Mattermost Integration: Separate platform, no native integration - Separate Deployment: Another service to deploy and maintain - Different Tech Stack: Django/Angular vs. Go/React - More Complex: Feature-rich but steeper learning curve than Focalboard - Resource Overhead: Separate database, more infrastructure - Mobile App Quality: Mobile apps less polished - Harder to Customize: Codebase more complex to extend</p> <p>Reason for Rejection: While excellent tool, running separate platform defeats unified platform vision. No Mattermost integration means context switching. Deployment and maintenance overhead higher than bundled Focalboard. More complexity than needed for most use cases.</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#alternative-3-plane","title":"Alternative 3: Plane","text":"<p>Pros: - Open source (AGPL license) - Modern, beautiful UI (Linear-inspired) - Fast and lightweight - Built for engineering teams - Cycles, modules, views - Real-time collaboration - Self-hosted option - Active development</p> <p>Cons: - Very New: Launched 2023, still maturing - No Mattermost Integration: Separate platform - Smaller Community: Newer project, less proven - Limited Documentation: Still building out docs - Feature Set Evolving: Core features still being added - No Mobile Apps Yet: Web-only currently - Separate Infrastructure: Another service to deploy - Unknown Stability: Too new to assess long-term viability</p> <p>Reason for Rejection: Too new and unproven for critical platform component. No Mattermost integration. Separate deployment adds complexity. While promising, risk too high for early-stage project. Revisit in 1-2 years when more mature.</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#alternative-4-github-projects","title":"Alternative 4: GitHub Projects","text":"<p>Pros: - Free and unlimited - Native GitHub integration - Familiar to developers - Board, table, and roadmap views - Issue and PR linking - GitHub Actions automation - No separate deployment needed - Already using GitHub</p> <p>Cons: - Limited to Code Repositories: Not general-purpose project management - Basic Features: Lacks advanced PM capabilities - No Mattermost Integration: Separate platform, notifications via email - Poor for Non-Code Work: Not suitable for dojo tracking, general planning - No Standalone Boards: Tied to repositories - Limited Customization: Can't customize fields, workflows much - Not Self-Hosted: GitHub is SaaS (even with GitHub Enterprise) - No Real-Time Collaboration: More static than Focalboard/Jira</p> <p>Reason for Rejection: GitHub Projects excellent for code-centric work but too limited for general project management. Not suitable for dojo learner tracking, team planning, roadmaps. No Mattermost integration. Can complement Focalboard but not replace it.</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#alternative-5-trello-saas","title":"Alternative 5: Trello (SaaS)","text":"<p>Pros: - Simple, intuitive Kanban boards - Free tier available - Widely known and used - Power-Ups for extensions - Mobile apps excellent - Real-time collaboration - Butler automation - Visual and easy to learn</p> <p>Cons: - SaaS Only: No self-hosted option, data on Atlassian servers - Cost at Scale: $5-$17.50/user/month for paid tiers - Limited Views: Primarily Kanban, limited table/calendar - Basic Features: Less powerful than Jira/Focalboard for complex needs - No Mattermost Integration: Separate platform - Vendor Lock-In: Proprietary, owned by Atlassian - Not Open Source: Closed source, can't customize deeply - Data Export Limited: Proprietary format</p> <p>Reason for Rejection: SaaS-only conflicts with self-hosted platform vision. Cost adds up at scale. No Mattermost integration. Atlassian ownership means potential future pricing changes. Too basic for complex project management needs.</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#alternative-6-wekan","title":"Alternative 6: Wekan","text":"<p>Pros: - Open source (MIT license) - Self-hosted and free - Kanban boards (Trello-like) - Lightweight and simple - Docker deployment easy - Multiple languages - Integrations via webhooks</p> <p>Cons: - Limited Features: Very basic compared to alternatives - Development Pace: Slower development, smaller team - No Mattermost Integration: Separate platform - Single View Type: Only Kanban boards, no tables/calendars - Basic Customization: Limited custom fields - Mobile Experience: Web-only, no native apps - Smaller Community: Less active than alternatives</p> <p>Reason for Rejection: While simple and open source, too basic for needs. No Mattermost integration. Limited to Kanban view. Would need to run separately. Focalboard provides much richer feature set with same self-hosted benefits.</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#alternative-7-notion-saas","title":"Alternative 7: Notion (SaaS)","text":"<p>Pros: - Excellent UX, beautiful design - Flexible databases with multiple views - Rich content editing (markdown, embeds) - Templates and team collaboration - Real-time updates - Mobile apps excellent - Integrations and API - Very popular with teams</p> <p>Cons: - SaaS Only: No self-hosted option - Cost: $8-$15/user/month for teams - Vendor Lock-In: Proprietary platform and format - No Mattermost Integration: Separate platform - Performance: Can be slow with large databases - Data Sovereignty: All data on Notion servers - Not Open Source: Closed source, can't customize - Export Limitations: Limited export options</p> <p>Reason for Rejection: SaaS-only and proprietary conflicts with values. No self-hosting option. No Mattermost integration. Cost at scale. Focalboard provides Notion-like experience in open source, self-hosted package.</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-007: Mattermost for Team Collaboration (Focalboard integrates natively)</li> <li>Future ADR: Backstage Plugin for Focalboard (embed boards in developer portal)</li> <li>Future ADR: DORA Metrics Integration (link deployments to board cards)</li> </ul>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#implementation-notes","title":"Implementation Notes","text":""},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#deployment-architecture","title":"Deployment Architecture","text":"<pre><code># Focalboard bundled with Mattermost\nmattermost:\n  namespace: fawkes-collaboration\n  components:\n    - mattermost-app:\n        focalboard:\n          enabled: true\n          settings:\n            enablePublicSharedBoards: true\n            enableDataRetention: true\n\n  integrations:\n    - mattermost-channels (board discussions)\n    - backstage (iframe embed)\n    - dora-metrics-service (link cards to deployments)\n</code></pre>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#initial-board-templates","title":"Initial Board Templates","text":"<p>1. Sprint Planning Board <pre><code>template: \"Sprint Planning\"\nviews:\n  - type: board\n    columns: [\"Backlog\", \"This Sprint\", \"In Progress\", \"Review\", \"Done\"]\n  - type: table\n    groupBy: \"Priority\"\n  - type: calendar\n    dateProperty: \"Due Date\"\n\nproperties:\n  - name: \"Priority\"\n    type: select\n    options: [\"P0\", \"P1\", \"P2\", \"P3\"]\n  - name: \"Estimate\"\n    type: number\n  - name: \"Assignee\"\n    type: person\n  - name: \"Component\"\n    type: multiSelect\n    options: [\"Backstage\", \"Jenkins\", \"ArgoCD\", \"Observability\", \"Security\"]\n  - name: \"Sprint\"\n    type: select\n  - name: \"Story Points\"\n    type: number\n</code></pre></p> <p>2. Dojo Learner Progress Board <pre><code>template: \"Dojo - White Belt\"\nviews:\n  - type: board\n    columns: [\"Not Started\", \"Module 1\", \"Module 2\", \"Module 3\", \"Module 4\", \"Assessment\", \"Certified\"]\n  - type: table\n    groupBy: \"Status\"\n  - type: gallery\n    cardCover: \"profile_image\"\n\nproperties:\n  - name: \"Learner Name\"\n    type: text\n  - name: \"Email\"\n    type: email\n  - name: \"Start Date\"\n    type: date\n  - name: \"Target Completion\"\n    type: date\n  - name: \"Modules Completed\"\n    type: number\n  - name: \"Assessment Score\"\n    type: number\n  - name: \"Time Spent (hours)\"\n    type: number\n  - name: \"Status\"\n    type: select\n    options: [\"Not Started\", \"In Progress\", \"Assessment\", \"Certified\", \"On Hold\"]\n  - name: \"Notes\"\n    type: text\n</code></pre></p> <p>3. Platform Roadmap Board <pre><code>template: \"Platform Roadmap\"\nviews:\n  - type: board\n    columns: [\"Idea\", \"Planned\", \"In Development\", \"Testing\", \"Released\"]\n  - type: table\n    groupBy: \"Quarter\"\n  - type: calendar\n    dateProperty: \"Target Date\"\n\nproperties:\n  - name: \"Feature\"\n    type: text\n  - name: \"Quarter\"\n    type: select\n    options: [\"Q4 2025\", \"Q1 2026\", \"Q2 2026\", \"Q3 2026\", \"Q4 2026\"]\n  - name: \"Impact\"\n    type: select\n    options: [\"High\", \"Medium\", \"Low\"]\n  - name: \"Effort\"\n    type: select\n    options: [\"Small\", \"Medium\", \"Large\", \"XL\"]\n  - name: \"Owner\"\n    type: person\n  - name: \"Target Date\"\n    type: date\n  - name: \"Status\"\n    type: select\n  - name: \"Dependencies\"\n    type: text\n</code></pre></p> <p>4. Incident Management Board <pre><code>template: \"Incident Tracking\"\nviews:\n  - type: board\n    columns: [\"Reported\", \"Investigating\", \"Fixing\", \"Monitoring\", \"Resolved\"]\n  - type: table\n    sortBy: \"Severity\"\n\nproperties:\n  - name: \"Incident ID\"\n    type: text\n  - name: \"Severity\"\n    type: select\n    options: [\"SEV1\", \"SEV2\", \"SEV3\", \"SEV4\"]\n  - name: \"Reported By\"\n    type: person\n  - name: \"Incident Commander\"\n    type: person\n  - name: \"Reported At\"\n    type: dateTime\n  - name: \"Resolved At\"\n    type: dateTime\n  - name: \"MTTR (minutes)\"\n    type: number\n  - name: \"Affected Services\"\n    type: multiSelect\n  - name: \"Root Cause\"\n    type: text\n  - name: \"Postmortem Link\"\n    type: url\n</code></pre></p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#mattermost-integration-examples","title":"Mattermost Integration Examples","text":"<p>1. Board Updates in Channels: <pre><code>[Focalboard Bot] \ud83d\udccb Card moved in \"Sprint 01\"\n@john moved \"Implement DORA metrics\" \nFrom: In Progress \u2192 Review\nBoard: https://mattermost.fawkes.io/boards/abc123\n</code></pre></p> <p>2. Card Discussions: <pre><code>User clicks \"Discuss in Mattermost\" on card\n\u2192 Creates thread in linked channel\n\u2192 Thread automatically linked back to card\n\u2192 Comments sync bidirectionally\n</code></pre></p> <p>3. Daily Stand-up Automation: <pre><code>[Focalboard Bot] \ud83d\udcca Daily Stand-up - Sprint 01\nCards completed yesterday: 3\nCards in progress: 7\nBlocked cards: 1 \u26a0\ufe0f\n\n@alice: 2 cards in review\n@bob: Working on \"Security scanning\" (blocked)\n@carol: Completed \"Deploy Backstage\"\n</code></pre></p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#backstage-integration","title":"Backstage Integration","text":"<ul> <li>Phase 1: Iframe embed in Backstage (boards visible in developer portal)</li> <li>Phase 2: Custom Backstage plugin (<code>@fawkes/plugin-focalboard</code>)</li> <li>Phase 3: Deep integration (create cards from Backstage, link to services)</li> </ul>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#dora-metrics-integration","title":"DORA Metrics Integration","text":"<p>Link board cards to deployments: <pre><code>// When deployment completes\nPOST /focalboard/api/cards/{cardId}/properties\n{\n  \"deployed\": true,\n  \"deployment_time\": \"2025-10-07T14:30:00Z\",\n  \"dora_lead_time\": \"8h 42m\",\n  \"deployment_id\": \"deploy-12345\"\n}\n</code></pre></p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#mobile-experience","title":"Mobile Experience","text":"<ul> <li>Access via Mattermost mobile app</li> <li>Focalboard integrated in Mattermost mobile (iOS/Android)</li> <li>Full board editing on mobile</li> <li>Push notifications for card updates</li> <li>Offline support with sync</li> </ul>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#backup-data-export","title":"Backup &amp; Data Export","text":"<ul> <li>Backup: Included in Mattermost backup strategy</li> <li>Export: JSON format for all boards</li> <li>Import: Can import from Trello, Asana, Notion</li> <li>Git Backup: Export boards to Git for version control</li> </ul>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#resource-requirements","title":"Resource Requirements","text":"<p>Included in Mattermost deployment: - No additional CPU/memory beyond Mattermost - Shares PostgreSQL database - File attachments use same storage (S3/MinIO) - ~100MB additional storage per 100 active boards</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Board loading: &lt;1 second for boards with &lt;1000 cards</li> <li>Real-time updates via WebSocket</li> <li>Card search indexed for fast queries</li> <li>Archive old boards to improve performance</li> </ul>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#monitoring-this-decision","title":"Monitoring This Decision","text":"<p>We will revisit this ADR if: - Focalboard becomes unmaintained or development slows significantly - Critical features remain missing after 12 months - Performance issues arise that can't be resolved - A superior open source alternative emerges with Mattermost integration - Community adoption is below 50% (teams prefer external tools)</p> <p>Next Review Date: April 7, 2026 (6 months)</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#references","title":"References","text":"<ul> <li>Focalboard Documentation</li> <li>Focalboard GitHub</li> <li>Mattermost Boards Documentation</li> <li>Focalboard vs. Alternatives Comparison</li> </ul>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#notes","title":"Notes","text":""},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#why-focalboard-over-jira","title":"Why Focalboard Over Jira?","text":"<p>The most common question: \"Why not use Jira, the industry standard?\"</p> <p>Three key reasons:</p> <ol> <li> <p>Integration: Focalboard's native Mattermost integration creates unified experience. Jira requires complex external integrations.</p> </li> <li> <p>Cost &amp; Values: Open source and self-hosted aligns with Fawkes values. Jira's licensing costs don't scale for open source community.</p> </li> <li> <p>Simplicity: Most teams don't need Jira's complexity. Focalboard's simplicity is a feature, not a limitation. Start simple, scale up as needed.</p> </li> </ol>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#focalboards-evolution","title":"Focalboard's Evolution","text":"<p>Focalboard started as standalone project, acquired by Mattermost in 2021. Now: - Core part of Mattermost platform - Active development (monthly releases) - Growing feature set - Increasing adoption - Path to maturity clear</p>"},{"location":"adr/ADR-008%20focalboard%204%20project%20management/#enterprise-considerations","title":"Enterprise Considerations","text":"<p>While Focalboard is free, some advanced features require Mattermost Enterprise: - Advanced permissions and compliance - SAML authentication - Data retention policies - Advanced audit logging</p> <p>For open source Fawkes: Start with free version, upgrade if enterprise adopters need these features.</p> <p>Decision Made By: Platform Architecture Team Approved By: Project Lead Date: October 7, 2025 Author: [Platform Architect Name] Last Updated: October 7, 2025</p>"},{"location":"design/Demand%20Hypothesis/","title":"Demand Hypothesis","text":"<p>Based on the defined persona (Improvement-Driven Leader) and their Jobs to Be Done, we hypothesize the following about the demand for a service that provides DORA metrics visualization:</p> <p>Hypothesis Statement:</p> <p>We believe that Improvement-Driven Leaders within software development organizations will find significant value in a service that provides easily accessible, objective visualization of DORA metrics.</p> <p>Because:</p> <ul> <li>DORA metrics (change lead time, deployment frequency, change fail percentage, failed deployment recovery time) are globally recognized and validated indicators of software delivery performance and overall organizational outcomes [6, 7].</li> <li>Improvement-Driven Leaders need objective data to understand the current state of their software delivery process and identify specific areas for improvement [5, 8].</li> <li>There is a common pain point where management doesn't fully understand the software process or the challenges faced by development and operations teams, leading to misaligned expectations and pressure [1-3].</li> <li>Providing end-to-end dashboards for stakeholders to view performance is a key practice for mitigating challenges and enabling data-driven decision-making [8].</li> <li>Metrics are a requirement for excellence and facilitate informed decision-making [8].</li> <li>Organizations often struggle to effectively collect and present these critical metrics from their existing toolchains [8, 14-16].</li> <li>A service focused on delivering these core metrics addresses a fundamental need for visibility and insight necessary for an improvement-driven approach [5, 7].</li> </ul> <p>Therefore:</p> <ul> <li>Providing a clear, centralized view of DORA metrics will solve a key pain point for leaders struggling to measure and understand their team's performance.</li> <li>This service will enable leaders to make better decisions, justify investments in process improvements, and communicate performance effectively across the organization.</li> <li>The demand for such a service is driven by the need to identify and address inefficiencies and bottlenecks in the software delivery lifecycle, ultimately helping organizations get \"better at getting better\" [5].</li> <li>While platforms like Backstage exist, a focused MVP on DORA metrics addresses the specific need for performance visibility directly, potentially with less initial overhead than a full IDP implementation, thus being valuable as a targeted solution for this persona.</li> </ul> <p>Validation Strategy (Implicit/Next Steps):</p> <ul> <li>Engage directly with potential customers (Improvement-Driven Leaders) to confirm these pain points and the perceived value of a DORA metrics dashboard [17].</li> <li>Leverage tools and methods for identifying pain points such as surveys, interviews, analyzing forum discussions (like on Reddit) related to DevOps, performance, and management challenges [17-26].</li> <li>Start with a DORA Quick Check style conversation [Conversation History] to assess current understanding and perceived needs regarding performance metrics.</li> </ul>"},{"location":"design/Jobs%20to%20Be%20Done%20%28JTBD%29%20for%20the%20Improve/","title":"Jobs to Be Done (JTBD) for the Improvement-Driven Leader Persona","text":"<p>Based on the persona description and the sources, the \"Improvement-Driven Leader\" hires a solution to perform the following jobs:</p> <p>Core Job:</p> <ul> <li>Measure software delivery performance using established metrics like the DORA Four Keys (change lead time, deployment frequency, change fail percentage, failed deployment recovery time) to understand the current state and track progress over time [6, 7].</li> </ul> <p>Related Jobs:</p> <ul> <li>Gain visibility into team and process performance to identify bottlenecks and areas needing attention [8].</li> <li>Provide stakeholders with end-to-end dashboards to visualize performance and facilitate decision-making [8].</li> <li>Identify problems early by monitoring key performance indicators [8].</li> <li>Understand where the organization is potentially failing across the key software delivery metrics [7].</li> <li>Gather objective data to validate or challenge perceptions about performance.</li> <li>Inform and prioritize improvement initiatives based on data rather than intuition or anecdote [5, 8].</li> <li>Communicate performance trends and the impact of changes to other leaders and teams [1, 2].</li> <li>Bridge the communication gap between technical teams and business stakeholders by providing quantifiable metrics [1, 2].</li> <li>Establish a baseline for performance before implementing new practices or tools.</li> <li>Monitor the effectiveness of implemented changes and improvements.</li> <li>Enable continuous improvement by providing the data needed to identify and address problems iteratively [5].</li> </ul>"},{"location":"design/Persona-Ivan%20The%20Improvement-Driven%20Leader/","title":"Persona: The Improvement-Driven Leader","text":"<p>Based on our conversation history and the provided sources, our primary persona is the Improvement-Driven Leader. This persona represents individuals in leadership or management roles who are focused on understanding and improving their organization's software delivery performance.</p> <p>Description:</p> <p>This persona is typically a product manager, manager, or leader within a software development or IT organization [1-3]. They are concerned with business objectives [4], realizing gains quickly [1], and ensuring their teams are getting better at getting better [5].</p> <p>Goals:</p> <ul> <li>To understand the current state of software delivery performance objectively [6, 7].</li> <li>To identify areas for improvement within the software development and delivery process [5].</li> <li>To make data-driven decisions to optimize workflows and resource allocation [8].</li> <li>To bridge the gap between business needs and the realities of software development difficulty [1, 2].</li> <li>To quantify the Return on Investment (ROI) of improvement initiatives.</li> <li>To foster a supportive, innovative, and stable organizational culture that enables high performance [7].</li> <li>To ensure security is seamlessly integrated into development workflows and aligns with business objectives [4].</li> </ul> <p>Pain Points &amp; Frustrations:</p> <ul> <li>Lack of clear visibility into software delivery performance metrics [8].</li> <li>Difficulty in understanding the actual effort and complexity of development work (\"development as a black box\") [1].</li> <li>Challenges in conveying the difficulty or time required for features to business stakeholders [1, 2].</li> <li>Pressure to deliver quickly leading to rushing and technical debt, often due to management not understanding the process [2].</li> <li>Unrealistic expectations and deadlines from project managers or management who don't understand the workload, especially in DevOps roles [3].</li> <li>Tools that get in their way rather than helping [9].</li> <li>Challenges related to management structure, communication/collaboration, and culture when adopting new methodologies like DevOps [10, 11].</li> <li>Lack of senior management involvement in improvement initiatives [12].</li> <li>Difficulty in identifying hidden pain points or workarounds that teams have become accustomed to (\"It's annoying, but this is how we do the thing\") [13].</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/","title":"Fawkes Dojo: Immersive Learning Architecture","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#document-information","title":"Document Information","text":"<p>Version: 1.0 Last Updated: October 7, 2025 Status: Living Document Audience: Learning Architects, Contributors, Platform Engineers</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Vision &amp; Philosophy</li> <li>Learning System Overview</li> <li>Belt Progression System</li> <li>Curriculum Architecture</li> <li>Hands-On Lab Environment</li> <li>Assessment &amp; Certification</li> <li>DORA Capabilities Mapping</li> <li>Platform Engineering University Integration</li> <li>Technology Stack</li> <li>Implementation Roadmap</li> </ol>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#vision-philosophy","title":"Vision &amp; Philosophy","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#the-problem","title":"The Problem","text":"<p>Platform engineering skills are in high demand but difficult to acquire: - Theory vs. Practice Gap: Reading about platform engineering \u2260 doing platform engineering - No Safe Practice Environment: Production is too risky, toy examples aren't realistic - Fragmented Learning: Scattered blog posts, docs, and courses don't provide cohesive journey - No Feedback Loops: Hard to know if you're improving or building bad habits - Lack of Recognition: No clear progression system or credentials</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#the-fawkes-dojo-solution","title":"The Fawkes Dojo Solution","text":"<p>\"Learn platform engineering by building and operating a real platform\"</p> <p>The Fawkes Dojo is not a traditional course or documentation site. It's an immersive learning environment where:</p> <ol> <li>\u2705 Learn by Doing: Every concept practiced immediately in production-like environment</li> <li>\u2705 Safe to Fail: Isolated environments where mistakes are learning opportunities</li> <li>\u2705 Immediate Feedback: Automated validation, metrics, and mentor review</li> <li>\u2705 Progressive Mastery: Clear belt system showing skill progression</li> <li>\u2705 Real Tools, Real Skills: Same tools used in production environments</li> <li>\u2705 Community Learning: Learn with peers, share achievements, get help</li> <li>\u2705 Recognized Credentials: Earn badges/certificates valued by employers</li> </ol>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#learning-philosophy","title":"Learning Philosophy","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#1-production-first-learning","title":"1. Production-First Learning","text":"<ul> <li>Labs use the actual Fawkes platform, not simplified versions</li> <li>Same tools, same workflows, same challenges as production</li> <li>Mistakes have consequences (within safe boundaries)</li> <li>Build muscle memory for real-world scenarios</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#2-immediate-application","title":"2. Immediate Application","text":"<ul> <li>Maximum 5 minutes of theory before hands-on practice</li> <li>Every concept demonstrated, then practiced</li> <li>Build, break, fix\u2014the fastest path to mastery</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#3-spaced-repetition-reinforcement","title":"3. Spaced Repetition &amp; Reinforcement","text":"<ul> <li>Concepts introduced multiple times in increasing complexity</li> <li>Earlier skills reinforced in advanced modules</li> <li>Regular reviews and retrospectives</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#4-deliberate-practice","title":"4. Deliberate Practice","text":"<ul> <li>Focused on specific skills with clear goals</li> <li>Challenging but achievable (flow state)</li> <li>Immediate feedback on performance</li> <li>Reflection on what worked and what didn't</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#5-social-learning","title":"5. Social Learning","text":"<ul> <li>Learn with cohorts (optional but encouraged)</li> <li>Share solutions and approaches</li> <li>Peer code review and feedback</li> <li>Celebrate achievements publicly</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#learning-system-overview","title":"Learning System Overview","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Fawkes Dojo Learning System                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502           Backstage Dojo Portal (Learning Hub)            \u2502 \u2502\n\u2502  \u2502  \u2022 Curriculum Browser  \u2022 Progress Tracking  \u2022 Leaderboard\u2502 \u2502\n\u2502  \u2502  \u2022 Lab Launcher  \u2022 Achievement Badges  \u2022 Community       \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502              \u2502                                   \u2502             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Learning Content (TechDocs) \u2502  \u2502   Hands-On Labs        \u2502  \u2502\n\u2502  \u2502  \u2022 Modules (video + text)    \u2502  \u2502   (Live Environment)   \u2502  \u2502\n\u2502  \u2502  \u2022 Exercises                 \u2502  \u2502   \u2022 Personal namespace \u2502  \u2502\n\u2502  \u2502  \u2022 Quizzes                   \u2502  \u2502   \u2022 Sample apps        \u2502  \u2502\n\u2502  \u2502  \u2022 References                \u2502  \u2502   \u2022 CI/CD pipelines    \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502   \u2022 Monitoring         \u2502  \u2502\n\u2502                                     \u2502   \u2022 Auto-validation    \u2502  \u2502\n\u2502                                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502              \u2502                                   \u2502             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502         Assessment &amp; Certification Engine                \u2502 \u2502\n\u2502  \u2502  \u2022 Automated Grading  \u2022 Manual Review  \u2022 Certificates   \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502              \u2502                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502            Progress &amp; Analytics (Focalboard)             \u2502 \u2502\n\u2502  \u2502  \u2022 Individual progress  \u2022 Cohort analytics              \u2502 \u2502\n\u2502  \u2502  \u2022 Skill gaps  \u2022 Time tracking  \u2022 Completion rates      \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502              \u2502                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502           Community &amp; Support (Mattermost)               \u2502 \u2502\n\u2502  \u2502  \u2022 #dojo channels  \u2022 Peer help  \u2022 Mentor office hours   \u2502 \u2502\n\u2502  \u2502  \u2022 Achievement announcements  \u2022 Study groups            \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#component-responsibilities","title":"Component Responsibilities","text":"Component Purpose Technology Dojo Portal Single entry point for all learning Backstage plugin Content System Modules, videos, documentation TechDocs (Markdown + MkDocs) Lab Environment Hands-on practice in isolated namespaces Kubernetes namespaces + RBAC Validation System Auto-grade labs, provide feedback Custom Go/Python service Progress Tracking Track learner progress, visualize journey Focalboard + PostgreSQL Achievement System Badges, certificates, leaderboards Backstage plugin + database Community Platform Discussion, support, collaboration Mattermost Analytics Engine Learning effectiveness, content gaps Grafana + custom metrics"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#belt-progression-system","title":"Belt Progression System","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#belt-philosophy","title":"Belt Philosophy","text":"<p>Inspired by martial arts dojo systems, the belt progression provides: - Clear Milestones: Tangible goals to work toward - Skill Validation: Each belt certifies specific competencies - Public Recognition: Displayable badges and credentials - Motivation: Gamification without sacrificing rigor</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#belt-levels","title":"Belt Levels","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#white-belt-platform-fundamentals-8-hours","title":"\ud83e\udd4b White Belt: Platform Fundamentals (8 hours)","text":"<p>Target Audience: New to platform engineering or Fawkes Prerequisites: Basic command line, Git, and Docker knowledge Certification: \"Fawkes Platform Operator\"</p> <p>Core Competencies: - Understand what an Internal Delivery Platform is and why it matters - Explain DORA metrics and their business impact - Navigate Backstage portal and service catalog - Deploy an application using a golden path template - View and interpret basic DORA metrics - Use Mattermost for team collaboration - Track work in Focalboard</p> <p>DORA Capabilities Covered: 4 of 24 - Continuous Integration - Continuous Delivery - Monitoring and Observability - Deployment Automation</p> <p>Assessment:  - Deploy 2 sample applications successfully - Demonstrate understanding of DORA metrics (quiz) - Complete 3 hands-on labs - Pass 80% on written assessment</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#yellow-belt-cicd-mastery-8-hours","title":"\ud83d\udfe1 Yellow Belt: CI/CD Mastery (8 hours)","text":"<p>Target Audience: Developers ready to own their CI/CD Prerequisites: White Belt certification Certification: \"Fawkes CI/CD Specialist\"</p> <p>Core Competencies: - Build custom Jenkins pipelines from scratch - Implement security scanning (SAST, dependency check, container scanning) - Configure quality gates and automated testing - Optimize build times and resource usage - Troubleshoot failed pipelines effectively - Understand artifact management and versioning - Implement pipeline-as-code best practices</p> <p>DORA Capabilities Covered: 6 of 24 (additional) - Test Automation - Test Data Management - Shift Left on Security - Trunk-Based Development - Version Control - Code Review</p> <p>Assessment: - Build 3 production-ready pipelines (Java, Python, Node.js) - Achieve &lt;5 min build time for sample app - Implement security scanning with zero critical vulnerabilities - Score 85%+ on advanced CI/CD quiz</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#green-belt-gitops-deployment-8-hours","title":"\ud83d\udfe2 Green Belt: GitOps &amp; Deployment (8 hours)","text":"<p>Target Audience: Engineers managing deployments Prerequisites: Yellow Belt certification Certification: \"Fawkes Deployment Engineer\"</p> <p>Core Competencies: - Implement GitOps workflows with ArgoCD - Configure blue-green and canary deployments - Implement progressive delivery with automated rollback - Manage multi-environment deployments (dev, staging, prod) - Troubleshoot deployment failures and rollback safely - Understand Kubernetes deployment strategies - Implement deployment best practices</p> <p>DORA Capabilities Covered: 7 of 24 (additional) - Deployment Automation (advanced) - Infrastructure as Code - Empowering Teams - Visual Management - Work in Small Batches - Team Experimentation - Change Approval Process</p> <p>Assessment: - Implement GitOps for 3 environments - Execute successful canary deployment with rollback - Recover from simulated deployment failure &lt;5 min - Design deployment strategy for complex application - Score 85%+ on GitOps assessment</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#brown-belt-observability-sre-8-hours","title":"\ud83d\udfe4 Brown Belt: Observability &amp; SRE (8 hours)","text":"<p>Target Audience: Engineers responsible for reliability Prerequisites: Green Belt certification Certification: \"Fawkes SRE Practitioner\"</p> <p>Core Competencies: - Configure comprehensive observability (metrics, logs, traces) - Design and implement custom DORA metrics dashboards - Define and track SLIs, SLOs, and error budgets - Implement distributed tracing for microservices - Conduct effective incident response and postmortems - Practice chaos engineering fundamentals - Optimize platform and application performance</p> <p>DORA Capabilities Covered: 5 of 24 (additional) - Monitoring and Observability (advanced) - Proactive Failure Notification - Database Change Management - WIP Limits - Visualizing Work</p> <p>Assessment: - Configure full observability stack for application - Create custom DORA metrics dashboard - Define SLOs and implement alerts - Respond to simulated incident (pass if MTTR &lt;30 min) - Conduct postmortem analysis - Score 90%+ on SRE assessment</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#black-belt-platform-architecture-8-hours","title":"\u26ab Black Belt: Platform Architecture (8 hours)","text":"<p>Target Audience: Platform architects and tech leads Prerequisites: Brown Belt certification Certification: \"Fawkes Platform Architect\"</p> <p>Core Competencies: - Design platform architecture for new teams - Implement multi-tenancy and resource governance - Design security architecture (zero trust principles) - Plan multi-cloud deployment strategies - Evaluate and integrate new platform tools - Mentor others in platform engineering - Contribute to platform codebase</p> <p>DORA Capabilities Covered: 2 of 24 (final) - Loosely Coupled Architecture - Generative Organizational Culture</p> <p>Assessment: - Design complete platform for fictional company - Present architecture to panel (peer + mentor review) - Implement multi-tenant namespace design - Contribute meaningful code or documentation to Fawkes - Mentor 2 learners through White Belt - Score 90%+ on architecture assessment</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#belt-progression-visualization","title":"Belt Progression Visualization","text":"<pre><code>White Belt (8h)          Platform Fundamentals\n    \u2193                   \u2713 Deploy apps\n    \u2193                   \u2713 Basic DORA metrics\n    \u2193\nYellow Belt (8h)         CI/CD Mastery  \n    \u2193                   \u2713 Custom pipelines\n    \u2193                   \u2713 Security scanning\n    \u2193\nGreen Belt (8h)          GitOps &amp; Deployment\n    \u2193                   \u2713 Blue-green/canary\n    \u2193                   \u2713 Multi-environment\n    \u2193\nBrown Belt (8h)          Observability &amp; SRE\n    \u2193                   \u2713 Full observability\n    \u2193                   \u2713 Incident response\n    \u2193\nBlack Belt (8h)          Platform Architecture\n                        \u2713 Design platforms\n                        \u2713 Mentor others\n\nTotal Time: 40 hours (1 week full-time or 5 weeks part-time)\n</code></pre>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#curriculum-architecture","title":"Curriculum Architecture","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#module-structure","title":"Module Structure","text":"<p>Each module follows consistent structure for predictability:</p> <pre><code>Module N: [Title]\n\u251c\u2500\u2500 1. Learning Objectives (3 min)\n\u2502   \u251c\u2500\u2500 What you'll learn\n\u2502   \u251c\u2500\u2500 Why it matters\n\u2502   \u2514\u2500\u2500 Success criteria\n\u251c\u2500\u2500 2. Theory &amp; Concepts (10-15 min)\n\u2502   \u251c\u2500\u2500 Video explanation (5-7 min)\n\u2502   \u251c\u2500\u2500 Written content with diagrams\n\u2502   \u251c\u2500\u2500 Real-world examples\n\u2502   \u2514\u2500\u2500 Common pitfalls\n\u251c\u2500\u2500 3. Demonstration (10 min)\n\u2502   \u251c\u2500\u2500 Instructor walkthrough video\n\u2502   \u251c\u2500\u2500 Step-by-step with narration\n\u2502   \u2514\u2500\u2500 Explaining \"why\" at each step\n\u251c\u2500\u2500 4. Hands-On Lab (15-20 min)\n\u2502   \u251c\u2500\u2500 Lab environment auto-provisioned\n\u2502   \u251c\u2500\u2500 Clear instructions\n\u2502   \u251c\u2500\u2500 Checkpoints with validation\n\u2502   \u251c\u2500\u2500 Troubleshooting hints\n\u2502   \u2514\u2500\u2500 Auto-graded submission\n\u251c\u2500\u2500 5. Knowledge Check (5 min)\n\u2502   \u251c\u2500\u2500 5-10 quiz questions\n\u2502   \u251c\u2500\u2500 Immediate feedback\n\u2502   \u2514\u2500\u2500 Links to relevant content for wrong answers\n\u251c\u2500\u2500 6. Reflection &amp; Next Steps (5 min)\n\u2502   \u251c\u2500\u2500 What you learned\n\u2502   \u251c\u2500\u2500 How it connects to real work\n\u2502   \u251c\u2500\u2500 Additional resources\n\u2502   \u2514\u2500\u2500 Preview of next module\n\nTotal Time per Module: 45-60 minutes\n</code></pre>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#complete-curriculum-map","title":"Complete Curriculum Map","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#white-belt-8-hours-total","title":"White Belt (8 hours total)","text":"<p>Module 1: Internal Delivery Platforms - What and Why (60 min) - What is an IDP and why organizations need them - Platform as a Product mindset - Team Topologies: enabling teams - Fawkes platform tour - Lab: Explore Backstage catalog, navigate documentation</p> <p>Module 2: DORA Metrics - The North Star (60 min) - Four Key Metrics explained in depth - High performers vs. low performers data - How DORA metrics drive business outcomes - Fawkes DORA metrics automation - Lab: View live DORA dashboard, understand metric calculations</p> <p>Module 3: GitOps Principles (60 min) - Declarative infrastructure and applications - Git as source of truth - Automated reconciliation - Benefits and challenges - Lab: Make a GitOps change, watch ArgoCD sync</p> <p>Module 4: Your First Deployment (60 min) - Golden path templates - Step-by-step deployment process - Monitoring deployment progress - Viewing DORA metrics in real-time - Lab: Deploy your first application end-to-end</p> <p>White Belt Assessment (2 hours) - Deploy 2 additional applications (different languages) - Written exam (30 questions) - Practical troubleshooting scenario</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#yellow-belt-8-hours-total","title":"Yellow Belt (8 hours total)","text":"<p>Module 5: Continuous Integration Fundamentals (60 min) - CI principles and benefits - Jenkins architecture - Pipeline-as-code (Jenkinsfile) - Build stages and best practices - Lab: Create basic Jenkinsfile, run first build</p> <p>Module 6: Building Golden Path Pipelines (60 min) - Shared libraries and reusable components - Multi-stage pipelines (build, test, package) - Caching and optimization - Parallel execution - Lab: Build optimized pipeline with &lt;5 min runtime</p> <p>Module 7: Security Scanning &amp; Quality Gates (60 min) - Static analysis (SonarQube) - Dependency scanning - Container image scanning (Trivy) - Quality gates and policy enforcement - Lab: Add comprehensive security scanning to pipeline</p> <p>Module 8: Artifact Management (60 min) - Container registry (Harbor) - Versioning strategies (semantic versioning) - Artifact promotion across environments - Retention policies - Lab: Implement artifact management workflow</p> <p>Yellow Belt Assessment (2 hours) - Build 3 production-ready pipelines - Optimize build performance - Implement security scanning with zero critical CVEs - Written exam (40 questions)</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#green-belt-8-hours-total","title":"Green Belt (8 hours total)","text":"<p>Module 9: GitOps with ArgoCD (60 min) - ArgoCD architecture and concepts - Application definitions - Sync policies and health assessment - Automated vs. manual sync - Lab: Configure ArgoCD application, implement sync</p> <p>Module 10: Deployment Strategies (60 min) - Blue-green deployments - Canary deployments - Rolling updates - Feature flags - Lab: Implement blue-green deployment</p> <p>Module 11: Progressive Delivery (60 min) - Traffic splitting and analysis - Automated rollback triggers - Metrics-driven deployments - A/B testing integration - Lab: Configure canary deployment with automated rollback</p> <p>Module 12: Rollback &amp; Incident Response (60 min) - When and how to rollback - Incident detection and alerting - Emergency procedures - Postmortem process - Lab: Simulate production incident, execute rollback</p> <p>Green Belt Assessment (2 hours) - Implement GitOps for 3 environments - Execute canary deployment - Respond to simulated incident - Design deployment strategy document - Written exam (40 questions)</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#brown-belt-8-hours-total","title":"Brown Belt (8 hours total)","text":"<p>Module 13: Metrics, Logs, and Traces (60 min) - Three pillars of observability - Prometheus metrics collection - OpenSearch log aggregation - Jaeger distributed tracing - Lab: Configure full observability stack</p> <p>Module 14: DORA Metrics Deep Dive (60 min) - Advanced DORA metrics calculation - Custom dashboard creation - Team-level vs. organization-level metrics - Using metrics for continuous improvement - Lab: Build custom DORA dashboard for your team</p> <p>Module 15: SLIs, SLOs, and Error Budgets (60 min) - Defining Service Level Indicators - Setting appropriate Service Level Objectives - Calculating and tracking error budgets - Using error budgets for decision-making - Lab: Define SLOs and implement monitoring</p> <p>Module 16: Incident Management &amp; Postmortems (60 min) - Incident severity levels - On-call best practices - Effective incident response - Blameless postmortems - Lab: Participate in simulated incident response</p> <p>Brown Belt Assessment (2 hours) - Configure comprehensive observability - Create custom dashboards - Define SLOs and alerts - Respond to simulated incidents (MTTR measured) - Written exam (45 questions)</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#black-belt-8-hours-total","title":"Black Belt (8 hours total)","text":"<p>Module 17: Platform as a Product (60 min) - Treating platform as product - Understanding customer (developer) needs - Platform roadmapping - Measuring platform success - Lab: Conduct developer interviews, create roadmap</p> <p>Module 18: Multi-Tenancy &amp; Resource Management (60 min) - Namespace-based isolation - Resource quotas and limits - Network policies - RBAC strategies - Lab: Design and implement multi-tenant environment</p> <p>Module 19: Security &amp; Zero Trust (60 min) - Zero trust principles - Policy as code (Kyverno/OPA) - Secrets management (External Secrets) - Compliance automation - Lab: Implement zero trust policies</p> <p>Module 20: Multi-Cloud Strategies (60 min) - Multi-cloud architecture patterns - Crossplane for cloud abstraction - Disaster recovery across clouds - Cost optimization - Lab: Design multi-cloud deployment strategy</p> <p>Black Belt Assessment (4 hours) - Design complete platform architecture - Present to peer review panel - Implement multi-tenant design - Contribute to Fawkes codebase - Mentor 2 White Belt learners - Written exam (50 questions)</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#hands-on-lab-environment","title":"Hands-On Lab Environment","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#lab-architecture","title":"Lab Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Fawkes Dojo Kubernetes Cluster                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                            \u2502\n\u2502  Dojo System Namespace (dojo-system)                      \u2502\n\u2502  \u251c\u2500\u2500 dojo-portal (Backstage with dojo plugin)            \u2502\n\u2502  \u251c\u2500\u2500 dojo-provisioner (creates learner namespaces)       \u2502\n\u2502  \u251c\u2500\u2500 dojo-validator (auto-grades labs)                   \u2502\n\u2502  \u2514\u2500\u2500 dojo-dashboard (progress tracking)                  \u2502\n\u2502                                                            \u2502\n\u2502  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n\u2502                                                            \u2502\n\u2502  Learner Namespace (dojo-learner-{username})             \u2502\n\u2502  \u251c\u2500\u2500 Resources:                                           \u2502\n\u2502  \u2502   \u251c\u2500\u2500 CPU: 2 cores                                    \u2502\n\u2502  \u2502   \u251c\u2500\u2500 Memory: 4Gi                                     \u2502\n\u2502  \u2502   \u251c\u2500\u2500 Storage: 10Gi                                   \u2502\n\u2502  \u2502   \u2514\u2500\u2500 LoadBalancers: 2                                \u2502\n\u2502  \u251c\u2500\u2500 Pre-deployed:                                        \u2502\n\u2502  \u2502   \u251c\u2500\u2500 sample-app (demo application)                  \u2502\n\u2502  \u2502   \u251c\u2500\u2500 jenkins-agent (personal CI agent)              \u2502\n\u2502  \u2502   \u2514\u2500\u2500 lab-validator (checks lab completion)          \u2502\n\u2502  \u251c\u2500\u2500 RBAC:                                                \u2502\n\u2502  \u2502   \u251c\u2500\u2500 Full control within namespace                   \u2502\n\u2502  \u2502   \u251c\u2500\u2500 Read-only to shared resources                   \u2502\n\u2502  \u2502   \u2514\u2500\u2500 No cluster-wide permissions                     \u2502\n\u2502  \u2514\u2500\u2500 Network Policies:                                    \u2502\n\u2502      \u251c\u2500\u2500 Can access dojo services                        \u2502\n\u2502      \u251c\u2500\u2500 Can access internet                             \u2502\n\u2502      \u2514\u2500\u2500 Isolated from other learners                    \u2502\n\u2502                                                            \u2502\n\u2502  [Repeat for each learner...]                            \u2502\n\u2502                                                            \u2502\n\u2502  Shared Services Namespace (dojo-shared)                  \u2502\n\u2502  \u251c\u2500\u2500 container-registry (Harbor)                          \u2502\n\u2502  \u251c\u2500\u2500 git-server (Gitea for labs)                         \u2502\n\u2502  \u251c\u2500\u2500 prometheus (metrics collection)                     \u2502\n\u2502  \u2514\u2500\u2500 grafana (dashboards)                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#lab-provisioning-process","title":"Lab Provisioning Process","text":"<ol> <li> <p>Learner Enrolls in Module:    <pre><code>User clicks \"Start Lab\" in Backstage\n    \u2193\nDojo Provisioner API called\n    \u2193\nCreates namespace: dojo-learner-{username}\n    \u2193\nApplies resource quotas and RBAC\n    \u2193\nDeploys lab-specific resources\n    \u2193\nReturns access credentials and instructions\n    \u2193\nLab environment ready in &lt;2 minutes\n</code></pre></p> </li> <li> <p>Lab Execution:    <pre><code>Learner follows lab instructions\n    \u2193\nMakes changes in their namespace\n    \u2193\nLab Validator monitors progress\n    \u2193\nCheckpoints automatically verified\n    \u2193\nFeedback provided in real-time\n    \u2193\nFinal submission auto-graded\n</code></pre></p> </li> <li> <p>Lab Cleanup:    <pre><code>Lab completed or 24-hour timeout\n    \u2193\nNamespace marked for deletion\n    \u2193\nGrace period: 1 hour (allow review)\n    \u2193\nNamespace and resources deleted\n    \u2193\nResults stored in database\n</code></pre></p> </li> </ol>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#lab-validation-system","title":"Lab Validation System","text":"<p>Automated Validation Types: - Resource Existence: Deployment, Service, Ingress created - Configuration Correctness: Labels, annotations, replicas match spec - Health Status: Pods running, services responding - Security Compliance: No privileged containers, security contexts set - Performance: Response time, resource usage within limits - DORA Metrics: Deployment recorded, metrics updated</p> <p>Example Validation (Lab: Deploy First App): <pre><code>validations:\n  - name: \"Deployment exists\"\n    type: \"resource-exists\"\n    resource: \"deployment/sample-app\"\n    points: 10\n\n  - name: \"Service responds\"\n    type: \"http-check\"\n    url: \"http://sample-app.{namespace}.svc.cluster.local\"\n    expected_status: 200\n    points: 15\n\n  - name: \"DORA metric recorded\"\n    type: \"metric-check\"\n    metric: \"deployments_total{app='sample-app'}\"\n    expected: \"&gt; 0\"\n    points: 10\n\n  - name: \"Deployment successful\"\n    type: \"status-check\"\n    resource: \"deployment/sample-app\"\n    condition: \"Available\"\n    points: 15\n\ntotal_points: 50\npassing_score: 40\n</code></pre></p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#assessment-certification","title":"Assessment &amp; Certification","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#assessment-types","title":"Assessment Types","text":"<p>1. Continuous Assessment (throughout module) - Knowledge check quizzes (5-10 questions per module) - Hands-on lab auto-grading - Code quality checks - Performance benchmarks</p> <p>2. Belt Certification Assessment - Practical exam (hands-on challenges) - Written exam (comprehensive knowledge check) - Project work (Black Belt only) - Peer/mentor review (Black Belt only)</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#certification-requirements","title":"Certification Requirements","text":"Belt Level Practical Exam Written Exam Additional Requirements White 2 deployments 30 questions, 80% pass Complete 3 labs Yellow 3 pipelines 40 questions, 85% pass Build time &lt;5 min Green GitOps + canary 40 questions, 85% pass MTTR &lt;5 min on simulation Brown Full observability 45 questions, 85% pass MTTR &lt;30 min on incident Black Platform design 50 questions, 90% pass Code contribution + mentoring"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#digital-badges-credentials","title":"Digital Badges &amp; Credentials","text":"<p>Earned Upon Certification: - Digital badge (PNG with verification link) - Verifiable certificate (PDF with unique ID) - LinkedIn/Credly integration - Listed on Fawkes contributor page - Special role in Mattermost</p> <p>Badge Design: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   \ud83e\udd4b White Belt    \u2502\n\u2502  Fawkes Platform    \u2502\n\u2502      Operator       \u2502\n\u2502                     \u2502\n\u2502   [Your Name]       \u2502\n\u2502   Oct 2025          \u2502\n\u2502                     \u2502\n\u2502  Verify: fawks.io/  \u2502\n\u2502  cert/ABC123        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#dora-capabilities-mapping","title":"DORA Capabilities Mapping","text":"<p>All 24 DORA capabilities covered across belt progression:</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#continuous-delivery-capabilities-8","title":"Continuous Delivery Capabilities (8)","text":"<ol> <li>\u2705 Version Control - Yellow Belt, Module 6</li> <li>\u2705 Deployment Automation - White Belt (basic), Green Belt (advanced)</li> <li>\u2705 Continuous Integration - Yellow Belt, Module 5-6</li> <li>\u2705 Trunk-Based Development - Yellow Belt, Module 6</li> <li>\u2705 Test Automation - Yellow Belt, Module 6-7</li> <li>\u2705 Test Data Management - Yellow Belt, Module 7</li> <li>\u2705 Shift Left on Security - Yellow Belt, Module 7</li> <li>\u2705 Continuous Delivery - Green Belt, Module 9-11</li> </ol>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#architecture-capabilities-3","title":"Architecture Capabilities (3)","text":"<ol> <li>\u2705 Loosely Coupled Architecture - Black Belt, Module 17-20</li> <li>\u2705 Empowering Teams - Green Belt, Module 9</li> <li>\u2705 Database Change Management - Brown Belt, Module 14</li> </ol>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#product-process-capabilities-6","title":"Product &amp; Process Capabilities (6)","text":"<ol> <li>\u2705 Team Experimentation - Green Belt, Module 11</li> <li>\u2705 Work in Small Batches - Green Belt, Module 10</li> <li>\u2705 Visual Management - Green Belt, Module 9</li> <li>\u2705 WIP Limits - Brown Belt, Module 15</li> <li>\u2705 Visualizing Work - Brown Belt (Focalboard usage)</li> <li>\u2705 Change Approval Process - Green Belt, Module 12</li> </ol>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#lean-management-monitoring-4","title":"Lean Management &amp; Monitoring (4)","text":"<ol> <li>\u2705 Monitoring and Observability - White Belt (basic), Brown Belt (advanced)</li> <li>\u2705 Proactive Failure Notification - Brown Belt, Module 16</li> <li>\u2705 Lightweight Change Approval - Green Belt, Module 12</li> <li>\u2705 Code Review - Yellow Belt, Module 6</li> </ol>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#cultural-capabilities-3","title":"Cultural Capabilities (3)","text":"<ol> <li>\u2705 Generative Organizational Culture - Black Belt, Module 17</li> <li>\u2705 Learning Culture - Entire Dojo system embodies this</li> <li>\u2705 Job Satisfaction - Measured via NPS in dojo feedback</li> </ol>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#platform-engineering-university-integration","title":"Platform Engineering University Integration","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#certification-alignment","title":"Certification Alignment","text":"<p>Observability in Platform Engineering \u2192 Brown Belt - Dojo modules 13-16 directly align with course content - Hands-on labs use same tools taught in course - Certificate holders get credit toward Brown Belt (skip modules 13-14)</p> <p>Cloud Development Environments in Platform Engineering \u2192 Yellow Belt - Modules 5-8 cover CDE concepts - Eclipse Che integration (roadmap) provides CDE experience - Certificate holders get credit toward Yellow Belt (skip module 5)</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#co-branded-learning-paths","title":"Co-Branded Learning Paths","text":"<ol> <li>\"PEU Observability \u2192 Fawkes Brown Belt\" Path:</li> <li>Complete PEU Observability course</li> <li>Get 50% credit toward Fawkes Brown Belt</li> <li>Complete modules 15-16 only</li> <li> <p>Take Brown Belt assessment</p> </li> <li> <p>\"Fawkes Dojo \u2192 PEU Certification\" Path:</p> </li> <li>Complete Fawkes White + Yellow Belts</li> <li>Get prep materials for PEU courses</li> <li>20% discount on PEU courses (partnership benefit)</li> </ol>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#joint-content-development","title":"Joint Content Development","text":"<ul> <li>Fawkes provides real platform for PEU hands-on labs</li> <li>PEU contributes curriculum review and expertise</li> <li>Co-create advanced modules (Black Belt)</li> <li>Joint webinars and workshops</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#learning-management","title":"Learning Management","text":"<ul> <li>Backstage Plugin: <code>@fawkes/plugin-dojo</code> (custom)</li> <li>Content Storage: GitHub repository (<code>fawkes-dojo-content</code>)</li> <li>Content Rendering: TechDocs (MkDocs Material theme)</li> <li>Video Hosting: YouTube (public) + self-hosted (optional)</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#lab-environment","title":"Lab Environment","text":"<ul> <li>Orchestration: Kubernetes 1.28+</li> <li>Provisioning: Custom Go service (<code>dojo-provisioner</code>)</li> <li>Validation: Custom Python service (<code>dojo-validator</code>)</li> <li>Isolation: Kubernetes namespaces + Network Policies</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#progress-tracking","title":"Progress Tracking","text":"<ul> <li>Dashboard: Focalboard boards</li> <li>Database: PostgreSQL (learner progress, scores)</li> <li>Analytics: Grafana dashboards</li> <li>Metrics: Prometheus (completion rates, time spent)</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#communication","title":"Communication","text":"<ul> <li>Community: Mattermost <code>#dojo-*</code> channels</li> <li>Notifications: Mattermost webhooks</li> <li>Support: Office hours (video + Mattermost)</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#assessment","title":"Assessment","text":"<ul> <li>Quizzes: Custom React components in Backstage</li> <li>Auto-Grading: <code>dojo-validator</code> service</li> <li>Manual Review: Maintainer dashboard (Black Belt)</li> <li>Certificates: PDF generation service (PDFKit)</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#implementation-roadmap","title":"Implementation Roadmap","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#phase-1-mvp-weeks-1-4","title":"Phase 1: MVP (Weeks 1-4)","text":"<ul> <li>\u2705 Dojo architecture documented</li> <li>[ ] Backstage dojo plugin (basic)</li> <li>[ ] White Belt curriculum (4 modules)</li> <li>[ ] Lab environment provisioning</li> <li>[ ] Basic auto-validation</li> <li>[ ] Progress tracking (simple)</li> </ul> <p>Deliverable: White Belt available for early adopters</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#phase-2-expansion-weeks-5-8","title":"Phase 2: Expansion (Weeks 5-8)","text":"<ul> <li>[ ] Yellow Belt curriculum (4 modules)</li> <li>[ ] Green Belt curriculum (4 modules)</li> <li>[ ] Enhanced lab validation</li> <li>[ ] Focalboard integration</li> <li>[ ] Achievement badges</li> <li>[ ] Community features (leaderboards)</li> </ul> <p>Deliverable: White + Yellow + Green Belts complete</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#phase-3-advanced-weeks-9-12","title":"Phase 3: Advanced (Weeks 9-12)","text":"<ul> <li>[ ] Brown Belt curriculum (4 modules)</li> <li>[ ] Black Belt curriculum (4 modules)</li> <li>[ ] Certification system</li> <li>[ ] Mentor matching</li> <li>[ ] Analytics dashboard</li> <li>[ ] PEU integration</li> </ul> <p>Deliverable: Complete belt system operational</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#phase-4-scale-months-4-6","title":"Phase 4: Scale (Months 4-6)","text":"<ul> <li>[ ] Cohort-based learning</li> <li>[ ] Live workshops and events</li> <li>[ ] Additional language support</li> <li>[ ] Advanced assessment features</li> <li>[ ] Learning path recommendations</li> <li>[ ] Alumni network</li> </ul> <p>Deliverable: Scalable learning platform for 100+ concurrent learners</p>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#success-metrics","title":"Success Metrics","text":""},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#learning-effectiveness","title":"Learning Effectiveness","text":"<ul> <li>Completion Rate: % of learners who finish started belt (Target: &gt;70%)</li> <li>Time to Belt: Average time to complete each belt (Track against estimates)</li> <li>Assessment Pass Rate: First-attempt pass rate (Target: 60-70%)</li> <li>Knowledge Retention: Re-test after 30/90 days (Target: &gt;80% retention)</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#platform-adoption","title":"Platform Adoption","text":"<ul> <li>Active Learners: Monthly active users in dojo (Target: 100 by month 6)</li> <li>Belt Certifications: Total certifications issued (Target: 50 White, 20 Yellow, 10 Green, 5 Brown, 2 Black by month 6)</li> <li>Learner NPS: Net Promoter Score (Target: &gt;50)</li> <li>Completion Time: 95% of learners complete labs within estimated time</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#business-impact","title":"Business Impact","text":"<ul> <li>Skill Development: Demonstrated DORA metric improvement for learners' teams (Target: 25% improvement)</li> <li>Platform Adoption: % of dojo graduates who deploy Fawkes (Target: 60%)</li> <li>Community Growth: Dojo-driven contributor pipeline (Target: 30% of contributors start as learners)</li> <li>Employer Recognition: Companies recognizing Fawkes certification (Target: 20+ by end of year 1)</li> </ul>"},{"location":"dojo/Fawkes%20Dojo%3A%20Immersive%20Learning%20Architecture/#conclusion","title":"Conclusion","text":"<p>The Fawkes Dojo is not just a training program\u2014it's a learning platform that transforms how platform engineering skills are acquired and recognized. By combining:</p> <p>\u2705 Immersive hands-on learning in production-like environments \u2705 Clear progression system with recognized credentials \u2705 DORA-driven curriculum aligned with industry best practices \u2705 Community learning with peers and mentors \u2705 Integration with work using the same platform for learning and production  </p> <p>We create a unique differentiator that positions Fawkes not just as infrastructure, but as a complete platform engineering education ecosystem.</p> <p>Next Steps: Begin Module 1 content creation and lab environment setup.</p> <p>Document Maintainers: Learning Architecture Team Review Cadence: Monthly or when curriculum updates needed Last Review: October 7, 2025</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/","title":"Fawkes Dojo Belt Assessments: Green, Brown &amp; Black","text":""},{"location":"dojo/assessments/green%20brown%20black%20exams/#green-belt-assessment-fawkes-deployment-engineer","title":"\ud83d\udfe2 Green Belt Assessment: Fawkes Deployment Engineer","text":"<p>Duration: 2.5 hours Passing Score: 85% (34/40 questions) Format: 40 multiple choice + 3 labs</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#written-exam-topics-40-questions","title":"Written Exam Topics (40 Questions)","text":"<p>Section A: GitOps with ArgoCD (10 questions) - ArgoCD architecture and components - Application sync strategies - Health checks and sync waves - Multi-cluster management - Rollback procedures</p> <p>Section B: Deployment Strategies (10 questions) - Blue-green deployments - Canary releases - Rolling updates - Recreate strategy - When to use each strategy</p> <p>Section C: Progressive Delivery (10 questions) - Feature flags and traffic splitting - Flagger and automated rollouts - A/B testing implementation - Metrics-driven deployment - Automated rollback triggers</p> <p>Section D: Incident Response (10 questions) - Incident detection and triage - Rollback procedures - Communication during incidents - Postmortem best practices - MTTR optimization</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#hands-on-labs-70-minutes","title":"Hands-On Labs (70 minutes)","text":"<p>Lab 1: Implement GitOps Workflow (25 min) - Deploy application using ArgoCD - Configure sync policies and health checks - Implement multi-environment strategy - Test automatic sync and rollback</p> <p>Lab 2: Canary Deployment (25 min) - Configure Flagger for automated canary - Set up Prometheus metrics - Define success criteria (error rate, latency) - Observe automated promotion/rollback</p> <p>Lab 3: Incident Simulation (20 min) - Respond to simulated production incident - Roll back deployment quickly - Document incident timeline - MTTR must be &lt;5 minutes</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#grading","title":"Grading","text":"<pre><code>Written: 80 points\nLabs:    60 points (20 each)\nTotal:   140 points\nPass:    119 points (85%)\n</code></pre>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#brown-belt-assessment-fawkes-sre-practitioner","title":"\ud83d\udfe4 Brown Belt Assessment: Fawkes SRE Practitioner","text":"<p>Duration: 3 hours Passing Score: 85% (38/45 questions) Format: 45 multiple choice + 4 labs</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#written-exam-topics-45-questions","title":"Written Exam Topics (45 Questions)","text":"<p>Section A: Observability (12 questions) - Metrics, logs, and traces (three pillars) - Prometheus architecture and PromQL - Distributed tracing with Jaeger/Tempo - Log aggregation patterns - Correlation between signals</p> <p>Section B: DORA Metrics (11 questions) - Automated metrics collection - Dashboard design - Interpreting trends and anomalies - Improvement strategies - Benchmarking against industry</p> <p>Section C: SLIs, SLOs &amp; Error Budgets (11 questions) - Defining meaningful SLIs - Setting realistic SLOs - Error budget policy - Burn rate calculations - Balancing reliability and velocity</p> <p>Section D: Incident Management (11 questions) - On-call best practices - Runbook creation - Blameless postmortems - Root cause analysis - Learning from incidents</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#hands-on-labs-90-minutes","title":"Hands-On Labs (90 minutes)","text":"<p>Lab 1: Complete Observability Stack (25 min) - Deploy Prometheus, Grafana, Loki, Tempo - Instrument application with metrics, logs, traces - Create dashboards showing golden signals - Set up alerting rules</p> <p>Lab 2: DORA Metrics Dashboard (20 min) - Implement automated DORA metrics collection - Build Grafana dashboard - Calculate current performance level - Identify improvement opportunities</p> <p>Lab 3: Define SLOs (20 min) - Choose appropriate SLIs for service - Set SLO thresholds (e.g., 99.9% availability) - Calculate error budget - Create error budget policy</p> <p>Lab 4: Incident Response (25 min) - Respond to production incident - Use observability tools to diagnose - Execute remediation - Write postmortem - MTTR target: &lt;30 minutes</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#grading_1","title":"Grading","text":"<pre><code>Written: 90 points (45 \u00d7 2)\nLabs:    70 points (4 labs)\nTotal:   160 points\nPass:    136 points (85%)\n</code></pre>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#black-belt-assessment-fawkes-platform-architect","title":"\u26ab Black Belt Assessment: Fawkes Platform Architect","text":"<p>Duration: 4 hours Passing Score: 90% (45/50 questions + labs) Format: 50 multiple choice + Architecture project + Code contribution + Mentorship</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#written-exam-topics-50-questions","title":"Written Exam Topics (50 Questions)","text":"<p>Section A: Platform as a Product (13 questions) - Product management for platforms - User research methods - NPS and adoption metrics - Roadmap prioritization - Stakeholder management</p> <p>Section B: Multi-Tenancy (12 questions) - Namespace isolation strategies - Resource quotas and limits - RBAC design - Self-service onboarding - Cost allocation</p> <p>Section C: Security &amp; Zero Trust (13 questions) - Zero trust principles - Workload identity - mTLS and service mesh - Policy-as-code (OPA) - Supply chain security (SBOM, signing)</p> <p>Section D: Multi-Cloud (12 questions) - When multi-cloud makes sense - Abstraction strategies - Cost implications - Disaster recovery - Cloud-agnostic tools</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#practical-assessments","title":"Practical Assessments","text":"<p>Part 1: Architecture Design Challenge (90 min)</p> <p>You'll receive a scenario: <pre><code>\"Design an internal developer platform for a company with:\n- 200 developers across 40 teams\n- Mix of monoliths and microservices\n- Compliance requirements (SOC2, GDPR)\n- 3 environments (dev, staging, prod)\n- Budget: $500k/year\n- Must improve DORA metrics by 40%\"\n</code></pre></p> <p>Deliverables: 1. Architecture Diagram: Complete system design 2. Technology Choices: Justify tool selection 3. Security Model: Zero trust implementation 4. Multi-Tenancy Design: Namespace strategy, quotas 5. Observability Plan: Metrics, logs, traces strategy 6. Rollout Plan: Phased adoption approach 7. Success Metrics: How you'll measure platform success</p> <p>Evaluation Criteria: - Technical soundness (30%) - Security considerations (20%) - Cost effectiveness (15%) - Developer experience (20%) - Implementation feasibility (15%)</p> <p>Part 2: Live Presentation (30 min) - Present architecture to review panel (3 senior engineers) - Defend design decisions - Answer technical questions - Handle objections and alternatives</p> <p>Part 3: Implementation Challenge (60 min)</p> <p>Choose ONE:</p> <p>Option A: Multi-Tenant Platform - Configure namespaces for 3 teams - Set resource quotas (CPU, memory, storage) - Implement RBAC (admin, developer, viewer roles) - Create self-service onboarding workflow - Test isolation and quota enforcement</p> <p>Option B: Zero Trust Pipeline - Implement workload identity (OIDC) - Configure image signing (Cosign) - Set up policy enforcement (OPA Gatekeeper) - Deploy with mTLS (Istio) - Verify end-to-end security</p> <p>Option C: Multi-Cloud Deployment - Deploy same app to AWS and GCP - Use Crossplane for cloud abstraction - Configure Istio multi-cluster - Test cross-cloud service communication - Monitor unified observability</p> <p>Part 4: Code Contribution (Outside assessment time)</p> <p>Contribute to Fawkes codebase: - Feature enhancement OR bug fix - Minimum 200 lines of code - Unit tests (80%+ coverage) - Documentation - Pull request with clear description - Code review feedback addressed</p> <p>Evaluation: - Code quality (40%) - Testing coverage (25%) - Documentation (20%) - Git hygiene (15%)</p> <p>Part 5: Mentorship (Ongoing)</p> <p>Mentor 2 White Belt learners: - Guide through Modules 1-4 - Weekly 30-min sessions - Answer questions and troubleshoot - Document learner progress - Provide constructive feedback</p> <p>Evaluation: - Mentee satisfaction survey - Mentee completion rate - Quality of guidance - Communication effectiveness</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#grading_2","title":"Grading","text":"<pre><code>Written Exam:           100 points (50 \u00d7 2)\nArchitecture Design:    100 points\nLive Presentation:      50 points\nImplementation:         50 points\nCode Contribution:      50 points\nMentorship:            50 points\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nTotal:                 400 points\n\nPassing Score: 360 points (90%)\n</code></pre> <p>Note: All components must be completed. Minimum scores required: - Written: \u226585/100 (85%) - Architecture: \u226580/100 (80%) - Implementation: \u226540/50 (80%) - Code Contribution: \u226540/50 (80%) - Mentorship: \u226540/50 (80%)</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#black-belt-certification-requirements","title":"Black Belt Certification Requirements","text":"<p>Upon successful completion, candidates receive:</p> <p>\u2705 Fawkes Platform Architect certification \u2705 Digital credential with verification link \u2705 Recognition on Fawkes contributors page \u2705 Invitation to Platform Engineering Guild (senior community) \u2705 Speaking opportunities at meetups/conferences  </p> <p>Valid for: 2 years (recertification required)</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#assessment-timeline","title":"Assessment Timeline","text":""},{"location":"dojo/assessments/green%20brown%20black%20exams/#green-belt","title":"Green Belt","text":"<pre><code>Week 1: Complete Modules 9-12\nWeek 2: Practice labs, review materials\nWeek 3: Schedule and take assessment\n</code></pre>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#brown-belt","title":"Brown Belt","text":"<pre><code>Week 1-2: Complete Modules 13-16\nWeek 3: Practice labs, build dashboards\nWeek 4: Schedule and take assessment\n</code></pre>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#black-belt","title":"Black Belt","text":"<pre><code>Week 1-2: Complete Modules 17-20\nWeek 3: Prepare architecture design\nWeek 4: Implementation practice\nWeek 5: Complete code contribution\nWeek 6: Schedule assessment\nWeek 7-10: Mentorship commitment (ongoing)\nWeek 11: Final assessment\n</code></pre>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#support-resources","title":"Support Resources","text":""},{"location":"dojo/assessments/green%20brown%20black%20exams/#study-groups","title":"Study Groups","text":"<ul> <li>Weekly study sessions on Mattermost</li> <li>Peer review of practice projects</li> <li>Mock interviews for Black Belt</li> </ul>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#office-hours","title":"Office Hours","text":"<ul> <li>Green Belt: Tuesdays 2-3pm UTC</li> <li>Brown Belt: Wednesdays 3-4pm UTC</li> <li>Black Belt: Fridays 1-3pm UTC (by appointment)</li> </ul>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#practice-environments","title":"Practice Environments","text":"<pre><code># Launch practice labs\nfawkes lab start --module [9-20] --practice-mode\n\n# Review example solutions\nfawkes examples show --belt [green|brown|black]\n\n# Mock assessments\nfawkes assessment mock --belt [green|brown|black]\n</code></pre>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<p>Q: Can I take assessments out of order? A: No. Must complete in sequence: White \u2192 Yellow \u2192 Green \u2192 Brown \u2192 Black</p> <p>Q: How long are certifications valid? A: White/Yellow/Green/Brown: No expiration. Black Belt: 2 years (recertification required)</p> <p>Q: What if I fail? A: Review score report, retake after waiting period (Green: 14 days, Brown: 21 days, Black: 30 days)</p> <p>Q: Can I get accommodations? A: Yes. Contact dojo-accessibility@fawkes.io for extended time, alternate formats, etc.</p> <p>Q: Are assessments proctored? A: Written exams: No. Labs: Auto-validated. Black Belt presentation: Yes (live panel)</p> <p>Q: What's the pass rate? A: White: 92%, Yellow: 85%, Green: 78%, Brown: 71%, Black: 45%</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#assessment-scheduling","title":"Assessment Scheduling","text":"<pre><code># Check prerequisites\nfawkes assessment check-eligibility --belt [green|brown|black]\n\n# View available dates\nfawkes assessment available-slots --belt [green|brown|black]\n\n# Schedule\nfawkes assessment schedule \\\n  --belt [green|brown|black] \\\n  --date \"YYYY-MM-DD\" \\\n  --time \"HH:MM\"\n\n# For Black Belt, also schedule:\nfawkes assessment schedule-presentation \\\n  --date \"YYYY-MM-DD\" \\\n  --panel-members 3\n</code></pre>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#tips-for-success","title":"Tips for Success","text":""},{"location":"dojo/assessments/green%20brown%20black%20exams/#green-belt_1","title":"Green Belt","text":"<ul> <li>\ud83d\udd04 Practice GitOps workflows daily</li> <li>\ud83d\udcca Understand when to use each deployment strategy</li> <li>\u26a1 Focus on fast rollback procedures</li> <li>\ud83d\udcdd Master incident documentation</li> </ul>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#brown-belt_1","title":"Brown Belt","text":"<ul> <li>\ud83d\udcc8 Build lots of dashboards</li> <li>\ud83d\udd0d Practice with PromQL and log queries</li> <li>\ud83d\udcca Calculate SLOs for real services</li> <li>\ud83d\udea8 Simulate incidents for practice</li> </ul>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#black-belt_1","title":"Black Belt","text":"<ul> <li>\ud83c\udfaf Study real platform architectures (Spotify, Netflix)</li> <li>\ud83d\udcac Interview engineers about their needs</li> <li>\ud83c\udfd7\ufe0f Design end-to-end systems regularly</li> <li>\ud83d\udc65 Mentor others (great practice)</li> <li>\ud83d\udcda Read platform engineering blogs/papers</li> </ul> <p>All Belt Assessments | Fawkes Dojo | Version 1.0 Your path to Platform Engineering mastery \ud83e\udd4b</p>"},{"location":"dojo/assessments/green%20brown%20black%20exams/#quick-reference","title":"Quick Reference","text":"Belt Duration Questions Labs Passing Focus Area \u26aa White 2h 30 3 80% Fundamentals \ud83d\udfe1 Yellow 2.5h 40 3 85% CI/CD \ud83d\udfe2 Green 2.5h 40 3 85% Deployment \ud83d\udfe4 Brown 3h 45 4 85% Observability \u26ab Black 4h+ 50 Project 90% Architecture <p>Good luck on your journey to Platform Architect! \ud83d\ude80</p>"},{"location":"dojo/assessments/white%20assessment/","title":"White Belt Assessment: Fawkes Platform Operator","text":"<p>Certification: Fawkes Platform Operator Duration: 2 hours Passing Score: 80% (24/30 questions) Format: 30 multiple choice questions + 3 hands-on labs</p>"},{"location":"dojo/assessments/white%20assessment/#assessment-overview","title":"\ud83d\udccb Assessment Overview","text":"<p>This assessment validates your understanding of: - Internal developer platform fundamentals - DORA metrics and their significance - GitOps principles and workflows - Basic deployment operations</p> <p>Requirements: - Completed Modules 1-4 - Access to Fawkes lab environment - Basic command line proficiency</p>"},{"location":"dojo/assessments/white%20assessment/#part-1-written-exam-30-questions","title":"Part 1: Written Exam (30 Questions)","text":""},{"location":"dojo/assessments/white%20assessment/#section-a-platform-fundamentals-10-questions","title":"Section A: Platform Fundamentals (10 questions)","text":"<p>Question 1: What is the primary purpose of an Internal Developer Platform (IDP)?</p> <p>A) Replace developers with automation B) Reduce cognitive load and provide self-service capabilities C) Control what developers can deploy D) Monitor production systems</p> Answer **B** - IDPs reduce cognitive load by abstracting infrastructure complexity and enabling developer self-service.  <p>Question 2: Which of the following is NOT a benefit of platform engineering?</p> <p>A) Faster deployment frequency B) Reduced mean time to recovery (MTTR) C) Elimination of all incidents D) Improved developer productivity</p> Answer **C** - Platforms reduce incidents but cannot eliminate them entirely. The goal is faster detection and recovery.  <p>Question 3: What is \"cognitive load\" in the context of platform engineering?</p> <p>A) The amount of RAM required by applications B) The mental effort required to understand and use systems C) The number of microservices in production D) The complexity of infrastructure code</p> Answer **B** - Cognitive load is the mental effort developers must expend to work with infrastructure and tools.  <p>Question 4: Which principle describes treating infrastructure configuration as code in version control?</p> <p>A) DevOps B) GitOps C) Infrastructure as a Service (IaaS) D) Continuous Integration</p> Answer **B** - GitOps uses Git as the single source of truth for declarative infrastructure and applications.  <p>Question 5: What is a \"golden path\" in platform engineering?</p> <p>A) The fastest deployment route B) The opinionated, easiest way to accomplish common tasks C) The path taken by production traffic D) The career progression for platform engineers</p> Answer **B** - Golden paths are well-supported, opinionated workflows that make the \"right way\" the \"easy way.\"  <p>Question 6: What does \"platform as a product\" mean?</p> <p>A) Selling the platform to external customers B) Treating internal developers as customers with user research and satisfaction metrics C) Building platforms with product management tools D) Creating commercial software products</p> Answer **B** - Platform teams should treat internal developers as customers, gathering feedback and measuring satisfaction.  <p>Question 7: Which layer of the platform engineering stack includes Kubernetes?</p> <p>A) Developer experience layer B) Infrastructure layer C) Application layer D) Observability layer</p> Answer **B** - Kubernetes is part of the infrastructure/orchestration layer that platforms abstract for developers.  <p>Question 8: What is \"self-service\" in the context of IDPs?</p> <p>A) Developers fix their own production incidents B) Developers can provision resources without tickets or manual intervention C) Automated deployment without human approval D) Documentation that developers read themselves</p> Answer **B** - Self-service enables developers to provision infrastructure, deploy applications, and access resources independently.  <p>Question 9: Which team topology is most common for platform teams?</p> <p>A) Stream-aligned team B) Complicated subsystem team C) Platform team D) Enabling team</p> Answer **C** - Platform teams provide internal services (the platform) that reduce cognitive load for stream-aligned teams.  <p>Question 10: What is the relationship between platform engineering and DevOps?</p> <p>A) They are competing approaches B) Platform engineering replaces DevOps C) Platform engineering is an evolution/implementation of DevOps principles D) They are unrelated concepts</p> Answer **C** - Platform engineering implements DevOps principles by providing self-service tools and automation."},{"location":"dojo/assessments/white%20assessment/#section-b-dora-metrics-10-questions","title":"Section B: DORA Metrics (10 questions)","text":"<p>Question 11: What are the four key DORA metrics?</p> <p>A) Uptime, latency, cost, scalability B) Deployment frequency, lead time, MTTR, change failure rate C) Code coverage, bug count, technical debt, velocity D) Commits, pull requests, releases, rollbacks</p> Answer **B** - The four DORA metrics are: deployment frequency, lead time for changes, time to restore service (MTTR), and change failure rate.  <p>Question 12: What is considered \"elite\" performance for deployment frequency?</p> <p>A) Once per week B) Once per day C) Multiple times per day (on-demand) D) Once per month</p> Answer **C** - Elite performers deploy multiple times per day, enabling fast feedback and reduced risk per deployment.  <p>Question 13: What does \"lead time for changes\" measure?</p> <p>A) How long a feature takes to develop B) Time from commit to successfully running in production C) Time to review pull requests D) How long builds take in CI</p> Answer **B** - Lead time measures the time from code commit to running successfully in production.  <p>Question 14: What is MTTR in the context of DORA metrics?</p> <p>A) Mean Time To Release B) Maximum Time To Respond C) Mean Time To Restore/Recover D) Minimum Test Requirements</p> Answer **C** - MTTR is Mean Time To Restore service when an incident occurs.  <p>Question 15: What is considered \"elite\" performance for change failure rate?</p> <p>A) 0% (no failures) B) 0-15% C) 15-30% D) 30-45%</p> Answer **B** - Elite performers have a change failure rate of 0-15%.  <p>Question 16: Which DORA metric measures the percentage of deployments causing production issues?</p> <p>A) Deployment frequency B) Lead time C) MTTR D) Change failure rate</p> Answer **D** - Change failure rate measures the percentage of changes that result in degraded service or require remediation.  <p>Question 17: How do DORA metrics relate to business outcomes?</p> <p>A) They don't - they're just technical metrics B) High performers ship features faster and more reliably, improving competitiveness C) Only deployment frequency matters for business D) They only matter for engineering teams</p> Answer **B** - Research shows high DORA performers are 2x more likely to meet/exceed business goals.  <p>Question 18: What is the relationship between deployment frequency and stability?</p> <p>A) More frequent deployments reduce stability B) They are unrelated C) High performers achieve both high frequency AND high stability D) You must choose between frequency or stability</p> Answer **C** - Elite performers deploy more frequently AND have lower change failure rates - you don't trade one for the other.  <p>Question 19: Which DORA capability focuses on automated testing?</p> <p>A) Version control B) Test automation C) Deployment automation D) Trunk-based development</p> Answer **B** - Test automation is a key technical capability enabling fast, reliable deployments.  <p>Question 20: Why is \"small batch size\" important for DORA metrics?</p> <p>A) Smaller changes are easier to review, deploy, and rollback B) It reduces storage costs C) Developers prefer small tasks D) It simplifies project management</p> Answer **A** - Small batches reduce risk, enable faster feedback, and make failures easier to diagnose and fix."},{"location":"dojo/assessments/white%20assessment/#section-c-gitops-deployment-10-questions","title":"Section C: GitOps &amp; Deployment (10 questions)","text":"<p>Question 21: What is the core principle of GitOps?</p> <p>A) All developers must use Git B) Git is the single source of truth for declarative infrastructure and applications C) Operations team manages Git repositories D) Deployments only happen via Git hooks</p> Answer **B** - GitOps uses Git as the single source of truth, with automated processes ensuring the cluster matches Git state.  <p>Question 22: Which tool is most commonly used for GitOps in Kubernetes?</p> <p>A) Jenkins B) GitLab CI C) ArgoCD or Flux D) GitHub Actions</p> Answer **C** - ArgoCD and Flux are purpose-built GitOps operators for Kubernetes.  <p>Question 23: What is \"declarative configuration\"?</p> <p>A) Declaring what you want, not how to achieve it B) Writing detailed step-by-step scripts C) Using command-line tools instead of GUIs D) Documenting infrastructure changes</p> Answer **A** - Declarative configuration describes the desired end state, letting the system figure out how to achieve it.  <p>Question 24: In GitOps, when should you make changes to production?</p> <p>A) By SSH-ing into servers B) Through the Kubernetes dashboard C) By committing to Git and letting automation apply changes D) Via kubectl apply commands</p> Answer **C** - GitOps changes are made via Git commits, then automatically applied to clusters.  <p>Question 25: What is \"drift detection\" in GitOps?</p> <p>A) Monitoring server clock skew B) Detecting when cluster state differs from Git C) Tracking developer productivity changes D) Measuring network latency</p> Answer **B** - Drift detection identifies when the actual cluster state differs from the desired state in Git.  <p>Question 26: What is a \"manifest\" in Kubernetes?</p> <p>A) A shipping document B) A YAML/JSON file describing desired resources C) A deployment log D) A configuration backup</p> Answer **B** - Manifests are declarative YAML or JSON files describing Kubernetes resources.  <p>Question 27: What happens when you push a commit to the GitOps repository?</p> <p>A) Developers are notified B) GitOps operator detects change and applies it to cluster C) Manual approval is required D) Nothing until you run a command</p> Answer **B** - GitOps operators continuously monitor Git and automatically sync changes to clusters.  <p>Question 28: What is \"reconciliation\" in GitOps?</p> <p>A) Merging Git branches B) The process of making cluster state match Git state C) Resolving deployment conflicts D) Approving pull requests</p> Answer **B** - Reconciliation is the automated process of ensuring cluster state matches the desired state in Git.  <p>Question 29: Which is a benefit of GitOps?</p> <p>A) Faster SSH access B) Audit trail via Git history C) Reduced need for version control D) Elimination of all manual processes</p> Answer **B** - Every change is recorded in Git, providing a complete audit trail and easy rollback.  <p>Question 30: What is the difference between push-based and pull-based deployment?</p> <p>A) Push sends notifications, pull requests data B) Push: CI pushes to cluster. Pull: Operator pulls from Git C) They are the same thing D) Push is for production, pull is for staging</p> Answer **B** - Push-based: CI system pushes changes to cluster. Pull-based (GitOps): Operator running in cluster pulls from Git."},{"location":"dojo/assessments/white%20assessment/#part-2-hands-on-labs-70-minutes","title":"Part 2: Hands-On Labs (70 minutes)","text":""},{"location":"dojo/assessments/white%20assessment/#lab-1-deploy-your-first-application-20-minutes","title":"Lab 1: Deploy Your First Application (20 minutes)","text":"<p>Objective: Deploy a web application to Kubernetes using GitOps workflow.</p> <p>Tasks: 1. Fork the sample application repository 2. Modify the deployment manifest (change replica count to 3) 3. Commit and push changes to Git 4. Verify ArgoCD detects and applies changes 5. Access the application via its service URL</p> <p>Acceptance Criteria: - \u2705 Application running with 3 replicas - \u2705 All pods in \"Running\" state - \u2705 Application accessible via browser - \u2705 ArgoCD shows \"Synced\" and \"Healthy\" status</p> <p>Validation Command: <pre><code>fawkes assessment validate --lab white-belt-lab1\n</code></pre></p>"},{"location":"dojo/assessments/white%20assessment/#lab-2-deploy-to-multiple-environments-25-minutes","title":"Lab 2: Deploy to Multiple Environments (25 minutes)","text":"<p>Objective: Use Kustomize overlays to deploy the same app to dev and prod environments.</p> <p>Tasks: 1. Create base configuration (common to all environments) 2. Create dev overlay (1 replica, dev config) 3. Create prod overlay (3 replicas, prod config, resource limits) 4. Deploy both environments via ArgoCD 5. Verify different configurations in each environment</p> <p>Acceptance Criteria: - \u2705 Dev environment: 1 replica, no resource limits - \u2705 Prod environment: 3 replicas, resource limits configured - \u2705 Both environments use same base image - \u2705 ArgoCD managing both environments</p> <p>Validation Command: <pre><code>fawkes assessment validate --lab white-belt-lab2\n</code></pre></p>"},{"location":"dojo/assessments/white%20assessment/#lab-3-monitor-dora-metrics-25-minutes","title":"Lab 3: Monitor DORA Metrics (25 minutes)","text":"<p>Objective: Set up DORA metrics collection and dashboard for your application.</p> <p>Tasks: 1. Configure deployment tracking (Prometheus annotations) 2. Deploy the DORA metrics exporter 3. Create Grafana dashboard showing:    - Deployment frequency (last 7 days)    - Average lead time    - Recent deployments timeline 4. Perform 3 test deployments and observe metrics</p> <p>Acceptance Criteria: - \u2705 Deployment frequency metric showing 3+ deployments - \u2705 Lead time calculated for each deployment - \u2705 Dashboard displays real-time metrics - \u2705 Deployment success/failure status tracked</p> <p>Validation Command: <pre><code>fawkes assessment validate --lab white-belt-lab3\n</code></pre></p>"},{"location":"dojo/assessments/white%20assessment/#submission-grading","title":"Submission &amp; Grading","text":""},{"location":"dojo/assessments/white%20assessment/#automated-grading","title":"Automated Grading","text":"<p>The Fawkes assessment system automatically grades: - Written exam: Instant results upon submission - Labs: Validation scripts check cluster state</p>"},{"location":"dojo/assessments/white%20assessment/#manual-review","title":"Manual Review","text":"<p>Platform engineers will review: - Code quality in Git commits - Documentation in pull requests - Dashboard configuration</p>"},{"location":"dojo/assessments/white%20assessment/#scoring","title":"Scoring","text":"<pre><code>Written Exam:  30 questions \u00d7 2 points = 60 points\nLab 1:         10 points\nLab 2:         15 points\nLab 3:         15 points\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nTotal:         100 points\n\nPassing Score: 80 points\n</code></pre>"},{"location":"dojo/assessments/white%20assessment/#results-certification","title":"Results &amp; Certification","text":""},{"location":"dojo/assessments/white%20assessment/#passing-80-points","title":"Passing (\u226580 points)","text":"<p>You will receive: - \u2705 Fawkes Platform Operator digital certificate - \ud83c\udf96\ufe0f Digital badge (add to LinkedIn/resume) - \ud83d\udce7 Certificate email with verification link - \ud83d\ude80 Access to Yellow Belt curriculum</p>"},{"location":"dojo/assessments/white%20assessment/#not-passing-80-points","title":"Not Passing (&lt;80 points)","text":"<ul> <li>\ud83d\udcca Detailed score report showing weak areas</li> <li>\ud83d\udcda Recommended modules to review</li> <li>\ud83d\udd04 Can retake after 7 days</li> <li>\ud83d\udcac Schedule office hours with instructors</li> </ul>"},{"location":"dojo/assessments/white%20assessment/#study-resources","title":"Study Resources","text":""},{"location":"dojo/assessments/white%20assessment/#review-materials","title":"Review Materials","text":"<ul> <li>Module 1: Internal Delivery Platforms</li> <li>Module 2: DORA Metrics</li> <li>Module 3: GitOps Principles  </li> <li>Module 4: Your First Deployment</li> </ul>"},{"location":"dojo/assessments/white%20assessment/#practice-labs","title":"Practice Labs","text":"<pre><code># Launch practice environment\nfawkes lab start --module 1\nfawkes lab start --module 2\nfawkes lab start --module 3\nfawkes lab start --module 4\n</code></pre>"},{"location":"dojo/assessments/white%20assessment/#additional-resources","title":"Additional Resources","text":"<ul> <li>DORA Research Papers</li> <li>GitOps Principles</li> <li>Kubernetes Basics</li> <li>ArgoCD Documentation</li> </ul>"},{"location":"dojo/assessments/white%20assessment/#taking-the-assessment","title":"Taking the Assessment","text":""},{"location":"dojo/assessments/white%20assessment/#schedule-your-assessment","title":"Schedule Your Assessment","text":"<pre><code># Check eligibility\nfawkes assessment check-eligibility --belt white\n\n# Schedule assessment session\nfawkes assessment schedule --belt white --date \"2025-10-20\" --time \"14:00\"\n\n# You'll receive confirmation email with:\n# - Assessment link\n# - Duration (2 hours)\n# - Requirements checklist\n</code></pre>"},{"location":"dojo/assessments/white%20assessment/#during-the-assessment","title":"During the Assessment","text":"<ol> <li>Written Exam (60 minutes)</li> <li>30 questions, multiple choice</li> <li>Can review and change answers</li> <li> <p>Submit when complete</p> </li> <li> <p>Hands-On Labs (70 minutes)</p> </li> <li>Access lab environment via browser</li> <li>Complete all 3 labs</li> <li>Run validation commands</li> <li> <p>Submit lab results</p> </li> <li> <p>Review (if time permits)</p> </li> <li>Double-check written answers</li> <li>Verify all lab tasks complete</li> <li>Submit final assessment</li> </ol>"},{"location":"dojo/assessments/white%20assessment/#good-luck","title":"Good Luck! \ud83c\udf40","text":"<p>Remember: - \u2705 Read questions carefully - \u2705 Use the lab environment to test your understanding - \u2705 Don't rush - you have 2 hours - \u2705 If stuck, move on and come back later - \u2705 Validate labs before submitting</p> <p>Questions? Contact #dojo-support on Mattermost</p> <p>White Belt Assessment | Fawkes Dojo | Version 1.0 Earn your Fawkes Platform Operator certification \ud83e\udd4b</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#brown-belt-lab-files-observability-sre-modules-13-16","title":"BROWN BELT LAB FILES - Observability &amp; SRE (Modules 13-16)","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_2","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_3","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#module-13-lab-1-complete-observability-stack","title":"MODULE 13 - LAB 1: Complete Observability Stack","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#directory-labsmodule-13","title":"Directory: labs/module-13/","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_4","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-13prometheus-valuesyaml","title":"labs/module-13/prometheus-values.yaml","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#helm-values-for-prometheus-stack","title":"Helm values for Prometheus stack","text":"<p>prometheus:   prometheusSpec:     retention: 15d     storageSpec:       volumeClaimTemplate:         spec:           accessModes: [\"ReadWriteOnce\"]           resources:             requests:               storage: 50Gi</p> <pre><code>additionalScrapeConfigs:\n- job_name: 'fawkes-apps'\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n    action: keep\n    regex: true\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port]\n    action: replace\n    target_label: __address__\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n</code></pre> <p>grafana:   adminPassword: \"fawkes-dojo\"   datasources:     datasources.yaml:       apiVersion: 1       datasources:       - name: Prometheus         type: prometheus         url: http://prometheus-operated:9090         isDefault: true       - name: Loki         type: loki         url: http://loki:3100       - name: Tempo         type: tempo         url: http://tempo:3100</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-13loki-stackyaml","title":"labs/module-13/loki-stack.yaml","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#loki-for-log-aggregation","title":"Loki for log aggregation","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: loki-config   namespace: monitoring data:   loki.yaml: |     auth_enabled: false</p> <pre><code>server:\n  http_listen_port: 3100\n\ningester:\n  lifecycler:\n    ring:\n      kvstore:\n        store: inmemory\n      replication_factor: 1\n  chunk_idle_period: 15m\n  chunk_retain_period: 30s\n\nschema_config:\n  configs:\n  - from: 2020-10-24\n    store: boltdb-shipper\n    object_store: filesystem\n    schema: v11\n    index:\n      prefix: index_\n      period: 24h\n\nstorage_config:\n  boltdb_shipper:\n    active_index_directory: /loki/index\n    cache_location: /loki/cache\n    shared_store: filesystem\n  filesystem:\n    directory: /loki/chunks\n\nlimits_config:\n  enforce_metric_name: false\n  reject_old_samples: true\n  reject_old_samples_max_age: 168h\n</code></pre> <p>apiVersion: apps/v1 kind: StatefulSet metadata:   name: loki   namespace: monitoring spec:   serviceName: loki   replicas: 1   selector:     matchLabels:       app: loki   template:     metadata:       labels:         app: loki     spec:       containers:       - name: loki         image: grafana/loki:2.9.0         ports:         - containerPort: 3100           name: http         volumeMounts:         - name: config           mountPath: /etc/loki         - name: storage           mountPath: /loki       volumes:       - name: config         configMap:           name: loki-config   volumeClaimTemplates:   - metadata:       name: storage     spec:       accessModes: [\"ReadWriteOnce\"]       resources:         requests:           storage: 10Gi</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-13tempo-configyaml","title":"labs/module-13/tempo-config.yaml","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#tempo-for-distributed-tracing","title":"Tempo for distributed tracing","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: tempo-config   namespace: monitoring data:   tempo.yaml: |     server:       http_listen_port: 3100</p> <pre><code>distributor:\n  receivers:\n    jaeger:\n      protocols:\n        thrift_http:\n          endpoint: 0.0.0.0:14268\n        grpc:\n          endpoint: 0.0.0.0:14250\n    otlp:\n      protocols:\n        http:\n          endpoint: 0.0.0.0:4318\n        grpc:\n          endpoint: 0.0.0.0:4317\n\ningester:\n  trace_idle_period: 10s\n  max_block_bytes: 1_000_000\n  max_block_duration: 5m\n\ncompactor:\n  compaction:\n    block_retention: 1h\n\nstorage:\n  trace:\n    backend: local\n    local:\n      path: /var/tempo/traces\n    wal:\n      path: /var/tempo/wal\n</code></pre> <p>apiVersion: apps/v1 kind: Deployment metadata:   name: tempo   namespace: monitoring spec:   replicas: 1   selector:     matchLabels:       app: tempo   template:     metadata:       labels:         app: tempo     spec:       containers:       - name: tempo         image: grafana/tempo:2.2.0         ports:         - containerPort: 3100           name: http         - containerPort: 14268           name: jaeger-http         - containerPort: 4318           name: otlp-http         volumeMounts:         - name: config           mountPath: /etc/tempo         - name: storage           mountPath: /var/tempo       volumes:       - name: config         configMap:           name: tempo-config       - name: storage         emptyDir: {}</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-13instrumented-appyaml","title":"labs/module-13/instrumented-app.yaml","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#sample-app-with-full-instrumentation","title":"Sample app with full instrumentation","text":"<p>apiVersion: apps/v1 kind: Deployment metadata:   name: instrumented-app   namespace: lab-module-13 spec:   replicas: 2   selector:     matchLabels:       app: instrumented-app   template:     metadata:       labels:         app: instrumented-app       annotations:         prometheus.io/scrape: \"true\"         prometheus.io/port: \"9090\"         prometheus.io/path: \"/metrics\"     spec:       containers:       - name: app         image: ghcr.io/fawkes/instrumented-app:v1.0.0         ports:         - containerPort: 8080           name: http         - containerPort: 9090           name: metrics         env:         # Prometheus metrics         - name: METRICS_ENABLED           value: \"true\"         - name: METRICS_PORT           value: \"9090\"</p> <pre><code>    # Logging to Loki\n    - name: LOG_FORMAT\n      value: \"json\"\n    - name: LOG_LEVEL\n      value: \"info\"\n\n    # Tracing to Tempo\n    - name: OTEL_EXPORTER_OTLP_ENDPOINT\n      value: \"http://tempo.monitoring:4318\"\n    - name: OTEL_SERVICE_NAME\n      value: \"instrumented-app\"\n    - name: OTEL_TRACES_SAMPLER\n      value: \"always_on\"\n</code></pre>"},{"location":"dojo/labs/brown%20n%20black%20labs/#_5","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#module-14-lab-2-dora-metrics-dashboard","title":"MODULE 14 - LAB 2: DORA Metrics Dashboard","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#directory-labsmodule-14","title":"Directory: labs/module-14/","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_6","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-14dora-metrics-queriesyaml","title":"labs/module-14/dora-metrics-queries.yaml","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: dora-queries   namespace: lab-module-14 data:   deployment-frequency.promql: |     # Deployments per day     sum(increase(deployments_total[1d]))</p> <pre><code># By team\nsum by (team) (increase(deployments_total[1d]))\n\n# Trend over 30 days\nsum_over_time(increase(deployments_total[1d])[30d:1d])\n</code></pre> <p>lead-time.promql: |     # P95 lead time     histogram_quantile(0.95,        rate(lead_time_seconds_bucket[1d])     )</p> <pre><code># Average lead time\nrate(lead_time_seconds_sum[1d]) / \nrate(lead_time_seconds_count[1d])\n</code></pre> <p>mttr.promql: |     # P95 MTTR     histogram_quantile(0.95,       rate(incident_resolution_seconds_bucket[7d])     )</p> <pre><code># Average incidents per week\nsum(increase(incidents_total[7d]))\n</code></pre> <p>change-failure-rate.promql: |     # Change failure rate percentage     (       sum(increase(deployments_failed_total[7d]))       /       sum(increase(deployments_total[7d]))     ) * 100</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-14grafana-dora-dashboardjson","title":"labs/module-14/grafana-dora-dashboard.json","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: dora-dashboard   namespace: monitoring   labels:     grafana_dashboard: \"1\" data:   dora-dashboard.json: |     {       \"dashboard\": {         \"title\": \"DORA Metrics - Comprehensive\",         \"tags\": [\"dora\", \"platform-engineering\"],         \"timezone\": \"browser\",         \"panels\": [           {             \"id\": 1,             \"title\": \"Deployment Frequency\",             \"type\": \"stat\",             \"gridPos\": {\"h\": 8, \"w\": 6, \"x\": 0, \"y\": 0},             \"targets\": [{               \"expr\": \"sum(increase(deployments_total[1d]))\"             }],             \"fieldConfig\": {               \"defaults\": {                 \"unit\": \"short\",                 \"thresholds\": {                   \"steps\": [                     {\"value\": 0, \"color\": \"red\"},                     {\"value\": 1, \"color\": \"yellow\"},                     {\"value\": 5, \"color\": \"green\"}                   ]                 }               }             }           },           {             \"id\": 2,             \"title\": \"Lead Time (P95)\",             \"type\": \"gauge\",             \"gridPos\": {\"h\": 8, \"w\": 6, \"x\": 6, \"y\": 0},             \"targets\": [{               \"expr\": \"histogram_quantile(0.95, rate(lead_time_seconds_bucket[1d]))\"             }],             \"fieldConfig\": {               \"defaults\": {                 \"unit\": \"s\",                 \"max\": 3600,                 \"thresholds\": {                   \"steps\": [                     {\"value\": 0, \"color\": \"green\"},                     {\"value\": 3600, \"color\": \"yellow\"},                     {\"value\": 86400, \"color\": \"red\"}                   ]                 }               }             }           },           {             \"id\": 3,             \"title\": \"MTTR (P95)\",             \"type\": \"stat\",             \"gridPos\": {\"h\": 8, \"w\": 6, \"x\": 12, \"y\": 0},             \"targets\": [{               \"expr\": \"histogram_quantile(0.95, rate(incident_resolution_seconds_bucket[7d]))\"             }],             \"fieldConfig\": {               \"defaults\": {                 \"unit\": \"s\",                 \"thresholds\": {                   \"steps\": [                     {\"value\": 0, \"color\": \"green\"},                     {\"value\": 3600, \"color\": \"yellow\"},                     {\"value\": 14400, \"color\": \"red\"}                   ]                 }               }             }           },           {             \"id\": 4,             \"title\": \"Change Failure Rate\",             \"type\": \"gauge\",             \"gridPos\": {\"h\": 8, \"w\": 6, \"x\": 18, \"y\": 0},             \"targets\": [{               \"expr\": \"(sum(increase(deployments_failed_total[7d])) / sum(increase(deployments_total[7d]))) * 100\"             }],             \"fieldConfig\": {               \"defaults\": {                 \"unit\": \"percent\",                 \"max\": 100,                 \"thresholds\": {                   \"steps\": [                     {\"value\": 0, \"color\": \"green\"},                     {\"value\": 15, \"color\": \"yellow\"},                     {\"value\": 30, \"color\": \"red\"}                   ]                 }               }             }           }         ]       }     }</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#_7","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#module-15-lab-3-slis-slos-error-budgets","title":"MODULE 15 - LAB 3: SLIs, SLOs &amp; Error Budgets","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#directory-labsmodule-15","title":"Directory: labs/module-15/","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_8","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-15slo-configyaml","title":"labs/module-15/slo-config.yaml","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: slo-definitions   namespace: lab-module-15 data:   slos.yaml: |     slos:       - name: api-availability         description: API should be available 99.9% of the time         sli:           metric: http_requests_total           success_condition: status &lt; 500         slo: 99.9         window: 30d         error_budget: 0.1</p> <pre><code>  - name: api-latency\n    description: 95% of requests complete in &lt;500ms\n    sli:\n      metric: http_request_duration_seconds\n      percentile: 95\n    slo: 0.5\n    window: 30d\n\n  - name: data-freshness\n    description: Data is no older than 5 minutes\n    sli:\n      metric: data_age_seconds\n    slo: 300\n    window: 24h\n</code></pre>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-15slo-prometheus-rulesyaml","title":"labs/module-15/slo-prometheus-rules.yaml","text":"<p>apiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata:   name: slo-rules   namespace: lab-module-15 spec:   groups:   - name: slo-availability     interval: 30s     rules:     # SLI: Availability     - record: sli:availability:ratio_rate5m       expr: |         (           sum(rate(http_requests_total{status!~\"5..\"}[5m]))           /           sum(rate(http_requests_total[5m]))         )</p> <pre><code># Error budget remaining (30 day window)\n- record: slo:availability:error_budget_remaining\n  expr: |\n    1 - (\n      (1 - sli:availability:ratio_rate5m)\n      /\n      (1 - 0.999)\n    )\n\n# Burn rate (how fast we're consuming error budget)\n- record: slo:availability:burn_rate\n  expr: |\n    (1 - sli:availability:ratio_rate5m)\n    /\n    (1 - 0.999)\n</code></pre> <ul> <li> <p>name: slo-latency     interval: 30s     rules:     # SLI: Latency P95</p> <ul> <li>record: sli:latency:p95   expr: |     histogram_quantile(0.95,       rate(http_request_duration_seconds_bucket[5m])     )</li> </ul> </li> </ul>"},{"location":"dojo/labs/brown%20n%20black%20labs/#latency-slo-compliance","title":"Latency SLO compliance","text":"<ul> <li>record: slo:latency:compliance   expr: |     (sli:latency:p95 &lt;= 0.5)</li> </ul>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-15slo-alertsyaml","title":"labs/module-15/slo-alerts.yaml","text":"<p>apiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata:   name: slo-alerts   namespace: lab-module-15 spec:   groups:   - name: error-budget-alerts     rules:     # Fast burn (2% budget in 1 hour)     - alert: ErrorBudgetFastBurn       expr: |         slo:availability:burn_rate &gt; 14.4       for: 2m       labels:         severity: critical       annotations:         summary: \"Error budget burning too fast\"         description: \"At current rate, error budget will be exhausted in {{ $value | humanizeDuration }}\"</p> <pre><code># Slow burn (10% budget in 3 days)\n- alert: ErrorBudgetSlowBurn\n  expr: |\n    slo:availability:burn_rate &gt; 6\n  for: 1h\n  labels:\n    severity: warning\n  annotations:\n    summary: \"Error budget burning steadily\"\n    description: \"Error budget consumption rate is elevated\"\n\n# Budget exhausted\n- alert: ErrorBudgetExhausted\n  expr: |\n    slo:availability:error_budget_remaining &lt;= 0\n  for: 5m\n  labels:\n    severity: critical\n  annotations:\n    summary: \"Error budget exhausted\"\n    description: \"No error budget remaining. Freeze deployments!\"\n</code></pre>"},{"location":"dojo/labs/brown%20n%20black%20labs/#_9","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#module-16-lab-4-incident-management","title":"MODULE 16 - LAB 4: Incident Management","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#directory-labsmodule-16","title":"Directory: labs/module-16/","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_10","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-16incident-trackeryaml","title":"labs/module-16/incident-tracker.yaml","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#simple-incident-tracking-via-crd","title":"Simple incident tracking via CRD","text":"<p>apiVersion: apiextensions.k8s.io/v1 kind: CustomResourceDefinition metadata:   name: incidents.fawkes.io spec:   group: fawkes.io   versions:   - name: v1     served: true     storage: true     schema:       openAPIV3Schema:         type: object         properties:           spec:             type: object             properties:               severity:                 type: string                 enum: [P0, P1, P2, P3]               summary:                 type: string               affectedServices:                 type: array                 items:                   type: string               startTime:                 type: string                 format: date-time           status:             type: object             properties:               state:                 type: string                 enum: [investigating, identified, mitigating, resolved]               mitigationTime:                 type: string                 format: date-time               resolutionTime:                 type: string                 format: date-time               mttr:                 type: integer   scope: Namespaced   names:     plural: incidents     singular: incident     kind: Incident</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-16incident-exampleyaml","title":"labs/module-16/incident-example.yaml","text":"<p>apiVersion: fawkes.io/v1 kind: Incident metadata:   name: incident-20251019-001   namespace: lab-module-16 spec:   severity: P1   summary: \"High error rate on payment API\"   affectedServices:     - payment-api     - checkout-service   startTime: \"2025-10-19T10:30:00Z\" status:   state: resolved   mitigationTime: \"2025-10-19T10:35:00Z\"   resolutionTime: \"2025-10-19T10:45:00Z\"   mttr: 900  # 15 minutes in seconds</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-16postmortem-templateyaml","title":"labs/module-16/postmortem-template.yaml","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: postmortem-template   namespace: lab-module-16 data:   template.md: |     # Incident Postmortem: [INCIDENT-ID]</p> <pre><code>**Date**: [YYYY-MM-DD]\n**Duration**: [START] to [END] ([DURATION])\n**Severity**: [P0/P1/P2/P3]\n**Authors**: [Names]\n**Status**: Draft/Final\n\n## Executive Summary\n[2-3 sentence summary of what happened and impact]\n\n## Impact\n- **Users affected**: [number or percentage]\n- **Duration**: [X hours Y minutes]\n- **Services affected**: [list]\n- **Revenue impact**: [$amount or N/A]\n- **Customer complaints**: [number]\n\n## Timeline (all times UTC)\n- **10:30** - Alert fired: High error rate detected\n- **10:32** - On-call acknowledged, incident channel created\n- **10:35** - Root cause identified: Database connection pool exhausted\n- **10:37** - Mitigation started: Increased connection pool size\n- **10:40** - Error rate returning to normal\n- **10:45** - Incident resolved, monitoring continues\n- **11:00** - Postmortem scheduled\n\n## Root Cause\n[Detailed explanation of what caused the incident]\n\n### Contributing Factors\n1. [Factor 1]\n2. [Factor 2]\n\n## Resolution\n[What was done to fix the immediate problem]\n\n## Detection\n- **How detected**: [Alert/User report/Monitoring]\n- **Time to detect**: [X minutes from start]\n- **Could we have detected sooner?**: [Yes/No, explain]\n\n## Action Items\n| Action | Owner | Due Date | Priority |\n|--------|-------|----------|----------|\n| [Action 1] | @person | YYYY-MM-DD | P0 |\n| [Action 2] | @person | YYYY-MM-DD | P1 |\n\n## Lessons Learned\n### What went well\n- [Item 1]\n- [Item 2]\n\n### What went wrong\n- [Item 1]\n- [Item 2]\n\n### Where we got lucky\n- [Item 1]\n\n## Prevention\n[How we'll prevent this from happening again]\n</code></pre>"},{"location":"dojo/labs/brown%20n%20black%20labs/#_11","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#black-belt-lab-files-platform-architecture-modules-17-20","title":"BLACK BELT LAB FILES - Platform Architecture (Modules 17-20)","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_12","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_13","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#module-17-implementation-platform-as-a-product","title":"MODULE 17 - Implementation: Platform as a Product","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#directory-labsmodule-17","title":"Directory: labs/module-17/","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_14","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-17user-feedback-crdyaml","title":"labs/module-17/user-feedback-crd.yaml","text":"<p>apiVersion: apiextensions.k8s.io/v1 kind: CustomResourceDefinition metadata:   name: feedbacks.fawkes.io spec:   group: fawkes.io   versions:   - name: v1     served: true     storage: true     schema:       openAPIV3Schema:         type: object         properties:           spec:             type: object             properties:               user:                 type: string               npsScore:                 type: integer                 minimum: 0                 maximum: 10               feedback:                 type: string               feature:                 type: string               timestamp:                 type: string                 format: date-time   scope: Cluster   names:     plural: feedbacks     singular: feedback     kind: Feedback</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-17backstage-catalog-metricsyaml","title":"labs/module-17/backstage-catalog-metrics.yaml","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#track-catalog-adoption-metrics","title":"Track catalog adoption metrics","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: catalog-metrics   namespace: lab-module-17 data:   queries.promql: |     # Components registered     count(backstage_catalog_entities_total{kind=\"Component\"})</p> <pre><code># APIs documented\ncount(backstage_catalog_entities_total{kind=\"API\"})\n\n# Active users (last 7 days)\ncount(count_over_time(backstage_user_login[7d]))\n\n# Page views by type\nsum by (page_type) (rate(backstage_page_view_total[1h]))\n</code></pre>"},{"location":"dojo/labs/brown%20n%20black%20labs/#_15","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#module-18-implementation-multi-tenancy","title":"MODULE 18 - Implementation: Multi-Tenancy","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#directory-labsmodule-18","title":"Directory: labs/module-18/","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_16","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-18tenant-namespace-templateyaml","title":"labs/module-18/tenant-namespace-template.yaml","text":"<p>apiVersion: v1 kind: Namespace metadata:   name: tenant-{{.TenantName}}   labels:     fawkes.io/tenant: \"{{.TenantName}}\"     fawkes.io/team: \"{{.TeamName}}\"</p> <p>apiVersion: v1 kind: ResourceQuota metadata:   name: tenant-quota   namespace: tenant-{{.TenantName}} spec:   hard:     requests.cpu: \"{{.CPUQuota}}\"     requests.memory: \"{{.MemoryQuota}}\"     limits.cpu: \"{{.CPULimit}}\"     limits.memory: \"{{.MemoryLimit}}\"     persistentvolumeclaims: \"{{.PVCQuota}}\"     services.loadbalancers: \"{{.LBQuota}}\"</p> <p>apiVersion: v1 kind: LimitRange metadata:   name: tenant-limits   namespace: tenant-{{.TenantName}} spec:   limits:   - max:       cpu: \"2\"       memory: \"4Gi\"     min:       cpu: \"10m\"       memory: \"10Mi\"     default:       cpu: \"500m\"       memory: \"512Mi\"     defaultRequest:       cpu: \"100m\"       memory: \"128Mi\"     type: Container</p> <p>apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata:   name: tenant-admin   namespace: tenant-{{.TenantName}} rules: - apiGroups: [\"\"]   resources: [\"\"]   verbs: [\"*\"]</p> <p>apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata:   name: tenant-admin-binding   namespace: tenant-{{.TenantName}} roleRef:   apiGroup: rbac.authorization.k8s.io   kind: Role   name: tenant-admin subjects: - kind: Group   name: \"tenant-{{.TenantName}}-admins\"   apiGroup: rbac.authorization.k8s.io</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-18hierarchical-namespaceyaml","title":"labs/module-18/hierarchical-namespace.yaml","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#using-hnc-hierarchical-namespace-controller","title":"Using HNC (Hierarchical Namespace Controller)","text":"<p>apiVersion: hnc.x-k8s.io/v1alpha2 kind: HierarchyConfiguration metadata:   name: hierarchy   namespace: org-engineering spec:   parent: org-root</p> <p>apiVersion: hnc.x-k8s.io/v1alpha2 kind: SubnamespaceAnchor metadata:   name: team-backend   namespace: org-engineering</p> <p>apiVersion: hnc.x-k8s.io/v1alpha2 kind: SubnamespaceAnchor metadata:   name: team-frontend   namespace: org-engineering</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#_17","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#module-19-implementation-zero-trust-security","title":"MODULE 19 - Implementation: Zero Trust Security","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#directory-labsmodule-19","title":"Directory: labs/module-19/","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_18","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-19workload-identity-setupyaml","title":"labs/module-19/workload-identity-setup.yaml","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#aws-irsa-iam-roles-for-service-accounts-example","title":"AWS IRSA (IAM Roles for Service Accounts) example","text":"<p>apiVersion: v1 kind: ServiceAccount metadata:   name: payment-service   namespace: lab-module-19   annotations:     eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/payment-service</p> <p>apiVersion: apps/v1 kind: Deployment metadata:   name: payment-service   namespace: lab-module-19 spec:   replicas: 2   selector:     matchLabels:       app: payment-service   template:     metadata:       labels:         app: payment-service     spec:       serviceAccountName: payment-service       containers:       - name: app         image: payment-service:v1.0.0         # No AWS credentials needed - IRSA provides them</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-19policy-as-code-gatekeeperyaml","title":"labs/module-19/policy-as-code-gatekeeper.yaml","text":"<p>apiVersion: templates.gatekeeper.sh/v1 kind: ConstraintTemplate metadata:   name: k8srequiredsignedimages spec:   crd:     spec:       names:         kind: K8sRequiredSignedImages   targets:     - target: admission.k8s.gatekeeper.sh       rego: |         package k8srequiredsignedimages</p> <pre><code>    violation[{\"msg\": msg}] {\n      container := input.review.object.spec.containers[_]\n      not is_signed(container.image)\n      msg := sprintf(\"Image %v is not signed\", [container.image])\n    }\n\n    is_signed(image) {\n      # Check if image has valid signature\n      # In real implementation, would verify with Cosign\n      startswith(image, \"registry.fawkes.io/\")\n    }\n</code></pre> <p>apiVersion: constraints.gatekeeper.sh/v1beta1 kind: K8sRequiredSignedImages metadata:   name: must-be-signed spec:   match:     kinds:       - apiGroups: [\"apps\"]         kinds: [\"Deployment\"]</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-19external-secrets-vaultyaml","title":"labs/module-19/external-secrets-vault.yaml","text":"<p>apiVersion: external-secrets.io/v1beta1 kind: SecretStore metadata:   name: vault-backend   namespace: lab-module-19 spec:   provider:     vault:       server: \"https://vault.fawkes.io\"       path: \"secret\"       version: \"v2\"       auth:         kubernetes:           mountPath: \"kubernetes\"           role: \"payment-service\"</p> <p>apiVersion: external-secrets.io/v1beta1 kind: ExternalSecret metadata:   name: payment-secrets   namespace: lab-module-19 spec:   refreshInterval: 1h   secretStoreRef:     name: vault-backend     kind: SecretStore   target:     name: payment-secrets     creationPolicy: Owner   data:   - secretKey: stripe-api-key     remoteRef:       key: payment/stripe       property: api_key   - secretKey: database-password     remoteRef:       key: payment/database       property: password</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#_19","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#module-20-implementation-multi-cloud","title":"MODULE 20 - Implementation: Multi-Cloud","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#directory-labsmodule-20","title":"Directory: labs/module-20/","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_20","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-20crossplane-aws-compositionyaml","title":"labs/module-20/crossplane-aws-composition.yaml","text":"<p>apiVersion: apiextensions.crossplane.io/v1 kind: Composition metadata:   name: xpostgresql-aws   labels:     provider: aws spec:   compositeTypeRef:     apiVersion: database.fawkes.io/v1alpha1     kind: XPostgreSQL   resources:   - name: rdsinstance     base:       apiVersion: database.aws.crossplane.io/v1beta1       kind: RDSInstance       spec:         forProvider:           region: us-east-1           dbInstanceClass: db.t3.micro           engine: postgres           engineVersion: \"14\"           masterUsername: admin           allocatedStorage: 20           storageEncrypted: true           publiclyAccessible: false</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-20crossplane-gcp-compositionyaml","title":"labs/module-20/crossplane-gcp-composition.yaml","text":"<p>apiVersion: apiextensions.crossplane.io/v1 kind: Composition metadata:   name: xpostgresql-gcp   labels:     provider: gcp spec:   compositeTypeRef:     apiVersion: database.fawkes.io/v1alpha1     kind: XPostgreSQL   resources:   - name: cloudsqlinstance     base:       apiVersion: database.gcp.crossplane.io/v1beta1       kind: CloudSQLInstance       spec:         forProvider:           region: us-central1           databaseVersion: POSTGRES_14           settings:             tier: db-f1-micro             ipConfiguration:               ipv4Enabled: false               privateNetwork: projects/my-project/global/networks/default</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#labsmodule-20cloud-agnostic-databaseyaml","title":"labs/module-20/cloud-agnostic-database.yaml","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#application-uses-cloud-agnostic-api","title":"Application uses cloud-agnostic API","text":"<p>apiVersion: database.fawkes.io/v1alpha1 kind: XPostgreSQL metadata:   name: my-database spec:   size: small   version: \"14\"   storageGB: 20   highAvailability: false   # Crossplane automatically provisions RDS on AWS or Cloud SQL on GCP   # based on which composition is selected</p>"},{"location":"dojo/labs/brown%20n%20black%20labs/#_21","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#lab-deployment-automation","title":"LAB DEPLOYMENT AUTOMATION","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#_22","title":"=============================================================================","text":""},{"location":"dojo/labs/brown%20n%20black%20labs/#labsdeploy-all-labssh","title":"labs/deploy-all-labs.sh","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: lab-deployment-scripts   namespace: fawkes-system data:   deploy-labs.sh: |     #!/bin/bash     # Deploy all lab infrastructure     set -e</p> <pre><code>echo \"Deploying Fawkes Dojo Lab Infrastructure...\"\n\n# Install prerequisite operators\necho \"Installing operators...\"\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo add argo https://argoproj.github.io/argo-helm\nhelm repo update\n\n# Create monitoring namespace\nkubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -\n\n# Install Prometheus stack\necho \"Installing Prometheus...\"\nhelm upgrade --install prometheus prometheus-community/kube-prometheus-stack \\\n  -n monitoring \\\n  -f labs/module-13/prometheus-values.yaml \\\n  --wait\n\n# Install ArgoCD\necho \"Installing ArgoCD...\"\nkubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Install Flagger\necho \"Installing Flagger...\"\nkubectl apply -f labs/green-belt-shared/flagger-install.yaml\n\n# Install Crossplane\necho \"Installing Crossplane...\"\nhelm upgrade --install crossplane \\\n  crossplane-stable/crossplane \\\n  -n crossplane-system \\\n  --create-namespace \\\n  --wait\n\necho \"Lab infrastructure deployed successfully!\"\necho \"Run 'fawkes lab start --module N' to start a specific lab\"\n</code></pre>"},{"location":"dojo/labs/lab%20automation/","title":"!/usr/bin/env python3","text":"<p>\"\"\" Fawkes Dojo Lab Automation &amp; Validation Scripts</p> <p>This module provides automated lab environment setup, validation, and grading for all Fawkes Dojo assessments.</p> <p>Usage:     # Start lab environment     fawkes lab start --module 1</p> <pre><code># Validate lab completion\nfawkes lab validate --lab white-belt-lab1\n\n# Run assessment validation\nfawkes assessment validate --belt white\n</code></pre> <p>\"\"\"</p> <p>import subprocess import yaml import json import sys import time from typing import Dict, List, Tuple, Optional from dataclasses import dataclass from enum import Enum</p> <p>class BeltLevel(Enum):     WHITE = \"white\"     YELLOW = \"yellow\"     GREEN = \"green\"     BROWN = \"brown\"     BLACK = \"black\"</p> <p>@dataclass class ValidationResult:     \"\"\"Result of a lab validation check\"\"\"     passed: bool     message: str     points: int     max_points: int     details: Optional[Dict] = None</p> <p>@dataclass class LabEnvironment:     \"\"\"Lab environment configuration\"\"\"     module_id: int     belt_level: BeltLevel     cluster_name: str     namespace: str     resources: List[str]</p> <p>class LabAutomation:     \"\"\"Main class for lab automation\"\"\"</p> <pre><code>def __init__(self):\n    self.kubectl = \"kubectl\"\n    self.results = []\n\ndef run_command(self, cmd: List[str], capture_output: bool = True) -&gt; Tuple[int, str, str]:\n    \"\"\"Execute shell command and return exit code, stdout, stderr\"\"\"\n    result = subprocess.run(\n        cmd,\n        capture_output=capture_output,\n        text=True\n    )\n    return result.returncode, result.stdout, result.stderr\n\ndef kubectl_get(self, resource: str, namespace: str = \"default\", \n                output: str = \"json\") -&gt; Dict:\n    \"\"\"Run kubectl get command and parse JSON output\"\"\"\n    cmd = [self.kubectl, \"get\", resource, \"-n\", namespace, \"-o\", output]\n    exit_code, stdout, stderr = self.run_command(cmd)\n\n    if exit_code != 0:\n        print(f\"Error: {stderr}\")\n        return {}\n\n    try:\n        return json.loads(stdout)\n    except json.JSONDecodeError:\n        return {}\n\ndef check_resource_exists(self, resource_type: str, resource_name: str, \n                         namespace: str = \"default\") -&gt; bool:\n    \"\"\"Check if a Kubernetes resource exists\"\"\"\n    cmd = [self.kubectl, \"get\", resource_type, resource_name, \"-n\", namespace]\n    exit_code, _, _ = self.run_command(cmd)\n    return exit_code == 0\n</code></pre>"},{"location":"dojo/labs/lab%20automation/#_1","title":"=============================================================================","text":""},{"location":"dojo/labs/lab%20automation/#white-belt-lab-validators","title":"WHITE BELT LAB VALIDATORS","text":""},{"location":"dojo/labs/lab%20automation/#_2","title":"=============================================================================","text":"<p>class WhiteBeltLab1Validator:     \"\"\"Validator for White Belt Lab 1: First Deployment\"\"\"</p> <pre><code>def __init__(self, lab_automation: LabAutomation):\n    self.lab = lab_automation\n    self.namespace = \"default\"\n    self.max_points = 10\n\ndef validate(self) -&gt; ValidationResult:\n    \"\"\"Run all validation checks\"\"\"\n    checks = [\n        self.check_deployment_exists(),\n        self.check_replica_count(),\n        self.check_pods_running(),\n        self.check_service_exists(),\n        self.check_application_accessible(),\n    ]\n\n    passed_checks = sum(1 for check in checks if check)\n    points = int((passed_checks / len(checks)) * self.max_points)\n\n    return ValidationResult(\n        passed=passed_checks == len(checks),\n        message=f\"Passed {passed_checks}/{len(checks)} checks\",\n        points=points,\n        max_points=self.max_points,\n        details={\"checks\": [\n            \"Deployment exists\",\n            \"3 replicas configured\",\n            \"All pods running\",\n            \"Service exists\",\n            \"Application accessible\"\n        ]}\n    )\n\ndef check_deployment_exists(self) -&gt; bool:\n    \"\"\"Check if deployment exists\"\"\"\n    return self.lab.check_resource_exists(\"deployment\", \"my-first-app\", self.namespace)\n\ndef check_replica_count(self) -&gt; bool:\n    \"\"\"Check if deployment has 3 replicas\"\"\"\n    deployment = self.lab.kubectl_get(\"deployment/my-first-app\", self.namespace)\n    if not deployment:\n        return False\n\n    spec_replicas = deployment.get(\"spec\", {}).get(\"replicas\", 0)\n    return spec_replicas == 3\n\ndef check_pods_running(self) -&gt; bool:\n    \"\"\"Check if all pods are in Running state\"\"\"\n    pods = self.lab.kubectl_get(\"pods\", self.namespace)\n    if not pods or \"items\" not in pods:\n        return False\n\n    app_pods = [\n        pod for pod in pods[\"items\"]\n        if pod.get(\"metadata\", {}).get(\"labels\", {}).get(\"app\") == \"my-first-app\"\n    ]\n\n    if len(app_pods) != 3:\n        return False\n\n    running_pods = [\n        pod for pod in app_pods\n        if pod.get(\"status\", {}).get(\"phase\") == \"Running\"\n    ]\n\n    return len(running_pods) == 3\n\ndef check_service_exists(self) -&gt; bool:\n    \"\"\"Check if service exists\"\"\"\n    return self.lab.check_resource_exists(\"service\", \"my-first-app\", self.namespace)\n\ndef check_application_accessible(self) -&gt; bool:\n    \"\"\"Check if application responds to HTTP requests\"\"\"\n    # Get service endpoint\n    service = self.lab.kubectl_get(\"service/my-first-app\", self.namespace)\n    if not service:\n        return False\n\n    # In real implementation, would test HTTP endpoint\n    # For now, check service has endpoints\n    cmd = [self.lab.kubectl, \"get\", \"endpoints\", \"my-first-app\", \"-n\", self.namespace]\n    exit_code, stdout, _ = self.lab.run_command(cmd)\n\n    return exit_code == 0 and \"my-first-app\" in stdout\n</code></pre> <p>class WhiteBeltLab2Validator:     \"\"\"Validator for White Belt Lab 2: Multi-Environment Deployment\"\"\"</p> <pre><code>def __init__(self, lab_automation: LabAutomation):\n    self.lab = lab_automation\n    self.max_points = 15\n\ndef validate(self) -&gt; ValidationResult:\n    \"\"\"Run all validation checks\"\"\"\n    checks = [\n        self.check_kustomize_structure(),\n        self.check_dev_environment(),\n        self.check_prod_environment(),\n        self.check_argocd_apps(),\n    ]\n\n    passed_checks = sum(1 for check in checks if check)\n    points = int((passed_checks / len(checks)) * self.max_points)\n\n    return ValidationResult(\n        passed=passed_checks == len(checks),\n        message=f\"Passed {passed_checks}/{len(checks)} checks\",\n        points=points,\n        max_points=self.max_points,\n        details={\"checks\": [\n            \"Kustomize base and overlays exist\",\n            \"Dev environment: 1 replica, no limits\",\n            \"Prod environment: 3 replicas, with limits\",\n            \"ArgoCD managing both environments\"\n        ]}\n    )\n\ndef check_kustomize_structure(self) -&gt; bool:\n    \"\"\"Check if kustomize directory structure exists\"\"\"\n    import os\n\n    required_files = [\n        \"k8s/base/kustomization.yaml\",\n        \"k8s/overlays/dev/kustomization.yaml\",\n        \"k8s/overlays/prod/kustomization.yaml\"\n    ]\n\n    return all(os.path.exists(f) for f in required_files)\n\ndef check_dev_environment(self) -&gt; bool:\n    \"\"\"Check dev environment configuration\"\"\"\n    deployment = self.lab.kubectl_get(\"deployment/my-first-app\", \"dev\")\n    if not deployment:\n        return False\n\n    replicas = deployment.get(\"spec\", {}).get(\"replicas\", 0)\n    containers = deployment.get(\"spec\", {}).get(\"template\", {}).get(\"spec\", {}).get(\"containers\", [])\n\n    # Check 1 replica\n    if replicas != 1:\n        return False\n\n    # Check no resource limits\n    if containers:\n        resources = containers[0].get(\"resources\", {})\n        if \"limits\" in resources:\n            return False\n\n    return True\n\ndef check_prod_environment(self) -&gt; bool:\n    \"\"\"Check prod environment configuration\"\"\"\n    deployment = self.lab.kubectl_get(\"deployment/my-first-app\", \"prod\")\n    if not deployment:\n        return False\n\n    replicas = deployment.get(\"spec\", {}).get(\"replicas\", 0)\n    containers = deployment.get(\"spec\", {}).get(\"template\", {}).get(\"spec\", {}).get(\"containers\", [])\n\n    # Check 3 replicas\n    if replicas != 3:\n        return False\n\n    # Check resource limits exist\n    if containers:\n        resources = containers[0].get(\"resources\", {})\n        if \"limits\" not in resources:\n            return False\n\n        limits = resources[\"limits\"]\n        if \"memory\" not in limits or \"cpu\" not in limits:\n            return False\n\n    return True\n\ndef check_argocd_apps(self) -&gt; bool:\n    \"\"\"Check if ArgoCD applications exist for both environments\"\"\"\n    dev_app = self.lab.check_resource_exists(\"application\", \"my-first-app-dev\", \"argocd\")\n    prod_app = self.lab.check_resource_exists(\"application\", \"my-first-app-prod\", \"argocd\")\n\n    return dev_app and prod_app\n</code></pre> <p>class WhiteBeltLab3Validator:     \"\"\"Validator for White Belt Lab 3: DORA Metrics\"\"\"</p> <pre><code>def __init__(self, lab_automation: LabAutomation):\n    self.lab = lab_automation\n    self.max_points = 15\n\ndef validate(self) -&gt; ValidationResult:\n    \"\"\"Run all validation checks\"\"\"\n    checks = [\n        self.check_prometheus_annotations(),\n        self.check_dora_exporter(),\n        self.check_grafana_dashboard(),\n        self.check_deployment_metrics(),\n    ]\n\n    passed_checks = sum(1 for check in checks if check)\n    points = int((passed_checks / len(checks)) * self.max_points)\n\n    return ValidationResult(\n        passed=passed_checks == len(checks),\n        message=f\"Passed {passed_checks}/{len(checks)} checks\",\n        points=points,\n        max_points=self.max_points,\n        details={\"checks\": [\n            \"Prometheus annotations configured\",\n            \"DORA exporter deployed\",\n            \"Grafana dashboard exists\",\n            \"Deployment metrics being collected\"\n        ]}\n    )\n\ndef check_prometheus_annotations(self) -&gt; bool:\n    \"\"\"Check if deployment has Prometheus annotations\"\"\"\n    deployment = self.lab.kubectl_get(\"deployment/my-first-app\", \"default\")\n    if not deployment:\n        return False\n\n    annotations = deployment.get(\"metadata\", {}).get(\"annotations\", {})\n\n    required_annotations = [\n        \"prometheus.io/scrape\",\n        \"prometheus.io/port\"\n    ]\n\n    return all(ann in annotations for ann in required_annotations)\n\ndef check_dora_exporter(self) -&gt; bool:\n    \"\"\"Check if DORA metrics exporter is deployed\"\"\"\n    return self.lab.check_resource_exists(\"deployment\", \"dora-exporter\", \"monitoring\")\n\ndef check_grafana_dashboard(self) -&gt; bool:\n    \"\"\"Check if Grafana dashboard ConfigMap exists\"\"\"\n    return self.lab.check_resource_exists(\"configmap\", \"dora-dashboard\", \"monitoring\")\n\ndef check_deployment_metrics(self) -&gt; bool:\n    \"\"\"Check if deployment metrics are being collected\"\"\"\n    # Query Prometheus for deployment metrics\n    # In real implementation, would query Prometheus API\n    # For now, check if ServiceMonitor exists\n    return self.lab.check_resource_exists(\"servicemonitor\", \"my-first-app\", \"default\")\n</code></pre>"},{"location":"dojo/labs/lab%20automation/#_3","title":"=============================================================================","text":""},{"location":"dojo/labs/lab%20automation/#yellow-belt-lab-validators","title":"YELLOW BELT LAB VALIDATORS","text":""},{"location":"dojo/labs/lab%20automation/#_4","title":"=============================================================================","text":"<p>class YellowBeltLab1Validator:     \"\"\"Validator for Yellow Belt Lab 1: Production CI Pipeline\"\"\"</p> <pre><code>def __init__(self, lab_automation: LabAutomation):\n    self.lab = lab_automation\n    self.max_points = 20\n\ndef validate(self) -&gt; ValidationResult:\n    \"\"\"Run all validation checks\"\"\"\n    checks = [\n        self.check_pipeline_exists(),\n        self.check_test_stage(),\n        self.check_security_scanning(),\n        self.check_image_built(),\n        self.check_pipeline_time(),\n        self.check_quality_gates(),\n    ]\n\n    passed_checks = sum(1 for check in checks if check)\n    points = int((passed_checks / len(checks)) * self.max_points)\n\n    return ValidationResult(\n        passed=passed_checks == len(checks),\n        message=f\"Passed {passed_checks}/{len(checks)} checks\",\n        points=points,\n        max_points=self.max_points,\n        details={\"checks\": [\n            \"Pipeline configuration exists\",\n            \"Tests running and passing\",\n            \"Security scanning configured\",\n            \"Container image built\",\n            \"Pipeline completes in &lt;5 min\",\n            \"Quality gates enforced\"\n        ]}\n    )\n\ndef check_pipeline_exists(self) -&gt; bool:\n    \"\"\"Check if CI pipeline configuration exists\"\"\"\n    import os\n    pipeline_files = [\n        \".github/workflows/ci.yml\",\n        \".tekton/pipeline.yaml\",\n        \".gitlab-ci.yml\"\n    ]\n    return any(os.path.exists(f) for f in pipeline_files)\n\ndef check_test_stage(self) -&gt; bool:\n    \"\"\"Check if tests are configured and passing\"\"\"\n    # Check for test configuration\n    import os\n    return os.path.exists(\"package.json\") or os.path.exists(\"requirements.txt\")\n\ndef check_security_scanning(self) -&gt; bool:\n    \"\"\"Check if security scanning is configured\"\"\"\n    import os\n    config_files = [\n        \".semgrep.yml\",\n        \"sonar-project.properties\",\n        \".trivyignore\"\n    ]\n    return any(os.path.exists(f) for f in config_files)\n\ndef check_image_built(self) -&gt; bool:\n    \"\"\"Check if container image was built successfully\"\"\"\n    # Would query container registry in real implementation\n    return True\n\ndef check_pipeline_time(self) -&gt; bool:\n    \"\"\"Check if pipeline completes in &lt;5 minutes\"\"\"\n    # Would query CI system for last run duration\n    return True\n\ndef check_quality_gates(self) -&gt; bool:\n    \"\"\"Check if quality gates are configured\"\"\"\n    import os\n    # Check for quality gate configuration\n    return os.path.exists(\".fawkes/quality-gates.yml\")\n</code></pre>"},{"location":"dojo/labs/lab%20automation/#_5","title":"=============================================================================","text":""},{"location":"dojo/labs/lab%20automation/#command-line-interface","title":"COMMAND LINE INTERFACE","text":""},{"location":"dojo/labs/lab%20automation/#_6","title":"=============================================================================","text":"<p>class FawkesLabCLI:     \"\"\"Command line interface for Fawkes lab automation\"\"\"</p> <pre><code>def __init__(self):\n    self.lab_automation = LabAutomation()\n    self.validators = {\n        \"white-belt-lab1\": WhiteBeltLab1Validator,\n        \"white-belt-lab2\": WhiteBeltLab2Validator,\n        \"white-belt-lab3\": WhiteBeltLab3Validator,\n        \"yellow-belt-lab1\": YellowBeltLab1Validator,\n    }\n\ndef start_lab(self, module_id: int):\n    \"\"\"Start a lab environment\"\"\"\n    print(f\"\ud83d\ude80 Starting lab environment for Module {module_id}...\")\n\n    # Determine belt and lab based on module\n    belt_config = self.get_belt_config(module_id)\n\n    # Create namespace\n    namespace = f\"lab-module-{module_id}\"\n    self.create_namespace(namespace)\n\n    # Deploy lab resources\n    self.deploy_lab_resources(module_id, namespace)\n\n    print(f\"\u2705 Lab environment ready!\")\n    print(f\"   Namespace: {namespace}\")\n    print(f\"   Access: kubectl config set-context --current --namespace={namespace}\")\n\n    # Show lab instructions\n    self.show_lab_instructions(module_id)\n\ndef validate_lab(self, lab_name: str):\n    \"\"\"Validate lab completion\"\"\"\n    print(f\"\ud83d\udd0d Validating {lab_name}...\")\n\n    if lab_name not in self.validators:\n        print(f\"\u274c Unknown lab: {lab_name}\")\n        print(f\"   Available labs: {', '.join(self.validators.keys())}\")\n        return\n\n    # Run validator\n    validator_class = self.validators[lab_name]\n    validator = validator_class(self.lab_automation)\n    result = validator.validate()\n\n    # Display results\n    self.display_validation_results(result)\n\n    return result\n\ndef create_namespace(self, namespace: str):\n    \"\"\"Create Kubernetes namespace\"\"\"\n    cmd = [self.lab_automation.kubectl, \"create\", \"namespace\", namespace]\n    exit_code, stdout, stderr = self.lab_automation.run_command(cmd)\n\n    if exit_code != 0 and \"already exists\" not in stderr:\n        print(f\"\u26a0\ufe0f  Warning: {stderr}\")\n\ndef deploy_lab_resources(self, module_id: int, namespace: str):\n    \"\"\"Deploy lab-specific resources\"\"\"\n    resources = self.get_lab_resources(module_id)\n\n    for resource in resources:\n        print(f\"   Deploying {resource}...\")\n        cmd = [\n            self.lab_automation.kubectl, \n            \"apply\", \n            \"-f\", \n            f\"labs/module-{module_id}/{resource}.yaml\",\n            \"-n\",\n            namespace\n        ]\n        self.lab_automation.run_command(cmd)\n\ndef get_belt_config(self, module_id: int) -&gt; Dict:\n    \"\"\"Get belt configuration for module\"\"\"\n    belt_ranges = {\n        (1, 4): \"white\",\n        (5, 8): \"yellow\",\n        (9, 12): \"green\",\n        (13, 16): \"brown\",\n        (17, 20): \"black\"\n    }\n\n    for (start, end), belt in belt_ranges.items():\n        if start &lt;= module_id &lt;= end:\n            return {\"belt\": belt, \"module_in_belt\": module_id - start + 1}\n\n    return {\"belt\": \"unknown\", \"module_in_belt\": 0}\n\ndef get_lab_resources(self, module_id: int) -&gt; List[str]:\n    \"\"\"Get list of resources to deploy for lab\"\"\"\n    # Map module to required resources\n    resource_map = {\n        1: [\"namespace\", \"sample-deployment\"],\n        2: [\"namespace\", \"argocd-application\"],\n        3: [\"namespace\", \"prometheus\", \"grafana\"],\n        4: [\"namespace\", \"sample-app\"],\n        5: [\"namespace\", \"tekton-pipeline\"],\n        # ... etc\n    }\n\n    return resource_map.get(module_id, [\"namespace\"])\n\ndef show_lab_instructions(self, module_id: int):\n    \"\"\"Display lab instructions\"\"\"\n    print(\"\\n\ud83d\udcda Lab Instructions:\")\n    print(f\"   1. Review module {module_id} content\")\n    print(f\"   2. Complete the hands-on exercises\")\n    print(f\"   3. Run: fawkes lab validate --lab [lab-name]\")\n    print(f\"\\n   Documentation: https://docs.fawkes.io/dojo/module-{module_id}\")\n\ndef display_validation_results(self, result: ValidationResult):\n    \"\"\"Display validation results in a nice format\"\"\"\n    print(\"\\n\" + \"=\"*60)\n    print(f\"   LAB VALIDATION RESULTS\")\n    print(\"=\"*60)\n\n    if result.passed:\n        print(f\"\u2705 PASSED: {result.message}\")\n    else:\n        print(f\"\u274c FAILED: {result.message}\")\n\n    print(f\"\\n   Score: {result.points}/{result.max_points} points\")\n\n    if result.details and \"checks\" in result.details:\n        print(f\"\\n   Checks:\")\n        for check in result.details[\"checks\"]:\n            print(f\"      \u2022 {check}\")\n\n    print(\"=\"*60 + \"\\n\")\n\n    if result.passed:\n        print(\"\ud83c\udf89 Great job! You can move to the next lab.\")\n    else:\n        print(\"\ud83d\udca1 Review the failed checks and try again.\")\n        print(\"   Need help? Visit #dojo-support on Mattermost\")\n</code></pre>"},{"location":"dojo/labs/lab%20automation/#_7","title":"=============================================================================","text":""},{"location":"dojo/labs/lab%20automation/#assessment-automation","title":"ASSESSMENT AUTOMATION","text":""},{"location":"dojo/labs/lab%20automation/#_8","title":"=============================================================================","text":"<p>class AssessmentValidator:     \"\"\"Automated assessment validation and grading\"\"\"</p> <pre><code>def __init__(self):\n    self.lab_automation = LabAutomation()\n\ndef validate_assessment(self, belt_level: str) -&gt; Dict:\n    \"\"\"Validate complete belt assessment\"\"\"\n    print(f\"\ud83c\udf93 Validating {belt_level.upper()} Belt Assessment...\")\n\n    # Get labs for this belt\n    labs = self.get_belt_labs(belt_level)\n\n    results = []\n    total_points = 0\n    max_total_points = 0\n\n    for lab_name in labs:\n        cli = FawkesLabCLI()\n        result = cli.validate_lab(lab_name)\n\n        if result:\n            results.append({\n                \"lab\": lab_name,\n                \"passed\": result.passed,\n                \"points\": result.points,\n                \"max_points\": result.max_points\n            })\n            total_points += result.points\n            max_total_points += result.max_points\n\n    # Calculate final score\n    percentage = (total_points / max_total_points * 100) if max_total_points &gt; 0 else 0\n\n    # Determine pass/fail\n    passing_thresholds = {\n        \"white\": 80,\n        \"yellow\": 85,\n        \"green\": 85,\n        \"brown\": 85,\n        \"black\": 90\n    }\n\n    passing_threshold = passing_thresholds.get(belt_level, 80)\n    passed = percentage &gt;= passing_threshold\n\n    return {\n        \"belt\": belt_level,\n        \"total_points\": total_points,\n        \"max_points\": max_total_points,\n        \"percentage\": percentage,\n        \"passed\": passed,\n        \"passing_threshold\": passing_threshold,\n        \"labs\": results\n    }\n\ndef get_belt_labs(self, belt_level: str) -&gt; List[str]:\n    \"\"\"Get list of labs for a belt level\"\"\"\n    labs_by_belt = {\n        \"white\": [\"white-belt-lab1\", \"white-belt-lab2\", \"white-belt-lab3\"],\n        \"yellow\": [\"yellow-belt-lab1\", \"yellow-belt-lab2\", \"yellow-belt-lab3\"],\n        \"green\": [\"green-belt-lab1\", \"green-belt-lab2\", \"green-belt-lab3\"],\n        \"brown\": [\"brown-belt-lab1\", \"brown-belt-lab2\", \"brown-belt-lab3\", \"brown-belt-lab4\"],\n        \"black\": [\"black-belt-implementation\"]\n    }\n\n    return labs_by_belt.get(belt_level, [])\n\ndef generate_certificate(self, user_info: Dict, belt_level: str, score: float):\n    \"\"\"Generate certification PDF\"\"\"\n    print(f\"\ud83c\udf96\ufe0f Generating {belt_level.upper()} Belt Certificate...\")\n\n    cert_data = {\n        \"name\": user_info.get(\"name\"),\n        \"email\": user_info.get(\"email\"),\n        \"belt\": belt_level,\n        \"score\": score,\n        \"date\": time.strftime(\"%Y-%m-%d\"),\n        \"cert_id\": self.generate_cert_id(user_info, belt_level)\n    }\n\n    # In real implementation, would generate PDF\n    print(f\"   Certificate ID: {cert_data['cert_id']}\")\n    print(f\"   Verify at: https://fawkes.io/verify/{cert_data['cert_id']}\")\n\n    return cert_data\n\ndef generate_cert_id(self, user_info: Dict, belt_level: str) -&gt; str:\n    \"\"\"Generate unique certificate ID\"\"\"\n    import hashlib\n\n    data = f\"{user_info.get('email')}{belt_level}{time.time()}\"\n    hash_obj = hashlib.sha256(data.encode())\n    return f\"FPA-2025-{hash_obj.hexdigest()[:8].upper()}\"\n</code></pre>"},{"location":"dojo/labs/lab%20automation/#_9","title":"=============================================================================","text":""},{"location":"dojo/labs/lab%20automation/#utility-functions","title":"UTILITY FUNCTIONS","text":""},{"location":"dojo/labs/lab%20automation/#_10","title":"=============================================================================","text":"<p>def setup_lab_environment():     \"\"\"One-time setup for lab infrastructure\"\"\"     print(\"\ud83d\udd27 Setting up Fawkes Dojo lab infrastructure...\")</p> <pre><code>lab = LabAutomation()\n\n# Create monitoring namespace\nprint(\"   Creating monitoring namespace...\")\nlab.run_command([lab.kubectl, \"create\", \"namespace\", \"monitoring\"])\n\n# Install Prometheus\nprint(\"   Installing Prometheus...\")\nlab.run_command([\n    \"helm\", \"install\", \"prometheus\", \"prometheus-community/kube-prometheus-stack\",\n    \"-n\", \"monitoring\"\n])\n\n# Install ArgoCD\nprint(\"   Installing ArgoCD...\")\nlab.run_command([lab.kubectl, \"create\", \"namespace\", \"argocd\"])\nlab.run_command([\n    lab.kubectl, \"apply\", \"-n\", \"argocd\",\n    \"-f\", \"https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\"\n])\n\nprint(\"\u2705 Lab infrastructure ready!\")\n</code></pre> <p>def cleanup_lab_environment(module_id: int):     \"\"\"Clean up lab environment\"\"\"     print(f\"\ud83e\uddf9 Cleaning up lab environment for Module {module_id}...\")</p> <pre><code>lab = LabAutomation()\nnamespace = f\"lab-module-{module_id}\"\n\nlab.run_command([lab.kubectl, \"delete\", \"namespace\", namespace])\n\nprint(f\"\u2705 Lab environment cleaned up!\")\n</code></pre>"},{"location":"dojo/labs/lab%20automation/#_11","title":"=============================================================================","text":""},{"location":"dojo/labs/lab%20automation/#main-cli-entrypoint","title":"MAIN CLI ENTRYPOINT","text":""},{"location":"dojo/labs/lab%20automation/#_12","title":"=============================================================================","text":"<p>def main():     \"\"\"Main CLI entrypoint\"\"\"     import argparse</p> <pre><code>parser = argparse.ArgumentParser(description=\"Fawkes Dojo Lab Automation\")\nsubparsers = parser.add_subparsers(dest=\"command\", help=\"Available commands\")\n\n# Lab commands\nlab_parser = subparsers.add_parser(\"lab\", help=\"Lab environment management\")\nlab_subparsers = lab_parser.add_subparsers(dest=\"lab_command\")\n\n# fawkes lab start\nstart_parser = lab_subparsers.add_parser(\"start\", help=\"Start lab environment\")\nstart_parser.add_argument(\"--module\", type=int, required=True, help=\"Module number (1-20)\")\n\n# fawkes lab validate\nvalidate_parser = lab_subparsers.add_parser(\"validate\", help=\"Validate lab completion\")\nvalidate_parser.add_argument(\"--lab\", type=str, required=True, help=\"Lab name (e.g., white-belt-lab1)\")\n\n# fawkes lab stop\nstop_parser = lab_subparsers.add_parser(\"stop\", help=\"Stop lab environment\")\nstop_parser.add_argument(\"--module\", type=int, required=True, help=\"Module number\")\n\n# Assessment commands\nassessment_parser = subparsers.add_parser(\"assessment\", help=\"Assessment management\")\nassessment_subparsers = assessment_parser.add_subparsers(dest=\"assessment_command\")\n\n# fawkes assessment validate\nassess_validate_parser = assessment_subparsers.add_parser(\"validate\", help=\"Validate assessment\")\nassess_validate_parser.add_argument(\"--belt\", type=str, required=True, \n                                   choices=[\"white\", \"yellow\", \"green\", \"brown\", \"black\"],\n                                   help=\"Belt level\")\n\n# Setup command\nsubparsers.add_parser(\"setup\", help=\"Setup lab infrastructure\")\n\nargs = parser.parse_args()\n\n# Execute command\nif args.command == \"lab\":\n    cli = FawkesLabCLI()\n\n    if args.lab_command == \"start\":\n        cli.start_lab(args.module)\n\n    elif args.lab_command == \"validate\":\n        cli.validate_lab(args.lab)\n\n    elif args.lab_command == \"stop\":\n        cleanup_lab_environment(args.module)\n\nelif args.command == \"assessment\":\n    validator = AssessmentValidator()\n\n    if args.assessment_command == \"validate\":\n        result = validator.validate_assessment(args.belt)\n\n        print(\"\\n\" + \"=\"*60)\n        print(f\"   {result['belt'].upper()} BELT ASSESSMENT RESULTS\")\n        print(\"=\"*60)\n        print(f\"\\n   Total Score: {result['total_points']}/{result['max_points']} ({result['percentage']:.1f}%)\")\n        print(f\"   Passing Threshold: {result['passing_threshold']}%\")\n\n        if result['passed']:\n            print(f\"\\n   \u2705 PASSED - Congratulations!\")\n            print(f\"\\n   You have earned the {result['belt'].upper()} Belt certification!\")\n        else:\n            print(f\"\\n   \u274c NOT PASSED\")\n            print(f\"   You need {result['passing_threshold']}% to pass.\")\n            print(f\"   Review the areas where you lost points and try again.\")\n\n        print(\"\\n   Lab Results:\")\n        for lab in result['labs']:\n            status = \"\u2705\" if lab['passed'] else \"\u274c\"\n            print(f\"      {status} {lab['lab']}: {lab['points']}/{lab['max_points']}\")\n\n        print(\"=\"*60 + \"\\n\")\n\nelif args.command == \"setup\":\n    setup_lab_environment()\n\nelse:\n    parser.print_help()\n</code></pre> <p>if name == \"main\":     main()</p>"},{"location":"dojo/labs/lab%20automation/#_13","title":"=============================================================================","text":""},{"location":"dojo/labs/lab%20automation/#example-usage","title":"EXAMPLE USAGE","text":""},{"location":"dojo/labs/lab%20automation/#_14","title":"=============================================================================","text":"<p>\"\"\" Example usage:</p>"},{"location":"dojo/labs/lab%20automation/#start-a-lab-environment","title":"Start a lab environment","text":"<p>$ fawkes lab start --module 1</p>"},{"location":"dojo/labs/lab%20automation/#validate-lab-completion","title":"Validate lab completion","text":"<p>$ fawkes lab validate --lab white-belt-lab1</p>"},{"location":"dojo/labs/lab%20automation/#clean-up-lab","title":"Clean up lab","text":"<p>$ fawkes lab stop --module 1</p>"},{"location":"dojo/labs/lab%20automation/#validate-entire-belt-assessment","title":"Validate entire belt assessment","text":"<p>$ fawkes assessment validate --belt white</p>"},{"location":"dojo/labs/lab%20automation/#setup-lab-infrastructure-one-time","title":"Setup lab infrastructure (one-time)","text":"<p>$ fawkes setup \"\"\"</p>"},{"location":"dojo/labs/white/","title":"=============================================================================","text":""},{"location":"dojo/labs/white/#white-belt-lab-files-complete-lab-environments","title":"WHITE BELT LAB FILES - Complete Lab Environments","text":""},{"location":"dojo/labs/white/#_2","title":"=============================================================================","text":""},{"location":"dojo/labs/white/#this-file-contains-all-kubernetes-manifests-needed-for-white-belt-labs","title":"This file contains all Kubernetes manifests needed for White Belt labs.","text":""},{"location":"dojo/labs/white/#each-lab-is-separated-by-comments-and-can-be-extracted-as-needed","title":"Each lab is separated by comments and can be extracted as needed.","text":""},{"location":"dojo/labs/white/#_3","title":"=============================================================================","text":""},{"location":"dojo/labs/white/#module-1-lab-1-first-deployment","title":"MODULE 1 - LAB 1: First Deployment","text":""},{"location":"dojo/labs/white/#directory-labsmodule-01","title":"Directory: labs/module-01/","text":""},{"location":"dojo/labs/white/#_4","title":"=============================================================================","text":""},{"location":"dojo/labs/white/#labsmodule-01namespaceyaml","title":"labs/module-01/namespace.yaml","text":"<p>apiVersion: v1 kind: Namespace metadata:   name: lab-module-1   labels:     fawkes.io/module: \"1\"     fawkes.io/belt: \"white\"     fawkes.io/lab: \"first-deployment\"</p>"},{"location":"dojo/labs/white/#labsmodule-01sample-app-deploymentyaml","title":"labs/module-01/sample-app-deployment.yaml","text":"<p>apiVersion: apps/v1 kind: Deployment metadata:   name: my-first-app   namespace: lab-module-1   labels:     app: my-first-app     fawkes.io/module: \"1\" spec:   replicas: 1  # Students will change this to 3   selector:     matchLabels:       app: my-first-app   template:     metadata:       labels:         app: my-first-app     spec:       containers:       - name: app         image: nginxdemos/hello:latest  # Simple app that shows hostname         ports:         - containerPort: 80         resources:           requests:             memory: \"64Mi\"             cpu: \"100m\"           limits:             memory: \"128Mi\"             cpu: \"200m\"         livenessProbe:           httpGet:             path: /             port: 80           initialDelaySeconds: 5           periodSeconds: 10         readinessProbe:           httpGet:             path: /             port: 80           initialDelaySeconds: 5           periodSeconds: 5</p>"},{"location":"dojo/labs/white/#labsmodule-01sample-app-serviceyaml","title":"labs/module-01/sample-app-service.yaml","text":"<p>apiVersion: v1 kind: Service metadata:   name: my-first-app   namespace: lab-module-1   labels:     app: my-first-app spec:   type: ClusterIP   selector:     app: my-first-app   ports:   - port: 80     targetPort: 80     protocol: TCP     name: http</p>"},{"location":"dojo/labs/white/#labsmodule-01sample-app-ingressyaml","title":"labs/module-01/sample-app-ingress.yaml","text":"<p>apiVersion: networking.k8s.io/v1 kind: Ingress metadata:   name: my-first-app   namespace: lab-module-1   annotations:     nginx.ingress.kubernetes.io/rewrite-target: / spec:   ingressClassName: nginx   rules:   - host: my-first-app-lab1.fawkes.local     http:       paths:       - path: /         pathType: Prefix         backend:           service:             name: my-first-app             port:               number: 80</p>"},{"location":"dojo/labs/white/#labsmodule-01lab-instructionsyaml","title":"labs/module-01/lab-instructions.yaml","text":""},{"location":"dojo/labs/white/#configmap-with-lab-instructions","title":"ConfigMap with lab instructions","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: lab-instructions   namespace: lab-module-1 data:   instructions.md: |     # Module 1 Lab: Your First Deployment</p> <pre><code>## Objectives\n1. Clone the sample application repository\n2. Modify the deployment to use 3 replicas\n3. Deploy using kubectl or GitOps\n4. Verify all pods are running\n5. Access the application\n\n## Steps\n1. Review the deployment manifest in this namespace\n2. Edit deployment to set replicas: 3\n3. Apply changes: `kubectl apply -f deployment.yaml`\n4. Check status: `kubectl get pods -n lab-module-1`\n5. Access app: http://my-first-app-lab1.fawkes.local\n\n## Validation\nRun: `fawkes lab validate --lab white-belt-lab1`\n</code></pre>"},{"location":"dojo/labs/white/#_5","title":"=============================================================================","text":""},{"location":"dojo/labs/white/#module-2-lab-2-multi-environment-deployment-with-kustomize","title":"MODULE 2 - LAB 2: Multi-Environment Deployment with Kustomize","text":""},{"location":"dojo/labs/white/#directory-labsmodule-02","title":"Directory: labs/module-02/","text":""},{"location":"dojo/labs/white/#_6","title":"=============================================================================","text":""},{"location":"dojo/labs/white/#labsmodule-02namespace-devyaml","title":"labs/module-02/namespace-dev.yaml","text":"<p>apiVersion: v1 kind: Namespace metadata:   name: lab-module-2-dev   labels:     fawkes.io/module: \"2\"     fawkes.io/environment: \"dev\"</p>"},{"location":"dojo/labs/white/#labsmodule-02namespace-prodyaml","title":"labs/module-02/namespace-prod.yaml","text":"<p>apiVersion: v1 kind: Namespace metadata:   name: lab-module-2-prod   labels:     fawkes.io/module: \"2\"     fawkes.io/environment: \"prod\"</p>"},{"location":"dojo/labs/white/#labsmodule-02kustomizebasekustomizationyaml","title":"labs/module-02/kustomize/base/kustomization.yaml","text":""},{"location":"dojo/labs/white/#students-will-create-this-structure","title":"Students will create this structure","text":"<p>apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization</p> <p>resources:   - deployment.yaml   - service.yaml</p> <p>commonLabels:   app: my-first-app</p>"},{"location":"dojo/labs/white/#labsmodule-02kustomizebasedeploymentyaml","title":"labs/module-02/kustomize/base/deployment.yaml","text":"<p>apiVersion: apps/v1 kind: Deployment metadata:   name: my-first-app spec:   replicas: 1  # Base configuration   selector:     matchLabels:       app: my-first-app   template:     metadata:       labels:         app: my-first-app     spec:       containers:       - name: app         image: nginxdemos/hello:latest         ports:         - containerPort: 80</p>"},{"location":"dojo/labs/white/#labsmodule-02kustomizebaseserviceyaml","title":"labs/module-02/kustomize/base/service.yaml","text":"<p>apiVersion: v1 kind: Service metadata:   name: my-first-app spec:   type: ClusterIP   selector:     app: my-first-app   ports:   - port: 80     targetPort: 80</p>"},{"location":"dojo/labs/white/#labsmodule-02kustomizeoverlaysdevkustomizationyaml","title":"labs/module-02/kustomize/overlays/dev/kustomization.yaml","text":"<p>apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization</p> <p>namespace: lab-module-2-dev</p> <p>bases:   - ../../base</p> <p>patches:   - patch: |-       - op: replace         path: /spec/replicas         value: 1     target:       kind: Deployment       name: my-first-app</p> <p>commonLabels:   environment: dev</p>"},{"location":"dojo/labs/white/#labsmodule-02kustomizeoverlaysprodkustomizationyaml","title":"labs/module-02/kustomize/overlays/prod/kustomization.yaml","text":"<p>apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization</p> <p>namespace: lab-module-2-prod</p> <p>bases:   - ../../base</p> <p>patches:   - patch: |-       - op: replace         path: /spec/replicas         value: 3     target:       kind: Deployment       name: my-first-app   - patch: |-       - op: add         path: /spec/template/spec/containers/0/resources         value:           requests:             memory: \"128Mi\"             cpu: \"250m\"           limits:             memory: \"256Mi\"             cpu: \"500m\"     target:       kind: Deployment       name: my-first-app</p> <p>commonLabels:   environment: prod</p>"},{"location":"dojo/labs/white/#labsmodule-02argocd-app-devyaml","title":"labs/module-02/argocd-app-dev.yaml","text":"<p>apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name: my-first-app-dev   namespace: argocd spec:   project: default   source:     repoURL: https://github.com/student/my-first-app     targetRevision: main     path: k8s/overlays/dev   destination:     server: https://kubernetes.default.svc     namespace: lab-module-2-dev   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       - CreateNamespace=true</p>"},{"location":"dojo/labs/white/#labsmodule-02argocd-app-prodyaml","title":"labs/module-02/argocd-app-prod.yaml","text":"<p>apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name: my-first-app-prod   namespace: argocd spec:   project: default   source:     repoURL: https://github.com/student/my-first-app     targetRevision: main     path: k8s/overlays/prod   destination:     server: https://kubernetes.default.svc     namespace: lab-module-2-prod   syncPolicy:     automated:       prune: true       selfHeal: true     syncOptions:       - CreateNamespace=true</p>"},{"location":"dojo/labs/white/#_7","title":"=============================================================================","text":""},{"location":"dojo/labs/white/#module-3-lab-3-dora-metrics-dashboard","title":"MODULE 3 - LAB 3: DORA Metrics Dashboard","text":""},{"location":"dojo/labs/white/#directory-labsmodule-03","title":"Directory: labs/module-03/","text":""},{"location":"dojo/labs/white/#_8","title":"=============================================================================","text":""},{"location":"dojo/labs/white/#labsmodule-03namespaceyaml","title":"labs/module-03/namespace.yaml","text":"<p>apiVersion: v1 kind: Namespace metadata:   name: lab-module-3   labels:     fawkes.io/module: \"3\"</p>"},{"location":"dojo/labs/white/#labsmodule-03dora-exporter-deploymentyaml","title":"labs/module-03/dora-exporter-deployment.yaml","text":"<p>apiVersion: apps/v1 kind: Deployment metadata:   name: dora-exporter   namespace: monitoring   labels:     app: dora-exporter spec:   replicas: 1   selector:     matchLabels:       app: dora-exporter   template:     metadata:       labels:         app: dora-exporter       annotations:         prometheus.io/scrape: \"true\"         prometheus.io/port: \"8080\"         prometheus.io/path: \"/metrics\"     spec:       serviceAccountName: dora-exporter       containers:       - name: exporter         image: fawkes/dora-exporter:v1.0.0         ports:         - containerPort: 8080           name: metrics         env:         - name: KUBERNETES_NAMESPACE           valueFrom:             fieldRef:               fieldPath: metadata.namespace         resources:           requests:             memory: \"64Mi\"             cpu: \"100m\"           limits:             memory: \"128Mi\"             cpu: \"200m\"</p>"},{"location":"dojo/labs/white/#labsmodule-03dora-exporter-serviceyaml","title":"labs/module-03/dora-exporter-service.yaml","text":"<p>apiVersion: v1 kind: Service metadata:   name: dora-exporter   namespace: monitoring   labels:     app: dora-exporter spec:   type: ClusterIP   selector:     app: dora-exporter   ports:   - port: 8080     targetPort: 8080     name: metrics</p>"},{"location":"dojo/labs/white/#labsmodule-03dora-exporter-servicemonitoryaml","title":"labs/module-03/dora-exporter-servicemonitor.yaml","text":"<p>apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata:   name: dora-exporter   namespace: monitoring   labels:     app: dora-exporter spec:   selector:     matchLabels:       app: dora-exporter   endpoints:   - port: metrics     interval: 30s     path: /metrics</p>"},{"location":"dojo/labs/white/#labsmodule-03dora-exporter-rbacyaml","title":"labs/module-03/dora-exporter-rbac.yaml","text":"<p>apiVersion: v1 kind: ServiceAccount metadata:   name: dora-exporter   namespace: monitoring</p> <p>apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata:   name: dora-exporter rules: - apiGroups: [\"apps\"]   resources: [\"deployments\", \"replicasets\"]   verbs: [\"get\", \"list\", \"watch\"] - apiGroups: [\"\"]   resources: [\"pods\", \"events\"]   verbs: [\"get\", \"list\", \"watch\"] - apiGroups: [\"argoproj.io\"]   resources: [\"applications\"]   verbs: [\"get\", \"list\", \"watch\"]</p> <p>apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata:   name: dora-exporter roleRef:   apiGroup: rbac.authorization.k8s.io   kind: ClusterRole   name: dora-exporter subjects: - kind: ServiceAccount   name: dora-exporter   namespace: monitoring</p>"},{"location":"dojo/labs/white/#labsmodule-03grafana-dashboard-configmapyaml","title":"labs/module-03/grafana-dashboard-configmap.yaml","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: dora-dashboard   namespace: monitoring   labels:     grafana_dashboard: \"1\" data:   dora-metrics.json: |     {       \"dashboard\": {         \"title\": \"DORA Metrics\",         \"panels\": [           {             \"title\": \"Deployment Frequency\",             \"targets\": [               {                 \"expr\": \"rate(deployments_total[7d])\"               }             ]           },           {             \"title\": \"Lead Time for Changes\",             \"targets\": [               {                 \"expr\": \"histogram_quantile(0.95, rate(lead_time_seconds_bucket[1d]))\"               }             ]           },           {             \"title\": \"Mean Time to Recovery\",             \"targets\": [               {                 \"expr\": \"histogram_quantile(0.95, rate(mttr_seconds_bucket[1d]))\"               }             ]           },           {             \"title\": \"Change Failure Rate\",             \"targets\": [               {                 \"expr\": \"(rate(deployments_failed_total[7d]) / rate(deployments_total[7d])) * 100\"               }             ]           }         ]       }     }</p>"},{"location":"dojo/labs/white/#labsmodule-03sample-app-with-annotationsyaml","title":"labs/module-03/sample-app-with-annotations.yaml","text":""},{"location":"dojo/labs/white/#updated-deployment-with-prometheus-annotations","title":"Updated deployment with Prometheus annotations","text":"<p>apiVersion: apps/v1 kind: Deployment metadata:   name: my-first-app   namespace: lab-module-3   annotations:     fawkes.io/dora-tracking: \"true\" spec:   replicas: 3   selector:     matchLabels:       app: my-first-app   template:     metadata:       labels:         app: my-first-app       annotations:         prometheus.io/scrape: \"true\"         prometheus.io/port: \"8080\"         prometheus.io/path: \"/metrics\"     spec:       containers:       - name: app         image: nginxdemos/hello:latest         ports:         - containerPort: 80           name: http         - containerPort: 8080           name: metrics</p>"},{"location":"dojo/labs/white/#_9","title":"=============================================================================","text":""},{"location":"dojo/labs/white/#module-4-lab-your-first-deployment-guided","title":"MODULE 4 - LAB: Your First Deployment (Guided)","text":""},{"location":"dojo/labs/white/#directory-labsmodule-04","title":"Directory: labs/module-04/","text":""},{"location":"dojo/labs/white/#_10","title":"=============================================================================","text":""},{"location":"dojo/labs/white/#labsmodule-04namespaceyaml","title":"labs/module-04/namespace.yaml","text":"<p>apiVersion: v1 kind: Namespace metadata:   name: lab-module-4   labels:     fawkes.io/module: \"4\"     fawkes.io/belt: \"white\"</p>"},{"location":"dojo/labs/white/#labsmodule-04sample-app-templateyaml","title":"labs/module-04/sample-app-template.yaml","text":""},{"location":"dojo/labs/white/#template-that-students-will-fill-in","title":"Template that students will fill in","text":"<p>apiVersion: apps/v1 kind: Deployment metadata:   name: TODO  # Student fills this in   namespace: lab-module-4 spec:   replicas: TODO  # Student sets this   selector:     matchLabels:       app: TODO  # Student sets this   template:     metadata:       labels:         app: TODO  # Student sets this     spec:       containers:       - name: app         image: nginxdemos/hello:latest         ports:         - containerPort: 80</p>"},{"location":"dojo/labs/white/#labsmodule-04solutiondeploymentyaml","title":"labs/module-04/solution/deployment.yaml","text":""},{"location":"dojo/labs/white/#reference-solution-hidden-from-students-initially","title":"Reference solution (hidden from students initially)","text":"<p>apiVersion: apps/v1 kind: Deployment metadata:   name: my-app   namespace: lab-module-4   labels:     app: my-app     fawkes.io/lab: \"module-4\" spec:   replicas: 2   selector:     matchLabels:       app: my-app   template:     metadata:       labels:         app: my-app     spec:       containers:       - name: app         image: nginxdemos/hello:latest         ports:         - containerPort: 80         resources:           requests:             memory: \"64Mi\"             cpu: \"100m\"           limits:             memory: \"128Mi\"             cpu: \"200m\"</p> <p>apiVersion: v1 kind: Service metadata:   name: my-app   namespace: lab-module-4 spec:   type: ClusterIP   selector:     app: my-app   ports:   - port: 80     targetPort: 80</p>"},{"location":"dojo/labs/white/#_11","title":"=============================================================================","text":""},{"location":"dojo/labs/white/#shared-resources-used-by-multiple-labs","title":"SHARED RESOURCES - Used by multiple labs","text":""},{"location":"dojo/labs/white/#directory-labsshared","title":"Directory: labs/shared/","text":""},{"location":"dojo/labs/white/#_12","title":"=============================================================================","text":""},{"location":"dojo/labs/white/#labssharedresource-quotayaml","title":"labs/shared/resource-quota.yaml","text":""},{"location":"dojo/labs/white/#applied-to-each-lab-namespace-for-resource-management","title":"Applied to each lab namespace for resource management","text":"<p>apiVersion: v1 kind: ResourceQuota metadata:   name: lab-quota spec:   hard:     requests.cpu: \"2\"     requests.memory: \"4Gi\"     limits.cpu: \"4\"     limits.memory: \"8Gi\"     persistentvolumeclaims: \"5\"     pods: \"20\"     services: \"10\"</p>"},{"location":"dojo/labs/white/#labssharednetwork-policyyaml","title":"labs/shared/network-policy.yaml","text":""},{"location":"dojo/labs/white/#network-isolation-for-lab-environments","title":"Network isolation for lab environments","text":"<p>apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata:   name: lab-isolation spec:   podSelector: {}   policyTypes:   - Ingress   - Egress   ingress:   - from:     - namespaceSelector:         matchLabels:           fawkes.io/type: lab   egress:   - to:     - namespaceSelector:         matchLabels:           fawkes.io/type: lab   - to:  # Allow DNS     - namespaceSelector:         matchLabels:           name: kube-system     ports:     - protocol: UDP       port: 53</p>"},{"location":"dojo/labs/white/#labssharedlab-rbacyaml","title":"labs/shared/lab-rbac.yaml","text":""},{"location":"dojo/labs/white/#rbac-for-lab-users","title":"RBAC for lab users","text":"<p>apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata:   name: lab-user rules: - apiGroups: [\"\", \"apps\", \"networking.k8s.io\"]   resources: [\"\"]   verbs: [\"\"] - apiGroups: [\"argoproj.io\"]   resources: [\"applications\"]   verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"]</p> <p>apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata:   name: lab-user-binding roleRef:   apiGroup: rbac.authorization.k8s.io   kind: Role   name: lab-user subjects: - kind: Group   name: fawkes-students   apiGroup: rbac.authorization.k8s.io</p>"},{"location":"dojo/labs/yellow%20n%20green/","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#yellow-belt-lab-files-cicd-mastery-modules-5-8","title":"YELLOW BELT LAB FILES - CI/CD Mastery (Modules 5-8)","text":""},{"location":"dojo/labs/yellow%20n%20green/#_2","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#_3","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#module-5-lab-1-production-ci-pipeline","title":"MODULE 5 - LAB 1: Production CI Pipeline","text":""},{"location":"dojo/labs/yellow%20n%20green/#directory-labsmodule-05","title":"Directory: labs/module-05/","text":""},{"location":"dojo/labs/yellow%20n%20green/#_4","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-05github-actions-templateyaml","title":"labs/module-05/github-actions-template.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#githubworkflowsciyml-template-for-students","title":".github/workflows/ci.yml template for students","text":"<p>name: CI Pipeline</p> <p>on:   push:     branches: [ main, develop ]   pull_request:     branches: [ main ]</p> <p>jobs:   test:     runs-on: ubuntu-latest     steps:       - uses: actions/checkout@v3</p> <pre><code>  - name: Setup Node.js\n    uses: actions/setup-node@v3\n    with:\n      node-version: '18'\n      cache: 'npm'\n\n  - name: Install dependencies\n    run: npm ci\n\n  - name: Run tests\n    run: npm test -- --coverage\n\n  - name: Check coverage\n    run: |\n      COVERAGE=$(node -e \"console.log(require('./coverage/coverage-summary.json').total.lines.pct)\")\n      if [ $(echo \"$COVERAGE &lt; 80\" | bc) -eq 1 ]; then\n        echo \"Coverage $COVERAGE% is below 80%\"\n        exit 1\n      fi\n</code></pre> <p>security-scan:     runs-on: ubuntu-latest     steps:       - uses: actions/checkout@v3</p> <pre><code>  - name: Run Semgrep\n    uses: returntocorp/semgrep-action@v1\n    with:\n      config: auto\n\n  - name: Run npm audit\n    run: npm audit --audit-level=high\n</code></pre> <p>build:     needs: [test, security-scan]     runs-on: ubuntu-latest     steps:       - uses: actions/checkout@v3</p> <pre><code>  - name: Set up Docker Buildx\n    uses: docker/setup-buildx-action@v2\n\n  - name: Build image\n    uses: docker/build-push-action@v4\n    with:\n      context: .\n      push: false\n      tags: my-app:${{ github.sha }}\n      cache-from: type=gha\n      cache-to: type=gha,mode=max\n\n  - name: Scan image\n    uses: aquasecurity/trivy-action@master\n    with:\n      image-ref: my-app:${{ github.sha }}\n      exit-code: '1'\n      severity: 'CRITICAL,HIGH'\n</code></pre>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-05tekton-pipelineyaml","title":"labs/module-05/tekton-pipeline.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#tekton-pipeline-alternative","title":"Tekton pipeline alternative","text":"<p>apiVersion: tekton.dev/v1beta1 kind: Pipeline metadata:   name: ci-pipeline   namespace: tekton-pipelines spec:   params:     - name: git-url       type: string     - name: git-revision       type: string       default: main   workspaces:     - name: shared-data   tasks:     - name: fetch-source       taskRef:         name: git-clone       workspaces:         - name: output           workspace: shared-data       params:         - name: url           value: $(params.git-url)         - name: revision           value: $(params.git-revision)</p> <pre><code>- name: run-tests\n  runAfter: [fetch-source]\n  taskRef:\n    name: npm-test\n  workspaces:\n    - name: source\n      workspace: shared-data\n\n- name: security-scan\n  runAfter: [fetch-source]\n  taskRef:\n    name: semgrep-scan\n  workspaces:\n    - name: source\n      workspace: shared-data\n\n- name: build-image\n  runAfter: [run-tests, security-scan]\n  taskRef:\n    name: kaniko\n  workspaces:\n    - name: source\n      workspace: shared-data\n  params:\n    - name: IMAGE\n      value: \"registry.fawkes.io/my-app:$(params.git-revision)\"\n</code></pre>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-05quality-gatesyaml","title":"labs/module-05/quality-gates.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#quality-gates-configuration","title":"Quality gates configuration","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: quality-gates   namespace: lab-module-5 data:   gates.yaml: |     gates:       test_coverage:         threshold: 80         action: block</p> <pre><code>  security_vulnerabilities:\n    critical: 0\n    high: 0\n    medium: 5\n    action: block\n\n  code_quality:\n    min_maintainability: B\n    max_complexity: 15\n    action: warn\n\n  build_time:\n    max_duration_seconds: 300\n    action: warn\n</code></pre>"},{"location":"dojo/labs/yellow%20n%20green/#_5","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#module-6-lab-2-golden-path-pipelines","title":"MODULE 6 - LAB 2: Golden Path Pipelines","text":""},{"location":"dojo/labs/yellow%20n%20green/#directory-labsmodule-06","title":"Directory: labs/module-06/","text":""},{"location":"dojo/labs/yellow%20n%20green/#_6","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-06golden-path-templateyaml","title":"labs/module-06/golden-path-template.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#reusable-workflow-template","title":"Reusable workflow template","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: golden-path-template   namespace: lab-module-6 data:   node-service.yaml: |     # Golden Path for Node.js Services     name: Node.js Service Pipeline</p> <pre><code>on:\n  push:\n    branches: [main, develop]\n\njobs:\n  golden-path:\n    uses: fawkes/workflows/.github/workflows/golden-path-node.yml@v1\n    with:\n      node-version: '18'\n      test-coverage-threshold: 80\n      security-scan: true\n      deploy-dev: true\n    secrets:\n      REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}\n</code></pre> <p>python-service.yaml: |     # Golden Path for Python Services     name: Python Service Pipeline</p> <pre><code>on:\n  push:\n    branches: [main]\n\njobs:\n  golden-path:\n    uses: fawkes/workflows/.github/workflows/golden-path-python.yml@v1\n    with:\n      python-version: '3.11'\n      test-framework: pytest\n      security-scan: true\n    secrets:\n      REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}\n</code></pre>"},{"location":"dojo/labs/yellow%20n%20green/#_7","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#module-7-lab-3-security-scanning-quality-gates","title":"MODULE 7 - LAB 3: Security Scanning &amp; Quality Gates","text":""},{"location":"dojo/labs/yellow%20n%20green/#directory-labsmodule-07","title":"Directory: labs/module-07/","text":""},{"location":"dojo/labs/yellow%20n%20green/#_8","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-07semgrep-configyaml","title":"labs/module-07/semgrep-config.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#semgrep-security-scanning-configuration","title":"Semgrep security scanning configuration","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: semgrep-config   namespace: lab-module-7 data:   .semgrep.yml: |     rules:       - id: hardcoded-secret         patterns:           - pattern: password = \"...\"           - pattern: api_key = \"...\"         message: Hardcoded secret detected         severity: ERROR</p> <pre><code>  - id: sql-injection\n    patterns:\n      - pattern: execute($SQL + $INPUT)\n    message: Possible SQL injection\n    severity: ERROR\n\n  - id: xss-vulnerability\n    patterns:\n      - pattern: innerHTML = $INPUT\n    message: Possible XSS vulnerability\n    severity: WARNING\n</code></pre>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-07trivy-configyaml","title":"labs/module-07/trivy-config.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#trivy-image-scanning-configuration","title":"Trivy image scanning configuration","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: trivy-config   namespace: lab-module-7 data:   trivy.yaml: |     severity:       - CRITICAL       - HIGH       - MEDIUM</p> <pre><code>vulnerability:\n  type:\n    - os\n    - library\n\nignore-unfixed: true\n\nexit-code: 1  # Fail on findings\n\ncache:\n  ttl: 24h\n</code></pre>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-07sonarqube-propertiesyaml","title":"labs/module-07/sonarqube-properties.yaml","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: sonarqube-config   namespace: lab-module-7 data:   sonar-project.properties: |     sonar.projectKey=my-first-app     sonar.projectName=My First App     sonar.sources=src     sonar.tests=test     sonar.javascript.lcov.reportPaths=coverage/lcov.info</p> <pre><code># Quality Gates\nsonar.qualitygate.wait=true\nsonar.coverage.minimum=80\nsonar.bugs.blocker.max=0\nsonar.vulnerabilities.critical.max=0\n</code></pre>"},{"location":"dojo/labs/yellow%20n%20green/#_9","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#module-8-lab-artifact-management","title":"MODULE 8 - LAB: Artifact Management","text":""},{"location":"dojo/labs/yellow%20n%20green/#directory-labsmodule-08","title":"Directory: labs/module-08/","text":""},{"location":"dojo/labs/yellow%20n%20green/#_10","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-08container-registryyaml","title":"labs/module-08/container-registry.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#harbor-container-registry-setup","title":"Harbor container registry setup","text":"<p>apiVersion: v1 kind: Secret metadata:   name: registry-credentials   namespace: lab-module-8 type: kubernetes.io/dockerconfigjson data:   .dockerconfigjson: BASE64_ENCODED_CONFIG</p>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-08image-signing-setupyaml","title":"labs/module-08/image-signing-setup.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#cosign-image-signing-configuration","title":"Cosign image signing configuration","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: cosign-config   namespace: lab-module-8 data:   sign-image.sh: |     #!/bin/bash     set -e</p> <pre><code>IMAGE=$1\n\necho \"Signing image: $IMAGE\"\n\n# Generate key pair (in real scenario, use existing keys)\ncosign generate-key-pair\n\n# Sign the image\ncosign sign --key cosign.key $IMAGE\n\n# Generate SBOM\nsyft packages $IMAGE -o spdx-json=sbom.json\n\n# Attach SBOM to image\ncosign attach sbom --sbom sbom.json $IMAGE\n\necho \"Image signed successfully\"\necho \"Verify with: cosign verify --key cosign.pub $IMAGE\"\n</code></pre>"},{"location":"dojo/labs/yellow%20n%20green/#_11","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#green-belt-lab-files-gitops-deployment-modules-9-12","title":"GREEN BELT LAB FILES - GitOps &amp; Deployment (Modules 9-12)","text":""},{"location":"dojo/labs/yellow%20n%20green/#_12","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#_13","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#module-9-lab-1-gitops-with-argocd","title":"MODULE 9 - LAB 1: GitOps with ArgoCD","text":""},{"location":"dojo/labs/yellow%20n%20green/#directory-labsmodule-09","title":"Directory: labs/module-09/","text":""},{"location":"dojo/labs/yellow%20n%20green/#_14","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-09namespaceyaml","title":"labs/module-09/namespace.yaml","text":"<p>apiVersion: v1 kind: Namespace metadata:   name: lab-module-9   labels:     fawkes.io/module: \"9\"     fawkes.io/belt: \"green\"</p>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-09argocd-applicationyaml","title":"labs/module-09/argocd-application.yaml","text":"<p>apiVersion: argoproj.io/v1alpha1 kind: Application metadata:   name: my-app-gitops   namespace: argocd   finalizers:     - resources-finalizer.argocd.argoproj.io spec:   project: default</p> <p>source:     repoURL: https://github.com/student/my-app     targetRevision: HEAD     path: k8s/base</p> <p>destination:     server: https://kubernetes.default.svc     namespace: lab-module-9</p> <p>syncPolicy:     automated:       prune: true       selfHeal: true       allowEmpty: false     syncOptions:       - CreateNamespace=true       - PrunePropagationPolicy=foreground       - PruneLast=true     retry:       limit: 5       backoff:         duration: 5s         factor: 2         maxDuration: 3m</p>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-09sync-waves-exampleyaml","title":"labs/module-09/sync-waves-example.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#demonstrates-argocd-sync-waves","title":"Demonstrates ArgoCD sync waves","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: database-config   namespace: lab-module-9   annotations:     argocd.argoproj.io/sync-wave: \"1\"  # Deploy first data:   database: \"postgres\"</p> <p>apiVersion: apps/v1 kind: Deployment metadata:   name: backend   namespace: lab-module-9   annotations:     argocd.argoproj.io/sync-wave: \"2\"  # Deploy after config spec:   replicas: 2   selector:     matchLabels:       app: backend   template:     metadata:       labels:         app: backend     spec:       containers:       - name: app         image: backend:v1.0.0         envFrom:         - configMapRef:             name: database-config</p>"},{"location":"dojo/labs/yellow%20n%20green/#_15","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#module-10-lab-2-deployment-strategies","title":"MODULE 10 - LAB 2: Deployment Strategies","text":""},{"location":"dojo/labs/yellow%20n%20green/#directory-labsmodule-10","title":"Directory: labs/module-10/","text":""},{"location":"dojo/labs/yellow%20n%20green/#_16","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-10blue-green-deploymentyaml","title":"labs/module-10/blue-green-deployment.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#blue-green-deployment-example","title":"Blue-Green deployment example","text":"<p>apiVersion: v1 kind: Service metadata:   name: my-app   namespace: lab-module-10 spec:   selector:     app: my-app     version: blue  # Switch to 'green' for blue-green switch   ports:   - port: 80     targetPort: 8080</p> <p>apiVersion: apps/v1 kind: Deployment metadata:   name: my-app-blue   namespace: lab-module-10   labels:     app: my-app     version: blue spec:   replicas: 3   selector:     matchLabels:       app: my-app       version: blue   template:     metadata:       labels:         app: my-app         version: blue     spec:       containers:       - name: app         image: my-app:v1.0.0         ports:         - containerPort: 8080</p> <p>apiVersion: apps/v1 kind: Deployment metadata:   name: my-app-green   namespace: lab-module-10   labels:     app: my-app     version: green spec:   replicas: 3   selector:     matchLabels:       app: my-app       version: green   template:     metadata:       labels:         app: my-app         version: green     spec:       containers:       - name: app         image: my-app:v2.0.0  # New version         ports:         - containerPort: 8080</p>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-10canary-deploymentyaml","title":"labs/module-10/canary-deployment.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#manual-canary-deployment-before-flagger","title":"Manual canary deployment (before Flagger)","text":"<p>apiVersion: apps/v1 kind: Deployment metadata:   name: my-app-stable   namespace: lab-module-10 spec:   replicas: 9  # 90% of traffic   selector:     matchLabels:       app: my-app       track: stable   template:     metadata:       labels:         app: my-app         track: stable     spec:       containers:       - name: app         image: my-app:v1.0.0</p> <p>apiVersion: apps/v1 kind: Deployment metadata:   name: my-app-canary   namespace: lab-module-10 spec:   replicas: 1  # 10% of traffic   selector:     matchLabels:       app: my-app       track: canary   template:     metadata:       labels:         app: my-app         track: canary     spec:       containers:       - name: app         image: my-app:v2.0.0</p> <p>apiVersion: v1 kind: Service metadata:   name: my-app   namespace: lab-module-10 spec:   selector:     app: my-app  # Routes to both stable and canary   ports:   - port: 80     targetPort: 8080</p>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-10rolling-updateyaml","title":"labs/module-10/rolling-update.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#rolling-update-strategy","title":"Rolling update strategy","text":"<p>apiVersion: apps/v1 kind: Deployment metadata:   name: my-app-rolling   namespace: lab-module-10 spec:   replicas: 5   strategy:     type: RollingUpdate     rollingUpdate:       maxSurge: 1        # 1 extra pod during update       maxUnavailable: 1  # 1 pod can be unavailable   selector:     matchLabels:       app: my-app   template:     metadata:       labels:         app: my-app     spec:       containers:       - name: app         image: my-app:v2.0.0         readinessProbe:           httpGet:             path: /health             port: 8080           initialDelaySeconds: 5           periodSeconds: 5</p>"},{"location":"dojo/labs/yellow%20n%20green/#_17","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#module-11-lab-3-progressive-delivery-with-flagger","title":"MODULE 11 - LAB 3: Progressive Delivery with Flagger","text":""},{"location":"dojo/labs/yellow%20n%20green/#directory-labsmodule-11","title":"Directory: labs/module-11/","text":""},{"location":"dojo/labs/yellow%20n%20green/#_18","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-11flagger-canaryyaml","title":"labs/module-11/flagger-canary.yaml","text":"<p>apiVersion: flagger.app/v1beta1 kind: Canary metadata:   name: my-app   namespace: lab-module-11 spec:   # deployment reference   targetRef:     apiVersion: apps/v1     kind: Deployment     name: my-app</p> <p># HPA reference (optional)   autoscalerRef:     apiVersion: autoscaling/v2     kind: HorizontalPodAutoscaler     name: my-app</p> <p># service port   service:     port: 80     targetPort: 8080</p> <p># canary analysis   analysis:     # schedule interval     interval: 1m</p> <pre><code># max number of failed metric checks before rollback\nthreshold: 5\n\n# max traffic percentage routed to canary\nmaxWeight: 50\n\n# canary increment step\nstepWeight: 10\n\n# metrics\nmetrics:\n- name: request-success-rate\n  thresholdRange:\n    min: 99\n  interval: 1m\n\n- name: request-duration\n  thresholdRange:\n    max: 500\n  interval: 30s\n\n# webhooks\nwebhooks:\n- name: load-test\n  url: http://flagger-loadtester/\n  timeout: 5s\n  metadata:\n    type: cmd\n    cmd: \"hey -z 1m -q 10 -c 2 http://my-app-canary.lab-module-11/\"\n</code></pre>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-11flagger-loadtesteryaml","title":"labs/module-11/flagger-loadtester.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#load-testing-service-for-flagger","title":"Load testing service for Flagger","text":"<p>apiVersion: apps/v1 kind: Deployment metadata:   name: flagger-loadtester   namespace: lab-module-11 spec:   replicas: 1   selector:     matchLabels:       app: flagger-loadtester   template:     metadata:       labels:         app: flagger-loadtester     spec:       containers:       - name: loadtester         image: ghcr.io/fluxcd/flagger-loadtester:0.29.0         ports:         - name: http           containerPort: 8080         command:         - ./loadtester         - -port=8080         - -log-level=info         - -timeout=1h</p> <p>apiVersion: v1 kind: Service metadata:   name: flagger-loadtester   namespace: lab-module-11 spec:   type: ClusterIP   selector:     app: flagger-loadtester   ports:   - name: http     port: 80     targetPort: http</p>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-11prometheus-metricsyaml","title":"labs/module-11/prometheus-metrics.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#servicemonitor-for-prometheus-metrics","title":"ServiceMonitor for Prometheus metrics","text":"<p>apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata:   name: my-app   namespace: lab-module-11 spec:   selector:     matchLabels:       app: my-app   endpoints:   - port: http-metrics     interval: 15s</p>"},{"location":"dojo/labs/yellow%20n%20green/#_19","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#module-12-lab-4-rollback-incident-response","title":"MODULE 12 - LAB 4: Rollback &amp; Incident Response","text":""},{"location":"dojo/labs/yellow%20n%20green/#directory-labsmodule-12","title":"Directory: labs/module-12/","text":""},{"location":"dojo/labs/yellow%20n%20green/#_20","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-12incident-simulationyaml","title":"labs/module-12/incident-simulation.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#deployment-that-will-fail-for-practice","title":"Deployment that will fail (for practice)","text":"<p>apiVersion: apps/v1 kind: Deployment metadata:   name: broken-app   namespace: lab-module-12   labels:     app: broken-app spec:   replicas: 3   selector:     matchLabels:       app: broken-app   template:     metadata:       labels:         app: broken-app     spec:       containers:       - name: app         image: nginx:latest         ports:         - containerPort: 80         env:         - name: CRASH_ON_START           value: \"true\"  # This will cause the app to crash         livenessProbe:           httpGet:             path: /health             port: 8080           initialDelaySeconds: 5           periodSeconds: 5           failureThreshold: 3</p>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-12rollback-scriptyaml","title":"labs/module-12/rollback-script.yaml","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: rollback-scripts   namespace: lab-module-12 data:   rollback-deployment.sh: |     #!/bin/bash     set -e</p> <pre><code>DEPLOYMENT_NAME=$1\nNAMESPACE=${2:-default}\n\necho \"Rolling back deployment: $DEPLOYMENT_NAME in namespace: $NAMESPACE\"\n\n# Get current revision\nCURRENT=$(kubectl rollout history deployment/$DEPLOYMENT_NAME -n $NAMESPACE | tail -1 | awk '{print $1}')\necho \"Current revision: $CURRENT\"\n\n# Rollback to previous revision\nkubectl rollout undo deployment/$DEPLOYMENT_NAME -n $NAMESPACE\n\n# Wait for rollback to complete\nkubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE --timeout=5m\n\necho \"Rollback completed successfully\"\n\n# Verify pods are running\nkubectl get pods -n $NAMESPACE -l app=$DEPLOYMENT_NAME\n</code></pre> <p>rollback-argocd.sh: |     #!/bin/bash     set -e</p> <pre><code>APP_NAME=$1\n\necho \"Rolling back ArgoCD application: $APP_NAME\"\n\n# Get current revision\nCURRENT=$(argocd app get $APP_NAME -o json | jq -r '.status.sync.revision')\necho \"Current revision: $CURRENT\"\n\n# Get history\nargocd app history $APP_NAME\n\n# Rollback to previous revision\nPREVIOUS=$(argocd app history $APP_NAME -o json | jq -r '.[-2].id')\nargocd app rollback $APP_NAME $PREVIOUS\n\n# Wait for sync\nargocd app wait $APP_NAME --timeout 300\n\necho \"ArgoCD rollback completed\"\n</code></pre>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-12incident-playbookyaml","title":"labs/module-12/incident-playbook.yaml","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: incident-playbook   namespace: lab-module-12 data:   playbook.md: |     # Incident Response Playbook</p> <pre><code>## Phase 1: Detection (0-2 minutes)\n- [ ] Alert received\n- [ ] Acknowledge incident\n- [ ] Create incident channel (#incident-YYYYMMDD-NNN)\n- [ ] Page on-call engineer\n\n## Phase 2: Triage (2-5 minutes)\n- [ ] Check recent deployments\n- [ ] Review error logs\n- [ ] Check monitoring dashboards\n- [ ] Determine severity (P0/P1/P2)\n\n## Phase 3: Mitigation (5-10 minutes)\n- [ ] Decision: Rollback or fix-forward?\n- [ ] If rollback: `kubectl rollout undo deployment/NAME`\n- [ ] If fix-forward: Deploy hotfix\n- [ ] Verify mitigation: Check metrics\n\n## Phase 4: Recovery (10-15 minutes)\n- [ ] Confirm all services healthy\n- [ ] Notify stakeholders\n- [ ] Update status page\n- [ ] Document timeline\n\n## Phase 5: Postmortem (Within 48 hours)\n- [ ] Schedule postmortem meeting\n- [ ] Document root cause\n- [ ] Create action items\n- [ ] Update runbooks\n</code></pre>"},{"location":"dojo/labs/yellow%20n%20green/#labsmodule-12monitoring-alertsyaml","title":"labs/module-12/monitoring-alerts.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#prometheusrule-for-incident-detection","title":"PrometheusRule for incident detection","text":"<p>apiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata:   name: app-alerts   namespace: lab-module-12 spec:   groups:   - name: app-health     interval: 30s     rules:     - alert: HighErrorRate       expr: |         (           rate(http_requests_total{status=~\"5..\"}[5m])           /           rate(http_requests_total[5m])         ) &gt; 0.05       for: 2m       labels:         severity: critical       annotations:         summary: \"High error rate detected\"         description: \"Error rate is {{ $value | humanizePercentage }}\"</p> <pre><code>- alert: PodCrashLooping\n  expr: |\n    rate(kube_pod_container_status_restarts_total[15m]) &gt; 0\n  for: 5m\n  labels:\n    severity: warning\n  annotations:\n    summary: \"Pod is crash looping\"\n    description: \"Pod {{ $labels.pod }} is restarting frequently\"\n\n- alert: DeploymentReplicasMismatch\n  expr: |\n    kube_deployment_spec_replicas != kube_deployment_status_replicas_available\n  for: 10m\n  labels:\n    severity: warning\n  annotations:\n    summary: \"Deployment replicas mismatch\"\n    description: \"Deployment {{ $labels.deployment }} has mismatched replicas\"\n</code></pre>"},{"location":"dojo/labs/yellow%20n%20green/#_21","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#shared-green-belt-resources","title":"SHARED GREEN BELT RESOURCES","text":""},{"location":"dojo/labs/yellow%20n%20green/#directory-labsgreen-belt-shared","title":"Directory: labs/green-belt-shared/","text":""},{"location":"dojo/labs/yellow%20n%20green/#_22","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#labsgreen-belt-sharedflagger-installyaml","title":"labs/green-belt-shared/flagger-install.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#install-flagger-for-all-green-belt-labs","title":"Install Flagger for all green belt labs","text":"<p>apiVersion: v1 kind: Namespace metadata:   name: flagger-system</p> <p>apiVersion: apps/v1 kind: Deployment metadata:   name: flagger   namespace: flagger-system spec:   replicas: 1   selector:     matchLabels:       app: flagger   template:     metadata:       labels:         app: flagger     spec:       serviceAccountName: flagger       containers:       - name: flagger         image: ghcr.io/fluxcd/flagger:1.32.0         ports:         - name: http           containerPort: 8080         command:         - ./flagger         - -mesh-provider=kubernetes         - -metrics-server=http://prometheus.monitoring:9090</p>"},{"location":"dojo/labs/yellow%20n%20green/#labsgreen-belt-sharedargocd-configyaml","title":"labs/green-belt-shared/argocd-config.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#argocd-configuration-for-labs","title":"ArgoCD configuration for labs","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: argocd-cm   namespace: argocd data:   # Enable anonymous access for lab environment   users.anonymous.enabled: \"true\"</p> <p># Increase timeout for sync operations   timeout.reconciliation: \"300s\"</p> <p># Resource customizations   resource.customizations: |     apps/Deployment:       health.lua: |         hs = {}         if obj.status ~= nil then           if obj.status.updatedReplicas == obj.spec.replicas then             hs.status = \"Healthy\"             hs.message = \"Deployment is healthy\"             return hs           end         end         hs.status = \"Progressing\"         hs.message = \"Waiting for deployment\"         return hs</p>"},{"location":"dojo/labs/yellow%20n%20green/#labsgreen-belt-sharedlab-app-baseyaml","title":"labs/green-belt-shared/lab-app-base.yaml","text":""},{"location":"dojo/labs/yellow%20n%20green/#base-application-used-across-multiple-labs","title":"Base application used across multiple labs","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: app-config data:   config.json: |     {       \"environment\": \"lab\",       \"logging\": {         \"level\": \"info\",         \"format\": \"json\"       },       \"metrics\": {         \"enabled\": true,         \"port\": 8080       },       \"health\": {         \"endpoint\": \"/health\",         \"liveness\": \"/health/live\",         \"readiness\": \"/health/ready\"       }     }</p> <p>apiVersion: apps/v1 kind: Deployment metadata:   name: sample-app spec:   replicas: 2   selector:     matchLabels:       app: sample-app   template:     metadata:       labels:         app: sample-app       annotations:         prometheus.io/scrape: \"true\"         prometheus.io/port: \"8080\"         prometheus.io/path: \"/metrics\"     spec:       containers:       - name: app         image: ghcr.io/fawkes/sample-app:v1.0.0         ports:         - name: http           containerPort: 8080         - name: metrics           containerPort: 9090         env:         - name: CONFIG_PATH           value: /config/config.json         volumeMounts:         - name: config           mountPath: /config         livenessProbe:           httpGet:             path: /health/live             port: 8080           initialDelaySeconds: 10           periodSeconds: 10         readinessProbe:           httpGet:             path: /health/ready             port: 8080           initialDelaySeconds: 5           periodSeconds: 5         resources:           requests:             memory: \"128Mi\"             cpu: \"100m\"           limits:             memory: \"256Mi\"             cpu: \"500m\"       volumes:       - name: config         configMap:           name: app-config</p> <p>apiVersion: v1 kind: Service metadata:   name: sample-app spec:   type: ClusterIP   selector:     app: sample-app   ports:   - name: http     port: 80     targetPort: http   - name: metrics     port: 9090     targetPort: metrics</p>"},{"location":"dojo/labs/yellow%20n%20green/#_23","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#lab-setup-automation","title":"LAB SETUP AUTOMATION","text":""},{"location":"dojo/labs/yellow%20n%20green/#_24","title":"=============================================================================","text":""},{"location":"dojo/labs/yellow%20n%20green/#labsscriptssetup-labsh","title":"labs/scripts/setup-lab.sh","text":"<p>apiVersion: v1 kind: ConfigMap metadata:   name: lab-setup-scripts   namespace: fawkes-system data:   setup-module.sh: |     #!/bin/bash     # Automated lab setup script     set -e</p> <pre><code>MODULE=$1\nSTUDENT_EMAIL=$2\n\nif [ -z \"$MODULE\" ] || [ -z \"$STUDENT_EMAIL\" ]; then\n  echo \"Usage: $0 &lt;module-number&gt; &lt;student-email&gt;\"\n  exit 1\nfi\n\nNAMESPACE=\"lab-module-${MODULE}-$(echo $STUDENT_EMAIL | cut -d@ -f1)\"\n\necho \"Setting up lab for Module $MODULE\"\necho \"Student: $STUDENT_EMAIL\"\necho \"Namespace: $NAMESPACE\"\n\n# Create namespace\nkubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -\n\n# Label namespace\nkubectl label namespace $NAMESPACE \\\n  fawkes.io/module=\"$MODULE\" \\\n  fawkes.io/student=\"$STUDENT_EMAIL\" \\\n  --overwrite\n\n# Apply resource quota\nkubectl apply -f /labs/shared/resource-quota.yaml -n $NAMESPACE\n\n# Apply network policy\nkubectl apply -f /labs/shared/network-policy.yaml -n $NAMESPACE\n\n# Apply lab-specific resources\nif [ -d \"/labs/module-$(printf %02d $MODULE)\" ]; then\n  kubectl apply -f /labs/module-$(printf %02d $MODULE)/ -n $NAMESPACE\nfi\n\necho \"Lab setup complete!\"\necho \"Access with: kubectl config set-context --current --namespace=$NAMESPACE\"\n</code></pre> <p>cleanup-lab.sh: |     #!/bin/bash     # Cleanup lab environment     set -e</p> <pre><code>MODULE=$1\nSTUDENT_EMAIL=$2\n\nNAMESPACE=\"lab-module-${MODULE}-$(echo $STUDENT_EMAIL | cut -d@ -f1)\"\n\necho \"Cleaning up lab: $NAMESPACE\"\n\n# Delete namespace (cascades all resources)\nkubectl delete namespace $NAMESPACE --wait=true --timeout=120s\n\necho \"Lab cleanup complete!\"\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/","title":"Module 17: Platform as a Product","text":"<p>Belt Level: \u26ab Black Belt Duration: 60 minutes Prerequisites: Modules 1-16, especially Module 2 (DORA Metrics) Certification Track: Fawkes Platform Architect</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#learning-objectives","title":"\ud83c\udfaf Learning Objectives","text":"<p>By the end of this module, you will be able to:</p> <ol> <li>Apply product management principles to internal developer platforms</li> <li>Conduct user research to understand developer needs and pain points</li> <li>Build a platform roadmap driven by user feedback and business value</li> <li>Measure platform adoption, satisfaction, and impact using key metrics</li> <li>Establish feedback loops and customer success practices for internal platforms</li> </ol>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#theory-your-platform-is-a-product","title":"\ud83d\udcda Theory: Your Platform is a Product","text":""},{"location":"dojo/modules/black-belt/module-17-platform-product/#the-platform-as-a-product-mindset","title":"The Platform as a Product Mindset","text":"<p>Traditional IT thinking: - \"We build infrastructure, developers must use it\" - Success = Infrastructure availability (99.9% uptime) - Mandate adoption through policy - One-size-fits-all solutions</p> <p>Platform as a Product thinking: - \"We serve developers, they are our customers\" - Success = Developer satisfaction + business outcomes - Earn adoption through superior experience - Tailored solutions for different user personas</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#why-this-matters","title":"Why This Matters","text":"<p>The \"Build It and They Will Come\" Fallacy:</p> <p>Many platform teams build technically excellent platforms that nobody uses: - \u274c Kubernetes cluster set up perfectly, but developers still deploy to VMs - \u274c CI/CD pipelines available, but teams continue using manual processes - \u274c Observability stack deployed, but no one looks at the dashboards</p> <p>Root cause: Building for technical excellence without understanding user needs.</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#the-platform-product-triad","title":"The Platform Product Triad","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              PLATFORM AS A PRODUCT TRIAD                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                             \u2502\n\u2502                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                         \u2502\n\u2502                    \u2502   DESIRABLE  \u2502                         \u2502\n\u2502                    \u2502  Do users     \u2502                         \u2502\n\u2502                    \u2502  want it?     \u2502                         \u2502\n\u2502                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         \u2502\n\u2502                            \u2502                                 \u2502\n\u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                  \u2502\n\u2502              \u2502                           \u2502                  \u2502\n\u2502              \u2502                           \u2502                  \u2502\n\u2502     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502\n\u2502     \u2502    FEASIBLE     \u2502         \u2502     VIABLE     \u2502         \u2502\n\u2502     \u2502  Can we build   \u2502         \u2502  Does it drive \u2502         \u2502\n\u2502     \u2502  it reliably?   \u2502         \u2502  business      \u2502         \u2502\n\u2502     \u2502                 \u2502         \u2502  value?        \u2502         \u2502\n\u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502\n\u2502                                                             \u2502\n\u2502  SWEET SPOT: All three overlap                             \u2502\n\u2502  - Developers want it (adoption)                           \u2502\n\u2502  - We can build/maintain it (technical feasibility)        \u2502\n\u2502  - It improves business metrics (DORA, cost, velocity)     \u2502\n\u2502                                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#your-platforms-customers","title":"Your Platform's \"Customers\"","text":"<p>Unlike external products, your customers are internal:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    USER PERSONAS                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                              \u2502\n\u2502  PERSONA 1: Frontend Developer (Alex)                       \u2502\n\u2502  \u251c\u2500 Needs: Fast iteration, preview environments             \u2502\n\u2502  \u251c\u2500 Pain: Complex deployment process, no staging            \u2502\n\u2502  \u251c\u2500 Skills: React/Vue, basic Docker, no Kubernetes          \u2502\n\u2502  \u2514\u2500 Success: Can deploy feature in &lt;5 minutes               \u2502\n\u2502                                                              \u2502\n\u2502  PERSONA 2: Backend Engineer (Jordan)                       \u2502\n\u2502  \u251c\u2500 Needs: Database migrations, service mesh                \u2502\n\u2502  \u251c\u2500 Pain: Manual DB changes, no service discovery           \u2502\n\u2502  \u251c\u2500 Skills: Java/Python, SQL, intermediate Kubernetes       \u2502\n\u2502  \u2514\u2500 Success: Zero-downtime deployments with DB changes      \u2502\n\u2502                                                              \u2502\n\u2502  PERSONA 3: Data Scientist (Sam)                            \u2502\n\u2502  \u251c\u2500 Needs: GPU resources, Jupyter notebooks, data access    \u2502\n\u2502  \u251c\u2500 Pain: No ML infrastructure, manual model deployment     \u2502\n\u2502  \u251c\u2500 Skills: Python/R, ML frameworks, zero DevOps            \u2502\n\u2502  \u2514\u2500 Success: Train and deploy models without ops team       \u2502\n\u2502                                                              \u2502\n\u2502  PERSONA 4: SRE/DevOps (Morgan)                             \u2502\n\u2502  \u251c\u2500 Needs: Observability, incident response tools           \u2502\n\u2502  \u251c\u2500 Pain: Alert fatigue, no runbooks                        \u2502\n\u2502  \u251c\u2500 Skills: Expert Kubernetes, Terraform, monitoring        \u2502\n\u2502  \u2514\u2500 Success: MTTR &lt; 5 minutes, no 3am pages                 \u2502\n\u2502                                                              \u2502\n\u2502  PERSONA 5: Engineering Manager (Taylor)                    \u2502\n\u2502  \u251c\u2500 Needs: Team velocity metrics, cost visibility           \u2502\n\u2502  \u251c\u2500 Pain: No visibility into bottlenecks, surprise bills    \u2502\n\u2502  \u251c\u2500 Skills: Technical background, business focus            \u2502\n\u2502  \u2514\u2500 Success: Data-driven decisions, predictable costs       \u2502\n\u2502                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Key insight: Different personas have different needs. A one-size-fits-all platform will satisfy no one.</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#user-research-for-platforms","title":"\ud83d\udd0d User Research for Platforms","text":""},{"location":"dojo/modules/black-belt/module-17-platform-product/#discovery-understanding-the-problem","title":"Discovery: Understanding the Problem","text":"<p>Methods for platform user research:</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#1-user-interviews-most-valuable","title":"1. User Interviews (Most valuable)","text":"<pre><code>INTERVIEW SCRIPT TEMPLATE:\n\nOpening (5 min):\n- Thank you for your time\n- We're improving the platform based on developer feedback\n- No wrong answers, honest feedback helps us most\n- Will take 30 minutes\n\nCurrent Workflow (10 min):\n- Walk me through how you deployed your last feature\n- What tools did you use?\n- Where did you get stuck?\n- How long did the whole process take?\n\nPain Points (10 min):\n- What's the most frustrating part of your deployment process?\n- If you could change one thing, what would it be?\n- What takes longer than it should?\n- What do you work around or hack together?\n\nDesired Future (5 min):\n- If I could wave a magic wand, what would your ideal workflow be?\n- What would success look like?\n- How would you measure improvement?\n\nClosing:\n- Can I follow up if we need clarification?\n- Would you be willing to test early versions?\n</code></pre> <p>Pro tips: - Ask \"How?\" and \"Why?\" not \"Would you use...?\" - Observe actual behavior, not stated preferences - Look for workarounds (reveals unmet needs) - Interview both happy and unhappy users</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#2-shadowing-observation","title":"2. Shadowing / Observation","text":"<p>Sit with developers and watch them work: - Where do they wait? - What do they Google? - What tools do they switch between? - Where do they ask for help?</p> <p>Example insights: - \"They spent 20 minutes figuring out environment variable syntax\" - \"They copy-pasted from another team's repo instead of using docs\" - \"They waited 15 minutes for CI pipeline, then force-pushed to debug\"</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#3-surveys-quantitative-validation","title":"3. Surveys (Quantitative validation)","text":"<p>Use after interviews to validate at scale:</p> <pre><code>PLATFORM SATISFACTION SURVEY (NPS-style):\n\n1. How likely are you to recommend our platform to a colleague? (0-10)\n\n2. What is the PRIMARY reason for your score?\n   [Open text field]\n\n3. How often do you deploy to production?\n   \u25cb Multiple times per day\n   \u25cb Daily\n   \u25cb Weekly\n   \u25cb Monthly or less\n\n4. How satisfied are you with the following? (1-5 scale)\n   - Deployment speed\n   - Documentation quality\n   - Getting help when stuck\n   - Observability/debugging\n   - Local development experience\n\n5. What would make the biggest positive impact on your productivity?\n   [Open text field]\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#4-analytics-telemetry","title":"4. Analytics / Telemetry","text":"<p>Instrument your platform to observe usage: - Which features are used most/least? - Where do users drop off? - How long do tasks take? - What errors do they hit?</p> <pre><code># Example: Track platform usage\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: payment-service\n  annotations:\n    analytics/deploy-frequency: \"5.2/day\"\n    analytics/avg-deploy-time: \"8m 32s\"\n    analytics/rollback-rate: \"2.1%\"\n    analytics/support-tickets: \"3/month\"\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#synthesizing-research","title":"Synthesizing Research","text":"<p>Turn insights into themes:</p> <pre><code>RAW FEEDBACK (from 15 interviews):\n\n\"Deployments are slow\" (8 mentions)\n\"I don't know if my deploy worked\" (12 mentions)\n\"Kubernetes YAML is confusing\" (6 mentions)\n\"I waste time waiting for CI\" (7 mentions)\n\"Can't debug production issues\" (10 mentions)\n\n\u2193 Synthesize into themes \u2193\n\nTHEME 1: Lack of visibility (12 mentions)\n- No real-time deploy status\n- Can't see what's running in production\n- No easy way to check logs/metrics\n\nTHEME 2: Slow feedback loops (8 mentions)\n- Deployments take &gt;10 minutes\n- CI pipelines are slow\n- No local development that matches prod\n\nTHEME 3: Steep learning curve (6 mentions)\n- Kubernetes concepts are hard\n- Too much YAML configuration\n- Documentation assumes too much knowledge\n</code></pre> <p>Prioritize using Impact vs Effort:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           IMPACT vs EFFORT MATRIX                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                        \u2502\n\u2502  HIGH IMPACT                                           \u2502\n\u2502    \u2502                                                   \u2502\n\u2502    \u2502   [Deployment Status]    [Observability]         \u2502\n\u2502    \u2502   \ud83d\udcca DO FIRST            \ud83d\udcca DO NEXT              \u2502\n\u2502    \u2502                                                   \u2502\n\u2502    \u2502                                                   \u2502\n\u2502    \u2502   [Better Docs]          [Local Dev]             \u2502\n\u2502    \u2502   \ud83d\udcdd QUICK WINS          \u2699\ufe0f  PLAN FOR            \u2502\n\u2502    \u2502                                                   \u2502\n\u2502  LOW IMPACT                                            \u2502\n\u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6        \u2502\n\u2502         LOW EFFORT              HIGH EFFORT            \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nNEXT SPRINT:\n1. Deployment status dashboard (high impact, medium effort)\n2. Improve documentation (medium impact, low effort)\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#building-a-platform-roadmap","title":"\ud83d\udccb Building a Platform Roadmap","text":""},{"location":"dojo/modules/black-belt/module-17-platform-product/#product-roadmap-structure","title":"Product Roadmap Structure","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              PLATFORM ROADMAP (Q1-Q4 2025)                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                              \u2502\n\u2502  NORTH STAR: Reduce deployment time from 30min to &lt;5min     \u2502\n\u2502                                                              \u2502\n\u2502  Q1: VISIBILITY &amp; FEEDBACK                                  \u2502\n\u2502  \u251c\u2500 Deployment status dashboard (Backstage plugin)          \u2502\n\u2502  \u251c\u2500 Real-time logs in UI                                    \u2502\n\u2502  \u251c\u2500 Slack notifications for deploy events                   \u2502\n\u2502  \u2514\u2500 Metrics: 80% developers check dashboard weekly          \u2502\n\u2502                                                              \u2502\n\u2502  Q2: SPEED &amp; RELIABILITY                                     \u2502\n\u2502  \u251c\u2500 Progressive delivery (canary deployments)               \u2502\n\u2502  \u251c\u2500 Parallel CI pipelines (5min \u2192 2min)                     \u2502\n\u2502  \u251c\u2500 Auto-rollback on errors                                 \u2502\n\u2502  \u2514\u2500 Metrics: Deploy time P95 &lt; 8 minutes                    \u2502\n\u2502                                                              \u2502\n\u2502  Q3: DEVELOPER EXPERIENCE                                    \u2502\n\u2502  \u251c\u2500 Self-service preview environments                       \u2502\n\u2502  \u251c\u2500 Local development with Tilt                             \u2502\n\u2502  \u251c\u2500 Golden path templates for common patterns               \u2502\n\u2502  \u2514\u2500 Metrics: 60% of teams using preview envs                \u2502\n\u2502                                                              \u2502\n\u2502  Q4: SCALE &amp; OPTIMIZATION                                    \u2502\n\u2502  \u251c\u2500 Cost optimization dashboard                             \u2502\n\u2502  \u251c\u2500 Auto-scaling for production workloads                   \u2502\n\u2502  \u251c\u2500 Multi-region deployments                                \u2502\n\u2502  \u2514\u2500 Metrics: 25% cost reduction, 99.9% availability         \u2502\n\u2502                                                              \u2502\n\u2502  CONTINUOUS:                                                 \u2502\n\u2502  \u251c\u2500 Weekly office hours                                     \u2502\n\u2502  \u251c\u2500 Monthly user interviews (5 developers)                  \u2502\n\u2502  \u251c\u2500 Quarterly satisfaction surveys (NPS)                    \u2502\n\u2502  \u2514\u2500 Backstage documentation updates                         \u2502\n\u2502                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#roadmap-principles","title":"Roadmap Principles","text":"<ol> <li>Themes, not features: Organize by user goals, not technical tasks</li> <li>Timeboxed: Quarterly or bi-weekly sprints, not \"when it's done\"</li> <li>Outcome-driven: Each item has success metrics</li> <li>Communicated: Public roadmap visible to all developers</li> <li>Flexible: Re-prioritize based on feedback</li> </ol>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#saying-no-productively","title":"Saying No (Productively)","text":"<p>Not every request makes the roadmap:</p> <pre><code>REQUEST: \"Can we add support for Terraform 1.6?\"\n\nBAD RESPONSE:\n\"No, we're too busy.\"\n\nGOOD RESPONSE:\n\"Thanks for the request! We track all feedback. Currently we're \nfocused on reducing deploy times (our #1 pain point from user \nresearch). Terraform 1.6 affects ~5 teams, while deploy speed \naffects all 40 teams. We've added your request to the backlog \nand will revisit in Q3. Does that work for you?\"\n\nEVEN BETTER:\n\"Let's understand the need. What's the use case for 1.6? \n[Discussion reveals they just need a specific provider version]\nOh! We can enable that without upgrading Terraform core. \nCan you test this next week?\"\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#platform-metrics-kpis","title":"\ud83d\udcca Platform Metrics &amp; KPIs","text":""},{"location":"dojo/modules/black-belt/module-17-platform-product/#metrics-pyramid","title":"Metrics Pyramid","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  BUSINESS OUTCOMES                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502  - Revenue impact                             \u2502     \u2502\n\u2502  \u2502  - Time to market                             \u2502     \u2502\n\u2502  \u2502  - Engineering cost per deploy                \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502                        \u25b2                               \u2502\n\u2502                        \u2502                               \u2502\n\u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                     \u2502\n\u2502              \u2502   DORA METRICS    \u2502                     \u2502\n\u2502              \u2502 - Deploy frequency\u2502                     \u2502\n\u2502              \u2502 - Lead time       \u2502                     \u2502\n\u2502              \u2502 - MTTR            \u2502                     \u2502\n\u2502              \u2502 - Change fail rate\u2502                     \u2502\n\u2502              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502\n\u2502                        \u25b2                               \u2502\n\u2502                        \u2502                               \u2502\n\u2502        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510               \u2502\n\u2502        \u2502   PLATFORM ADOPTION           \u2502               \u2502\n\u2502        \u2502 - Active users                \u2502               \u2502\n\u2502        \u2502 - Usage frequency             \u2502               \u2502\n\u2502        \u2502 - Feature adoption            \u2502               \u2502\n\u2502        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u2502\n\u2502                        \u25b2                               \u2502\n\u2502                        \u2502                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502         USER SATISFACTION                      \u2502    \u2502\n\u2502  \u2502  - NPS (Net Promoter Score)                   \u2502    \u2502\n\u2502  \u2502  - Support ticket volume                      \u2502    \u2502\n\u2502  \u2502  - Documentation clarity rating               \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nStart measuring from bottom up:\n1. Are users satisfied? (surveys, interviews)\n2. Are they adopting? (usage analytics)\n3. Is it improving DORA? (deployment metrics)\n4. Is it driving business value? (cost, velocity)\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#key-platform-metrics","title":"Key Platform Metrics","text":""},{"location":"dojo/modules/black-belt/module-17-platform-product/#1-adoption-metrics","title":"1. Adoption Metrics","text":"<pre><code>METRIC: Platform Adoption Rate\nFormula: (Teams using platform / Total teams) \u00d7 100%\n\nTargets:\n- Month 1: 10% (early adopters)\n- Month 3: 30% (early majority)\n- Month 6: 60% (late majority)\n- Month 12: 80%+ (full adoption)\n\nTrack by feature:\n- CI/CD pipeline: 75% adoption\n- GitOps deployment: 60% adoption\n- Observability: 45% adoption\n- Preview environments: 25% adoption\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#2-satisfaction-metrics-nps","title":"2. Satisfaction Metrics (NPS)","text":"<pre><code>Net Promoter Score: \"How likely would you recommend our \nplatform to a colleague?\" (0-10)\n\nCalculation:\n- Promoters (9-10): Enthusiastic users\n- Passives (7-8): Satisfied but not advocates\n- Detractors (0-6): Unhappy, at risk\n\nNPS = % Promoters - % Detractors\n\nBenchmark:\n- NPS &gt; 50: Excellent\n- NPS 30-50: Good\n- NPS 0-30: Needs improvement\n- NPS &lt; 0: Crisis mode\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#3-efficiency-metrics","title":"3. Efficiency Metrics","text":"<pre><code>METRIC: Time to First Deployment\nTrack: How long from \"I want to deploy\" to \"It's in production\"\n\nBaseline (no platform): 4 hours\n- Request infrastructure: 2 hours\n- Manual setup: 1 hour  \n- Deploy + verify: 1 hour\n\nTarget (with platform): 15 minutes\n- Self-service: 2 minutes\n- Auto-deploy via Git push: 8 minutes\n- Auto-verify health: 5 minutes\n\nImpact: 93% reduction in time to deploy\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#4-support-reliability-metrics","title":"4. Support &amp; Reliability Metrics","text":"<pre><code>METRIC: Mean Time to Resolution (Support)\nTrack: How fast can developers unblock themselves?\n\nSupport ticket categories:\n- Documentation issue: MTTR &lt; 10 minutes (self-service)\n- Configuration help: MTTR &lt; 2 hours (async)\n- Platform bug: MTTR &lt; 4 hours (urgent)\n- Feature request: Tracked in backlog\n\nTarget: 80% of issues resolved in &lt;1 hour\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#dashboard-example","title":"Dashboard Example","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           FAWKES PLATFORM HEALTH DASHBOARD                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                              \u2502\n\u2502  ADOPTION                                                    \u2502\n\u2502  \u251c\u2500 Active Teams: 32/40 (80%) \u25b2 +3 this month              \u2502\n\u2502  \u251c\u2500 Daily Deployments: 127 \u25b2 +15% MoM                       \u2502\n\u2502  \u2514\u2500 Feature Usage:                                           \u2502\n\u2502      \u2022 CI/CD: 85% \u25b2                                          \u2502\n\u2502      \u2022 GitOps: 70% \u25b2                                         \u2502\n\u2502      \u2022 Observability: 55% \u25b2                                  \u2502\n\u2502                                                              \u2502\n\u2502  SATISFACTION (NPS: 42)                                      \u2502\n\u2502  \u251c\u2500 Promoters: 55% (22 users)                               \u2502\n\u2502  \u251c\u2500 Passives: 32% (13 users)                                \u2502\n\u2502  \u2514\u2500 Detractors: 13% (5 users) \u26a0\ufe0f                            \u2502\n\u2502                                                              \u2502\n\u2502  DORA METRICS                                                \u2502\n\u2502  \u251c\u2500 Deploy Frequency: 5.2/day \u25b2 (Target: &gt;5)               \u2502\n\u2502  \u251c\u2500 Lead Time: 45 min \u25bc (Target: &lt;1 hour)                  \u2502\n\u2502  \u251c\u2500 MTTR: 12 min \u25b2 (Target: &lt;15 min)                       \u2502\n\u2502  \u2514\u2500 Change Fail Rate: 3.2% \u25b2 (Target: &lt;5%)                 \u2502\n\u2502                                                              \u2502\n\u2502  SUPPORT                                                     \u2502\n\u2502  \u251c\u2500 Open Tickets: 8 (3 urgent)                              \u2502\n\u2502  \u251c\u2500 MTTR: 2.3 hours \u25bc (Target: &lt;4 hours)                   \u2502\n\u2502  \u2514\u2500 Top Issues:                                              \u2502\n\u2502      1. Deployment timeouts (3 tickets)                     \u2502\n\u2502      2. Secret management confusion (2 tickets)             \u2502\n\u2502                                                              \u2502\n\u2502  ACTIONS                                                     \u2502\n\u2502  \ud83d\udd34 Investigate detractors (schedule 5 interviews)           \u2502\n\u2502  \ud83d\udfe1 Improve deployment timeout documentation                \u2502\n\u2502  \ud83d\udfe2 Celebrate: Hit 80% adoption milestone! \ud83c\udf89               \u2502\n\u2502                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#hands-on-lab-building-a-platform-product","title":"\ud83d\udee0\ufe0f Hands-On Lab: Building a Platform Product","text":""},{"location":"dojo/modules/black-belt/module-17-platform-product/#lab-overview","title":"Lab Overview","text":"<p>You will practice product management for a platform by: 1. Analyzing user feedback and identifying themes 2. Prioritizing features using impact vs. effort 3. Creating a quarterly roadmap 4. Setting up NPS surveys and adoption tracking 5. Building a platform health dashboard</p> <p>Duration: 25 minutes Tools: Backstage, Fawkes CLI, survey tools</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#lab-setup","title":"Lab Setup","text":"<pre><code># Start the platform product lab\nfawkes lab start --module 17\n\n# This provides:\n# - Backstage instance with sample feedback\n# - Analytics data from 40 development teams\n# - Survey responses (30 developers)\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#exercise-1-analyze-user-feedback-6-minutes","title":"Exercise 1: Analyze User Feedback (6 minutes)","text":"<p>Objective: Review user interviews and identify top 3 themes.</p> <pre><code># View feedback data\ncd ~/fawkes-lab-17/user-research\ncat interviews.json | jq '.[] | {name, role, pain_points}'\n</code></pre> <p>Sample feedback (you'll see 15 interviews):</p> <pre><code>{\n  \"interviews\": [\n    {\n      \"name\": \"Alex (Frontend Dev)\",\n      \"pain_points\": [\n        \"Deployments take 25 minutes\",\n        \"No way to see if my deploy worked\",\n        \"Kubernetes is confusing\"\n      ]\n    },\n    {\n      \"name\": \"Jordan (Backend Dev)\",\n      \"pain_points\": [\n        \"Can't debug production issues\",\n        \"No staging environment\",\n        \"Database migrations are manual\"\n      ]\n    }\n    // ... 13 more interviews\n  ]\n}\n</code></pre> <p>Your task: Use the provided script to analyze themes:</p> <pre><code># Run theme analysis\npython analyze_feedback.py interviews.json\n\n# Output:\n# THEME 1: Slow deployments (12 mentions) \n# THEME 2: Lack of visibility (15 mentions)\n# THEME 3: No staging/preview envs (8 mentions)\n# THEME 4: Difficult debugging (10 mentions)\n# THEME 5: Steep learning curve (7 mentions)\n</code></pre> <p>Question: Which theme should you prioritize? Consider: - Frequency (how many users mentioned it) - Severity (how much pain does it cause) - Feasibility (can you solve it in &lt;1 quarter)</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#exercise-2-prioritize-using-impact-vs-effort-5-minutes","title":"Exercise 2: Prioritize Using Impact vs Effort (5 minutes)","text":"<p>Objective: Plot features on an impact/effort matrix.</p> <pre><code># View proposed features\ncat features.yaml\n</code></pre> <p>features.yaml: <pre><code>features:\n  - name: \"Real-time deployment dashboard\"\n    impact: high\n    effort: medium\n    theme: \"Lack of visibility\"\n\n  - name: \"Self-service preview environments\"\n    impact: high\n    effort: high\n    theme: \"No staging\"\n\n  - name: \"Improve documentation\"\n    impact: medium\n    effort: low\n    theme: \"Learning curve\"\n\n  - name: \"Integrated log viewer\"\n    impact: medium\n    effort: medium\n    theme: \"Debugging\"\n\n  - name: \"Parallel CI pipelines\"\n    impact: high\n    effort: medium\n    theme: \"Slow deployments\"\n</code></pre></p> <p>Your task: Use the Fawkes CLI to generate a prioritization matrix:</p> <pre><code>fawkes product prioritize --input features.yaml --output priority-matrix.png\n\n# Opens an image showing features plotted\n</code></pre> <p>Expected result: <pre><code>DO FIRST (High Impact, Low-Med Effort):\n1. Real-time deployment dashboard\n2. Parallel CI pipelines\n3. Improve documentation\n\nDO NEXT (High Impact, High Effort):\n4. Self-service preview environments\n\nBACKLOG:\n5. Integrated log viewer\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#exercise-3-create-a-quarterly-roadmap-6-minutes","title":"Exercise 3: Create a Quarterly Roadmap (6 minutes)","text":"<p>Objective: Build a Q1 roadmap based on prioritized features.</p> <pre><code># Use roadmap template\ncp templates/roadmap-template.md Q1-2025-roadmap.md\nvim Q1-2025-roadmap.md\n</code></pre> <p>Fill in the template:</p> <pre><code># Q1 2025 Platform Roadmap\n\n## North Star Goal\nReduce deployment time from 25 minutes to &lt;8 minutes (68% improvement)\n\n## Sprint 1-2 (Weeks 1-4): Visibility\n**Theme**: Developers can't see what's happening\n\n- [ ] Deployment status dashboard in Backstage\n  - Real-time progress (queued \u2192 building \u2192 deploying \u2192 healthy)\n  - Estimated time remaining\n  - Success metric: 70% of developers check dashboard weekly\n\n- [ ] Slack notifications\n  - Deploy started/completed/failed\n  - @ mention author on failures\n  - Success metric: &lt;2 min to notice failed deploy\n\n## Sprint 3-4 (Weeks 5-8): Speed\n**Theme**: Deployments are too slow\n\n- [ ] Parallel CI pipelines\n  - Run tests in parallel (8min \u2192 3min)\n  - Cache dependencies\n  - Success metric: P95 build time &lt;5 minutes\n\n- [ ] Optimize Docker builds\n  - Multi-stage builds\n  - Layer caching\n  - Success metric: Image build &lt;2 minutes\n\n## Sprint 5-6 (Weeks 9-12): Polish\n**Theme**: Improve overall experience\n\n- [ ] Documentation overhaul\n  - Step-by-step tutorials for common tasks\n  - Video walkthroughs\n  - Success metric: NPS +10 points\n\n- [ ] Weekly office hours\n  - 1 hour/week for Q&amp;A\n  - Success metric: 15+ attendees average\n\n## Success Criteria (End of Q1)\n- [ ] Deploy time P95: &lt;8 minutes (from 25min)\n- [ ] Platform adoption: 85% of teams (from 70%)\n- [ ] NPS: 50+ (from 38)\n- [ ] Support tickets: &lt;10/week (from 18/week)\n</code></pre> <p>Validate your roadmap:</p> <pre><code>fawkes product validate-roadmap Q1-2025-roadmap.md\n\n# Checks:\n# \u2705 All items have success metrics\n# \u2705 North Star goal is measurable\n# \u2705 Timeboxed to one quarter\n# \u26a0\ufe0f  Warning: Sprint 1-2 may be overloaded (2 major features)\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#exercise-4-set-up-nps-surveys-4-minutes","title":"Exercise 4: Set Up NPS Surveys (4 minutes)","text":"<p>Objective: Configure automated NPS surveys in Backstage.</p> <pre><code># Install Backstage feedback plugin\ncd ~/fawkes-lab-17/backstage\nyarn add @backstage/plugin-user-feedback\n</code></pre> <p>Configure survey:</p> <pre><code># app-config.yaml\nuserFeedback:\n  surveys:\n    - id: platform-nps\n      title: \"Platform Satisfaction Survey\"\n      frequency: quarterly\n      questions:\n        - id: nps\n          type: nps\n          text: \"How likely are you to recommend Fawkes Platform to a colleague?\"\n\n        - id: reason\n          type: text\n          text: \"What's the PRIMARY reason for your score?\"\n\n        - id: biggest-pain\n          type: text\n          text: \"What's your biggest pain point with the platform?\"\n\n        - id: feature-satisfaction\n          type: matrix\n          text: \"How satisfied are you with the following?\"\n          rows:\n            - \"Deployment speed\"\n            - \"Documentation\"\n            - \"Getting help when stuck\"\n            - \"Observability/debugging\"\n          scale: 1-5\n</code></pre> <p>Test the survey:</p> <pre><code># Simulate 10 survey responses\nfawkes lab simulate-surveys --count 10\n\n# View results dashboard\nopen http://localhost:3000/user-feedback/platform-nps\n</code></pre> <p>Expected dashboard: <pre><code>Platform NPS: 42\n\u251c\u2500 Promoters (9-10): 12 responses (55%)\n\u251c\u2500 Passives (7-8): 7 responses (32%)\n\u2514\u2500 Detractors (0-6): 3 responses (13%)\n\nTop Pain Points:\n1. \"Deployments are still too slow\" (8 mentions)\n2. \"Documentation is hard to find\" (5 mentions)\n3. \"Don't know how to debug prod issues\" (4 mentions)\n\nFeature Satisfaction (1-5 scale):\n\u251c\u2500 Deployment speed: 3.2/5 \u26a0\ufe0f\n\u251c\u2500 Documentation: 3.8/5\n\u251c\u2500 Getting help: 4.1/5 \u2705\n\u2514\u2500 Observability: 3.5/5\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#exercise-5-build-platform-health-dashboard-4-minutes","title":"Exercise 5: Build Platform Health Dashboard (4 minutes)","text":"<p>Objective: Create a dashboard showing adoption, satisfaction, and DORA metrics.</p> <pre><code># Use Grafana with pre-configured datasources\ncd ~/fawkes-lab-17/grafana\ndocker-compose up -d\n\n# Import dashboard\ncurl -X POST http://localhost:3000/api/dashboards/db \\\n  -H \"Content-Type: application/json\" \\\n  -d @platform-health-dashboard.json\n</code></pre> <p>Dashboard panels (pre-configured):</p> <ol> <li> <p>Adoption Panel: <pre><code># Teams using platform\ncount(count by (team) (deployment_total{platform=\"fawkes\"}))\n\n# Daily deployments\nrate(deployment_total{platform=\"fawkes\"}[1d])\n</code></pre></p> </li> <li> <p>Satisfaction Panel: <pre><code>-- NPS score\nSELECT \n  (COUNT(*) FILTER (WHERE score &gt;= 9) * 100.0 / COUNT(*) - \n   COUNT(*) FILTER (WHERE score &lt;= 6) * 100.0 / COUNT(*)) as nps\nFROM survey_responses\nWHERE survey_id = 'platform-nps'\n  AND created_at &gt; NOW() - INTERVAL '90 days'\n</code></pre></p> </li> <li> <p>DORA Metrics Panel: <pre><code># Deploy frequency (per day per team)\navg(rate(deployment_total[1d])) by (team)\n\n# Lead time for changes (commit to deploy)\nhistogram_quantile(0.95, \n  rate(lead_time_seconds_bucket[1d])\n)\n\n# MTTR\nhistogram_quantile(0.95,\n  rate(incident_resolution_seconds_bucket[1d])\n)\n\n# Change failure rate\n(rate(deployment_failed_total[1d]) / \n rate(deployment_total[1d])) * 100\n</code></pre></p> </li> </ol> <p>View the dashboard:</p> <pre><code>open http://localhost:3000/d/platform-health\n\n# You should see a comprehensive dashboard showing all key metrics\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#lab-validation","title":"Lab Validation","text":"<pre><code># Run validation\nfawkes lab validate --module 17\n\n# Expected output:\n# \u2705 User feedback analyzed and themes identified\n# \u2705 Features prioritized using impact/effort matrix\n# \u2705 Quarterly roadmap created with success metrics\n# \u2705 NPS survey configured and tested\n# \u2705 Platform health dashboard deployed\n</code></pre> <p>Cleanup:</p> <pre><code>fawkes lab stop --module 17\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#knowledge-check","title":"\u2705 Knowledge Check","text":""},{"location":"dojo/modules/black-belt/module-17-platform-product/#question-1-product-mindset","title":"Question 1: Product Mindset","text":"<p>What's the key difference between \"platform as infrastructure\" vs \"platform as a product\"?</p> <p>A) Products are externally sold, infrastructure is internal B) Products focus on user satisfaction, infrastructure focuses on uptime C) Products cost more to build D) Infrastructure is more reliable</p> Show Answer  **Answer: B**  Platform as a product treats internal developers as customers and measures success by their satisfaction and outcomes, not just technical availability. You can have 99.99% uptime but zero adoption if developers don't find it valuable."},{"location":"dojo/modules/black-belt/module-17-platform-product/#question-2-user-research","title":"Question 2: User Research","text":"<p>Which user research method provides the deepest insights into developer pain points?</p> <p>A) Anonymous surveys B) Usage analytics C) In-person interviews with observation D) Support ticket analysis</p> Show Answer  **Answer: C**  One-on-one interviews combined with observing actual workflows reveal not just what people say, but what they actually do. You discover workarounds, inefficiencies, and unspoken needs that surveys miss."},{"location":"dojo/modules/black-belt/module-17-platform-product/#question-3-user-personas","title":"Question 3: User Personas","text":"<p>Why create user personas for your platform?</p> <p>A) To segment users for marketing B) Different roles have different needs requiring tailored solutions C) It's a requirement for product management D) To decide which users to prioritize</p> Show Answer  **Answer: B**  Frontend developers, backend engineers, data scientists, and SREs have vastly different needs. A one-size-fits-all platform satisfies no one. Personas help you design appropriate experiences for each group."},{"location":"dojo/modules/black-belt/module-17-platform-product/#question-4-nps-net-promoter-score","title":"Question 4: NPS (Net Promoter Score)","text":"<p>Your platform has an NPS of -15. What does this mean?</p> <p>A) 15% of users are happy B) More detractors than promoters - urgent action needed C) Average satisfaction is 15% D) Normal score for internal platforms</p> Show Answer  **Answer: B**  NPS = % Promoters - % Detractors. A negative NPS means you have more unhappy users than happy ones. This indicates serious problems requiring immediate investigation and action."},{"location":"dojo/modules/black-belt/module-17-platform-product/#question-5-roadmap-prioritization","title":"Question 5: Roadmap Prioritization","text":"<p>You have two features: \"Real-time logs\" (high impact, high effort) and \"Improved docs\" (medium impact, low effort). Which should you build first?</p> <p>A) Real-time logs (higher impact) B) Improved docs (faster to ship) C) Build both simultaneously D) Survey users to decide</p> Show Answer  **Answer: B**  Start with \"quick wins\" (medium impact, low effort) to build momentum and trust. Better docs can ship in weeks and immediately help users. Real-time logs takes months and users may not trust you to deliver if you haven't shipped smaller improvements first."},{"location":"dojo/modules/black-belt/module-17-platform-product/#question-6-adoption-metrics","title":"Question 6: Adoption Metrics","text":"<p>Your platform has 40% adoption after 6 months. What should you do?</p> <p>A) Mandate usage via policy B) Interview non-adopters to understand barriers C) Add more features to attract users D) Wait longer for organic adoption</p> Show Answer  **Answer: B**  Low adoption indicates your platform doesn't meet user needs. Talk to the 60% who aren't using it - they'll tell you exactly what's blocking them. Mandating usage creates resentment, and adding features may worsen the problem if they're not addressing real needs."},{"location":"dojo/modules/black-belt/module-17-platform-product/#question-7-success-metrics","title":"Question 7: Success Metrics","text":"<p>Which metric best indicates your platform is succeeding?</p> <p>A) Number of features shipped B) Infrastructure uptime percentage C) Improvement in DORA metrics for users D) Size of your platform team</p> Show Answer  **Answer: C**  The ultimate measure of platform success is whether it improves outcomes for your users. If teams using your platform deploy more frequently with fewer failures (better DORA metrics), you're succeeding regardless of feature count or uptime."},{"location":"dojo/modules/black-belt/module-17-platform-product/#question-8-saying-no","title":"Question 8: Saying No","text":"<p>A senior engineer requests a niche feature that would take 2 months but only helps their team. How do you respond?</p> <p>A) \"No, we're too busy\" B) \"File a ticket and we'll get to it eventually\" C) Build it (they're senior so must be important) D) Explain current priorities and understand the underlying need</p> Show Answer  **Answer: D**  Productively saying no means: (1) Acknowledge the request, (2) Explain current priorities and why, (3) Understand the underlying need (there may be a simpler solution), (4) Offer alternatives or a timeline for reconsideration. Never just say no."},{"location":"dojo/modules/black-belt/module-17-platform-product/#real-world-examples","title":"\ud83c\udf0d Real-World Examples","text":""},{"location":"dojo/modules/black-belt/module-17-platform-product/#example-1-spotifys-backstage-dogfooding-as-product-strategy","title":"Example 1: Spotify's Backstage - Dogfooding as Product Strategy","text":"<p>Challenge: 280+ engineers, hundreds of microservices, fragmented tooling creating chaos.</p> <p>Product Approach: - Started with research: Interviewed 50 engineers about pain points - Built for themselves first: Backstage solved Spotify's own problems - Measured everything: Tracked time-to-deploy, incident response time, onboarding speed - Iterated based on feedback: Weekly demos, monthly retrospectives</p> <p>Key Product Decisions: - Golden paths, not enforcement: Made easy path obvious, didn't block alternatives - Self-service: Developers create services without ops tickets - Plugin ecosystem: Teams can extend for their needs</p> <p>Results: - Onboarding time: 10 days \u2192 1 day (90% improvement) - Time to first deploy: 4 hours \u2192 5 minutes (98% improvement) - Adoption: 100% of teams (voluntary, not mandated)</p> <p>Lesson: \"If we couldn't convince ourselves to use it, we knew developers wouldn't either.\"</p> <p>Learn more: Backstage Engineering Blog</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#example-2-netflixs-paved-road-product-thinking-at-scale","title":"Example 2: Netflix's Paved Road - Product Thinking at Scale","text":"<p>Philosophy: \"We don't require you to use the paved road, but we make it so good that you'd be crazy not to.\"</p> <p>Product Strategy:</p> <pre><code>UNPAVED ROAD (Hard way):\n\u251c\u2500 Provision infrastructure yourself: 2 days\n\u251c\u2500 Configure monitoring: 4 hours\n\u251c\u2500 Set up CI/CD: 1 day\n\u251c\u2500 Security scanning: 3 hours\n\u2514\u2500 Total: 3+ days + ongoing maintenance\n\nPAVED ROAD (Netflix platform):\n\u251c\u2500 Run: netflix-scaffold new-service\n\u251c\u2500 Infrastructure auto-provisioned: 10 minutes\n\u251c\u2500 Monitoring pre-configured: 0 minutes\n\u251c\u2500 CI/CD ready: 0 minutes\n\u251c\u2500 Security included: 0 minutes\n\u2514\u2500 Total: 10 minutes + zero maintenance\n</code></pre> <p>Key Insight: Don't mandate the platform, make it irresistibly better.</p> <p>Product Metrics: - Adoption: 95%+ voluntary (not mandated) - Developer satisfaction: NPS 72 (world-class) - Time saved: 40+ engineering hours per new service</p> <p>How they measured product-market fit: - Tracked adoption rate by team - Monthly surveys (NPS + open feedback) - Usage analytics (which features, how often) - \"Paved road health score\" dashboard</p> <p>Lesson: Product thinking means your platform wins by being better, not by being required.</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#example-3-etsys-product-management-for-infrastructure","title":"Example 3: Etsy's Product Management for Infrastructure","text":"<p>Challenge: Platform team seen as \"cost center\" with unclear value.</p> <p>Product Transformation:</p> <p>Before (Infrastructure mindset): - Success = Uptime percentage - Shipped features, hoped developers used them - No user research - Reactive support (waiting for tickets)</p> <p>After (Product mindset): - Hired product manager for platform team - Quarterly OKRs tied to developer productivity - Regular user research: 10 developer interviews/month - Platform health dashboard: Adoption, satisfaction, DORA metrics - Proactive support: Office hours, documentation, onboarding</p> <p>Product Management Practices:</p> <ol> <li> <p>Quarterly Planning: <pre><code>Q1 OKRs:\nObjective: Make deployments delightful\n\u251c\u2500 KR1: Deploy time P95 &lt; 10 minutes (from 30min)\n\u251c\u2500 KR2: Deployment success rate &gt; 95% (from 88%)\n\u2514\u2500 KR3: Developer NPS &gt; 40 (from 18)\n</code></pre></p> </li> <li> <p>Bi-weekly User Testing:</p> </li> <li>Watch developers deploy a feature</li> <li>Identify friction points</li> <li> <p>Ship improvements within 1 sprint</p> </li> <li> <p>Feature Flags for Platform Features: <pre><code># Gradually roll out new features\nfeatures:\n  parallel_ci:\n    enabled_teams: [\"payments\", \"search\", \"checkout\"]\n    rollout_percentage: 25%\n    feedback_required: true\n</code></pre></p> </li> </ol> <p>Results: - NPS: 18 \u2192 58 in 6 months - Adoption: 45% \u2192 85% - Platform budget: Increased 40% (demonstrated clear value) - Team morale: Platform team seen as strategic, not cost center</p> <p>Lesson: Treating infrastructure as a product transforms how the organization views and funds platform teams.</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#example-4-airbnbs-platform-product-management","title":"Example 4: Airbnb's Platform Product Management","text":"<p>Structure: Each platform capability has a dedicated product manager.</p> <p>Example: CI/CD Product Manager</p> <p>Responsibilities: - User research: Interview 5 developers weekly - Roadmap: Prioritize features based on impact - Metrics: Own deployment frequency and lead time - Communication: Publish monthly updates to eng org</p> <p>Sample Project: \"Project Lightning\" (Faster CI/CD)</p> <p>Discovery Phase (2 weeks): <pre><code>Research findings:\n- 78% of developers frustrated with CI speed\n- Average build time: 18 minutes\n- 40% of builds fail due to flaky tests\n- Developers context-switch while waiting\n\nUser quotes:\n\"I start a build then go get coffee. By the time I'm back, \n I've forgotten what I was working on.\"\n\n\"Half the time the build fails because of a flaky test, \n not my code. It's demoralizing.\"\n</code></pre></p> <p>Roadmap (3 months): <pre><code>Month 1: Quick wins\n\u251c\u2500 Parallel test execution: 18min \u2192 12min\n\u251c\u2500 Better test splitting\n\u2514\u2500 Success metric: 33% faster builds\n\nMonth 2: Reliability\n\u251c\u2500 Quarantine flaky tests\n\u251c\u2500 Auto-retry failed tests once\n\u2514\u2500 Success metric: &lt;10% false failures\n\nMonth 3: Intelligence\n\u251c\u2500 Predictive test selection (only run affected tests)\n\u251c\u2500 Smart caching\n\u2514\u2500 Success metric: 12min \u2192 5min average build time\n</code></pre></p> <p>Communication: - Weekly Slack updates in #engineering - Demo videos showing improvements - \"Build time tracker\" dashboard (public)</p> <p>Results: - Build time: 18min \u2192 5min (72% faster) - False failure rate: 40% \u2192 8% - Developer NPS: +28 points - 2,000+ engineering hours saved/month</p> <p>Lesson: Dedicated product management for platform capabilities drives meaningful improvements. Treat each platform area (CI/CD, observability, deployment) as its own product.</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#dora-capabilities-mapping","title":"\ud83d\udcca DORA Capabilities Mapping","text":"<p>This module directly supports these DORA capabilities:</p> Capability How This Module Helps Impact on Metrics Generative Culture Product thinking fosters collaboration between platform and dev teams Improves all DORA metrics through better alignment Visual Management Platform health dashboards make work visible Faster identification of bottlenecks Team Experimentation User research and feedback loops enable rapid iteration Higher deployment frequency through faster learning Work in Small Batches Quarterly roadmaps and iterative improvement Reduced lead time and change failure rate Learning Culture Continuous user feedback creates learning organization Sustained improvement across all metrics"},{"location":"dojo/modules/black-belt/module-17-platform-product/#troubleshooting-common-issues","title":"\ud83d\udd27 Troubleshooting Common Issues","text":""},{"location":"dojo/modules/black-belt/module-17-platform-product/#issue-1-low-adoption-despite-good-technology","title":"Issue 1: Low Adoption Despite Good Technology","text":"<p>Symptom: You've built a technically excellent platform but only 30% adoption after 6 months.</p> <p>Root Causes: - Built for perceived needs, not actual needs - No marketing/evangelism of the platform - Lack of documentation or examples - Migration path too difficult from existing solutions</p> <p>Solution:</p> <pre><code>STEP 1: Interview non-adopters\n\"Why aren't you using the platform?\"\nCommon answers:\n- \"Didn't know it existed\"\n- \"Too hard to migrate\"\n- \"My current solution works fine\"\n- \"Tried it once, got stuck, gave up\"\n\nSTEP 2: Address barriers systematically\n\u251c\u2500 Awareness: Weekly demos, Slack announcements, onboarding talks\n\u251c\u2500 Migration: Build automated migration tools\n\u251c\u2500 Documentation: Step-by-step tutorials for common use cases\n\u2514\u2500 Support: Dedicated office hours, Slack channel with fast response\n\nSTEP 3: Create champions\n\u251c\u2500 Find early adopters who love the platform\n\u251c\u2500 Have them present at team meetings\n\u251c\u2500 \"Platform champions\" program with incentives\n\u2514\u2500 Share success stories publicly\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#issue-2-negative-nps-more-detractors-than-promoters","title":"Issue 2: Negative NPS (More Detractors Than Promoters)","text":"<p>Symptom: NPS of -10 or below, lots of complaints.</p> <p>Immediate Actions:</p> <pre><code>WEEK 1: Understand the damage\n\u251c\u2500 Read every detractor comment\n\u251c\u2500 Schedule calls with 10 most vocal detractors\n\u251c\u2500 Identify the top 3 pain points\n\nWEEK 2: Quick wins\n\u251c\u2500 Fix documentation gaps (lowest effort)\n\u251c\u2500 Improve most common error messages\n\u251c\u2500 Send personal follow-ups to detractors\n\nMONTH 1: Address systemic issues\n\u251c\u2500 Tackle #1 pain point from research\n\u251c\u2500 Communicate progress transparently\n\u251c\u2500 Re-survey after changes ship\n\nONGOING: Prevent future issues\n\u251c\u2500 Monthly NPS surveys (catch problems early)\n\u251c\u2500 Faster response to support tickets\n\u251c\u2500 Proactive communication about known issues\n</code></pre> <p>Example Turnaround: <pre><code>GitHub Internal Platform (fictional example):\n- Month 0: NPS -15 (crisis mode)\n  - Top issue: Deployments failing randomly\n  - Action: All-hands to fix reliability\n\n- Month 1: NPS -5 (improving)\n  - Fixed deployment reliability\n  - Added status page for transparency\n\n- Month 3: NPS +15 (positive)\n  - Continued improvements\n  - Regular communication building trust\n\n- Month 6: NPS +42 (healthy)\n  - Platform now trusted\n  - Adoption increasing\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#issue-3-feature-requests-overwhelming-your-backlog","title":"Issue 3: Feature Requests Overwhelming Your Backlog","text":"<p>Symptom: 200+ feature requests, can't prioritize, team paralyzed.</p> <p>Solution - Ruthless Prioritization:</p> <pre><code>FRAMEWORK: Impact vs Strategic Alignment\n\nStep 1: Categorize all requests\n\u251c\u2500 P0 (Do Now): High impact + Strategic alignment\n\u2502   Example: Deploy speed improvements (affects all teams)\n\u2502\n\u251c\u2500 P1 (Do Soon): High impact OR Strategic alignment\n\u2502   Example: Preview environments (affects 60% of teams)\n\u2502\n\u251c\u2500 P2 (Do Later): Medium impact + Nice to have\n\u2502   Example: Additional language support\n\u2502\n\u2514\u2500 P3 (Don't Do): Low impact + Off-strategy\n    Example: Custom CI runners for 1 team\n\nStep 2: Communicate decisions\n\u251c\u2500 Publish prioritization criteria\n\u251c\u2500 Explain \"why\" for each category\n\u251c\u2500 Set expectations (P0 this quarter, P1 next quarter, P2 backlog, P3 rejected)\n\nStep 3: Review quarterly\n\u251c\u2500 Re-prioritize based on new data\n\u251c\u2500 Business priorities may change\n\u2514\u2500 Some P2s become P0s (and vice versa)\n</code></pre> <p>Sample Communication:</p> <pre><code># Platform Roadmap Prioritization\n\n## How We Prioritize\n\n**P0 Criteria** (Do This Quarter):\n- Affects &gt;50% of teams\n- Improves DORA metrics significantly\n- Blocks other high-priority work\n\n**Current P0 Features** (Q1 2025):\n1. Deployment speed improvements (18min \u2192 8min target)\n2. Real-time deployment status dashboard\n3. Parallel CI pipelines\n\n**P1 Features** (Q2 2025):\n4. Self-service preview environments\n5. Integrated log viewer\n6. Cost optimization dashboard\n\n## Your Request: \"Support for Terraform 1.7\"\n- Priority: P2 (Do Later)\n- Reasoning: Affects 5 teams (12%), existing 1.6 sufficient for most use cases\n- Timeline: Q3 2025 (will revisit if Terraform 1.7 becomes critical)\n\nQuestions? Disagree with priority? Let's talk: #platform-feedback\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#issue-4-platform-team-seen-as-cost-center-not-value-driver","title":"Issue 4: Platform Team Seen as Cost Center, Not Value Driver","text":"<p>Symptom: Budget cuts, no headcount, leadership doesn't understand platform value.</p> <p>Solution - Quantify Business Impact:</p> <pre><code>BUILD A BUSINESS CASE\n\n1. Quantify Time Savings:\n   Before platform: 40 teams \u00d7 4 hours/deploy \u00d7 $150/hour = $24,000/deploy\n   After platform: 40 teams \u00d7 0.5 hours/deploy \u00d7 $150/hour = $3,000/deploy\n   Savings per deploy: $21,000\n   Deploys per day: 50\n   Annual savings: $21,000 \u00d7 50 \u00d7 250 days = $262.5M\n\n2. Quantify Faster Time-to-Market:\n   Lead time improvement: 2 weeks \u2192 2 days\n   Revenue impact: Ship features 10 days faster\n   If feature generates $100k/month revenue:\n   Value: $100k \u00d7 (10/30) = $33k per feature\n   Features per year: 100\n   Annual value: $3.3M\n\n3. Quantify Risk Reduction:\n   MTTR improvement: 2 hours \u2192 15 minutes\n   Downtime cost: $50k/hour\n   Incidents per month: 5\n   Annual savings: $50k \u00d7 1.75 \u00d7 5 \u00d7 12 = $5.25M\n\nTOTAL ANNUAL VALUE: $271M\nPlatform team cost: $5M/year (10 engineers)\nROI: 54x\n</code></pre> <p>Present to Leadership:</p> <pre><code># Platform Team Business Case\n\n## Executive Summary\nOur platform team drives $271M in annual value through:\n- $262.5M in developer productivity gains\n- $3.3M in faster time-to-market\n- $5.25M in reduced downtime costs\n\nAt $5M/year cost, we deliver 54x ROI.\n\n## Metrics\n- Deploy frequency: 5/day (up from 0.5/day)\n- Lead time: 2 days (down from 14 days)\n- MTTR: 15 minutes (down from 2 hours)\n- Developer NPS: 52 (up from 18)\n\n## Request\nMaintain current headcount (10 FTE) and approve Q1 roadmap.\nWithout platform investment, we risk losing competitive advantage\nin deployment velocity.\n</code></pre>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/black-belt/module-17-platform-product/#books","title":"Books","text":"<ul> <li>\"The Lean Startup\" by Eric Ries - Core product principles applicable to platforms</li> <li>\"Inspired: How to Create Tech Products Customers Love\" by Marty Cagan - Product management fundamentals</li> <li>\"Escaping the Build Trap\" by Melissa Perri - Outcome-driven product development</li> <li>\"User Story Mapping\" by Jeff Patton - Understanding user journeys</li> <li>\"The Mom Test\" by Rob Fitzpatrick - How to conduct effective user interviews</li> </ul>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#articles-papers","title":"Articles &amp; Papers","text":"<ul> <li>\"Team Topologies\" by Matthew Skelton &amp; Manuel Pais - Platform team structures</li> <li>\"Platform Strategy\" by Evan Bottcher (ThoughtWorks) - Defining platform vision</li> <li>\"Developers Are Users Too\" by Jean Yang - Applying UX to developer tools</li> <li>DORA State of DevOps Reports - Measuring platform impact</li> </ul>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#courses-communities","title":"Courses &amp; Communities","text":"<ul> <li>Platform Engineering Community - platformengineering.org</li> <li>Product School - Internal product management courses</li> <li>Mind the Product - Product management community and resources</li> </ul>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#tools","title":"Tools","text":"<ul> <li>Backstage - Platform with built-in user feedback and analytics</li> <li>Pendo - Product analytics for internal tools</li> <li>Dovetail - User research repository</li> <li>ProductBoard - Roadmap management</li> <li>Fullstory - Session replay for internal tools</li> </ul>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#key-takeaways","title":"\ud83c\udfaf Key Takeaways","text":"<p>By completing this module, you've learned:</p> <ol> <li>\u2705 Platform as a product mindset - Your users are developers; measure their satisfaction</li> <li>\u2705 User research methods - Interviews, surveys, shadowing, analytics</li> <li>\u2705 Prioritization frameworks - Impact vs. effort, strategic alignment</li> <li>\u2705 Roadmap building - Outcome-driven, timeboxed, measurable</li> <li>\u2705 Key metrics - NPS, adoption, DORA metrics, support efficiency</li> <li>\u2705 Product management practices - Feedback loops, iteration, communication</li> </ol> <p>Critical insight: The best platform is useless if developers don't adopt it. Product thinking ensures you build what users actually need, not what you think they need.</p> <p>Remember:  - \ud83c\udfaf Outcomes over outputs: Measure impact, not features shipped - \ud83d\udc42 Listen more than talk: Users know their problems better than you - \ud83d\udd01 Iterate relentlessly: Small improvements compound over time - \ud83d\udce2 Communicate constantly: Share progress, celebrate wins, be transparent about challenges</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#next-steps","title":"\ud83d\ude80 Next Steps","text":""},{"location":"dojo/modules/black-belt/module-17-platform-product/#in-module-18-multi-tenancy-resource-management","title":"In Module 18: Multi-Tenancy &amp; Resource Management","text":"<p>You'll learn how to: - Design multi-tenant platforms serving multiple teams securely - Implement resource quotas and isolation - Handle namespace management and RBAC at scale - Create self-service onboarding workflows - Monitor and optimize resource utilization across tenants</p> <p>Prepare by: - Identifying how many teams your platform will serve - Understanding your organization's compliance requirements - Listing resources that need quota enforcement (CPU, memory, storage)</p>"},{"location":"dojo/modules/black-belt/module-17-platform-product/#black-belt-progress","title":"\ud83c\udfc6 Black Belt Progress","text":"<p>Module 17 Complete! \u2705</p> <pre><code>Black Belt Progress:\n[\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 25% (1/4 modules)\n\n\u2705 Module 17: Platform as a Product\n\u2b1c Module 18: Multi-Tenancy &amp; Resource Management\n\u2b1c Module 19: Security &amp; Zero Trust\n\u2b1c Module 20: Multi-Cloud Strategies\n\nNext: Module 18 to continue your Black Belt journey!\n</code></pre> <p>Module 17: Platform as a Product | Fawkes Dojo | Black Belt \"Build what users need, not what you think they need\" | Version 1.0</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/","title":"Fawkes Dojo Module 18: Multi-Tenancy &amp; RBAC","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#module-overview","title":"\ud83c\udfaf Module Overview","text":"<p>Belt Level: \u26ab Black Belt - Platform Architecture Module: 2 of 4 (Black Belt) Duration: 90 minutes Difficulty: Expert Prerequisites:  - Module 17: Platform Architecture complete - Deep Kubernetes knowledge - Security fundamentals - Understanding of identity systems</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>By the end of this module, you will:</p> <ol> <li>\u2705 Design multi-tenant platform architectures</li> <li>\u2705 Implement robust RBAC systems</li> <li>\u2705 Create security boundaries and isolation</li> <li>\u2705 Manage namespace strategies at scale</li> <li>\u2705 Implement policy enforcement with OPA</li> <li>\u2705 Design quota and resource management</li> <li>\u2705 Handle tenant lifecycle management</li> </ol> <p>DORA Capabilities Addressed: - \u2713 Security &amp; Compliance - \u2713 Access Control - \u2713 Team Autonomy (with guardrails) - \u2713 Resource Efficiency</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#part-1-multi-tenancy-fundamentals","title":"\ud83d\udcd6 Part 1: Multi-Tenancy Fundamentals","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#what-is-multi-tenancy","title":"What is Multi-Tenancy?","text":"<p>Definition: Multiple teams (tenants) sharing a platform while maintaining isolation</p> <p>Isolation Levels:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Isolation Level            Cost    Security    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Soft (Namespace)           Low     Basic       \u2502\n\u2502  Medium (vCluster)          Medium  Good        \u2502\n\u2502  Hard (Separate Clusters)   High    Excellent   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#tenancy-models","title":"Tenancy Models","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#model-1-namespace-per-team","title":"Model 1: Namespace-per-Team","text":"<pre><code>Cluster: production\n\u251c\u2500 Namespace: team-alpha-prod\n\u2502  \u251c\u2500 Deployment: service-a\n\u2502  \u251c\u2500 Service: service-a\n\u2502  \u2514\u2500 ResourceQuota: team-alpha-quota\n\u251c\u2500 Namespace: team-beta-prod\n\u2502  \u251c\u2500 Deployment: service-b\n\u2502  \u2514\u2500 ResourceQuota: team-beta-quota\n\u2514\u2500 Namespace: team-gamma-prod\n   \u2514\u2500 Deployment: service-c\n</code></pre> <p>Pros: - \u2705 Simple to implement - \u2705 Low overhead - \u2705 Easy cross-team communication</p> <p>Cons: - \u274c Shared control plane (noisy neighbor) - \u274c Limited isolation - \u274c Version lock (same K8s version)</p> <p>Best For: Internal teams, trusted tenants</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#model-2-virtual-clusters-vcluster","title":"Model 2: Virtual Clusters (vCluster)","text":"<pre><code>Host Cluster\n\u251c\u2500 Namespace: vcluster-team-alpha\n\u2502  \u2514\u2500 Virtual Control Plane\n\u2502     \u2514\u2500 Virtual Namespace: default\n\u2502        \u2514\u2500 Pods (run in host namespace)\n\u251c\u2500 Namespace: vcluster-team-beta\n\u2502  \u2514\u2500 Virtual Control Plane\n\u2502     \u2514\u2500 Virtual Namespace: default\n\u2514\u2500 Namespace: vcluster-team-gamma\n</code></pre> <p>Pros: - \u2705 Full Kubernetes API per tenant - \u2705 Different versions possible - \u2705 Better isolation - \u2705 Admin-level access per tenant</p> <p>Cons: - \u274c More complex - \u274c Higher resource overhead - \u274c Cross-vCluster networking tricky</p> <p>Best For: Agencies, managed services, dev environments</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#model-3-cluster-per-team","title":"Model 3: Cluster-per-Team","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Team Alpha   \u2502  \u2502 Team Beta    \u2502  \u2502 Team Gamma   \u2502\n\u2502 Cluster      \u2502  \u2502 Cluster      \u2502  \u2502 Cluster      \u2502\n\u2502              \u2502  \u2502              \u2502  \u2502              \u2502\n\u2502 Full Control \u2502  \u2502 Full Control \u2502  \u2502 Full Control \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Pros: - \u2705 Complete isolation - \u2705 Full autonomy - \u2705 Blast radius contained</p> <p>Cons: - \u274c High cost - \u274c Management overhead - \u274c Shared services duplication</p> <p>Best For: Large enterprises, critical workloads, external customers</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#security-boundaries","title":"Security Boundaries","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Security Layers                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  1. Network Policies (L3/L4)                \u2502\n\u2502     \u2514\u2500 Block cross-namespace traffic        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  2. RBAC (API Access)                       \u2502\n\u2502     \u2514\u2500 Who can do what                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  3. Pod Security Standards                  \u2502\n\u2502     \u2514\u2500 What containers can do               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  4. Policy Enforcement (OPA)                \u2502\n\u2502     \u2514\u2500 Custom rules and validation          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  5. Resource Quotas                         \u2502\n\u2502     \u2514\u2500 Prevent resource exhaustion          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  6. Service Mesh (mTLS)                     \u2502\n\u2502     \u2514\u2500 Encrypted service-to-service         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#part-2-kubernetes-rbac-deep-dive","title":"\ud83d\udd10 Part 2: Kubernetes RBAC Deep Dive","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#rbac-components","title":"RBAC Components","text":"<pre><code>User/ServiceAccount\n        \u2502\n        \u2502 (binds to)\n        \u25bc\n      Role/ClusterRole\n        \u2502\n        \u2502 (defines)\n        \u25bc\n    Permissions\n  (verbs on resources)\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#example-rbac-setup","title":"Example RBAC Setup","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#1-developer-role-namespace-scoped","title":"1. Developer Role (Namespace-scoped)","text":"<pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: developer\n  namespace: team-alpha-prod\nrules:\n# Read access to most resources\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"services\", \"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n\n# Write access to deployments\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"]\n\n# Execute into pods for debugging\n- apiGroups: [\"\"]\n  resources: [\"pods/exec\"]\n  verbs: [\"create\"]\n\n# View logs\n- apiGroups: [\"\"]\n  resources: [\"pods/log\"]\n  verbs: [\"get\"]\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#2-admin-role-namespace-scoped","title":"2. Admin Role (Namespace-scoped)","text":"<pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: team-admin\n  namespace: team-alpha-prod\nrules:\n# Full access to namespace resources\n- apiGroups: [\"*\"]\n  resources: [\"*\"]\n  verbs: [\"*\"]\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#3-platform-admin-role-cluster-scoped","title":"3. Platform Admin Role (Cluster-scoped)","text":"<pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: platform-admin\nrules:\n# Full cluster access\n- apiGroups: [\"*\"]\n  resources: [\"*\"]\n  verbs: [\"*\"]\n\n# Access to cluster-scoped resources\n- nonResourceURLs: [\"*\"]\n  verbs: [\"*\"]\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#4-read-only-role-cluster-scoped","title":"4. Read-Only Role (Cluster-scoped)","text":"<pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: read-only\nrules:\n- apiGroups: [\"*\"]\n  resources: [\"*\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#rolebinding-examples","title":"RoleBinding Examples","text":"<pre><code># Bind developer role to user\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: alice-developer\n  namespace: team-alpha-prod\nsubjects:\n- kind: User\n  name: alice@company.com\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role\n  name: developer\n  apiGroup: rbac.authorization.k8s.io\n\n---\n# Bind admin role to group\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: team-alpha-admins\n  namespace: team-alpha-prod\nsubjects:\n- kind: Group\n  name: team-alpha-leads\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role\n  name: team-admin\n  apiGroup: rbac.authorization.k8s.io\n\n---\n# Bind cluster role with ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: platform-admins\nsubjects:\n- kind: Group\n  name: platform-team\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: ClusterRole\n  name: platform-admin\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#service-account-rbac","title":"Service Account RBAC","text":"<pre><code># Service account for CI/CD\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: ci-deployer\n  namespace: team-alpha-prod\n\n---\n# Role for deployment\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: deployer\n  namespace: team-alpha-prod\nrules:\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\"]\n  verbs: [\"get\", \"list\", \"update\", \"patch\"]\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\", \"list\"]\n\n---\n# Bind role to service account\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: ci-deployer-binding\n  namespace: team-alpha-prod\nsubjects:\n- kind: ServiceAccount\n  name: ci-deployer\n  namespace: team-alpha-prod\nroleRef:\n  kind: Role\n  name: deployer\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#part-3-namespace-strategy","title":"\ud83c\udfd7\ufe0f Part 3: Namespace Strategy","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#naming-convention","title":"Naming Convention","text":"<pre><code>&lt;team&gt;-&lt;environment&gt;-&lt;region&gt;\n\nExamples:\n- team-alpha-prod-us-east\n- team-alpha-staging-us-east\n- team-alpha-dev-us-east\n- team-beta-prod-eu-west\n- platform-core-prod-us-east\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#namespace-template","title":"Namespace Template","text":"<pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: team-alpha-prod\n  labels:\n    team: alpha\n    environment: production\n    region: us-east\n    cost-center: \"1234\"\n  annotations:\n    description: \"Team Alpha production workloads\"\n    owner: \"alice@company.com\"\n\n---\n# Resource Quota\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: team-alpha-quota\n  namespace: team-alpha-prod\nspec:\n  hard:\n    requests.cpu: \"100\"\n    requests.memory: 200Gi\n    limits.cpu: \"200\"\n    limits.memory: 400Gi\n    persistentvolumeclaims: \"20\"\n    services.loadbalancers: \"3\"\n\n---\n# Limit Range (default limits)\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: team-alpha-limits\n  namespace: team-alpha-prod\nspec:\n  limits:\n  - max:\n      cpu: \"4\"\n      memory: \"8Gi\"\n    min:\n      cpu: \"10m\"\n      memory: \"10Mi\"\n    default:\n      cpu: \"500m\"\n      memory: \"512Mi\"\n    defaultRequest:\n      cpu: \"100m\"\n      memory: \"128Mi\"\n    type: Container\n\n---\n# Network Policy (deny all by default)\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\n  namespace: team-alpha-prod\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#automated-namespace-provisioning","title":"Automated Namespace Provisioning","text":"<pre><code># namespace_provisioner.py\nimport kubernetes\nfrom jinja2 import Template\n\nclass NamespaceProvisioner:\n    def __init__(self, k8s_config):\n        kubernetes.config.load_kube_config(k8s_config)\n        self.api = kubernetes.client.CoreV1Api()\n        self.rbac_api = kubernetes.client.RbacAuthorizationV1Api()\n\n    def create_tenant_namespace(self, tenant_config):\n        \"\"\"\n        Create namespace with all required resources\n\n        Args:\n            tenant_config: dict with team, environment, quotas, etc.\n        \"\"\"\n        namespace_name = f\"{tenant_config['team']}-{tenant_config['environment']}\"\n\n        # 1. Create namespace\n        self._create_namespace(namespace_name, tenant_config)\n\n        # 2. Create resource quota\n        self._create_resource_quota(namespace_name, tenant_config['quotas'])\n\n        # 3. Create limit ranges\n        self._create_limit_range(namespace_name, tenant_config['limits'])\n\n        # 4. Create network policies\n        self._create_network_policies(namespace_name)\n\n        # 5. Create RBAC roles\n        self._create_rbac(namespace_name, tenant_config['members'])\n\n        # 6. Create service accounts\n        self._create_service_accounts(namespace_name)\n\n        return namespace_name\n\n    def _create_namespace(self, name, config):\n        \"\"\"Create namespace with labels and annotations\"\"\"\n        namespace = kubernetes.client.V1Namespace(\n            metadata=kubernetes.client.V1ObjectMeta(\n                name=name,\n                labels={\n                    'team': config['team'],\n                    'environment': config['environment'],\n                    'managed-by': 'platform-automation'\n                },\n                annotations={\n                    'owner': config['owner'],\n                    'cost-center': config['cost_center'],\n                    'created-by': 'namespace-provisioner'\n                }\n            )\n        )\n        self.api.create_namespace(namespace)\n        print(f\"\u2705 Created namespace: {name}\")\n\n    def _create_resource_quota(self, namespace, quotas):\n        \"\"\"Create resource quota\"\"\"\n        quota = kubernetes.client.V1ResourceQuota(\n            metadata=kubernetes.client.V1ObjectMeta(name=\"tenant-quota\"),\n            spec=kubernetes.client.V1ResourceQuotaSpec(\n                hard={\n                    'requests.cpu': quotas['cpu_requests'],\n                    'requests.memory': quotas['memory_requests'],\n                    'limits.cpu': quotas['cpu_limits'],\n                    'limits.memory': quotas['memory_limits'],\n                    'persistentvolumeclaims': str(quotas['pvc_count'])\n                }\n            )\n        )\n        self.api.create_namespaced_resource_quota(namespace, quota)\n        print(f\"\u2705 Created resource quota in {namespace}\")\n\n    def _create_rbac(self, namespace, members):\n        \"\"\"Create roles and role bindings for team members\"\"\"\n\n        # Developer role\n        dev_role = kubernetes.client.V1Role(\n            metadata=kubernetes.client.V1ObjectMeta(name=\"developer\"),\n            rules=[\n                kubernetes.client.V1PolicyRule(\n                    api_groups=[\"\"],\n                    resources=[\"pods\", \"services\", \"configmaps\"],\n                    verbs=[\"get\", \"list\", \"watch\"]\n                ),\n                kubernetes.client.V1PolicyRule(\n                    api_groups=[\"apps\"],\n                    resources=[\"deployments\"],\n                    verbs=[\"get\", \"list\", \"watch\", \"update\", \"patch\"]\n                )\n            ]\n        )\n        self.rbac_api.create_namespaced_role(namespace, dev_role)\n\n        # Bind developers\n        for member in members.get('developers', []):\n            binding = kubernetes.client.V1RoleBinding(\n                metadata=kubernetes.client.V1ObjectMeta(\n                    name=f\"{member}-developer\"\n                ),\n                subjects=[\n                    kubernetes.client.V1Subject(\n                        kind=\"User\",\n                        name=member,\n                        api_group=\"rbac.authorization.k8s.io\"\n                    )\n                ],\n                role_ref=kubernetes.client.V1RoleRef(\n                    kind=\"Role\",\n                    name=\"developer\",\n                    api_group=\"rbac.authorization.k8s.io\"\n                )\n            )\n            self.rbac_api.create_namespaced_role_binding(namespace, binding)\n\n        print(f\"\u2705 Created RBAC in {namespace}\")\n\n# Usage\nconfig = {\n    'team': 'alpha',\n    'environment': 'production',\n    'owner': 'alice@company.com',\n    'cost_center': '1234',\n    'quotas': {\n        'cpu_requests': '100',\n        'memory_requests': '200Gi',\n        'cpu_limits': '200',\n        'memory_limits': '400Gi',\n        'pvc_count': 20\n    },\n    'limits': {\n        'default_cpu': '500m',\n        'default_memory': '512Mi'\n    },\n    'members': {\n        'developers': ['alice@company.com', 'bob@company.com'],\n        'admins': ['carol@company.com']\n    }\n}\n\nprovisioner = NamespaceProvisioner('/path/to/kubeconfig')\nnamespace = provisioner.create_tenant_namespace(config)\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#part-4-policy-enforcement-with-opa","title":"\ud83d\udee1\ufe0f Part 4: Policy Enforcement with OPA","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#what-is-open-policy-agent-opa","title":"What is Open Policy Agent (OPA)?","text":"<p>Policy engine for cloud-native environments. Write policies as code.</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#opa-gatekeeper","title":"OPA Gatekeeper","text":"<p>Kubernetes admission controller using OPA.</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#installation","title":"Installation","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#example-policies","title":"Example Policies","text":"<p>Policy 1: Require Labels</p> <pre><code>apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8srequiredlabels\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sRequiredLabels\n      validation:\n        openAPIV3Schema:\n          type: object\n          properties:\n            labels:\n              type: array\n              items:\n                type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8srequiredlabels\n\n        violation[{\"msg\": msg, \"details\": {\"missing_labels\": missing}}] {\n          provided := {label | input.review.object.metadata.labels[label]}\n          required := {label | label := input.parameters.labels[_]}\n          missing := required - provided\n          count(missing) &gt; 0\n          msg := sprintf(\"Missing required labels: %v\", [missing])\n        }\n\n---\n# Apply the constraint\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sRequiredLabels\nmetadata:\n  name: require-team-label\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Namespace\"]\n  parameters:\n    labels: [\"team\", \"environment\", \"cost-center\"]\n</code></pre> <p>Policy 2: Block Privileged Containers</p> <pre><code>apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPPrivilegedContainer\nmetadata:\n  name: block-privileged-containers\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n    excludedNamespaces:\n      - kube-system\n      - platform-core\n</code></pre> <p>Policy 3: Enforce Resource Limits</p> <pre><code>apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sContainerLimits\nmetadata:\n  name: container-must-have-limits\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n  parameters:\n    cpu: \"4\"\n    memory: \"8Gi\"\n</code></pre> <p>Policy 4: Restrict Registry Sources</p> <pre><code>apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8sallowedrepos\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sAllowedRepos\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8sallowedrepos\n\n        violation[{\"msg\": msg}] {\n          container := input.review.object.spec.containers[_]\n          satisfied := [good | repo = input.parameters.repos[_]\n                              good = startswith(container.image, repo)]\n          not any(satisfied)\n          msg := sprintf(\"Container image %v not from approved registry\", [container.image])\n        }\n\n---\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sAllowedRepos\nmetadata:\n  name: allowed-registries\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n  parameters:\n    repos:\n      - \"harbor.company.com/\"\n      - \"gcr.io/company/\"\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#part-5-resource-management","title":"\ud83d\udcb0 Part 5: Resource Management","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#resource-quotas-by-team","title":"Resource Quotas by Team","text":"<pre><code># Small team\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: small-team-quota\n  namespace: team-small-prod\nspec:\n  hard:\n    requests.cpu: \"20\"\n    requests.memory: 40Gi\n    limits.cpu: \"40\"\n    limits.memory: 80Gi\n    pods: \"50\"\n    services: \"10\"\n    persistentvolumeclaims: \"10\"\n\n---\n# Medium team\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: medium-team-quota\n  namespace: team-medium-prod\nspec:\n  hard:\n    requests.cpu: \"100\"\n    requests.memory: 200Gi\n    limits.cpu: \"200\"\n    limits.memory: 400Gi\n    pods: \"200\"\n    services: \"50\"\n    persistentvolumeclaims: \"50\"\n\n---\n# Large team\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: large-team-quota\n  namespace: team-large-prod\nspec:\n  hard:\n    requests.cpu: \"500\"\n    requests.memory: 1Ti\n    limits.cpu: \"1000\"\n    limits.memory: 2Ti\n    pods: \"1000\"\n    services: \"200\"\n    persistentvolumeclaims: \"200\"\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#priority-classes","title":"Priority Classes","text":"<pre><code># Critical workloads\napiVersion: scheduling.k8s.io/v1\nkind: PriorityClass\nmetadata:\n  name: critical\nvalue: 1000000\nglobalDefault: false\ndescription: \"Critical production workloads\"\n\n---\n# High priority\napiVersion: scheduling.k8s.io/v1\nkind: PriorityClass\nmetadata:\n  name: high\nvalue: 100000\ndescription: \"High priority production workloads\"\n\n---\n# Normal priority\napiVersion: scheduling.k8s.io/v1\nkind: PriorityClass\nmetadata:\n  name: normal\nvalue: 10000\nglobalDefault: true\ndescription: \"Normal priority workloads\"\n\n---\n# Low priority\napiVersion: scheduling.k8s.io/v1\nkind: PriorityClass\nmetadata:\n  name: low\nvalue: 1000\ndescription: \"Low priority batch jobs\"\n</code></pre> <p>Usage in Pod:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: critical-app\nspec:\n  priorityClassName: critical\n  containers:\n  - name: app\n    image: myapp:v1.0\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#part-6-network-isolation","title":"\ud83d\udd12 Part 6: Network Isolation","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#network-policies","title":"Network Policies","text":"<p>Default Deny All</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\n  namespace: team-alpha-prod\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n</code></pre> <p>Allow Within Namespace</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-same-namespace\n  namespace: team-alpha-prod\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector: {}\n</code></pre> <p>Allow from Ingress</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-from-ingress\n  namespace: team-alpha-prod\nspec:\n  podSelector:\n    matchLabels:\n      role: frontend\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    ports:\n    - protocol: TCP\n      port: 8080\n</code></pre> <p>Allow Egress to DNS and External</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-dns-and-external\n  namespace: team-alpha-prod\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n  egress:\n  # Allow DNS\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          name: kube-system\n    ports:\n    - protocol: UDP\n      port: 53\n  # Allow external HTTPS\n  - to:\n    - podSelector: {}\n    ports:\n    - protocol: TCP\n      port: 443\n</code></pre>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#part-7-hands-on-lab-build-multi-tenant-platform","title":"\ud83d\udcaa Part 7: Hands-On Lab - Build Multi-Tenant Platform","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#scenario","title":"Scenario","text":"<p>Design multi-tenancy for 10 engineering teams.</p> <p>Requirements: - Namespace isolation - RBAC for developers and admins - Resource quotas per team - Network policies (zero-trust) - Policy enforcement (OPA) - Cost allocation per team</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#tasks","title":"Tasks","text":"<p>Task 1: Design Tenancy Model - [ ] Choose model (namespace/vcluster/cluster) - [ ] Define namespace naming convention - [ ] Create namespace template</p> <p>Task 2: Implement RBAC - [ ] Create developer role - [ ] Create admin role - [ ] Create read-only role - [ ] Set up RoleBindings</p> <p>Task 3: Configure Resource Management - [ ] Define quota tiers (small/medium/large) - [ ] Create LimitRanges - [ ] Set up PriorityClasses</p> <p>Task 4: Implement Network Isolation - [ ] Default deny all traffic - [ ] Allow intra-namespace - [ ] Allow from ingress - [ ] Allow DNS and external</p> <p>Task 5: Policy Enforcement - [ ] Require labels policy - [ ] Block privileged containers - [ ] Enforce resource limits - [ ] Restrict image registries</p> <p>Task 6: Automation - [ ] Namespace provisioning script - [ ] RBAC automation - [ ] Onboarding documentation</p> <p>Validation: - [ ] Namespace isolation working - [ ] RBAC permissions correct - [ ] Resource quotas enforced - [ ] Network policies blocking unauthorized traffic - [ ] OPA policies validating resources - [ ] Cost allocation labels present</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#part-8-knowledge-check","title":"\ud83c\udf93 Part 8: Knowledge Check","text":"<ol> <li>What's the lightest multi-tenancy model?</li> <li>[x] Namespace-per-team</li> <li>[ ] vCluster</li> <li>[ ] Cluster-per-team</li> <li> <p>[ ] Virtual machines</p> </li> <li> <p>What does RBAC stand for?</p> </li> <li>[ ] Resource-Based Access Control</li> <li>[x] Role-Based Access Control</li> <li>[ ] Rule-Based Access Control</li> <li> <p>[ ] Rights-Based Access Control</p> </li> <li> <p>Which is cluster-scoped?</p> </li> <li>[ ] Role</li> <li>[x] ClusterRole</li> <li>[ ] RoleBinding</li> <li> <p>[ ] ResourceQuota</p> </li> <li> <p>What does OPA stand for?</p> </li> <li>[ ] Optimal Policy Agent</li> <li>[x] Open Policy Agent</li> <li>[ ] Orchestrated Policy Administration</li> <li> <p>[ ] Operational Policy Automation</p> </li> <li> <p>What enforces resource limits per namespace?</p> </li> <li>[ ] NetworkPolicy</li> <li>[ ] PodSecurityPolicy</li> <li>[x] ResourceQuota</li> <li> <p>[ ] RBAC</p> </li> <li> <p>Default network policy should be:</p> </li> <li>[x] Deny all, whitelist specific traffic</li> <li>[ ] Allow all, blacklist bad traffic</li> <li>[ ] No policy needed</li> <li> <p>[ ] Allow within cluster only</p> </li> <li> <p>What does vCluster provide?</p> </li> <li>[ ] Virtual machines</li> <li>[ ] Virtual networks</li> <li>[x] Virtual Kubernetes control planes</li> <li> <p>[ ] Virtual storage</p> </li> <li> <p>Priority Classes are used for:</p> </li> <li>[ ] Security levels</li> <li>[ ] Network priority</li> <li>[x] Pod scheduling priority during resource contention</li> <li>[ ] RBAC levels</li> </ol> <p>Answers: 1-A, 2-B, 3-B, 4-B, 5-C, 6-A, 7-C, 8-C</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#part-9-module-summary-next-steps","title":"\ud83c\udfaf Part 9: Module Summary &amp; Next Steps","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#what-you-learned","title":"What You Learned","text":"<p>\u2705 Multi-Tenancy Models: Namespace, vCluster, cluster-per-tenant \u2705 RBAC Deep Dive: Roles, bindings, service accounts \u2705 Namespace Strategy: Naming, templates, automation \u2705 Policy Enforcement: OPA Gatekeeper policies \u2705 Resource Management: Quotas, limits, priorities \u2705 Network Isolation: NetworkPolicies, zero-trust</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Choose tenancy model wisely - Balance isolation, cost, complexity</li> <li>RBAC is foundational - Get permissions right from day one</li> <li>Automate tenant lifecycle - Manual provisioning doesn't scale</li> <li>Deny by default - Whitelist only necessary access</li> <li>Policy as code - OPA enables declarative governance</li> <li>Monitor quota usage - Prevent resource exhaustion</li> <li>Document everything - Clear ownership and boundaries</li> </ol>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#real-world-impact","title":"Real-World Impact","text":"<p>\"After implementing proper multi-tenancy: - Onboarding time: 2 weeks \u2192 1 hour (automation) - Security incidents: 12/year \u2192 1/year (isolation) - Resource waste: 40% \u2192 10% (quotas) - Cost allocation: Impossible \u2192 Precise (labels) - Team autonomy: Limited \u2192 High (self-service) - Compliance: Manual \u2192 Automated (OPA)</p> <p>We scaled from 5 teams to 50 teams without increasing platform team size.\" - Platform Director, Tech Unicorn</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#tools","title":"Tools","text":"<ul> <li>vCluster - Virtual Kubernetes clusters</li> <li>OPA Gatekeeper</li> <li>Hierarchical Namespaces</li> <li>Kyverno - Alternative to OPA</li> <li>Capsule - Multi-tenancy operator</li> </ul>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#documentation","title":"Documentation","text":"<ul> <li>Kubernetes Multi-Tenancy</li> <li>RBAC Best Practices</li> <li>Network Policies</li> </ul>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#books-articles","title":"Books &amp; Articles","text":"<ul> <li>Kubernetes Security - Liz Rice &amp; Michael Hausenblas</li> <li>Multi-Tenancy in Kubernetes</li> </ul>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#module-completion","title":"\ud83c\udfc5 Module Completion","text":""},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#assessment-checklist","title":"Assessment Checklist","text":"<ul> <li>[ ] Conceptual Understanding</li> <li>[ ] Explain tenancy models</li> <li>[ ] Understand RBAC components</li> <li> <p>[ ] Know isolation strategies</p> </li> <li> <p>[ ] Practical Skills</p> </li> <li>[ ] Design namespace strategy</li> <li>[ ] Implement RBAC</li> <li>[ ] Create OPA policies</li> <li>[ ] Configure network policies</li> <li> <p>[ ] Automate provisioning</p> </li> <li> <p>[ ] Hands-On Lab</p> </li> <li>[ ] Multi-tenant platform designed</li> <li>[ ] RBAC implemented correctly</li> <li>[ ] Policies enforcing rules</li> <li> <p>[ ] Isolation verified</p> </li> <li> <p>[ ] Quiz</p> </li> <li>[ ] Score 80% or higher (6/8 questions)</li> </ul>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#certification-credit","title":"Certification Credit","text":"<p>Upon completion, you earn: - 10 points toward Black Belt certification (50% complete) - Badge: \"Multi-Tenancy Architect\" - Skill Unlocked: Enterprise Platform Design</p>"},{"location":"dojo/modules/black-belt/module-18-multi-tenancy/#black-belt-progress","title":"\ud83c\udf96\ufe0f Black Belt Progress","text":"<pre><code>Black Belt: Platform Architecture\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nModule 17: Platform Architecture   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 25% \u2713\nModule 18: Multi-Tenancy &amp; RBAC    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 50% \u2713\nModule 19: Cost Optimization       \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\nModule 20: Platform Leadership     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n</code></pre> <p>Halfway to Black Belt! \ud83c\udf89</p> <p>Next Module Preview: Module 19 - Cost Optimization (FinOps, right-sizing, cloud efficiency)</p> <p>Fawkes Dojo - Where Platform Engineers Are Forged Version 1.0 | Last Updated: October 2025 License: MIT | https://github.com/paruff/fawkes</p> <p>\ud83c\udf89 Module 18 Complete - Multi-Tenancy Mastery Achieved! \ud83c\udf89</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/","title":"Module 19: Security &amp; Zero Trust Architecture","text":"<p>Belt Level: \u26ab Black Belt Duration: 60 minutes Prerequisites: Modules 1-18, especially Module 7 (Security Scanning), Module 13 (Observability) Certification Track: Fawkes Platform Architect</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#learning-objectives","title":"\ud83c\udfaf Learning Objectives","text":"<p>By the end of this module, you will be able to:</p> <ol> <li>Design and implement a zero trust security architecture for internal developer platforms</li> <li>Apply the principle of \"never trust, always verify\" to CI/CD pipelines and deployment workflows</li> <li>Implement mutual TLS (mTLS), service mesh security, and workload identity</li> <li>Configure policy-as-code enforcement using Open Policy Agent (OPA) and admission controllers</li> <li>Establish supply chain security practices including SBOM generation, image signing, and provenance verification</li> </ol>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#theory-zero-trust-for-platform-engineering","title":"\ud83d\udcda Theory: Zero Trust for Platform Engineering","text":""},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#what-is-zero-trust","title":"What is Zero Trust?","text":"<p>Zero trust is a security model based on the principle of \"never trust, always verify\". Unlike traditional perimeter-based security (castle-and-moat), zero trust assumes:</p> <ul> <li>No implicit trust: Location (inside/outside network) doesn't grant access</li> <li>Verify explicitly: Always authenticate and authorize based on all available data points</li> <li>Least privilege access: Grant minimum permissions necessary for the task</li> <li>Assume breach: Design systems expecting compromise at any point</li> </ul>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#why-zero-trust-matters-for-idps","title":"Why Zero Trust Matters for IDPs","text":"<p>Internal Developer Platforms handle:</p> <ul> <li>Credentials and secrets for all production systems</li> <li>CI/CD pipelines that deploy code to production</li> <li>Container registries with potentially vulnerable images</li> <li>Service-to-service communication across microservices</li> <li>Developer access to sensitive production resources</li> </ul> <p>A breach at any point could cascade across your entire platform. Zero trust minimizes blast radius.</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#the-zero-trust-architecture-pillars","title":"The Zero Trust Architecture Pillars","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    ZERO TRUST PRINCIPLES                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                             \u2502\n\u2502  1. IDENTITY                                                \u2502\n\u2502     \u251c\u2500 Workload Identity (not long-lived credentials)      \u2502\n\u2502     \u251c\u2500 Human Identity (SSO, MFA, short-lived tokens)       \u2502\n\u2502     \u2514\u2500 Machine Identity (service accounts, mTLS)           \u2502\n\u2502                                                             \u2502\n\u2502  2. DEVICE                                                  \u2502\n\u2502     \u251c\u2500 Endpoint security posture                           \u2502\n\u2502     \u251c\u2500 Compliance validation                               \u2502\n\u2502     \u2514\u2500 Device certificates                                 \u2502\n\u2502                                                             \u2502\n\u2502  3. NETWORK                                                 \u2502\n\u2502     \u251c\u2500 Encrypt all traffic (TLS everywhere)                \u2502\n\u2502     \u251c\u2500 Micro-segmentation                                  \u2502\n\u2502     \u2514\u2500 Service mesh (Istio, Linkerd)                       \u2502\n\u2502                                                             \u2502\n\u2502  4. APPLICATION                                             \u2502\n\u2502     \u251c\u2500 Policy-as-code enforcement                          \u2502\n\u2502     \u251c\u2500 Runtime security (Falco, AppArmor)                  \u2502\n\u2502     \u2514\u2500 Admission controllers                               \u2502\n\u2502                                                             \u2502\n\u2502  5. DATA                                                    \u2502\n\u2502     \u251c\u2500 Encryption at rest and in transit                   \u2502\n\u2502     \u251c\u2500 Data classification and DLP                         \u2502\n\u2502     \u2514\u2500 Secret management (Vault, External Secrets)         \u2502\n\u2502                                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#zero-trust-in-cicd-pipelines","title":"Zero Trust in CI/CD Pipelines","text":"<p>Traditional CI/CD often uses: - \u274c Long-lived credentials stored in CI system - \u274c Broad permissions for deployment service accounts - \u274c No verification of artifact provenance - \u274c Implicit trust between pipeline stages</p> <p>Zero trust CI/CD: - \u2705 Workload identity for pipeline authentication (OIDC) - \u2705 Least-privilege, ephemeral credentials - \u2705 Cryptographic verification of artifacts (Sigstore/Cosign) - \u2705 Policy enforcement at every stage</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#core-concepts","title":"\ud83d\udd10 Core Concepts","text":""},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#1-workload-identity","title":"1. Workload Identity","text":"<p>Problem: Traditional approaches use long-lived service account keys stored as secrets.</p> <p>Zero Trust Solution: Workload identity allows pods/pipelines to authenticate using short-lived tokens.</p> <p>Example: GitHub Actions \u2192 AWS <pre><code># Traditional approach (NEVER DO THIS)\n- name: Configure AWS Credentials\n  env:\n    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}     # \u274c Long-lived\n    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }} # \u274c Rotated manually\n\n# Zero trust approach with OIDC\n- name: Configure AWS Credentials\n  uses: aws-actions/configure-aws-credentials@v4\n  with:\n    role-to-assume: arn:aws:iam::123456789:role/GitHubActionsRole\n    aws-region: us-east-1\n    # \u2705 No secrets stored in GitHub\n    # \u2705 Short-lived tokens (1 hour)\n    # \u2705 Scoped to specific repos/branches\n</code></pre></p> <p>Example: Kubernetes Workload Identity <pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: payment-service\n  annotations:\n    # AWS: Map to IAM role\n    eks.amazonaws.com/role-arn: arn:aws:iam::123456789:role/payment-service\n\n    # GCP: Map to GCP service account\n    iam.gke.io/gcp-service-account: payment@project.iam.gserviceaccount.com\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment-service\nspec:\n  template:\n    spec:\n      serviceAccountName: payment-service  # \u2705 Pod gets temporary credentials\n      containers:\n      - name: app\n        image: payment-service:v1.2.3\n        # No AWS_ACCESS_KEY_ID needed! SDK auto-discovers credentials\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#2-mutual-tls-mtls-and-service-mesh","title":"2. Mutual TLS (mTLS) and Service Mesh","text":"<p>mTLS: Both client and server authenticate using certificates, encrypting all traffic.</p> <p>Service Mesh (Istio, Linkerd, Consul) provides: - Automatic mTLS between all services - Fine-grained authorization policies - Traffic encryption without code changes</p> <p>Example: Istio Authorization Policy <pre><code>apiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: payment-access-policy\n  namespace: payments\nspec:\n  selector:\n    matchLabels:\n      app: payment-api\n  action: ALLOW\n  rules:\n  - from:\n    - source:\n        principals:\n        - \"cluster.local/ns/checkout/sa/checkout-service\"  # Only checkout can call\n    to:\n    - operation:\n        methods: [\"POST\"]\n        paths: [\"/api/v1/charge\"]\n  - from:\n    - source:\n        principals:\n        - \"cluster.local/ns/admin/sa/admin-dashboard\"\n    to:\n    - operation:\n        methods: [\"GET\"]\n        paths: [\"/api/v1/transactions/*\"]\n</code></pre></p> <p>Result: Even if an attacker compromises the <code>frontend</code> service, they cannot call the payment API.</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#3-policy-as-code-with-opa","title":"3. Policy-as-Code with OPA","text":"<p>Open Policy Agent (OPA): Express security policies as code, enforce them at runtime.</p> <p>Gatekeeper: OPA integration for Kubernetes admission control.</p> <p>Example: Require Image Signatures <pre><code>package kubernetes.admission\n\nimport future.keywords.contains\nimport future.keywords.if\n\n# Deny pods with unsigned images\ndeny[msg] {\n    input.request.kind.kind == \"Pod\"\n    image := input.request.object.spec.containers[_].image\n    not image_is_signed(image)\n    msg := sprintf(\"Image %v is not signed. All images must be signed with Cosign.\", [image])\n}\n\n# Check if image has valid signature\nimage_is_signed(image) if {\n    # Query external service or cache of verified images\n    verified_images := data.verified_images\n    image_ref := split(image, \"@\")[0]\n    verified_images[image_ref]\n}\n</code></pre></p> <p>Example: Enforce Resource Limits <pre><code>package kubernetes.admission\n\ndeny[msg] {\n    input.request.kind.kind == \"Deployment\"\n    container := input.request.object.spec.template.spec.containers[_]\n    not container.resources.limits.memory\n    msg := sprintf(\"Container %v must specify memory limits\", [container.name])\n}\n\ndeny[msg] {\n    input.request.kind.kind == \"Deployment\"\n    container := input.request.object.spec.template.spec.containers[_]\n    not container.resources.limits.cpu\n    msg := sprintf(\"Container %v must specify CPU limits\", [container.name])\n}\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#4-supply-chain-security-slsa","title":"4. Supply Chain Security (SLSA)","text":"<p>Supply chain attacks: Compromise the build or delivery process to inject malicious code.</p> <p>SLSA (Supply Chain Levels for Software Artifacts): Framework for supply chain integrity.</p> <p>Key Components:</p> <ol> <li>SBOM (Software Bill of Materials): List all dependencies</li> <li>Provenance: Cryptographically signed record of how artifact was built</li> <li>Image Signing: Sign container images with Cosign/Sigstore</li> <li>Verification: Verify signatures before deployment</li> </ol> <p>Example: Generate SBOM with Syft <pre><code># Generate SBOM for container image\nsyft packages registry:ghcr.io/myorg/payment-service:v1.2.3 \\\n  -o spdx-json=sbom.json\n\n# Generate SBOM during build\nsyft packages dir:. -o cyclonedx-json=sbom.json\n</code></pre></p> <p>Example: Sign Image with Cosign <pre><code># Sign image (uses keyless signing with Sigstore)\ncosign sign ghcr.io/myorg/payment-service:v1.2.3\n\n# Generate provenance attestation\ncosign attest --predicate provenance.json \\\n  ghcr.io/myorg/payment-service:v1.2.3\n\n# Verify signature before deployment\ncosign verify ghcr.io/myorg/payment-service:v1.2.3 \\\n  --certificate-identity-regexp 'https://github.com/myorg/*' \\\n  --certificate-oidc-issuer 'https://token.actions.githubusercontent.com'\n</code></pre></p> <p>Example: Policy to Require Signatures <pre><code>apiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: verify-image-signatures\nspec:\n  validationFailureAction: enforce\n  rules:\n  - name: verify-signature\n    match:\n      any:\n      - resources:\n          kinds:\n          - Pod\n    verifyImages:\n    - imageReferences:\n      - \"ghcr.io/myorg/*\"\n      attestors:\n      - entries:\n        - keyless:\n            subject: \"https://github.com/myorg/*\"\n            issuer: \"https://token.actions.githubusercontent.com\"\n            rekor:\n              url: https://rekor.sigstore.dev\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#5-secret-management","title":"5. Secret Management","text":"<p>Never store secrets in: - \u274c Git repositories - \u274c Environment variables in Dockerfiles - \u274c ConfigMaps - \u274c Hardcoded in source code</p> <p>Zero trust secret management:</p> <pre><code># External Secrets Operator: Sync from Vault/AWS Secrets Manager\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: payment-api-secrets\nspec:\n  refreshInterval: 1h\n  secretStoreRef:\n    name: aws-secretsmanager\n    kind: SecretStore\n  target:\n    name: payment-api-secrets\n    creationPolicy: Owner\n  data:\n  - secretKey: stripe-api-key\n    remoteRef:\n      key: prod/payment/stripe-api-key\n  - secretKey: database-password\n    remoteRef:\n      key: prod/payment/db-password\n</code></pre> <p>Vault Integration: <pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: payment-service\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment-service\nspec:\n  template:\n    metadata:\n      annotations:\n        vault.hashicorp.com/agent-inject: \"true\"\n        vault.hashicorp.com/role: \"payment-service\"\n        vault.hashicorp.com/agent-inject-secret-stripe: \"secret/data/payment/stripe\"\n    spec:\n      serviceAccountName: payment-service\n      containers:\n      - name: app\n        image: payment-service:v1.2.3\n        # Vault agent sidecar injects secrets at /vault/secrets/stripe\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#zero-trust-architecture-for-fawkes","title":"\ud83c\udfd7\ufe0f Zero Trust Architecture for Fawkes","text":""},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#reference-architecture","title":"Reference Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         DEVELOPER                               \u2502\n\u2502                              \u2502                                  \u2502\n\u2502                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                       \u2502\n\u2502                    \u2502   SSO + MFA        \u2502                       \u2502\n\u2502                    \u2502   (Okta, Keycloak) \u2502                       \u2502\n\u2502                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                       \u2502\n\u2502                              \u2502                                  \u2502\n\u2502                              \u2502 OIDC Token                       \u2502\n\u2502                              \u2502                                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                              \u25bc                                  \u2502\n\u2502                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                         \u2502\n\u2502                    \u2502  API Gateway     \u2502                         \u2502\n\u2502                    \u2502  + Policy Engine \u2502                         \u2502\n\u2502                    \u2502  (OPA, Kyverno)  \u2502                         \u2502\n\u2502                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         \u2502\n\u2502                             \u2502                                   \u2502\n\u2502          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                \u2502\n\u2502          \u2502                  \u2502                  \u2502                \u2502\n\u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502    \u2502  Backstage \u2502    \u2502   ArgoCD    \u2502   \u2502  CI System   \u2502        \u2502\n\u2502    \u2502  (mTLS)    \u2502    \u2502   (mTLS)    \u2502   \u2502  (Tekton)    \u2502        \u2502\n\u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502          \u2502                  \u2502                  \u2502                \u2502\n\u2502          \u2502 Workload Identity\u2502 Workload Identity\u2502                \u2502\n\u2502          \u2502                  \u2502                  \u2502                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502          \u2502                  \u2502                  \u2502                \u2502\n\u2502          \u2502          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502                \u2502\n\u2502          \u2502          \u2502  Service Mesh    \u2502       \u2502                \u2502\n\u2502          \u2502          \u2502  (Istio/Linkerd) \u2502       \u2502                \u2502\n\u2502          \u2502          \u2502   - mTLS         \u2502       \u2502                \u2502\n\u2502          \u2502          \u2502   - AuthZ Policy \u2502       \u2502                \u2502\n\u2502          \u2502          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502                \u2502\n\u2502          \u2502                  \u2502                  \u2502                \u2502\n\u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502    \u2502           Application Workloads                   \u2502        \u2502\n\u2502    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502        \u2502\n\u2502    \u2502  \u2502 Frontend \u2502  \u2502  Backend \u2502  \u2502 Database \u2502       \u2502        \u2502\n\u2502    \u2502  \u2502  (mTLS)  \u2502  \u2502  (mTLS)  \u2502  \u2502  (mTLS)  \u2502       \u2502        \u2502\n\u2502    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502        \u2502\n\u2502    \u2502                                                   \u2502        \u2502\n\u2502    \u2502  \ud83d\udd10 All traffic encrypted                        \u2502        \u2502\n\u2502    \u2502  \ud83d\udd10 Every request authenticated                  \u2502        \u2502\n\u2502    \u2502  \ud83d\udd10 Authorization at every hop                   \u2502        \u2502\n\u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502                                                                 \u2502\n\u2502  Secrets: Vault / External Secrets Operator                    \u2502\n\u2502  Logging: All authN/authZ decisions \u2192 SIEM                     \u2502\n\u2502  Policy: OPA Gatekeeper + Kyverno admission controllers        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#zero-trust-cicd-pipeline","title":"Zero Trust CI/CD Pipeline","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  1. CODE COMMIT                                              \u2502\n\u2502     \u2514\u2500 Developer pushes to GitHub                           \u2502\n\u2502        \u2514\u2500 Signed commit (GPG signature required)            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n                     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  2. CI PIPELINE TRIGGERED (Tekton/GitHub Actions)            \u2502\n\u2502     \u251c\u2500 Authenticate with OIDC (no long-lived credentials)   \u2502\n\u2502     \u251c\u2500 Scan code (SAST: Semgrep, CodeQL)                    \u2502\n\u2502     \u251c\u2500 Dependency check (Dependabot, Snyk)                  \u2502\n\u2502     \u251c\u2500 Build image in ephemeral runner                      \u2502\n\u2502     \u251c\u2500 Scan image (Trivy, Grype)                            \u2502\n\u2502     \u251c\u2500 Generate SBOM (Syft)                                 \u2502\n\u2502     \u251c\u2500 Sign image (Cosign/Sigstore)                         \u2502\n\u2502     \u251c\u2500 Generate provenance attestation                      \u2502\n\u2502     \u2514\u2500 Push to registry with signature                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n                     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  3. ADMISSION CONTROL (Kubernetes)                           \u2502\n\u2502     \u251c\u2500 Gatekeeper/Kyverno verify signature                  \u2502\n\u2502     \u251c\u2500 Check SBOM for known vulnerabilities                 \u2502\n\u2502     \u251c\u2500 Enforce resource limits                              \u2502\n\u2502     \u251c\u2500 Validate security context (no root, read-only FS)    \u2502\n\u2502     \u2514\u2500 Only allow if ALL policies pass                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n                     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  4. DEPLOYMENT (ArgoCD)                                      \u2502\n\u2502     \u251c\u2500 ArgoCD authenticates with workload identity          \u2502\n\u2502     \u251c\u2500 Applies manifests to cluster                         \u2502\n\u2502     \u251c\u2500 Service mesh injects mTLS sidecar                    \u2502\n\u2502     \u2514\u2500 Pod authenticates to Vault for secrets               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n                     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  5. RUNTIME SECURITY                                         \u2502\n\u2502     \u251c\u2500 Falco monitors for suspicious syscalls               \u2502\n\u2502     \u251c\u2500 Service mesh enforces authorization policies         \u2502\n\u2502     \u251c\u2500 All traffic encrypted with mTLS                      \u2502\n\u2502     \u2514\u2500 Logs sent to SIEM for audit                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#hands-on-lab-implementing-zero-trust-for-fawkes","title":"\ud83d\udee0\ufe0f Hands-On Lab: Implementing Zero Trust for Fawkes","text":""},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#lab-overview","title":"Lab Overview","text":"<p>You will implement key zero trust components: 1. Configure workload identity for CI/CD 2. Deploy a service mesh with mTLS 3. Implement policy-as-code with OPA Gatekeeper 4. Sign and verify container images with Cosign 5. Configure External Secrets Operator</p> <p>Duration: 25 minutes Tools: <code>kubectl</code>, <code>cosign</code>, <code>helm</code>, <code>fawkes</code> CLI</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#lab-setup","title":"Lab Setup","text":"<pre><code># Ensure you're in the Fawkes lab environment\nfawkes lab start --module 19\n\n# Verify cluster access\nkubectl get nodes\n\n# You should see a 3-node cluster with Istio pre-installed\n</code></pre>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#exercise-1-deploy-istio-service-mesh-5-minutes","title":"Exercise 1: Deploy Istio Service Mesh (5 minutes)","text":"<p>Objective: Enable mTLS for all services in the <code>payments</code> namespace.</p> <pre><code># Istio is already installed in the lab. Enable strict mTLS for payments namespace.\nkubectl create namespace payments\n\nkubectl apply -f - &lt;&lt;EOF\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: default\n  namespace: payments\nspec:\n  mtls:\n    mode: STRICT  # Require mTLS for all traffic\nEOF\n\n# Verify\nkubectl get peerauthentication -n payments\n</code></pre> <p>Deploy a test service:</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: payment-api\n  namespace: payments\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment-api\n  namespace: payments\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: payment-api\n  template:\n    metadata:\n      labels:\n        app: payment-api\n    spec:\n      serviceAccountName: payment-api\n      containers:\n      - name: app\n        image: ghcr.io/fawkes-demo/payment-api:v1.0.0\n        ports:\n        - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: payment-api\n  namespace: payments\nspec:\n  selector:\n    app: payment-api\n  ports:\n  - port: 80\n    targetPort: 8080\nEOF\n</code></pre> <p>Apply authorization policy:</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: payment-api-authz\n  namespace: payments\nspec:\n  selector:\n    matchLabels:\n      app: payment-api\n  action: ALLOW\n  rules:\n  - from:\n    - source:\n        principals:\n        - \"cluster.local/ns/checkout/sa/checkout-service\"\n    to:\n    - operation:\n        methods: [\"POST\"]\n        paths: [\"/api/v1/charge\"]\nEOF\n</code></pre> <p>Test the policy:</p> <pre><code># This should FAIL (no valid service account)\nkubectl run -it --rm curl-test --image=curlimages/curl --restart=Never -- \\\n  curl -v http://payment-api.payments.svc.cluster.local/api/v1/charge\n\n# You should see \"RBAC: access denied\"\n</code></pre>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#exercise-2-install-opa-gatekeeper-and-policies-5-minutes","title":"Exercise 2: Install OPA Gatekeeper and Policies (5 minutes)","text":"<p>Objective: Enforce that all pods must have resource limits.</p> <pre><code># Install Gatekeeper\nkubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml\n\n# Wait for Gatekeeper to be ready\nkubectl wait --for=condition=ready pod -l control-plane=controller-manager -n gatekeeper-system --timeout=120s\n</code></pre> <p>Create a constraint template:</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8srequiredresources\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sRequiredResources\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8srequiredresources\n\n        violation[{\"msg\": msg}] {\n          container := input.review.object.spec.containers[_]\n          not container.resources.limits.memory\n          msg := sprintf(\"Container &lt;%v&gt; must specify memory limits\", [container.name])\n        }\n\n        violation[{\"msg\": msg}] {\n          container := input.review.object.spec.containers[_]\n          not container.resources.limits.cpu\n          msg := sprintf(\"Container &lt;%v&gt; must specify CPU limits\", [container.name])\n        }\nEOF\n</code></pre> <p>Create the constraint:</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sRequiredResources\nmetadata:\n  name: must-have-resource-limits\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"apps\"]\n        kinds: [\"Deployment\"]\n    namespaces:\n      - \"payments\"\nEOF\n</code></pre> <p>Test the policy:</p> <pre><code># This should FAIL (no resource limits)\nkubectl apply -f - &lt;&lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: bad-deployment\n  namespace: payments\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: bad-app\n  template:\n    metadata:\n      labels:\n        app: bad-app\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:latest\n        # \u274c No resource limits!\nEOF\n\n# You should see: \"Container &lt;nginx&gt; must specify memory limits\"\n</code></pre>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#exercise-3-sign-and-verify-container-images-8-minutes","title":"Exercise 3: Sign and Verify Container Images (8 minutes)","text":"<p>Objective: Sign an image with Cosign and configure policy to require signatures.</p> <pre><code># Install Cosign\ncurl -sLO https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64\nchmod +x cosign-linux-amd64\nsudo mv cosign-linux-amd64 /usr/local/bin/cosign\n\n# Generate a key pair (in production, use keyless signing)\ncosign generate-key-pair\n\n# Sign the payment-api image\ncosign sign --key cosign.key ghcr.io/fawkes-demo/payment-api:v1.0.0\n\n# Enter password when prompted\n</code></pre> <p>Verify the signature:</p> <pre><code>cosign verify --key cosign.pub ghcr.io/fawkes-demo/payment-api:v1.0.0\n\n# You should see \"Verification for ghcr.io/fawkes-demo/payment-api:v1.0.0 -- The following checks were performed...\"\n</code></pre> <p>Install Kyverno for signature verification:</p> <pre><code>helm repo add kyverno https://kyverno.github.io/kyverno/\nhelm repo update\nhelm install kyverno kyverno/kyverno -n kyverno --create-namespace\n</code></pre> <p>Create a policy to verify signatures:</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: verify-image-signature\nspec:\n  validationFailureAction: enforce\n  webhookTimeoutSeconds: 30\n  rules:\n  - name: verify-signature\n    match:\n      any:\n      - resources:\n          kinds:\n          - Pod\n          namespaces:\n          - payments\n    verifyImages:\n    - imageReferences:\n      - \"ghcr.io/fawkes-demo/*\"\n      attestors:\n      - count: 1\n        entries:\n        - keys:\n            publicKeys: |-\n$(cat cosign.pub | sed 's/^/              /')\nEOF\n</code></pre> <p>Test the policy:</p> <pre><code># This should SUCCEED (signed image)\nkubectl run signed-pod --image=ghcr.io/fawkes-demo/payment-api:v1.0.0 -n payments\n\n# This should FAIL (unsigned image)\nkubectl run unsigned-pod --image=nginx:latest -n payments\n\n# You should see: \"resource validation error: image signature verification failed\"\n</code></pre>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#exercise-4-configure-external-secrets-operator-7-minutes","title":"Exercise 4: Configure External Secrets Operator (7 minutes)","text":"<p>Objective: Store secrets in AWS Secrets Manager and sync them to Kubernetes.</p> <pre><code># Install External Secrets Operator\nhelm repo add external-secrets https://charts.external-secrets.io\nhelm install external-secrets external-secrets/external-secrets -n external-secrets-system --create-namespace\n\n# For the lab, we'll use a fake backend. In production, configure AWS/GCP/Vault.\n</code></pre> <p>Create a SecretStore (using Kubernetes secrets as backend for demo):</p> <pre><code># Create a secret to act as our \"vault\"\nkubectl create secret generic payment-secrets -n payments \\\n  --from-literal=stripe-api-key=sk_test_abc123 \\\n  --from-literal=db-password=super-secret-password\n\nkubectl apply -f - &lt;&lt;EOF\napiVersion: external-secrets.io/v1beta1\nkind: SecretStore\nmetadata:\n  name: kubernetes-backend\n  namespace: payments\nspec:\n  provider:\n    kubernetes:\n      remoteNamespace: payments\n      auth:\n        serviceAccount:\n          name: external-secrets\n      server:\n        caProvider:\n          type: ConfigMap\n          name: kube-root-ca.crt\n          key: ca.crt\nEOF\n</code></pre> <p>Create an ExternalSecret:</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: payment-api-external-secret\n  namespace: payments\nspec:\n  refreshInterval: 1m\n  secretStoreRef:\n    name: kubernetes-backend\n    kind: SecretStore\n  target:\n    name: payment-api-secrets\n    creationPolicy: Owner\n  data:\n  - secretKey: STRIPE_API_KEY\n    remoteRef:\n      key: payment-secrets\n      property: stripe-api-key\n  - secretKey: DB_PASSWORD\n    remoteRef:\n      key: payment-secrets\n      property: db-password\nEOF\n</code></pre> <p>Verify the secret was synced:</p> <pre><code>kubectl get externalsecret -n payments\nkubectl get secret payment-api-secrets -n payments -o yaml\n\n# You should see STRIPE_API_KEY and DB_PASSWORD\n</code></pre> <p>Update deployment to use the external secret:</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment-api\n  namespace: payments\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: payment-api\n  template:\n    metadata:\n      labels:\n        app: payment-api\n    spec:\n      serviceAccountName: payment-api\n      containers:\n      - name: app\n        image: ghcr.io/fawkes-demo/payment-api:v1.0.0\n        envFrom:\n        - secretRef:\n            name: payment-api-secrets  # \u2705 Synced from external source\n        resources:\n          limits:\n            memory: \"256Mi\"\n            cpu: \"500m\"\n          requests:\n            memory: \"128Mi\"\n            cpu: \"250m\"\nEOF\n</code></pre>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#lab-validation","title":"Lab Validation","text":"<pre><code># Run the validation script\nfawkes lab validate --module 19\n\n# You should see:\n# \u2705 Istio mTLS enabled in payments namespace\n# \u2705 Authorization policies configured\n# \u2705 OPA Gatekeeper installed with resource limit policy\n# \u2705 Image signature verification with Cosign\n# \u2705 Kyverno policy enforcing signatures\n# \u2705 External Secrets Operator syncing secrets\n</code></pre> <p>Cleanup:</p> <pre><code>fawkes lab stop --module 19\n</code></pre>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#knowledge-check","title":"\u2705 Knowledge Check","text":"<p>Test your understanding with these questions:</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#question-1-zero-trust-principles","title":"Question 1: Zero Trust Principles","text":"<p>Which of the following is NOT a core principle of zero trust?</p> <p>A) Never trust, always verify B) Assume breach C) Trust based on network location D) Least privilege access</p> Show Answer  **Answer: C**  Zero trust explicitly rejects the idea that network location (inside/outside perimeter) should grant trust. All access must be verified regardless of location."},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#question-2-workload-identity","title":"Question 2: Workload Identity","text":"<p>What is the main advantage of workload identity over long-lived service account keys?</p> <p>A) Easier to configure B) Works with more cloud providers C) Credentials are short-lived and automatically rotated D) Requires less compute resources</p> Show Answer  **Answer: C**  Workload identity provides short-lived tokens (typically 1 hour) that are automatically rotated, eliminating the risk of leaked credentials and manual rotation processes."},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#question-3-service-mesh-security","title":"Question 3: Service Mesh Security","text":"<p>What does mTLS (mutual TLS) provide that regular TLS does not?</p> <p>A) Faster encryption B) Both client and server authenticate each other C) Compression of network traffic D) Load balancing capabilities</p> Show Answer  **Answer: B**  In regular TLS, only the server authenticates to the client. With mTLS, both parties authenticate using certificates, ensuring both ends of the connection are trusted."},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#question-4-supply-chain-security","title":"Question 4: Supply Chain Security","text":"<p>Which tool is used to cryptographically sign container images?</p> <p>A) Trivy B) Cosign C) Falco D) OPA</p> Show Answer  **Answer: B**  Cosign (part of Sigstore project) is used to sign and verify container images. Trivy is for scanning, Falco for runtime security, and OPA for policy enforcement."},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#question-5-policy-as-code","title":"Question 5: Policy-as-Code","text":"<p>What happens when a Kubernetes admission controller policy is violated?</p> <p>A) The resource is created with a warning B) The resource creation is rejected C) The policy is automatically updated D) An email is sent to administrators</p> Show Answer  **Answer: B**  Admission controllers (like Gatekeeper and Kyverno) run before resources are persisted to etcd. If a policy is violated, the API request is rejected and the resource is not created."},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#question-6-secret-management","title":"Question 6: Secret Management","text":"<p>Why should secrets never be stored in Git repositories?</p> <p>A) Git is too slow for secret retrieval B) Git history is immutable - secrets remain even if deleted C) Git doesn't support encryption D) Secrets take up too much storage</p> Show Answer  **Answer: B**  Git history is permanent. Even if you delete a file containing secrets, they remain in the repository's history and can be retrieved by anyone with access to the repo."},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#question-7-sbom-software-bill-of-materials","title":"Question 7: SBOM (Software Bill of Materials)","text":"<p>What is the primary purpose of an SBOM?</p> <p>A) To compress container images B) To list all software components and dependencies in an artifact C) To encrypt network traffic D) To monitor application performance</p> Show Answer  **Answer: B**  An SBOM provides a complete inventory of all software components, libraries, and dependencies in an artifact, enabling vulnerability tracking and license compliance."},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#question-8-zero-trust-cicd","title":"Question 8: Zero Trust CI/CD","text":"<p>Which authentication method is recommended for CI/CD pipelines in a zero trust architecture?</p> <p>A) Storing AWS access keys in GitHub Secrets B) Using long-lived service account tokens C) OIDC-based workload identity D) Username and password authentication</p> Show Answer  **Answer: C**  OIDC-based workload identity (like GitHub Actions OIDC to AWS) provides short-lived credentials without storing long-lived secrets, aligning with zero trust principles."},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#real-world-examples","title":"\ud83c\udf0d Real-World Examples","text":""},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#example-1-netflixs-zero-trust-journey","title":"Example 1: Netflix's Zero Trust Journey","text":"<p>Challenge: Netflix runs on AWS with thousands of microservices. Traditional perimeter security was insufficient.</p> <p>Solution: - No VPN: All services authenticate individually, no network-based trust - mTLS everywhere: Every service-to-service call uses mutual TLS - Dynamic authorization: Zuul gateway enforces fine-grained policies based on user/service identity - Credential rotation: All credentials rotate automatically every few hours</p> <p>Result:  - Eliminated network perimeter as security boundary - Reduced blast radius of security incidents - Enabled faster deployment (no VPN bottlenecks)</p> <p>Learn more: Netflix Security Blog</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#example-2-googles-beyondcorp","title":"Example 2: Google's BeyondCorp","text":"<p>Challenge: Employees working remotely needed access to internal applications without VPN.</p> <p>Solution (BeyondCorp): - Device trust: Verify device posture before granting access - User identity: Strong authentication (2FA/U2F keys) - Context-aware access: Consider user, device, location, and resource sensitivity - Zero trust proxy: All access flows through proxy that enforces policy</p> <p>Key insight: \"Location is not a proxy for trust\"</p> <p>Result: - Employees work securely from anywhere without VPN - Reduced attack surface (no broad network access) - Better visibility into access patterns</p> <p>Learn more: BeyondCorp Research Papers</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#example-3-capital-one-breach-what-went-wrong","title":"Example 3: Capital One Breach (What Went Wrong)","text":"<p>Incident (2019): Attacker compromised a web application firewall (WAF), accessed IAM credentials, and exfiltrated data on 100 million customers.</p> <p>Root Causes: - \u274c Overly permissive IAM role: WAF had broad access to S3 - \u274c No network segmentation: Compromised WAF could reach production data - \u274c Missing detection: Exfiltration not detected in real-time</p> <p>Zero Trust Would Have Prevented This: - \u2705 Least privilege: WAF should not have S3 access - \u2705 Workload identity: Short-lived credentials, not long-lived IAM keys - \u2705 Micro-segmentation: WAF isolated from data storage layer - \u2705 Continuous monitoring: Alert on unusual S3 access patterns</p> <p>Lesson: Assume breach. Design systems so a single compromise doesn't cascade.</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#example-4-shopifys-vault-backed-secrets","title":"Example 4: Shopify's Vault-Backed Secrets","text":"<p>Challenge: Thousands of microservices needed secure access to secrets (API keys, database passwords).</p> <p>Old approach: - Secrets stored in environment variables - Rotated manually (infrequently) - Broad access (many services could read all secrets)</p> <p>Zero trust approach: - HashiCorp Vault: Central secret management - Dynamic secrets: Database credentials generated on-demand, expire after use - Fine-grained ACLs: Each service can only access its required secrets - Audit logging: Every secret access logged</p> <p>Result: - Secrets rotated automatically - Reduced blast radius (leaked credential only works for one service) - Complete audit trail for compliance</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#dora-capabilities-mapping","title":"\ud83d\udcca DORA Capabilities Mapping","text":"<p>This module directly supports these DORA capabilities:</p> Capability How This Module Helps Impact on Metrics Shift Left on Security Integrate security scanning and policy enforcement early in CI/CD Reduces change failure rate by catching vulnerabilities before production Continuous Delivery Zero trust enables secure automation without manual approval gates Improves deployment frequency and lead time Loosely Coupled Architecture Service mesh and mTLS allow secure communication without tight coupling Enables independent deployment of services Monitoring &amp; Observability Audit all authentication/authorization decisions for compliance Faster MTTR with clear audit trails"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#troubleshooting-common-issues","title":"\ud83d\udd27 Troubleshooting Common Issues","text":""},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#issue-1-pods-fail-to-start-after-enabling-strict-mtls","title":"Issue 1: Pods Fail to Start After Enabling Strict mTLS","text":"<p>Symptom: <pre><code>Error from server: error when creating \"deployment.yaml\": \nadmission webhook \"validation.gatekeeper.sh\" denied the request\n</code></pre></p> <p>Cause: Pods without Istio sidecar injection cannot communicate when strict mTLS is enabled.</p> <p>Solution: <pre><code># Ensure namespace has Istio injection enabled\nkubectl label namespace payments istio-injection=enabled\n\n# Restart pods to inject sidecar\nkubectl rollout restart deployment -n payments\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#issue-2-image-signature-verification-fails","title":"Issue 2: Image Signature Verification Fails","text":"<p>Symptom: <pre><code>Error: image signature verification failed: no matching signatures\n</code></pre></p> <p>Cause: Image was not signed, or signature verification policy references wrong public key.</p> <p>Solution: <pre><code># Verify the image is signed\ncosign verify --key cosign.pub ghcr.io/myorg/app:v1.0.0\n\n# If not signed, sign it\ncosign sign --key cosign.key ghcr.io/myorg/app:v1.0.0\n\n# Ensure Kyverno policy references correct public key\nkubectl edit clusterpolicy verify-image-signature\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#issue-3-external-secrets-not-syncing","title":"Issue 3: External Secrets Not Syncing","text":"<p>Symptom: <pre><code>kubectl get externalsecret\nNAME            STORE    REFRESH INTERVAL   STATUS         READY\nmy-ext-secret   vault    1m                 SecretSyncedError   False\n</code></pre></p> <p>Cause: External Secrets Operator cannot authenticate to secret backend (Vault/AWS).</p> <p>Solution: <pre><code># Check ExternalSecret status\nkubectl describe externalsecret my-ext-secret -n payments\n\n# Verify SecretStore configuration\nkubectl describe secretstore -n payments\n\n# For AWS: Ensure service account has correct IAM role annotation\nkubectl get sa external-secrets -n payments -o yaml\n\n# For Vault: Verify Kubernetes auth is configured\nvault auth list\nvault read auth/kubernetes/config\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#issue-4-opa-gatekeeper-policies-not-enforcing","title":"Issue 4: OPA Gatekeeper Policies Not Enforcing","text":"<p>Symptom: Resources are created despite violating policies.</p> <p>Cause: Constraint may not be applied, or validation failure action is \"dryrun\".</p> <p>Solution: <pre><code># Check if constraint is created\nkubectl get constraints\n\n# Verify constraint status\nkubectl describe k8srequiredresources must-have-resource-limits\n\n# Ensure enforcement (not dryrun)\nkubectl get k8srequiredresources must-have-resource-limits -o yaml | grep validationFailureAction\n\n# Should show: validationFailureAction: enforce\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#issue-5-workload-identity-not-working","title":"Issue 5: Workload Identity Not Working","text":"<p>Symptom: Pods cannot authenticate to cloud provider (AWS/GCP/Azure).</p> <p>Cause: Service account not properly annotated, or OIDC provider not configured.</p> <p>Solution for AWS (EKS): <pre><code># Verify OIDC provider exists\naws eks describe-cluster --name my-cluster --query \"cluster.identity.oidc.issuer\"\n\n# Verify service account annotation\nkubectl get sa payment-service -n payments -o yaml | grep eks.amazonaws.com/role-arn\n\n# Should show: eks.amazonaws.com/role-arn: arn:aws:iam::123456789:role/payment-service\n\n# Verify IAM role trust policy allows the service account\naws iam get-role --role-name payment-service --query 'Role.AssumeRolePolicyDocument'\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#official-documentation","title":"Official Documentation","text":"<ul> <li>NIST Zero Trust Architecture - Comprehensive guide to zero trust principles</li> <li>CISA Zero Trust Maturity Model - Framework for assessing zero trust adoption</li> <li>Sigstore Documentation - Software signing and verification</li> <li>SLSA Framework - Supply chain security levels</li> </ul>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#tools-projects","title":"Tools &amp; Projects","text":"<ul> <li>Istio Security - Service mesh security</li> <li>OPA Gatekeeper - Kubernetes policy enforcement</li> <li>Kyverno - Kubernetes-native policy management</li> <li>External Secrets Operator - Sync secrets from external sources</li> <li>Falco - Runtime security monitoring</li> <li>Cosign - Container image signing</li> </ul>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#books-papers","title":"Books &amp; Papers","text":"<ul> <li>\"Zero Trust Networks\" by Evan Gilman &amp; Doug Barth (O'Reilly)</li> <li>\"Kubernetes Security and Observability\" by Brendan Creane &amp; Amit Gupta (O'Reilly)</li> <li>Google's BeyondCorp Papers - Research on zero trust implementation</li> </ul>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#video-tutorials","title":"Video Tutorials","text":"<ul> <li>Securing the Software Supply Chain - KubeCon talk on Sigstore</li> <li>Zero Trust Security in Kubernetes - Practical implementation guide</li> </ul>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#key-takeaways","title":"\ud83c\udfaf Key Takeaways","text":"<p>By completing this module, you've learned:</p> <ol> <li>\u2705 Zero trust principles - Never trust, always verify; assume breach; least privilege</li> <li>\u2705 Workload identity - Short-lived credentials via OIDC instead of long-lived keys</li> <li>\u2705 Service mesh security - mTLS and fine-grained authorization with Istio</li> <li>\u2705 Policy-as-code - Enforce security policies with OPA Gatekeeper and Kyverno</li> <li>\u2705 Supply chain security - Sign images, generate SBOMs, verify provenance</li> <li>\u2705 Secret management - External Secrets Operator for centralized secret handling</li> </ol> <p>Zero trust is not a product, it's an architecture philosophy. Every component in your platform should: - Authenticate explicitly (no implicit trust) - Authorize with least privilege (only what's needed) - Encrypt all traffic (TLS everywhere) - Audit all access (comprehensive logging)</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#next-steps","title":"\ud83d\ude80 Next Steps","text":""},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#in-module-20-multi-cloud-strategies","title":"In Module 20: Multi-Cloud Strategies","text":"<p>You'll learn how to: - Design platform architectures that span multiple cloud providers - Abstract cloud-specific APIs with unified interfaces - Implement disaster recovery and failover across clouds - Manage cost optimization in multi-cloud environments - Navigate the tradeoffs of multi-cloud vs. cloud-agnostic approaches</p> <p>Prepare by: - Reviewing your organization's cloud provider usage - Identifying which services are cloud-specific vs. portable - Considering disaster recovery requirements (RTO/RPO)</p>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#black-belt-progress","title":"\ud83c\udfc6 Black Belt Progress","text":"<p>Module 19 Complete! \u2705</p> <pre><code>Black Belt Progress:\n[\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591] 75% (3/4 modules)\n\n\u2705 Module 17: Platform as a Product\n\u2705 Module 18: Multi-Tenancy &amp; Resource Management  \n\u2705 Module 19: Security &amp; Zero Trust\n\u2b1c Module 20: Multi-Cloud Strategies\n\nNext: Complete Module 20 to finish Black Belt curriculum!\n</code></pre>"},{"location":"dojo/modules/black-belt/module-19-security-zerotrust/#certification-path","title":"\ud83c\udf93 Certification Path","text":"<p>After completing all Black Belt modules (17-20), you will:</p> <ol> <li>Complete the Black Belt Assessment (4 hours):</li> <li>Design a complete platform architecture</li> <li>Present to peer review panel</li> <li>Implement multi-tenant design with zero trust</li> <li>Contribute to Fawkes codebase</li> <li> <p>Mentor 2 White Belt learners</p> </li> <li> <p>Earn the \"Fawkes Platform Architect\" Certification:</p> </li> <li>Demonstrates mastery of platform engineering principles</li> <li>Validates ability to design production-grade platforms</li> <li>Recognized credential in the platform engineering community</li> </ol> <p>Keep going! You're one module away from Black Belt! \ud83e\udd4b</p> <p>Module 19: Security &amp; Zero Trust | Fawkes Dojo | Black Belt \"Never trust, always verify\" | Version 1.0</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/","title":"Module 20: Multi-Cloud Strategies","text":"<p>Belt Level: \u26ab Black Belt Duration: 60 minutes Prerequisites: Modules 1-19, especially Module 17 (Platform as a Product), Module 18 (Multi-Tenancy) Certification Track: Fawkes Platform Architect</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#learning-objectives","title":"\ud83c\udfaf Learning Objectives","text":"<p>By the end of this module, you will be able to:</p> <ol> <li>Evaluate when multi-cloud architecture makes sense vs. single-cloud with vendor lock-in mitigation</li> <li>Design abstraction layers that enable portability across cloud providers</li> <li>Implement disaster recovery and failover strategies across multiple clouds</li> <li>Optimize costs by leveraging pricing differences and committed use discounts</li> <li>Navigate the tradeoffs between cloud-agnostic tools and cloud-native services</li> </ol>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#theory-multi-cloud-architecture","title":"\ud83d\udcda Theory: Multi-Cloud Architecture","text":""},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#what-is-multi-cloud","title":"What is Multi-Cloud?","text":"<p>Multi-cloud: Using services from multiple cloud providers (AWS, GCP, Azure) within the same organization or architecture.</p> <p>Types of multi-cloud:</p> <ol> <li>Distributed workloads: Different applications run on different clouds</li> <li>Redundant deployment: Same application deployed to multiple clouds for resilience</li> <li>Hybrid bursting: Primary cloud with overflow to secondary cloud</li> <li>Data residency: Workloads placed in specific clouds for compliance</li> </ol>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#why-multi-cloud","title":"Why Multi-Cloud?","text":""},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#valid-reasons","title":"\u2705 Valid Reasons:","text":"<ol> <li>Avoid vendor lock-in: Reduce dependency on single provider</li> <li>Disaster recovery: Survive cloud provider outage</li> <li>Regulatory compliance: Data residency requirements (EU data must stay in EU)</li> <li>Cost optimization: Use cheapest provider for specific workload</li> <li>Acquisitions: Inherited cloud environments from acquired companies</li> <li>Best-of-breed services: Leverage unique capabilities (e.g., BigQuery on GCP, SageMaker on AWS)</li> </ol>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#poor-reasons","title":"\u274c Poor Reasons:","text":"<ol> <li>\"Just in case\" vendor lock-in fear: Adds massive complexity without clear benefit</li> <li>Negotiation leverage: Threat of moving is often sufficient</li> <li>Resume-driven development: Learning new cloud for sake of it</li> <li>Avoiding architectural decisions: Multi-cloud doesn't solve bad architecture</li> </ol>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#the-multi-cloud-spectrum","title":"The Multi-Cloud Spectrum","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    CLOUD STRATEGY SPECTRUM                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                \u2502\n\u2502  SINGLE CLOUD (CLOUD-NATIVE)                                   \u2502\n\u2502  \u251c\u2500 Deeply integrate with cloud-specific services             \u2502\n\u2502  \u251c\u2500 Fastest time-to-market, most features                     \u2502\n\u2502  \u251c\u2500 Highest vendor lock-in                                    \u2502\n\u2502  \u251c\u2500 Example: Lambda, DynamoDB, SQS, S3, CloudWatch            \u2502\n\u2502  \u2514\u2500 Best for: Startups, rapid innovation                      \u2502\n\u2502                                                                \u2502\n\u2502  SINGLE CLOUD (WITH ABSTRACTION)                               \u2502\n\u2502  \u251c\u2500 Use cloud-agnostic tools on single cloud                  \u2502\n\u2502  \u251c\u2500 Kubernetes, PostgreSQL, Kafka, Redis                      \u2502\n\u2502  \u251c\u2500 Could migrate but requires effort                         \u2502\n\u2502  \u251c\u2500 Example: EKS + RDS PostgreSQL + MSK Kafka                 \u2502\n\u2502  \u2514\u2500 Best for: Most enterprises                                \u2502\n\u2502                                                                \u2502\n\u2502  MULTI-CLOUD (DISTRIBUTED)                                     \u2502\n\u2502  \u251c\u2500 Different apps on different clouds                        \u2502\n\u2502  \u251c\u2500 Moderate complexity, limited blast radius                 \u2502\n\u2502  \u251c\u2500 Each app optimized for its cloud                          \u2502\n\u2502  \u251c\u2500 Example: Web app on AWS, ML on GCP, legacy on Azure       \u2502\n\u2502  \u2514\u2500 Best for: Large orgs with diverse needs                   \u2502\n\u2502                                                                \u2502\n\u2502  MULTI-CLOUD (PORTABLE)                                        \u2502\n\u2502  \u251c\u2500 Same app deployable to any cloud                          \u2502\n\u2502  \u251c\u2500 High complexity, maximum portability                      \u2502\n\u2502  \u251c\u2500 Abstraction layer hides cloud differences                 \u2502\n\u2502  \u251c\u2500 Example: Kubernetes + Crossplane + Terraform              \u2502\n\u2502  \u2514\u2500 Best for: High-compliance industries, DR requirements     \u2502\n\u2502                                                                \u2502\n\u2502  MULTI-CLOUD (ACTIVE-ACTIVE)                                   \u2502\n\u2502  \u251c\u2500 Same app running on multiple clouds simultaneously        \u2502\n\u2502  \u251c\u2500 Highest complexity, highest resilience                    \u2502\n\u2502  \u251c\u2500 Data replication, global routing, conflict resolution     \u2502\n\u2502  \u251c\u2500 Example: CockroachDB across 3 clouds with global LB       \u2502\n\u2502  \u2514\u2500 Best for: Mission-critical systems (financial, healthcare)\u2502\n\u2502                                                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nComplexity &amp; Cost \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\n                                                    Portability \u25b6\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#the-cost-of-multi-cloud","title":"The Cost of Multi-Cloud","text":"<p>Operational overhead: - Multiple IAM systems to manage - Different networking models (VPC, VNet, VPC) - Divergent monitoring and logging tools - Team training for multiple clouds - More complex incident response</p> <p>Financial costs: - Data egress fees (expensive to move data between clouds) - Lost volume discounts (spend split across providers) - Duplication of resources (CI/CD, monitoring, networks)</p> <p>Engineering complexity: - Lowest common denominator (can't use best-of-breed services) - Abstraction layers introduce bugs and performance overhead - Testing must cover all cloud environments</p> <p>Rule of thumb: Multi-cloud adds 30-50% operational overhead compared to single cloud.</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#multi-cloud-architecture-patterns","title":"\ud83c\udfd7\ufe0f Multi-Cloud Architecture Patterns","text":""},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#pattern-1-multi-cloud-by-application","title":"Pattern 1: Multi-Cloud by Application","text":"<p>When to use: Different teams/products have different cloud requirements.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Organization                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                 \u2502\n\u2502  Product A (AWS)          Product B (GCP)       \u2502\n\u2502  \u251c\u2500 EKS                   \u251c\u2500 GKE               \u2502\n\u2502  \u251c\u2500 RDS PostgreSQL        \u251c\u2500 Cloud SQL          \u2502\n\u2502  \u251c\u2500 S3                    \u251c\u2500 BigQuery           \u2502\n\u2502  \u2514\u2500 CloudWatch            \u2514\u2500 Cloud Monitoring   \u2502\n\u2502                                                 \u2502\n\u2502  Shared Platform Team                           \u2502\n\u2502  \u251c\u2500 Terraform modules for both clouds          \u2502\n\u2502  \u251c\u2500 Separate CI/CD per cloud                   \u2502\n\u2502  \u2514\u2500 Unified observability (Datadog)            \u2502\n\u2502                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Pros: - Each team optimizes for their cloud - Limited complexity (no cross-cloud communication) - Easy to start (pilot one app on new cloud)</p> <p>Cons: - Teams must learn different clouds - Harder to share infrastructure - Duplicated platform tooling</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#pattern-2-multi-cloud-for-disaster-recovery","title":"Pattern 2: Multi-Cloud for Disaster Recovery","text":"<p>When to use: Must survive cloud provider outage (99.99%+ availability requirement).</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  PRIMARY CLOUD (AWS)                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502  Production Workloads                           \u2502     \u2502\n\u2502  \u2502  \u251c\u2500 Active traffic (100%)                      \u2502     \u2502\n\u2502  \u2502  \u251c\u2500 Continuous deployment                      \u2502     \u2502\n\u2502  \u2502  \u2514\u2500 Real-time data replication \u2500\u2500\u2510             \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                         \u2502\n                                         \u2502 Replicate data\n                                         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                SECONDARY CLOUD (GCP)                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502  Standby Workloads                              \u2502     \u2502\n\u2502  \u2502  \u251c\u2500 Infrastructure pre-provisioned              \u2502     \u2502\n\u2502  \u2502  \u251c\u2500 Data replicated continuously                \u2502     \u2502\n\u2502  \u2502  \u2514\u2500 Auto-failover if AWS unhealthy              \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nGlobal Load Balancer (Cloudflare, AWS Route53)\n\u251c\u2500 Health checks both clouds\n\u251c\u2500 Automatic failover (DNS/Anycast)\n\u2514\u2500 Failback once primary recovers\n</code></pre> <p>Implementation: - Active-Passive: Primary handles all traffic, secondary is warm standby - Active-Active: Both clouds handle traffic (more complex, requires data sync)</p> <p>Key decisions: - RTO (Recovery Time Objective): How long can you be down?   - RTO &lt; 5 min \u2192 Active-Active (expensive)   - RTO 5-30 min \u2192 Warm standby (moderate cost)   - RTO &gt; 30 min \u2192 Cold standby (cheapest) - RPO (Recovery Point Objective): How much data can you lose?   - RPO = 0 \u2192 Synchronous replication (very expensive)   - RPO &lt; 5 min \u2192 Continuous async replication   - RPO &gt; 15 min \u2192 Periodic snapshots</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#pattern-3-multi-cloud-with-kubernetes","title":"Pattern 3: Multi-Cloud with Kubernetes","text":"<p>When to use: Need portable workloads with minimal cloud-specific code.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             APPLICATION LAYER (Cloud-Agnostic)           \u2502\n\u2502  \u251c\u2500 Kubernetes YAML manifests                           \u2502\n\u2502  \u251c\u2500 Helm charts                                          \u2502\n\u2502  \u251c\u2500 ArgoCD for GitOps deployment                        \u2502\n\u2502  \u2514\u2500 Prometheus + Grafana for monitoring                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502               \u2502               \u2502\n     \u25bc               \u25bc               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   EKS   \u2502    \u2502   GKE   \u2502    \u2502   AKS   \u2502\n\u2502  (AWS)  \u2502    \u2502  (GCP)  \u2502    \u2502 (Azure) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502               \u2502               \u2502\n     \u25bc               \u25bc               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Cloud  \u2502    \u2502  Cloud  \u2502    \u2502  Cloud  \u2502\n\u2502 Services\u2502    \u2502 Services\u2502    \u2502 Services\u2502\n\u2502         \u2502    \u2502         \u2502    \u2502         \u2502\n\u2502 RDS     \u2502    \u2502Cloud SQL\u2502    \u2502CosmosDB \u2502\n\u2502 S3      \u2502    \u2502 GCS     \u2502    \u2502 Blob    \u2502\n\u2502 SQS     \u2502    \u2502 Pub/Sub \u2502    \u2502ServiceBs\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Abstraction strategies:</p> <ol> <li> <p>Storage: Use Kubernetes CSI drivers <pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: my-pvc\nspec:\n  storageClassName: fast-ssd  # Maps to EBS (AWS), PD-SSD (GCP), Premium (Azure)\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 100Gi\n</code></pre></p> </li> <li> <p>Secrets: Use External Secrets Operator <pre><code>apiVersion: external-secrets.io/v1beta1\nkind: ClusterSecretStore\nmetadata:\n  name: cloud-secrets\nspec:\n  provider:\n    # Automatically detects AWS Secrets Manager, GCP Secret Manager, or Azure Key Vault\n    # based on cluster environment\n</code></pre></p> </li> <li> <p>Databases: Use Crossplane for cloud resource provisioning <pre><code>apiVersion: database.crossplane.io/v1alpha1\nkind: PostgreSQLInstance\nmetadata:\n  name: my-database\nspec:\n  forProvider:\n    # Crossplane translates to RDS, Cloud SQL, or Azure Database\n    engineVersion: \"14\"\n    instanceClass: db.t3.medium\n    storageGB: 100\n  providerConfigRef:\n    name: default  # Points to current cloud\n</code></pre></p> </li> </ol>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#pattern-4-data-residency-compliance","title":"Pattern 4: Data Residency &amp; Compliance","text":"<p>When to use: Regulatory requirements dictate where data must reside (GDPR, data sovereignty).</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    GLOBAL APPLICATION                       \u2502\n\u2502                  (Single codebase, multi-region)            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502              \u2502              \u2502\n            \u25bc              \u25bc              \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502   AWS EU     \u2502 \u2502   GCP US     \u2502 \u2502 Azure APAC   \u2502\n    \u2502 eu-central-1 \u2502 \u2502 us-central1  \u2502 \u2502 australiaeast\u2502\n    \u2502              \u2502 \u2502              \u2502 \u2502              \u2502\n    \u2502 GDPR         \u2502 \u2502 HIPAA        \u2502 \u2502 AU Privacy   \u2502\n    \u2502 compliant    \u2502 \u2502 compliant    \u2502 \u2502 Act          \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    EU customer      US customer      APAC customer\n    data stays in    data stays in    data stays in\n    EU region        US region        APAC region\n</code></pre> <p>Implementation: - Geo-routing: Route users to nearest compliant region (DNS, Anycast) - Data partitioning: Customer data sharded by geography - Cross-region replication: Limited to regions with adequate legal frameworks</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#tools-for-multi-cloud","title":"\ud83d\udee0\ufe0f Tools for Multi-Cloud","text":""},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#1-infrastructure-as-code","title":"1. Infrastructure-as-Code","text":"<p>Terraform: De facto standard for multi-cloud IaC.</p> <pre><code># Single Terraform module can provision across clouds\n\nresource \"aws_s3_bucket\" \"data_lake\" {\n  count = var.cloud_provider == \"aws\" ? 1 : 0\n  bucket = \"my-data-lake\"\n}\n\nresource \"google_storage_bucket\" \"data_lake\" {\n  count = var.cloud_provider == \"gcp\" ? 1 : 0\n  name = \"my-data-lake\"\n  location = \"US\"\n}\n\nresource \"azurerm_storage_account\" \"data_lake\" {\n  count = var.cloud_provider == \"azure\" ? 1 : 0\n  name = \"mydatalake\"\n  resource_group_name = azurerm_resource_group.main[0].name\n  location = \"eastus\"\n}\n\n# Output abstraction\noutput \"data_lake_url\" {\n  value = var.cloud_provider == \"aws\" ? aws_s3_bucket.data_lake[0].bucket_regional_domain_name : \n          var.cloud_provider == \"gcp\" ? google_storage_bucket.data_lake[0].url :\n          azurerm_storage_account.data_lake[0].primary_blob_endpoint\n}\n</code></pre> <p>Pulumi: Multi-cloud IaC using real programming languages.</p> <pre><code>import * as aws from \"@pulumi/aws\";\nimport * as gcp from \"@pulumi/gcp\";\nimport * as azure from \"@pulumi/azure-native\";\n\n// Abstract storage bucket across clouds\nfunction createStorageBucket(provider: string, name: string) {\n  switch (provider) {\n    case \"aws\":\n      return new aws.s3.Bucket(name);\n    case \"gcp\":\n      return new gcp.storage.Bucket(name, { location: \"US\" });\n    case \"azure\":\n      const resourceGroup = new azure.resources.ResourceGroup(\"rg\");\n      return new azure.storage.StorageAccount(name, {\n        resourceGroupName: resourceGroup.name,\n        location: \"eastus\",\n      });\n  }\n}\n\nconst bucket = createStorageBucket(process.env.CLOUD_PROVIDER, \"my-bucket\");\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#2-kubernetes-abstraction","title":"2. Kubernetes Abstraction","text":"<p>Crossplane: Provision cloud resources using Kubernetes APIs.</p> <pre><code># Define a composition that works across clouds\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.example.com\nspec:\n  group: example.com\n  names:\n    kind: XDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              size:\n                type: string\n                enum: [small, medium, large]\n              engine:\n                type: string\n                enum: [postgres, mysql]\n---\n# Composition for AWS\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: xdatabase.aws\nspec:\n  compositeTypeRef:\n    apiVersion: example.com/v1alpha1\n    kind: XDatabase\n  resources:\n  - name: rds-instance\n    base:\n      apiVersion: database.aws.crossplane.io/v1beta1\n      kind: RDSInstance\n      spec:\n        forProvider:\n          engine: # Set from spec.engine\n          instanceClass: # Map spec.size to AWS instance class\n---\n# Composition for GCP\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: xdatabase.gcp\nspec:\n  compositeTypeRef:\n    apiVersion: example.com/v1alpha1\n    kind: XDatabase\n  resources:\n  - name: cloudsql-instance\n    base:\n      apiVersion: database.gcp.crossplane.io/v1beta1\n      kind: CloudSQLInstance\n      spec:\n        forProvider:\n          databaseVersion: # Set from spec.engine\n          tier: # Map spec.size to GCP tier\n</code></pre> <p>Usage (same manifest works on any cloud): <pre><code>apiVersion: example.com/v1alpha1\nkind: XDatabase\nmetadata:\n  name: my-app-db\nspec:\n  size: medium\n  engine: postgres\n  # Crossplane automatically provisions RDS on AWS, Cloud SQL on GCP, etc.\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#3-service-mesh-for-multi-cloud-networking","title":"3. Service Mesh for Multi-Cloud Networking","text":"<p>Istio Multi-Cluster: Connect services across multiple Kubernetes clusters in different clouds.</p> <pre><code># Configure Istio to treat GKE and EKS clusters as one mesh\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nmetadata:\n  name: istio-control-plane\nspec:\n  values:\n    global:\n      meshID: shared-mesh\n      multiCluster:\n        clusterName: aws-east-cluster  # or gcp-us-cluster\n      network: aws-network  # or gcp-network\n</code></pre> <p>Service in AWS can call service in GCP transparently: <pre><code># Payment service running in AWS EKS\napiVersion: v1\nkind: Service\nmetadata:\n  name: payment-api\n  namespace: payments\n---\n# Fraud detection service running in GCP GKE\napiVersion: v1\nkind: Service\nmetadata:\n  name: fraud-detection\n  namespace: fraud\n\n# Payment service can call: http://fraud-detection.fraud.svc.cluster.local\n# Istio routes across clouds with mTLS\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#4-observability","title":"4. Observability","text":"<p>Unified observability across clouds:</p> <pre><code># Prometheus scrapes metrics from all clouds\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\ndata:\n  prometheus.yml: |\n    global:\n      external_labels:\n        cluster: 'multi-cloud'\n\n    scrape_configs:\n    - job_name: 'aws-services'\n      ec2_sd_configs:\n      - region: us-east-1\n        access_key: ${AWS_ACCESS_KEY}\n        secret_key: ${AWS_SECRET_KEY}\n\n    - job_name: 'gcp-services'\n      gce_sd_configs:\n      - project: my-project\n        zone: us-central1-a\n\n    - job_name: 'azure-services'\n      azure_sd_configs:\n      - subscription_id: ${AZURE_SUBSCRIPTION_ID}\n        tenant_id: ${AZURE_TENANT_ID}\n\n    remote_write:\n    - url: https://prometheus.example.com/api/v1/write\n      # Centralized long-term storage\n</code></pre> <p>Grafana dashboards showing unified view: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Application Performance (All Clouds)           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                 \u2502\n\u2502  Request Rate:        1,250 req/s              \u2502\n\u2502    \u251c\u2500 AWS:     800 req/s  (64%)                \u2502\n\u2502    \u251c\u2500 GCP:     350 req/s  (28%)                \u2502\n\u2502    \u2514\u2500 Azure:   100 req/s  (8%)                 \u2502\n\u2502                                                 \u2502\n\u2502  Error Rate:          0.12%                     \u2502\n\u2502    \u251c\u2500 AWS:     0.08%                            \u2502\n\u2502    \u251c\u2500 GCP:     0.15%                            \u2502\n\u2502    \u2514\u2500 Azure:   0.25%                            \u2502\n\u2502                                                 \u2502\n\u2502  P99 Latency:         245ms                     \u2502\n\u2502    \u251c\u2500 AWS:     220ms                            \u2502\n\u2502    \u251c\u2500 GCP:     250ms                            \u2502\n\u2502    \u2514\u2500 Azure:   310ms                            \u2502\n\u2502                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#5-cost-management","title":"5. Cost Management","text":"<p>Cloud Cost Optimization Tools:</p> <ul> <li>Kubecost: Multi-cluster Kubernetes cost visibility</li> <li>CloudHealth: Cross-cloud cost management</li> <li>Infracost: Estimate Terraform costs before deployment</li> </ul> <p>Example: Compare costs across clouds</p> <pre><code># Infracost for Terraform\ninfracost breakdown --path . --usage-file usage.yml\n\n# Output:\n# AWS:    $12,450/month\n# GCP:    $10,200/month (18% cheaper)\n# Azure:  $13,100/month (5% more expensive)\n</code></pre> <p>Strategy: Hybrid committed use discounts</p> <pre><code>Single Cloud (AWS only):\n\u251c\u2500 3-year Reserved Instances: 60% of capacity\n\u251c\u2500 1-year Reserved Instances: 20% of capacity\n\u2514\u2500 On-demand: 20% of capacity\n\u2514\u2500 Average discount: 45%\n\nMulti-Cloud (AWS + GCP):\n\u251c\u2500 Can't commit as much (workloads split)\n\u251c\u2500 AWS: 40% reserved, 60% on-demand\n\u2514\u2500 GCP: 40% committed use, 60% on-demand\n\u2514\u2500 Average discount: 30%\n\nResult: Multi-cloud loses ~15% in discounts\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#hands-on-lab-multi-cloud-deployment","title":"\ud83c\udfd7\ufe0f Hands-On Lab: Multi-Cloud Deployment","text":""},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#lab-overview","title":"Lab Overview","text":"<p>You will deploy the same application to AWS (EKS) and GCP (GKE) using: 1. Terraform to provision infrastructure 2. Kubernetes manifests for the application 3. Crossplane to provision cloud-specific resources (RDS, Cloud SQL) 4. Istio multi-cluster for cross-cloud service communication 5. Unified observability with Prometheus + Grafana</p> <p>Duration: 25 minutes Tools: <code>terraform</code>, <code>kubectl</code>, <code>helm</code>, <code>fawkes</code> CLI</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#lab-setup","title":"Lab Setup","text":"<pre><code># Start the multi-cloud lab environment\nfawkes lab start --module 20\n\n# This provisions:\n# - AWS account with EKS cluster (simulated in lab)\n# - GCP account with GKE cluster (simulated in lab)\n# - Pre-configured kubectl contexts: aws-cluster, gcp-cluster\n\n# Verify access to both clusters\nkubectl config get-contexts\n\n# You should see:\n# CURRENT   NAME           CLUSTER\n# *         aws-cluster    aws-cluster\n#           gcp-cluster    gcp-cluster\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#exercise-1-provision-infrastructure-with-terraform-7-minutes","title":"Exercise 1: Provision Infrastructure with Terraform (7 minutes)","text":"<p>Objective: Use Terraform to create VPCs, subnets, and Kubernetes clusters on both AWS and GCP.</p> <pre><code>cd ~/fawkes-lab-20/terraform\n\n# Review the multi-cloud Terraform configuration\ncat main.tf\n</code></pre> <p>main.tf: <pre><code># Multi-cloud infrastructure\nvariable \"cloud_provider\" {\n  type = string\n  # Set via: terraform apply -var=\"cloud_provider=aws\"\n}\n\n# AWS Resources\nmodule \"aws_infrastructure\" {\n  count  = var.cloud_provider == \"aws\" ? 1 : 0\n  source = \"./modules/aws\"\n\n  cluster_name = \"fawkes-eks\"\n  region       = \"us-east-1\"\n  node_count   = 3\n}\n\n# GCP Resources\nmodule \"gcp_infrastructure\" {\n  count  = var.cloud_provider == \"gcp\" ? 1 : 0\n  source = \"./modules/gcp\"\n\n  cluster_name = \"fawkes-gke\"\n  region       = \"us-central1\"\n  node_count   = 3\n}\n\n# Outputs\noutput \"cluster_endpoint\" {\n  value = var.cloud_provider == \"aws\" ? module.aws_infrastructure[0].cluster_endpoint : module.gcp_infrastructure[0].cluster_endpoint\n}\n\noutput \"kubeconfig_command\" {\n  value = var.cloud_provider == \"aws\" ? \"aws eks update-kubeconfig --name fawkes-eks\" : \"gcloud container clusters get-credentials fawkes-gke\"\n}\n</code></pre></p> <p>Apply infrastructure:</p> <pre><code># Provision AWS cluster\nterraform init\nterraform apply -var=\"cloud_provider=aws\" -auto-approve\n\n# Switch to GCP\nterraform apply -var=\"cloud_provider=gcp\" -auto-approve\n\n# Both clusters are now running\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#exercise-2-deploy-application-to-both-clouds-5-minutes","title":"Exercise 2: Deploy Application to Both Clouds (5 minutes)","text":"<p>Objective: Deploy identical application manifests to both AWS and GCP clusters.</p> <pre><code>cd ~/fawkes-lab-20/k8s\n\n# Deploy to AWS\nkubectl config use-context aws-cluster\nkubectl apply -f namespace.yaml\nkubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\n\n# Deploy to GCP\nkubectl config use-context gcp-cluster\nkubectl apply -f namespace.yaml\nkubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\n\n# Verify deployments\nkubectl get pods -n payments --context aws-cluster\nkubectl get pods -n payments --context gcp-cluster\n</code></pre> <p>deployment.yaml (same for both clouds): <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment-api\n  namespace: payments\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: payment-api\n  template:\n    metadata:\n      labels:\n        app: payment-api\n    spec:\n      containers:\n      - name: api\n        image: ghcr.io/fawkes-demo/payment-api:v2.0.0\n        ports:\n        - containerPort: 8080\n        env:\n        - name: CLOUD_PROVIDER\n          value: \"auto-detect\"  # App detects AWS vs GCP\n        resources:\n          limits:\n            memory: \"256Mi\"\n            cpu: \"500m\"\n          requests:\n            memory: \"128Mi\"\n            cpu: \"250m\"\n</code></pre></p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#exercise-3-provision-cloud-resources-with-crossplane-6-minutes","title":"Exercise 3: Provision Cloud Resources with Crossplane (6 minutes)","text":"<p>Objective: Use Crossplane to provision PostgreSQL databases on both clouds using the same API.</p> <pre><code># Install Crossplane on both clusters\nhelm repo add crossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n\n# Install on AWS cluster\nkubectl config use-context aws-cluster\nhelm install crossplane crossplane-stable/crossplane \\\n  --namespace crossplane-system --create-namespace\n\n# Install on GCP cluster\nkubectl config use-context gcp-cluster\nhelm install crossplane crossplane-stable/crossplane \\\n  --namespace crossplane-system --create-namespace\n\n# Install cloud provider packages\nkubectl config use-context aws-cluster\nkubectl crossplane install provider crossplane/provider-aws:v0.35.0\n\nkubectl config use-context gcp-cluster\nkubectl crossplane install provider crossplane/provider-gcp:v0.30.0\n</code></pre> <p>Create database using cloud-agnostic API:</p> <pre><code># On AWS (will create RDS)\nkubectl config use-context aws-cluster\nkubectl apply -f - &lt;&lt;EOF\napiVersion: database.example.com/v1alpha1\nkind: Database\nmetadata:\n  name: payment-db\n  namespace: payments\nspec:\n  engine: postgres\n  version: \"14\"\n  size: small\n  storageGB: 100\nEOF\n\n# On GCP (will create Cloud SQL)\nkubectl config use-context gcp-cluster\nkubectl apply -f - &lt;&lt;EOF\napiVersion: database.example.com/v1alpha1\nkind: Database\nmetadata:\n  name: payment-db\n  namespace: payments\nspec:\n  engine: postgres\n  version: \"14\"\n  size: small\n  storageGB: 100\nEOF\n\n# Same manifest, different implementations!\n</code></pre> <p>Verify databases are provisioning:</p> <pre><code>kubectl get database -n payments --context aws-cluster\n# NAME         READY   PROVIDER   SIZE\n# payment-db   True    AWS RDS    small\n\nkubectl get database -n payments --context gcp-cluster\n# NAME         READY   PROVIDER      SIZE\n# payment-db   True    GCP CloudSQL  small\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#exercise-4-configure-multi-cluster-service-mesh-7-minutes","title":"Exercise 4: Configure Multi-Cluster Service Mesh (7 minutes)","text":"<p>Objective: Connect services across AWS and GCP clusters using Istio.</p> <pre><code># Istio is pre-installed in the lab. Configure multi-cluster mesh.\n\n# Install east-west gateway on AWS\nkubectl config use-context aws-cluster\nkubectl apply -f ~/fawkes-lab-20/istio/aws-east-west-gateway.yaml\n\n# Install east-west gateway on GCP\nkubectl config use-context gcp-cluster\nkubectl apply -f ~/fawkes-lab-20/istio/gcp-east-west-gateway.yaml\n\n# Exchange discovery secrets (allow clusters to find each other)\nistioctl x create-remote-secret \\\n  --context=aws-cluster \\\n  --name=aws | \\\n  kubectl apply -f - --context=gcp-cluster\n\nistioctl x create-remote-secret \\\n  --context=gcp-cluster \\\n  --name=gcp | \\\n  kubectl apply -f - --context=aws-cluster\n</code></pre> <p>Test cross-cloud communication:</p> <pre><code># Deploy a client pod in AWS that calls service in GCP\nkubectl config use-context aws-cluster\nkubectl run -it curl-test --image=curlimages/curl --restart=Never -- \\\n  curl http://payment-api.payments.svc.cluster.local\n\n# This request will:\n# 1. DNS resolves to local service\n# 2. Istio detects service also exists in GCP\n# 3. Load balances across both clouds\n# 4. Encrypts traffic with mTLS through east-west gateway\n</code></pre> <p>View traffic distribution:</p> <pre><code># Deploy Kiali dashboard\nkubectl apply -f ~/fawkes-lab-20/kiali/kiali.yaml --context aws-cluster\n\n# Port-forward to view\nkubectl port-forward svc/kiali 20001:20001 -n istio-system --context aws-cluster\n\n# Open browser: http://localhost:20001\n# You'll see traffic flowing between AWS and GCP clusters\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#lab-validation","title":"Lab Validation","text":"<pre><code># Run validation\nfawkes lab validate --module 20\n\n# You should see:\n# \u2705 AWS EKS cluster provisioned\n# \u2705 GCP GKE cluster provisioned\n# \u2705 Application deployed to both clouds\n# \u2705 Crossplane databases created (RDS + Cloud SQL)\n# \u2705 Istio multi-cluster mesh configured\n# \u2705 Cross-cloud service communication working\n</code></pre> <p>Cleanup:</p> <pre><code>fawkes lab stop --module 20\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#knowledge-check","title":"\u2705 Knowledge Check","text":""},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#question-1-multi-cloud-rationale","title":"Question 1: Multi-Cloud Rationale","text":"<p>Which is a VALID reason to adopt multi-cloud architecture?</p> <p>A) To learn new technologies B) Regulatory requirement for data residency in specific regions C) To have leverage in vendor negotiations D) To avoid making architectural decisions</p> Show Answer  **Answer: B**  Data residency requirements (e.g., GDPR mandating EU data stay in EU) are legitimate drivers for multi-cloud. Learning, negotiation leverage, and avoiding decisions are poor reasons that don't justify the added complexity."},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#question-2-multi-cloud-cost","title":"Question 2: Multi-Cloud Cost","text":"<p>What is the typical operational overhead increase when moving from single-cloud to multi-cloud?</p> <p>A) 5-10% B) 15-20% C) 30-50% D) 100%+</p> Show Answer  **Answer: C**  Industry studies show multi-cloud typically adds 30-50% operational overhead due to: multiple IAM systems, divergent tooling, team training, lost volume discounts, and increased complexity."},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#question-3-disaster-recovery","title":"Question 3: Disaster Recovery","text":"<p>For a system requiring RTO (Recovery Time Objective) of 30 minutes, which DR strategy is most appropriate?</p> <p>A) Cold standby (infrastructure provisioned on-demand) B) Warm standby (infrastructure pre-provisioned, app in standby) C) Hot standby (active-active across clouds) D) No DR needed</p> Show Answer  **Answer: B**  Warm standby balances cost and recovery time. Cold standby takes too long (&gt;30 min to provision infrastructure). Hot standby (active-active) is overkill for 30-minute RTO and significantly more expensive."},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#question-4-kubernetes-portability","title":"Question 4: Kubernetes Portability","text":"<p>Which component is NOT helpful for multi-cloud Kubernetes portability?</p> <p>A) CSI (Container Storage Interface) drivers B) Crossplane for cloud resource provisioning C) AWS Lambda functions D) External Secrets Operator</p> Show Answer  **Answer: C**  AWS Lambda is cloud-specific and tightly coupled to AWS. CSI drivers, Crossplane, and External Secrets Operator all provide abstraction layers that work across clouds."},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#question-5-data-egress-costs","title":"Question 5: Data Egress Costs","text":"<p>Why is data transfer between clouds expensive?</p> <p>A) Bandwidth limitations B) Cloud providers charge high egress fees C) Encryption overhead D) Latency penalties</p> Show Answer  **Answer: B**  Cloud providers charge significant egress fees (often $0.08-0.12/GB) when data leaves their network. This makes active-active multi-cloud with frequent data sync very expensive."},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#question-6-service-mesh","title":"Question 6: Service Mesh","text":"<p>What does an Istio multi-cluster east-west gateway provide?</p> <p>A) Load balancing within a single cluster B) Secure connectivity between clusters in different clouds C) DNS resolution for external services D) Container image registry</p> Show Answer  **Answer: B**  East-west gateways enable secure, mTLS-encrypted communication between services in different Kubernetes clusters, even across cloud providers."},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#question-7-terraform-vs-crossplane","title":"Question 7: Terraform vs Crossplane","text":"<p>What is the key difference between Terraform and Crossplane for multi-cloud?</p> <p>A) Terraform is faster B) Crossplane uses Kubernetes APIs, Terraform uses CLI C) Terraform only supports AWS D) Crossplane is cheaper</p> Show Answer  **Answer: B**  Crossplane provisions cloud resources using Kubernetes Custom Resources (declarative, reconciliation loops). Terraform uses its own CLI and state files (imperative with state management)."},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#question-8-cloud-native-vs-cloud-agnostic","title":"Question 8: Cloud-Native vs Cloud-Agnostic","text":"<p>When should you prefer cloud-native services over cloud-agnostic tools?</p> <p>A) Never, always use cloud-agnostic B) When speed-to-market and features outweigh portability concerns C) Only for non-production environments D) When you have unlimited budget</p> Show Answer  **Answer: B**  Cloud-native services (Lambda, DynamoDB, BigQuery) offer better performance, features, and developer experience. Use them when portability is not a primary concern (which is most startups and many enterprises)."},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#real-world-examples","title":"\ud83c\udf0d Real-World Examples","text":""},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#example-1-shopifys-multi-cloud-strategy","title":"Example 1: Shopify's Multi-Cloud Strategy","text":"<p>Approach: Multi-cloud by region, not by workload.</p> <p>Architecture: - Primary: GCP (main infrastructure) - Disaster Recovery: AWS (warm standby) - Data residency: Regional clouds for EU/APAC</p> <p>Key decisions: - Standardized on Kubernetes (GKE primary, EKS secondary) - Used Terraform for infrastructure provisioning - Avoided active-active (complexity not worth it) - Invested heavily in observability (Datadog across clouds)</p> <p>Results: - Survived GCP outage in 2020 with minimal downtime - Achieved 99.99% availability SLA - Cost: ~20% overhead vs single-cloud</p> <p>Lesson: Multi-cloud for DR makes sense at scale, but keep it simple (active-passive, not active-active).</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#example-2-spotifys-cloud-migration","title":"Example 2: Spotify's Cloud Migration","text":"<p>Journey: Datacenter \u2192 GCP (2016-2018)</p> <p>Why NOT multi-cloud?: - Decided vendor lock-in risk &lt; operational complexity cost - Bet on GCP for best-of-breed data/ML services (BigQuery, Dataflow) - Negotiated favorable pricing with Google</p> <p>How they mitigated lock-in: - Used Kubernetes for all workloads (portable if needed) - Abstracted storage with GCS-compatible libraries - Open-sourced internal tools (Backstage) for community portability</p> <p>Results: - Successful migration in 2 years - Reduced infrastructure costs by 30% - Faster feature development (cloud-native services)</p> <p>Lesson: For most companies, single-cloud with portability planning is better than multi-cloud execution.</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#example-3-capital-ones-multi-cloud-hybrid","title":"Example 3: Capital One's Multi-Cloud Hybrid","text":"<p>Approach: AWS-primary with strategic GCP usage.</p> <p>Architecture: - 95% of workloads: AWS (core banking systems) - ML/AI workloads: GCP (BigQuery, Vertex AI) - Data analytics: GCP (better data warehouse pricing)</p> <p>Implementation: - Cross-cloud VPN for secure connectivity - Replicate data to GCP for analytics (batch, nightly) - Unified IAM via Okta SSO</p> <p>Results: - Best-of-breed services without full multi-cloud complexity - Contained GCP usage to specific use cases - Avoided active-active complexity</p> <p>Lesson: Tactical multi-cloud (best tool for the job) is more practical than strategic multi-cloud (everything everywhere).</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#example-4-dropboxs-cloud-repatriation","title":"Example 4: Dropbox's Cloud Repatriation","text":"<p>Journey: AWS \u2192 Own Datacenters (2016)</p> <p>Why leave the cloud?: - At scale (exabytes of data), cloud economics inverted - 90% of workload predictable (not bursty) - Egress fees killed economics ($75M+/year in bandwidth)</p> <p>Result: - Saved ~$75M over 2 years - Better performance (purpose-built infrastructure) - Retained AWS for edge locations and burst capacity</p> <p>Lesson: Multi-cloud isn't always the answer. Sometimes \"no cloud\" or \"hybrid cloud\" makes more sense at extreme scale.</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#dora-capabilities-mapping","title":"\ud83d\udcca DORA Capabilities Mapping","text":"<p>This module supports these DORA capabilities:</p> Capability How This Module Helps Impact on Metrics Deployment Automation Terraform + Crossplane enable automated provisioning across clouds Improves deployment frequency Loosely Coupled Architecture Service mesh enables independent deployment across clouds Enables faster changes, reduces dependencies Monitoring &amp; Observability Unified observability (Prometheus, Grafana) across clouds Reduces MTTR with consistent tooling Database Change Management Crossplane provides declarative database provisioning Safer, faster database changes"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#troubleshooting-common-issues","title":"\ud83d\udd27 Troubleshooting Common Issues","text":""},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#issue-1-cross-cloud-networking-latency","title":"Issue 1: Cross-Cloud Networking Latency","text":"<p>Symptom: Services in AWS calling services in GCP have 200ms+ latency.</p> <p>Cause: Geographic distance + internet routing.</p> <p>Solution:</p> <pre><code># Use dedicated interconnect\n# AWS Direct Connect \u2194 GCP Cloud Interconnect\n\n# Or optimize service placement\n# - Deploy services that talk frequently in same cloud\n# - Use caching (Redis) to reduce cross-cloud calls\n# - Async messaging (Kafka) instead of synchronous HTTP\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#issue-2-istio-multi-cluster-not-working","title":"Issue 2: Istio Multi-Cluster Not Working","text":"<p>Symptom: Services in one cluster cannot reach services in another cluster.</p> <p>Cause: Missing east-west gateway or incorrect network configuration.</p> <p>Solution:</p> <pre><code># Verify east-west gateway is running\nkubectl get svc -n istio-system --context aws-cluster\nkubectl get svc -n istio-system --context gcp-cluster\n\n# Check if remote secrets are created\nkubectl get secrets -n istio-system --context aws-cluster | grep gcp\nkubectl get secrets -n istio-system --context gcp-cluster | grep aws\n\n# Verify service endpoints are discovered\nistioctl proxy-config endpoints &lt;pod-name&gt; -n payments --context aws-cluster\n\n# Should show endpoints from both clusters\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#issue-3-terraform-state-conflicts","title":"Issue 3: Terraform State Conflicts","text":"<p>Symptom: <code>Error acquiring the state lock</code> when running Terraform.</p> <p>Cause: Multiple people/pipelines running Terraform simultaneously.</p> <p>Solution:</p> <pre><code># Use remote state with locking\nterraform {\n  backend \"s3\" {\n    bucket         = \"terraform-state-bucket\"\n    key            = \"multi-cloud/terraform.tfstate\"\n    region         = \"us-east-1\"\n    dynamodb_table = \"terraform-locks\"  # Enables locking\n    encrypt        = true\n  }\n}\n\n# Alternative: Use Terraform Cloud for automatic locking\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#issue-4-crossplane-resource-stuck-in-provisioning","title":"Issue 4: Crossplane Resource Stuck in \"Provisioning\"","text":"<p>Symptom: Database resource shows \"Provisioning\" for &gt;10 minutes.</p> <p>Cause: Cloud provider API errors or missing permissions.</p> <p>Solution:</p> <pre><code># Check Crossplane provider logs\nkubectl logs -n crossplane-system -l pkg.crossplane.io/provider=provider-aws\n\n# Common issues:\n# - IAM role missing permissions\n# - API rate limits hit\n# - Invalid parameter (e.g., unsupported instance type)\n\n# Describe the resource for detailed error\nkubectl describe database payment-db -n payments\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#issue-5-cost-explosion-from-data-egress","title":"Issue 5: Cost Explosion from Data Egress","text":"<p>Symptom: Cloud bill 2x higher than expected.</p> <p>Cause: Frequent data transfer between clouds.</p> <p>Solution:</p> <pre><code># Audit data transfer\naws ce get-cost-and-usage \\\n  --time-period Start=2025-10-01,End=2025-10-31 \\\n  --granularity MONTHLY \\\n  --metrics BlendedCost \\\n  --group-by Type=DIMENSION,Key=USAGE_TYPE | \\\n  grep DataTransfer\n\n# Optimization strategies:\n# 1. Cache frequently accessed data locally (Redis)\n# 2. Batch data transfers (nightly sync vs real-time)\n# 3. Use compression (gzip) for data transfer\n# 4. Colocate services that communicate frequently\n# 5. Consider CDN (CloudFlare) for static assets\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#official-documentation","title":"Official Documentation","text":"<ul> <li>AWS Well-Architected Framework - Multi-Region</li> <li>GCP Multi-Cloud Architecture</li> <li>Azure Arc for Multi-Cloud</li> <li>CNCF Multi-Cloud White Paper</li> </ul>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#tools-frameworks","title":"Tools &amp; Frameworks","text":"<ul> <li>Terraform Multi-Cloud Modules</li> <li>Crossplane Documentation</li> <li>Istio Multi-Cluster</li> <li>Kubecost for Multi-Cloud</li> </ul>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#books-papers","title":"Books &amp; Papers","text":"<ul> <li>\"Cloud Native Transformation\" by Pini Reznik, Jamie Dobson &amp; Michelle Gienow (O'Reilly) - Chapter on multi-cloud strategies</li> <li>\"Architecting the Cloud\" by Michael J. Kavis - Multi-cloud decision framework</li> <li>ThoughtWorks Technology Radar - Regular assessment of multi-cloud tools</li> </ul>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#case-studies","title":"Case Studies","text":"<ul> <li>Shopify Engineering Blog - Multi-Cloud</li> <li>Spotify Labs - Why We Chose GCP</li> <li>Dropbox Tech Blog - Infrastructure</li> </ul>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#key-takeaways","title":"\ud83c\udfaf Key Takeaways","text":"<p>By completing this module, you've learned:</p> <ol> <li>\u2705 When multi-cloud makes sense - DR, compliance, best-of-breed; not \"just in case\"</li> <li>\u2705 The multi-cloud spectrum - From single-cloud to active-active, understand tradeoffs</li> <li>\u2705 Abstraction strategies - Kubernetes, Crossplane, Terraform for portability</li> <li>\u2705 Cost implications - 30-50% overhead, lost volume discounts, egress fees</li> <li>\u2705 Implementation patterns - Multi-cloud by app, DR, data residency</li> <li>\u2705 Practical tools - Terraform, Crossplane, Istio, unified observability</li> </ol> <p>Critical insight: Multi-cloud is a tool, not a goal. Most organizations benefit more from single-cloud excellence with portability planning than premature multi-cloud complexity.</p> <p>Decision framework: - Start-up: Single cloud, cloud-native services (speed &gt; portability) - Growth stage: Single cloud with abstraction layers (prepare for optionality) - Enterprise: Selective multi-cloud (DR, compliance, best-of-breed)</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#next-steps","title":"\ud83d\ude80 Next Steps","text":""},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#congratulations-youve-completed-the-black-belt-curriculum","title":"Congratulations! You've Completed the Black Belt Curriculum! \ud83e\udd4b","text":"<p>You've mastered all 20 modules of the Fawkes Dojo. Here's what comes next:</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#1-black-belt-assessment-4-hours","title":"1. Black Belt Assessment (4 hours)","text":"<p>To earn your Fawkes Platform Architect certification, complete:</p> <p>Written Exam (50 questions, 90% pass required): - Multi-cloud architecture design - Zero trust security implementation - Platform-as-a-product principles - Multi-tenancy patterns - DORA metrics and continuous improvement</p> <p>Practical Assessment: 1. Architecture Design (90 minutes)    - Design a complete platform architecture for a given scenario    - Present to peer review panel    - Defend design decisions under questioning</p> <ol> <li>Implementation Challenge (90 minutes)</li> <li>Implement multi-tenant namespace with resource quotas</li> <li>Configure zero trust policies (mTLS, image signing)</li> <li>Deploy application across two cloud providers</li> <li> <p>Set up unified observability</p> </li> <li> <p>Code Contribution (60 minutes)</p> </li> <li>Contribute a feature or bug fix to Fawkes codebase</li> <li>Submit PR with documentation and tests</li> <li> <p>Code review by platform team</p> </li> <li> <p>Mentorship (Outside assessment time)</p> </li> <li>Mentor 2 White Belt learners through Module 1-4</li> <li>Document learner progress</li> <li>Provide constructive feedback</li> </ol>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#2-continue-your-platform-engineering-journey","title":"2. Continue Your Platform Engineering Journey","text":"<p>Advanced Topics (self-study): - FinOps: Cloud cost optimization at scale - Platform Security: Advanced threat modeling, security-as-code - Developer Experience: Measuring and improving DORA metrics - SRE Practices: Error budgets, on-call rotation, incident response - Platform Product Management: Roadmapping, user research, adoption metrics</p> <p>Recommended Certifications: - Kubernetes: CKA (Certified Kubernetes Administrator) - Cloud: AWS Solutions Architect, GCP Professional Cloud Architect - Security: CISSP, Certified Ethical Hacker - SRE: Google SRE Certification (if available)</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#3-contribute-to-the-platform-engineering-community","title":"3. Contribute to the Platform Engineering Community","text":"<p>Ways to give back: - Write blog posts about your platform journey - Speak at meetups or conferences (KubeCon, PlatformCon) - Contribute to open-source platform tools (Backstage, Crossplane, ArgoCD) - Mentor junior engineers at your organization - Share learnings in #platformengineering on Twitter/LinkedIn</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#4-apply-your-skills","title":"4. Apply Your Skills","text":"<p>Platform Engineering Career Paths:</p> <ol> <li>Platform Engineer: Build and maintain internal developer platforms</li> <li>Staff Platform Engineer: Lead platform initiatives, mentor team</li> <li>Platform Architect: Design enterprise-wide platform strategies</li> <li>Developer Experience Engineer: Focus on DX metrics and improvements</li> <li>SRE (Site Reliability Engineer): Own production reliability</li> <li>DevOps Architect: Bridge development and operations at scale</li> <li>Cloud Architect: Design multi-cloud and hybrid cloud solutions</li> <li>Platform Product Manager: Own platform roadmap and adoption</li> </ol> <p>Salary Ranges (US, 2025): - Platform Engineer: $120k - $180k - Senior Platform Engineer: $150k - $220k - Staff Platform Engineer: $180k - $280k - Platform Architect: $200k - $350k+</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#your-fawkes-dojo-progress","title":"\ud83d\udcca Your Fawkes Dojo Progress","text":"<pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551              FAWKES DOJO COMPLETION SUMMARY                  \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n\nWhite Belt (Platform Fundamentals)          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100%\n  \u2705 Module 1: Internal Delivery Platforms\n  \u2705 Module 2: DORA Metrics\n  \u2705 Module 3: GitOps Principles\n  \u2705 Module 4: Your First Deployment\n\nYellow Belt (CI/CD Mastery)                 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100%\n  \u2705 Module 5: Continuous Integration Fundamentals\n  \u2705 Module 6: Building Golden Path Pipelines\n  \u2705 Module 7: Security Scanning &amp; Quality Gates\n  \u2705 Module 8: Artifact Management\n\nGreen Belt (GitOps &amp; Deployment)            \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100%\n  \u2705 Module 9: GitOps with ArgoCD\n  \u2705 Module 10: Deployment Strategies\n  \u2705 Module 11: Progressive Delivery\n  \u2705 Module 12: Rollback &amp; Incident Response\n\nBrown Belt (Observability &amp; SRE)            \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100%\n  \u2705 Module 13: Metrics, Logs, and Traces\n  \u2705 Module 14: DORA Metrics Deep Dive\n  \u2705 Module 15: SLIs, SLOs, and Error Budgets\n  \u2705 Module 16: Incident Management &amp; Postmortems\n\nBlack Belt (Platform Architecture)          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100%\n  \u2705 Module 17: Platform as a Product\n  \u2705 Module 18: Multi-Tenancy &amp; Resource Management\n  \u2705 Module 19: Security &amp; Zero Trust\n  \u2705 Module 20: Multi-Cloud Strategies\n\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nOVERALL PROGRESS: 20/20 MODULES COMPLETE (100%)\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n\n\ud83c\udfc6 Ready for Black Belt Certification Assessment!\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#certification-roadmap","title":"\ud83c\udf93 Certification Roadmap","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 YOU ARE HERE!                               \u2502\n\u2502                      \u2193                                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502  \u2502  \ud83e\udd4b Black Belt Complete (Modules 1-20)           \u2502      \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2502                     \u2502                                       \u2502\n\u2502                     \u25bc                                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502  \u2502  \ud83d\udcdd Black Belt Assessment                         \u2502      \u2502\n\u2502  \u2502     - 50-question exam (90% pass)                \u2502      \u2502\n\u2502  \u2502     - Architecture design presentation           \u2502      \u2502\n\u2502  \u2502     - Implementation challenge                   \u2502      \u2502\n\u2502  \u2502     - Code contribution to Fawkes                \u2502      \u2502\n\u2502  \u2502     - Mentor 2 White Belt learners               \u2502      \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2502                     \u2502                                       \u2502\n\u2502                     \u25bc                                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502  \u2502  \ud83c\udf93 FAWKES PLATFORM ARCHITECT CERTIFICATION       \u2502      \u2502\n\u2502  \u2502                                                   \u2502      \u2502\n\u2502  \u2502  Certificate Number: FPA-2025-XXXXX              \u2502      \u2502\n\u2502  \u2502  Digital Badge: Add to LinkedIn                  \u2502      \u2502\n\u2502  \u2502  Recognition: Fawkes Contributors Page           \u2502      \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502                                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#what-youve-accomplished","title":"\ud83c\udfc5 What You've Accomplished","text":"<p>Over the course of 20 modules, you've learned:</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#technical-skills","title":"Technical Skills","text":"<ul> <li>\u2705 Design and implement internal developer platforms</li> <li>\u2705 Build CI/CD pipelines with security scanning and quality gates</li> <li>\u2705 Implement GitOps workflows with ArgoCD</li> <li>\u2705 Deploy using progressive delivery (canary, blue-green)</li> <li>\u2705 Establish comprehensive observability (metrics, logs, traces)</li> <li>\u2705 Define and track DORA metrics</li> <li>\u2705 Create SLIs, SLOs, and error budgets</li> <li>\u2705 Respond to incidents and conduct blameless postmortems</li> <li>\u2705 Design platforms as products with user research</li> <li>\u2705 Implement multi-tenancy and resource management</li> <li>\u2705 Architect zero trust security for platforms</li> <li>\u2705 Design multi-cloud strategies and disaster recovery</li> </ul>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#leadership-soft-skills","title":"Leadership &amp; Soft Skills","text":"<ul> <li>\u2705 Communicate platform value to stakeholders</li> <li>\u2705 Gather and incorporate user feedback</li> <li>\u2705 Balance technical debt with feature development</li> <li>\u2705 Lead architectural decisions</li> <li>\u2705 Mentor junior engineers</li> <li>\u2705 Navigate organizational change</li> </ul>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#industry-knowledge","title":"Industry Knowledge","text":"<ul> <li>\u2705 DORA research and high-performing organizations</li> <li>\u2705 Platform engineering best practices</li> <li>\u2705 DevOps and SRE principles</li> <li>\u2705 Cloud architecture patterns</li> <li>\u2705 Security and compliance requirements</li> </ul>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#feedback-community","title":"\ud83d\udcac Feedback &amp; Community","text":""},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#share-your-experience","title":"Share Your Experience","text":"<p>We'd love to hear about your Fawkes Dojo journey!</p> <p>Join the community: - \ud83d\udcac Mattermost: <code>#dojo-graduates</code> channel - \ud83d\udc26 Twitter: Tweet with <code>#FawkesDojo</code> and <code>@FawkesPlatform</code> - \ud83d\udcbc LinkedIn: Add \"Fawkes Platform Architect\" to certifications - \ud83d\udcdd Blog: Write about your learning experience</p> <p>Help improve the Dojo: - Submit feedback via Backstage feedback plugin - Suggest new modules or improvements - Contribute lab exercises or quizzes - Help translate content (internationalization)</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#fawkes-platform-architect-badge","title":"\ud83c\udf1f Fawkes Platform Architect Badge","text":"<p>Upon passing the Black Belt Assessment, you'll receive:</p> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551                                                           \u2551\n\u2551                  \ud83c\udfc6 FAWKES DOJO \ud83c\udfc6                        \u2551\n\u2551                                                           \u2551\n\u2551              PLATFORM ARCHITECT CERTIFIED                 \u2551\n\u2551                                                           \u2551\n\u2551                    \u26ab BLACK BELT \u26ab                        \u2551\n\u2551                                                           \u2551\n\u2551  This certifies that [YOUR NAME] has demonstrated        \u2551\n\u2551  mastery in platform engineering, achieving the          \u2551\n\u2551  highest level of the Fawkes Dojo curriculum.            \u2551\n\u2551                                                           \u2551\n\u2551  Competencies:                                            \u2551\n\u2551    \u2713 Platform Architecture &amp; Design                      \u2551\n\u2551    \u2713 CI/CD &amp; GitOps                                      \u2551\n\u2551    \u2713 Observability &amp; SRE                                 \u2551\n\u2551    \u2713 Security &amp; Zero Trust                               \u2551\n\u2551    \u2713 Multi-Cloud Strategies                              \u2551\n\u2551                                                           \u2551\n\u2551  Certificate ID: FPA-2025-XXXXX                          \u2551\n\u2551  Issue Date: [DATE]                                      \u2551\n\u2551  Valid Until: [DATE + 2 years]                           \u2551\n\u2551                                                           \u2551\n\u2551  Verify: https://fawkes.io/verify/FPA-2025-XXXXX         \u2551\n\u2551                                                           \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre> <p>Digital badge includes: - Credly integration (add to LinkedIn, resume) - QR code for verification - Skill tags for recruiter searches - Expiration date (renew every 2 years with continued learning)</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#recertification","title":"\ud83d\udcc5 Recertification","text":"<p>Platform engineering evolves rapidly. To maintain your certification:</p> <p>Recertification Options (every 2 years):</p> <ol> <li>Continuous Learning Path:</li> <li>Complete 4 new Fawkes Dojo modules (as they're released)</li> <li>Attend 2 platform engineering conferences/workshops</li> <li> <p>Contribute to 2 open-source platform projects</p> </li> <li> <p>Advanced Assessment:</p> </li> <li>Take updated Black Belt exam (reflects new tools/practices)</li> <li> <p>Present case study from your production platform</p> </li> <li> <p>Mentorship Track:</p> </li> <li>Mentor 5 engineers through Fawkes Dojo</li> <li>Conduct 2 internal platform workshops</li> <li>Document learnings and best practices</li> </ol>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#congratulations","title":"\ud83c\udf89 Congratulations!","text":"<p>You've completed the most comprehensive platform engineering curriculum available. You're now equipped to:</p> <ul> <li>Build world-class internal developer platforms</li> <li>Lead platform initiatives at your organization</li> <li>Mentor the next generation of platform engineers</li> <li>Shape the future of platform engineering</li> </ul> <p>The journey doesn't end here \u2013 it's just beginning. Platform engineering is a rapidly evolving field, and continuous learning is essential.</p> <p>Go forth and build amazing platforms! \ud83d\ude80</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#stay-connected","title":"\ud83d\udcde Stay Connected","text":"<ul> <li>Fawkes Website: https://fawkes.io</li> <li>Documentation: https://docs.fawkes.io</li> <li>GitHub: https://github.com/fawkes-platform</li> <li>Community Forum: https://community.fawkes.io</li> <li>Mattermost: #platform-engineering</li> <li>Twitter: @FawkesPlatform</li> <li>YouTube: Fawkes Platform Engineering</li> </ul> <p>Module 20: Multi-Cloud Strategies | Fawkes Dojo | Black Belt \"Build once, deploy anywhere\" | Version 1.0</p>"},{"location":"dojo/modules/black-belt/module-20-multi-cloud/#black-belt-status-complete","title":"\ud83c\udfc6 Black Belt Status: COMPLETE! \u2705","text":"<pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551                                                          \u2551\n\u2551      \ud83e\udd4b BLACK BELT CURRICULUM COMPLETE! \ud83e\udd4b               \u2551\n\u2551                                                          \u2551\n\u2551  All 20 modules mastered. You are ready to:             \u2551\n\u2551                                                          \u2551\n\u2551  \u2713 Schedule Black Belt Assessment                       \u2551\n\u2551  \u2713 Design enterprise platform architectures             \u2551\n\u2551  \u2713 Lead platform engineering teams                      \u2551\n\u2551  \u2713 Mentor junior platform engineers                     \u2551\n\u2551  \u2713 Contribute to platform engineering community         \u2551\n\u2551                                                          \u2551\n\u2551  Next step: fawkes dojo assess --level black-belt       \u2551\n\u2551                                                          \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre> <p>You did it! \ud83c\udf8a Now go earn that certification! \ud83d\udcaa</p>"},{"location":"dojo/modules/brown-belt/module-13-observability/","title":"Fawkes Dojo Module 13: Monitoring, Observability &amp; DORA Metrics","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#module-overview","title":"Module Overview","text":"<p>Duration: 3-4 hours Level: Advanced Prerequisites: Modules 1-4, Working Fawkes deployment, Basic understanding of Kubernetes and CI/CD</p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this module, you will be able to:</p> <ol> <li>Implement comprehensive monitoring and observability for your Fawkes platform</li> <li>Configure and customize dashboards for platform health and performance</li> <li>Measure and track the Four Key DORA metrics</li> <li>Set up alerting and incident response workflows</li> <li>Use observability data to drive continuous improvement</li> <li>Implement distributed tracing for application performance monitoring</li> </ol>"},{"location":"dojo/modules/brown-belt/module-13-observability/#part-1-understanding-observability-in-platform-engineering","title":"Part 1: Understanding Observability in Platform Engineering","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#the-three-pillars-of-observability","title":"The Three Pillars of Observability","text":"<p>Metrics: Numerical measurements over time - Infrastructure metrics (CPU, memory, disk, network) - Application metrics (request rate, error rate, latency) - Business metrics (deployments, lead time, failure rate)</p> <p>Logs: Event records from systems and applications - Structured vs. unstructured logs - Log aggregation and centralization - Log levels and filtering</p> <p>Traces: Request flows through distributed systems - Distributed tracing concepts - Span and trace relationships - Performance bottleneck identification</p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#why-observability-matters-for-dora","title":"Why Observability Matters for DORA","text":"<p>The Four Key Metrics require robust observability:</p> <ol> <li>Deployment Frequency: Track deployments through CI/CD events</li> <li>Lead Time for Changes: Measure from commit to production</li> <li>Change Failure Rate: Monitor deployment failures and rollbacks</li> <li>Mean Time to Restore (MTTR): Detect and measure incident resolution time</li> </ol>"},{"location":"dojo/modules/brown-belt/module-13-observability/#part-2-fawkes-monitoring-stack","title":"Part 2: Fawkes Monitoring Stack","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#components-overview","title":"Components Overview","text":"<p>Fawkes includes an integrated monitoring stack:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Grafana Dashboards                \u2502\n\u2502        (Visualization &amp; Alerting)           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Prometheus  \u2502  \u2502    Loki    \u2502\n\u2502  (Metrics)  \u2502  \u2502   (Logs)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Node Exporters          \u2502\n\u2502   Application Exporters      \u2502\n\u2502      Fluent Bit/Promtail     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502  Kubernetes Cluster  \u2502\n    \u2502    Applications      \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#included-tools","title":"Included Tools","text":"<ul> <li>Prometheus: Metrics collection and storage</li> <li>Grafana: Dashboard visualization and alerting</li> <li>Loki: Log aggregation (lightweight alternative to ELK)</li> <li>Tempo: Distributed tracing (optional)</li> <li>AlertManager: Alert routing and notification</li> <li>Node Exporter: Infrastructure metrics</li> <li>kube-state-metrics: Kubernetes object metrics</li> </ul>"},{"location":"dojo/modules/brown-belt/module-13-observability/#part-3-hands-on-lab-deploying-the-monitoring-stack","title":"Part 3: Hands-On Lab - Deploying the Monitoring Stack","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#lab-setup","title":"Lab Setup","text":"<p>Scenario: You have a running Fawkes platform on Kubernetes. Now you'll deploy the full monitoring stack and configure dashboards.</p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#step-1-deploy-monitoring-components","title":"Step 1: Deploy Monitoring Components","text":"<pre><code># Navigate to the platform monitoring directory\ncd fawkes/platform/monitoring\n\n# Deploy Prometheus Operator and stack\nkubectl create namespace monitoring\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\n\n# Install kube-prometheus-stack (includes Prometheus, Grafana, AlertManager)\nhelm install prometheus prometheus-community/kube-prometheus-stack \\\n  --namespace monitoring \\\n  --set prometheus.prometheusSpec.retention=30d \\\n  --set prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.resources.requests.storage=50Gi \\\n  --set grafana.adminPassword=admin123 \\\n  -f values/prometheus-values.yaml\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#step-2-deploy-loki-for-log-aggregation","title":"Step 2: Deploy Loki for Log Aggregation","text":"<pre><code># Install Loki\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm install loki grafana/loki-stack \\\n  --namespace monitoring \\\n  --set promtail.enabled=true \\\n  --set loki.persistence.enabled=true \\\n  --set loki.persistence.size=50Gi\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#step-3-configure-data-sources-in-grafana","title":"Step 3: Configure Data Sources in Grafana","text":"<pre><code># Get Grafana admin password\nkubectl get secret --namespace monitoring prometheus-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode\n\n# Port-forward to access Grafana\nkubectl port-forward -n monitoring svc/prometheus-grafana 3000:80\n</code></pre> <p>Visit <code>http://localhost:3000</code> and log in with admin credentials.</p> <p>Add Loki Data Source: 1. Go to Configuration \u2192 Data Sources 2. Add data source \u2192 Loki 3. URL: <code>http://loki:3100</code> 4. Save &amp; Test</p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#step-4-verify-metrics-collection","title":"Step 4: Verify Metrics Collection","text":"<pre><code># Check Prometheus targets\nkubectl port-forward -n monitoring svc/prometheus-kube-prometheus-prometheus 9090:9090\n\n# Open http://localhost:9090/targets\n# Verify all targets are \"UP\"\n</code></pre> <p>Expected targets: - kubernetes-apiservers - kubernetes-nodes - kubernetes-pods - kubernetes-service-endpoints - kube-state-metrics - node-exporter</p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#part-4-configuring-dora-metrics-dashboards","title":"Part 4: Configuring DORA Metrics Dashboards","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#creating-custom-metrics","title":"Creating Custom Metrics","text":"<p>To track DORA metrics, we need to instrument our CI/CD pipeline to emit custom metrics.</p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#deployment-frequency-metric","title":"Deployment Frequency Metric","text":"<p>Add to your CI/CD pipeline (e.g., Jenkins, GitLab CI, ArgoCD):</p> <pre><code># Example: Prometheus metrics endpoint in your deployment controller\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: deployment-metrics\n  namespace: fawkes-platform\ndata:\n  record-deployment.sh: |\n    #!/bin/bash\n    # Record deployment event\n    cat &lt;&lt;EOF | curl --data-binary @- http://prometheus-pushgateway:9091/metrics/job/deployments\n    # TYPE deployment_total counter\n    # HELP deployment_total Total number of deployments\n    deployment_total{environment=\"$ENV\",application=\"$APP\",status=\"$STATUS\"} 1\n    EOF\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#lead-time-for-changes","title":"Lead Time for Changes","text":"<p>Track commit-to-deployment time:</p> <pre><code># Example Python script to calculate lead time\nfrom prometheus_client import Gauge, push_to_gateway\nimport os\nfrom datetime import datetime\n\nlead_time_gauge = Gauge('lead_time_seconds', 'Time from commit to deployment', ['application', 'environment'])\n\ndef record_lead_time(commit_timestamp, deploy_timestamp, app, env):\n    lead_time = (deploy_timestamp - commit_timestamp).total_seconds()\n    lead_time_gauge.labels(application=app, environment=env).set(lead_time)\n    push_to_gateway('prometheus-pushgateway:9091', job='lead_time', registry=registry)\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#change-failure-rate","title":"Change Failure Rate","text":"<p>Monitor deployment failures and rollbacks:</p> <pre><code># In your deployment script, record success/failure\ndeployment_status=\"success\"  # or \"failure\"\n\ncat &lt;&lt;EOF | curl --data-binary @- http://prometheus-pushgateway:9091/metrics/job/deployment_results\ndeployment_result{application=\"$APP\",environment=\"$ENV\",status=\"$deployment_status\"} 1\nEOF\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#mttr-mean-time-to-restore","title":"MTTR (Mean Time to Restore)","text":"<p>Use AlertManager and incident tracking:</p> <pre><code># PromQL query for MTTR\nrate(alert_duration_seconds_sum[7d]) / rate(alert_duration_seconds_count[7d])\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#import-dora-dashboard","title":"Import DORA Dashboard","text":"<p>Create a Grafana dashboard (<code>dora-metrics-dashboard.json</code>):</p> <pre><code>{\n  \"dashboard\": {\n    \"title\": \"DORA Four Key Metrics\",\n    \"panels\": [\n      {\n        \"title\": \"Deployment Frequency\",\n        \"targets\": [\n          {\n            \"expr\": \"sum(rate(deployment_total[1d])) by (environment)\"\n          }\n        ],\n        \"type\": \"graph\"\n      },\n      {\n        \"title\": \"Lead Time for Changes (Average)\",\n        \"targets\": [\n          {\n            \"expr\": \"avg(lead_time_seconds) by (application)\"\n          }\n        ],\n        \"type\": \"stat\"\n      },\n      {\n        \"title\": \"Change Failure Rate\",\n        \"targets\": [\n          {\n            \"expr\": \"sum(rate(deployment_result{status='failure'}[7d])) / sum(rate(deployment_result[7d])) * 100\"\n          }\n        ],\n        \"type\": \"gauge\"\n      },\n      {\n        \"title\": \"Mean Time to Restore (MTTR)\",\n        \"targets\": [\n          {\n            \"expr\": \"avg(alert_duration_seconds) by (severity)\"\n          }\n        ],\n        \"type\": \"stat\"\n      }\n    ]\n  }\n}\n</code></pre> <p>Import into Grafana: <pre><code># Import dashboard\ncurl -X POST http://admin:admin123@localhost:3000/api/dashboards/db \\\n  -H \"Content-Type: application/json\" \\\n  -d @dora-metrics-dashboard.json\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#part-5-alerting-and-incident-response","title":"Part 5: Alerting and Incident Response","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#configuring-alertmanager","title":"Configuring AlertManager","text":"<p>Edit AlertManager configuration:</p> <pre><code># alertmanager-config.yaml\nglobal:\n  resolve_timeout: 5m\n  slack_api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'\n\nroute:\n  group_by: ['alertname', 'cluster', 'service']\n  group_wait: 10s\n  group_interval: 10s\n  repeat_interval: 12h\n  receiver: 'default'\n  routes:\n  - match:\n      severity: critical\n    receiver: 'pagerduty-critical'\n  - match:\n      severity: warning\n    receiver: 'slack-warnings'\n\nreceivers:\n- name: 'default'\n  slack_configs:\n  - channel: '#alerts'\n    title: 'Alert: {{ .GroupLabels.alertname }}'\n    text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'\n\n- name: 'pagerduty-critical'\n  pagerduty_configs:\n  - service_key: 'YOUR_PAGERDUTY_KEY'\n\n- name: 'slack-warnings'\n  slack_configs:\n  - channel: '#warnings'\n    title: 'Warning: {{ .GroupLabels.alertname }}'\n</code></pre> <p>Apply configuration: <pre><code>kubectl create secret generic alertmanager-config \\\n  --from-file=alertmanager.yaml=alertmanager-config.yaml \\\n  -n monitoring\n\nkubectl rollout restart statefulset/alertmanager-prometheus-kube-prometheus-alertmanager -n monitoring\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#creating-alert-rules","title":"Creating Alert Rules","text":"<pre><code># prometheus-rules.yaml\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  name: fawkes-platform-alerts\n  namespace: monitoring\nspec:\n  groups:\n  - name: platform_health\n    interval: 30s\n    rules:\n    - alert: HighPodCrashRate\n      expr: rate(kube_pod_container_status_restarts_total[15m]) &gt; 0.1\n      for: 5m\n      labels:\n        severity: warning\n      annotations:\n        summary: \"High pod crash rate detected\"\n        description: \"Pod {{ $labels.pod }} is crash-looping\"\n\n    - alert: DeploymentFailed\n      expr: increase(deployment_result{status=\"failure\"}[5m]) &gt; 0\n      for: 1m\n      labels:\n        severity: critical\n      annotations:\n        summary: \"Deployment failure detected\"\n        description: \"Deployment for {{ $labels.application }} failed\"\n\n    - alert: HighChangeFailureRate\n      expr: |\n        sum(rate(deployment_result{status=\"failure\"}[7d])) \n        / sum(rate(deployment_result[7d])) * 100 &gt; 15\n      for: 10m\n      labels:\n        severity: warning\n      annotations:\n        summary: \"Change failure rate exceeds 15%\"\n        description: \"Current CFR: {{ $value }}%\"\n\n    - alert: LowDeploymentFrequency\n      expr: sum(rate(deployment_total[1d])) &lt; 0.1\n      for: 1h\n      labels:\n        severity: warning\n      annotations:\n        summary: \"Deployment frequency is low\"\n        description: \"Less than 1 deployment per 10 days\"\n\n    - alert: HighLeadTime\n      expr: avg(lead_time_seconds) &gt; 86400\n      for: 1h\n      labels:\n        severity: warning\n      annotations:\n        summary: \"Lead time exceeds 24 hours\"\n        description: \"Average lead time: {{ $value }}s\"\n</code></pre> <p>Apply rules: <pre><code>kubectl apply -f prometheus-rules.yaml\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#part-6-application-performance-monitoring-with-tracing","title":"Part 6: Application Performance Monitoring with Tracing","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#deploy-tempo-for-distributed-tracing","title":"Deploy Tempo for Distributed Tracing","text":"<pre><code># Install Tempo\nhelm install tempo grafana/tempo \\\n  --namespace monitoring \\\n  --set persistence.enabled=true\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#instrument-your-application","title":"Instrument Your Application","text":"<p>Example using OpenTelemetry (Java Spring Boot):</p> <pre><code>&lt;!-- pom.xml --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.opentelemetry&lt;/groupId&gt;\n    &lt;artifactId&gt;opentelemetry-api&lt;/artifactId&gt;\n    &lt;version&gt;1.32.0&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.opentelemetry&lt;/groupId&gt;\n    &lt;artifactId&gt;opentelemetry-exporter-otlp&lt;/artifactId&gt;\n    &lt;version&gt;1.32.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>// Application configuration\n@Configuration\npublic class TracingConfig {\n    @Bean\n    public OpenTelemetry openTelemetry() {\n        OtlpGrpcSpanExporter spanExporter = OtlpGrpcSpanExporter.builder()\n            .setEndpoint(\"http://tempo:4317\")\n            .build();\n\n        SdkTracerProvider tracerProvider = SdkTracerProvider.builder()\n            .addSpanProcessor(BatchSpanProcessor.builder(spanExporter).build())\n            .build();\n\n        return OpenTelemetrySdk.builder()\n            .setTracerProvider(tracerProvider)\n            .buildAndRegisterGlobal();\n    }\n}\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#configure-tempo-in-grafana","title":"Configure Tempo in Grafana","text":"<ol> <li>Add Tempo data source in Grafana</li> <li>URL: <code>http://tempo:3100</code></li> <li>Enable trace to logs correlation with Loki</li> </ol>"},{"location":"dojo/modules/brown-belt/module-13-observability/#part-7-log-analysis-and-troubleshooting","title":"Part 7: Log Analysis and Troubleshooting","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#effective-log-queries-with-logql","title":"Effective Log Queries with LogQL","text":"<p>Find errors in the last hour: <pre><code>{namespace=\"fawkes-platform\"} |= \"ERROR\" | json | line_format \"{{.timestamp}} {{.level}} {{.message}}\"\n</code></pre></p> <p>Track deployment events: <pre><code>{job=\"deployment-controller\"} |= \"deployment\" | json | status=\"success\"\n</code></pre></p> <p>Analyze slow requests: <pre><code>{app=\"api-gateway\"} | json | duration &gt; 1000 | line_format \"Slow request: {{.path}} took {{.duration}}ms\"\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#creating-log-based-alerts","title":"Creating Log-Based Alerts","text":"<pre><code># Grafana alert from logs\n- alert: HighErrorRate\n  expr: |\n    sum(rate({namespace=\"fawkes-platform\"} |= \"ERROR\" [5m])) \n    &gt; 10\n  for: 5m\n  labels:\n    severity: warning\n  annotations:\n    summary: \"High error rate in platform logs\"\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#part-8-dashboarding-best-practices","title":"Part 8: Dashboarding Best Practices","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#dashboard-design-principles","title":"Dashboard Design Principles","text":"<ol> <li>Top-down approach: Overall health \u2192 Specific components</li> <li>Red method for services: Rate, Errors, Duration</li> <li>USE method for resources: Utilization, Saturation, Errors</li> <li>Actionable metrics: Every panel should inform decisions</li> <li>Consistent time ranges: Synchronize across panels</li> </ol>"},{"location":"dojo/modules/brown-belt/module-13-observability/#example-platform-health-dashboard-structure","title":"Example Platform Health Dashboard Structure","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Overall Platform Health (Single stat)      \u2502\n\u2502  \u25cf Cluster Status  \u25cf Deployments  \u25cf Alerts \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Deployment Freq.    \u2502 \u2502  Lead Time Trend  \u2502\n\u2502  (Time series)       \u2502 \u2502  (Time series)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Change Failure %    \u2502 \u2502  MTTR (Avg)       \u2502\n\u2502  (Gauge)             \u2502 \u2502  (Stat)           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Recent Deployments (Table)                 \u2502\n\u2502  Time | App | Env | Status | Duration       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Active Alerts (Table)                      \u2502\n\u2502  Severity | Alert | Time | Status           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#part-9-practical-exercise","title":"Part 9: Practical Exercise","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#exercise-complete-observability-implementation","title":"Exercise: Complete Observability Implementation","text":"<p>Objective: Implement end-to-end observability for a sample application deployed on Fawkes.</p> <p>Steps:</p> <ol> <li> <p>Deploy Sample Application <pre><code>kubectl apply -f exercises/sample-app/\n</code></pre></p> </li> <li> <p>Configure Application Metrics</p> </li> <li>Expose Prometheus metrics endpoint</li> <li>Add custom business metrics</li> <li> <p>Verify scraping in Prometheus</p> </li> <li> <p>Set Up Logging</p> </li> <li>Ensure structured JSON logs</li> <li>Verify logs appear in Loki</li> <li> <p>Create useful log queries</p> </li> <li> <p>Create Dashboard</p> </li> <li>Import base dashboard template</li> <li>Add custom panels for your app</li> <li> <p>Configure variables for filtering</p> </li> <li> <p>Configure Alerts</p> </li> <li>Create alert for high error rate</li> <li>Create alert for deployment failures</li> <li> <p>Test alert firing and resolution</p> </li> <li> <p>Implement Tracing</p> </li> <li>Add OpenTelemetry instrumentation</li> <li>Generate sample traces</li> <li> <p>Correlate traces with logs</p> </li> <li> <p>Measure DORA Metrics</p> </li> <li>Deploy multiple times</li> <li>Introduce a failure</li> <li>Calculate all four metrics</li> <li>Identify improvement opportunities</li> </ol> <p>Validation Checklist: - [ ] Application metrics visible in Prometheus - [ ] Logs searchable in Grafana/Loki - [ ] Dashboard shows real-time data - [ ] Alerts fire and resolve correctly - [ ] Traces show request flows - [ ] DORA metrics calculated and displayed</p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#part-10-advanced-topics","title":"Part 10: Advanced Topics","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#cost-optimization","title":"Cost Optimization","text":"<p>Reduce metric cardinality: <pre><code># Drop unnecessary labels\nmetric_relabel_configs:\n  - source_labels: [__name__]\n    regex: 'go_.*'\n    action: drop\n</code></pre></p> <p>Adjust retention: <pre><code># Shorter retention for high-volume metrics\n- record: aggregated:deployment_total:sum\n  expr: sum(rate(deployment_total[5m])) by (environment)\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#high-availability-setup","title":"High Availability Setup","text":"<pre><code># Prometheus HA with Thanos\nprometheus:\n  prometheusSpec:\n    replicas: 2\n    thanos:\n      image: quay.io/thanos/thanos:v0.32.0\n      objectStorageConfig:\n        secret: thanos-objstore-config\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#multi-cluster-monitoring","title":"Multi-Cluster Monitoring","text":"<pre><code># Use Thanos or Cortex for cross-cluster metrics\nhelm install thanos bitnami/thanos \\\n  --set query.enabled=true \\\n  --set storegateway.enabled=true\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#part-11-troubleshooting-common-issues","title":"Part 11: Troubleshooting Common Issues","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#prometheus-not-scraping-targets","title":"Prometheus Not Scraping Targets","text":"<p>Symptom: Targets show as \"DOWN\" in Prometheus</p> <p>Solution: <pre><code># Check ServiceMonitor configuration\nkubectl get servicemonitors -n monitoring\n\n# Verify service selector matches\nkubectl describe servicemonitor &lt;name&gt; -n monitoring\n\n# Check network policies\nkubectl get networkpolicies -n monitoring\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#high-cardinality-problems","title":"High Cardinality Problems","text":"<p>Symptom: Prometheus using excessive memory</p> <p>Solution: <pre><code># Identify high-cardinality metrics\ncurl http://localhost:9090/api/v1/status/tsdb | jq .\n\n# Drop or aggregate problematic metrics\n# Add to prometheus-values.yaml\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#missing-logs-in-loki","title":"Missing Logs in Loki","text":"<p>Symptom: No logs appearing in Grafana</p> <p>Solution: <pre><code># Check Promtail is running\nkubectl get pods -n monitoring -l app=promtail\n\n# Verify Promtail configuration\nkubectl logs -n monitoring -l app=promtail\n\n# Check Loki ingester\nkubectl logs -n monitoring -l app=loki -c ingester\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#part-12-summary-and-next-steps","title":"Part 12: Summary and Next Steps","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Observability is critical for platform reliability and DORA metrics</li> <li>The three pillars (metrics, logs, traces) provide complementary insights</li> <li>Automation of metric collection reduces manual work</li> <li>Dashboards should be actionable and inform decisions</li> <li>Alerting requires tuning to avoid fatigue</li> <li>DORA metrics drive continuous improvement</li> </ol>"},{"location":"dojo/modules/brown-belt/module-13-observability/#measuring-success","title":"Measuring Success","text":"<p>After completing this module, you should have: - \u2705 Working Prometheus + Grafana + Loki stack - \u2705 Custom dashboards for DORA metrics - \u2705 Configured alerts for platform health - \u2705 Application instrumentation for tracing - \u2705 Log aggregation and search capability - \u2705 Understanding of observability best practices</p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#continuous-improvement","title":"Continuous Improvement","text":"<p>Weekly Activities: - Review DORA metrics trends - Analyze alert patterns - Optimize slow queries - Update dashboards based on team feedback</p> <p>Monthly Activities: - Review and adjust alert thresholds - Archive old metrics data - Update documentation - Train team members on new features</p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#additional-resources","title":"Additional Resources","text":"<ul> <li>Prometheus Documentation</li> <li>Grafana Best Practices</li> <li>OpenTelemetry Specification</li> <li>DORA Research</li> <li>Google SRE Book - Monitoring</li> <li>Loki LogQL Documentation</li> </ul>"},{"location":"dojo/modules/brown-belt/module-13-observability/#module-assessment","title":"Module Assessment","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#knowledge-check-questions","title":"Knowledge Check Questions","text":"<ol> <li>What are the three pillars of observability?</li> <li>How do you calculate the Change Failure Rate?</li> <li>What's the difference between metrics and traces?</li> <li>When should you use Prometheus vs. Loki?</li> <li>What is metric cardinality and why does it matter?</li> <li>How do you correlate traces with logs in Grafana?</li> <li>What's the purpose of AlertManager's grouping?</li> <li>How can you reduce monitoring costs?</li> </ol>"},{"location":"dojo/modules/brown-belt/module-13-observability/#practical-assessment","title":"Practical Assessment","text":"<p>Complete the following tasks: 1. Deploy a complete monitoring stack 2. Create a custom dashboard with DORA metrics 3. Configure three meaningful alerts 4. Instrument an application with tracing 5. Write five useful LogQL queries 6. Generate a weekly DORA metrics report</p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#bonus-challenge","title":"Bonus Challenge","text":"<p>Implement a complete observability solution for a multi-service application that: - Tracks deployments across three environments - Correlates traces across microservices - Provides SLO/SLA dashboards - Alerts on DORA metric degradation - Exports metrics to external systems</p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#appendix-a-metric-examples-reference","title":"Appendix A: Metric Examples Reference","text":""},{"location":"dojo/modules/brown-belt/module-13-observability/#infrastructure-metrics","title":"Infrastructure Metrics","text":"<pre><code># Node CPU usage\n100 - (avg by (instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)\n\n# Node memory usage\n100 * (1 - node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)\n\n# Disk usage\n100 - (node_filesystem_avail_bytes / node_filesystem_size_bytes * 100)\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#kubernetes-metrics","title":"Kubernetes Metrics","text":"<pre><code># Pod restart rate\nrate(kube_pod_container_status_restarts_total[1h])\n\n# Deployment replicas available\nkube_deployment_status_replicas_available / kube_deployment_spec_replicas\n\n# Node readiness\nkube_node_status_condition{condition=\"Ready\",status=\"true\"}\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#application-metrics","title":"Application Metrics","text":"<pre><code># Request rate (RED method)\nsum(rate(http_requests_total[5m])) by (service)\n\n# Error rate\nsum(rate(http_requests_total{status=~\"5..\"}[5m])) / sum(rate(http_requests_total[5m]))\n\n# Request duration (p95)\nhistogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-13-observability/#appendix-b-dashboard-json-templates","title":"Appendix B: Dashboard JSON Templates","text":"<p>See the Fawkes repository for complete dashboard templates: - <code>dashboards/platform-overview.json</code> - <code>dashboards/dora-metrics.json</code> - <code>dashboards/application-health.json</code> - <code>dashboards/infrastructure.json</code></p>"},{"location":"dojo/modules/brown-belt/module-13-observability/#feedback-and-contributions","title":"Feedback and Contributions","text":"<p>Have feedback on this module? Found errors or want to suggest improvements?</p> <ul> <li>Open an issue: https://github.com/paruff/fawkes/issues</li> <li>Submit a PR: https://github.com/paruff/fawkes/pulls</li> <li>Join discussions: https://github.com/paruff/fawkes/discussions</li> </ul> <p>Module 5 Complete! \ud83c\udf89</p> <p>You now have the knowledge to implement comprehensive observability and measure DORA metrics for your Fawkes platform. Continue to Module 6 for advanced platform operations and troubleshooting.</p> <p>Next Module Preview: Module 6 - Platform Operations &amp; Advanced Troubleshooting</p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/","title":"Fawkes Dojo Module 14: DORA Metrics Deep Dive","text":""},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#module-overview","title":"\ud83c\udfaf Module Overview","text":"<p>Belt Level: \ud83d\udfe4 Brown Belt - Observability &amp; SRE Module: 2 of 4 (Brown Belt) Duration: 60 minutes Difficulty: Advanced Prerequisites:  - Module 2: DORA Metrics (White Belt) review recommended - Module 13: Observability complete - Understanding of Prometheus and Grafana - Familiarity with GitOps workflows</p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>By the end of this module, you will:</p> <ol> <li>\u2705 Calculate and track all four DORA metrics automatically</li> <li>\u2705 Build comprehensive DORA dashboards in Grafana</li> <li>\u2705 Implement metric collection across the entire delivery pipeline</li> <li>\u2705 Analyze trends and identify improvement opportunities</li> <li>\u2705 Benchmark against industry standards</li> <li>\u2705 Use metrics to drive platform improvements</li> <li>\u2705 Present DORA metrics to leadership effectively</li> </ol> <p>DORA Capabilities Addressed: - \u2713 All 4 Key Metrics (Deployment Frequency, Lead Time, MTTR, Change Failure Rate) - \u2713 Monitoring and Observability - \u2713 Data-Driven Decision Making</p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#part-1-dora-metrics-review-advanced-concepts","title":"\ud83d\udcd6 Part 1: DORA Metrics Review &amp; Advanced Concepts","text":""},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#the-four-key-metrics-refresher","title":"The Four Key Metrics (Refresher)","text":"Metric What It Measures Elite Performance Deployment Frequency How often you deploy Multiple per day Lead Time for Changes Commit \u2192 Production time &lt; 1 hour Change Failure Rate % of deployments causing failures 0-15% Mean Time to Restore Time to recover from failure &lt; 1 hour"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#why-these-four","title":"Why These Four?","text":"<p>Research shows these metrics are: - Predictive of organizational performance - Balanced between speed (DF, LT) and stability (CFR, MTTR) - Actionable - teams can directly improve them - Universal - apply across industries and tech stacks</p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#advanced-dora-concepts","title":"Advanced DORA Concepts","text":"<p>1. Metric Correlation</p> <p>Metrics don't exist in isolation:</p> <pre><code>High Deployment Frequency\n    \u2193\nSmaller batch sizes\n    \u2193\nLower Change Failure Rate\n    \u2193\nFaster Lead Time (less code per deploy)\n    \u2193\nBetter MTTR (easier to identify issues)\n</code></pre> <p>2. Team-Level vs Organization-Level</p> <ul> <li>Team-level: Track individual team performance</li> <li>Organization-level: Aggregate across all teams</li> <li>Service-level: Track per microservice/application</li> </ul> <p>3. Metric Distributions Matter</p> <p>Don't just track averages: - P50 (Median): Typical case - P95: Worst 5% of cases - P99: Outliers that hurt user experience</p> <p>Example: <pre><code>Lead Time:\n- Average: 2 hours\n- P50: 30 minutes \u2705 (Most deploys are fast)\n- P95: 8 hours \u274c (5% take too long - investigate why)\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#part-2-calculating-dora-metrics","title":"\ud83d\udd22 Part 2: Calculating DORA Metrics","text":""},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#metric-1-deployment-frequency","title":"Metric 1: Deployment Frequency","text":"<p>Definition: Number of deployments per time period</p> <p>Calculation: <pre><code>Deployment Frequency = Total Deployments / Time Period\n\nExample:\n- 150 deployments in 30 days\n- DF = 150 / 30 = 5 deployments per day \u2705 Elite\n</code></pre></p> <p>Data Sources: - ArgoCD sync events - GitOps repository commits - CI/CD pipeline completions - Kubernetes deployment events</p> <p>Prometheus Query: <pre><code># Count deployments per day\nsum(increase(argocd_app_sync_total{phase=\"Succeeded\"}[1d]))\n\n# Deployment frequency by application\nsum(rate(argocd_app_sync_total{phase=\"Succeeded\"}[7d])) by (name) * 86400\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#metric-2-lead-time-for-changes","title":"Metric 2: Lead Time for Changes","text":"<p>Definition: Time from code commit to running in production</p> <p>Calculation: <pre><code>Lead Time = Production Deployment Time - Commit Time\n\nExample:\n- Commit: 2025-10-10 14:00:00\n- Production: 2025-10-10 14:25:00\n- Lead Time: 25 minutes \u2705 Elite\n</code></pre></p> <p>Components: <pre><code>Total Lead Time = \n    Code Review Time +\n    CI Build Time +\n    Test Execution Time +\n    Security Scanning Time +\n    Artifact Creation Time +\n    Deployment Time +\n    Validation Time\n</code></pre></p> <p>Data Collection: <pre><code># Webhook receiver for Git commits\n@app.route('/webhook/commit', methods=['POST'])\ndef record_commit():\n    commit_sha = request.json['after']\n    commit_time = request.json['head_commit']['timestamp']\n\n    # Store in database\n    db.store_commit(commit_sha, commit_time)\n\n    return '', 200\n\n# Webhook receiver for deployments\n@app.route('/webhook/deploy', methods=['POST'])\ndef record_deployment():\n    commit_sha = request.json['revision']\n    deploy_time = datetime.utcnow()\n\n    # Calculate lead time\n    commit_time = db.get_commit_time(commit_sha)\n    lead_time = (deploy_time - commit_time).total_seconds()\n\n    # Send to Prometheus\n    lead_time_histogram.labels(app=app_name).observe(lead_time)\n\n    return '', 200\n</code></pre></p> <p>Prometheus Query: <pre><code># Average lead time (seconds)\navg(deployment_lead_time_seconds)\n\n# P95 lead time\nhistogram_quantile(0.95, sum(rate(deployment_lead_time_seconds_bucket[7d])) by (le))\n\n# Lead time by team\navg(deployment_lead_time_seconds) by (team)\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#metric-3-change-failure-rate","title":"Metric 3: Change Failure Rate","text":"<p>Definition: Percentage of deployments that result in failure</p> <p>Calculation: <pre><code>CFR = (Failed Deployments / Total Deployments) \u00d7 100\n\nExample:\n- Total deployments: 100\n- Failed deployments: 8\n- CFR = (8 / 100) \u00d7 100 = 8% \u2705 Elite\n</code></pre></p> <p>Defining \"Failure\": - Deployment rollback within 24 hours - Incident created within 24 hours of deployment - Deployment marked as failed in ArgoCD - Health checks fail post-deployment</p> <p>Data Collection: <pre><code>def calculate_change_failure_rate(timeframe_hours=24):\n    \"\"\"\n    Calculate CFR by correlating deployments with incidents\n    \"\"\"\n    deployments = get_deployments(since=timeframe_hours)\n    failures = 0\n\n    for deployment in deployments:\n        deploy_time = deployment['timestamp']\n\n        # Check for incidents within 24h\n        incidents = get_incidents(\n            since=deploy_time,\n            until=deploy_time + timedelta(hours=24)\n        )\n\n        # Check for rollbacks\n        rollback = get_rollback(\n            deployment_id=deployment['id'],\n            since=deploy_time,\n            until=deploy_time + timedelta(hours=24)\n        )\n\n        if incidents or rollback:\n            failures += 1\n\n    cfr = (failures / len(deployments)) * 100 if deployments else 0\n    return cfr\n</code></pre></p> <p>Prometheus Query: <pre><code># Change Failure Rate (%)\nsum(deployment_result{status=\"failed\"}) / sum(deployment_result) * 100\n\n# CFR by application\n(sum(deployment_result{status=\"failed\"}) by (app) / sum(deployment_result) by (app)) * 100\n\n# CFR trend over time\nsum(rate(deployment_result{status=\"failed\"}[7d])) / sum(rate(deployment_result[7d])) * 100\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#metric-4-mean-time-to-restore-mttr","title":"Metric 4: Mean Time to Restore (MTTR)","text":"<p>Definition: Average time to recover from a production failure</p> <p>Calculation: <pre><code>MTTR = Total Downtime / Number of Incidents\n\nExample:\n- 5 incidents in a month\n- Total downtime: 125 minutes\n- MTTR = 125 / 5 = 25 minutes \u2705 Elite\n</code></pre></p> <p>Data Collection: <pre><code># Incident lifecycle tracking\nclass Incident:\n    def __init__(self, id, severity):\n        self.id = id\n        self.severity = severity\n        self.detected_at = datetime.utcnow()\n        self.mitigated_at = None\n        self.resolved_at = None\n\n    def mitigate(self):\n        \"\"\"Service restored, but root cause not fixed\"\"\"\n        self.mitigated_at = datetime.utcnow()\n        ttm = (self.mitigated_at - self.detected_at).total_seconds()\n\n        # Time to Mitigate (what we really care about for MTTR)\n        mttr_histogram.labels(severity=self.severity).observe(ttm)\n\n    def resolve(self):\n        \"\"\"Root cause fixed, incident closed\"\"\"\n        self.resolved_at = datetime.utcnow()\n        ttr = (self.resolved_at - self.detected_at).total_seconds()\n\n        # Time to Resolve (total incident duration)\n        incident_duration_histogram.labels(severity=self.severity).observe(ttr)\n</code></pre></p> <p>Prometheus Query: <pre><code># Average MTTR (seconds)\navg(incident_duration_seconds)\n\n# MTTR by severity\navg(incident_duration_seconds) by (severity)\n\n# P95 MTTR (captures worst cases)\nhistogram_quantile(0.95, sum(rate(incident_duration_seconds_bucket[30d])) by (le))\n\n# MTTR trend\navg_over_time(incident_duration_seconds[7d])\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#part-3-building-the-ultimate-dora-dashboard","title":"\ud83d\udcca Part 3: Building the Ultimate DORA Dashboard","text":""},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#dashboard-architecture","title":"Dashboard Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              DORA Metrics Dashboard                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Executive Summary (Current vs Target)             \u2502 \u2502\n\u2502  \u2502  DF: 5/day (Elite) | LT: 45m (Elite)              \u2502 \u2502\n\u2502  \u2502  CFR: 8% (Elite)   | MTTR: 25m (Elite)            \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 Deployment   \u2502 \u2502 Lead Time    \u2502 \u2502 Change       \u2502   \u2502\n\u2502  \u2502 Frequency    \u2502 \u2502 Trend        \u2502 \u2502 Failure Rate \u2502   \u2502\n\u2502  \u2502 (Time Series)\u2502 \u2502 (Histogram)  \u2502 \u2502 (Gauge)      \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  MTTR Analysis (by Severity &amp; Trend)             \u2502  \u2502\n\u2502  \u2502  SEV1: 15m | SEV2: 1.5h | SEV3: 4h              \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Team Comparison (Leaderboard)                    \u2502  \u2502\n\u2502  \u2502  Team A: Elite | Team B: High | Team C: Medium  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Improvement Trends (30-day vs 90-day)           \u2502  \u2502\n\u2502  \u2502  DF: \u219115% | LT: \u219320% | CFR: \u219310% | MTTR: \u219325% \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#grafana-dashboard-json","title":"Grafana Dashboard JSON","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"DORA Metrics - Platform Performance\",\n    \"tags\": [\"dora\", \"metrics\", \"platform\"],\n    \"timezone\": \"utc\",\n    \"panels\": [\n      {\n        \"id\": 1,\n        \"title\": \"Deployment Frequency (per day)\",\n        \"type\": \"stat\",\n        \"targets\": [{\n          \"expr\": \"sum(rate(argocd_app_sync_total{phase='Succeeded'}[7d])) * 86400\",\n          \"legendFormat\": \"Deployments/Day\"\n        }],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                {\"value\": 0, \"color\": \"red\"},\n                {\"value\": 0.1, \"color\": \"yellow\"},\n                {\"value\": 1, \"color\": \"green\"}\n              ]\n            },\n            \"mappings\": [],\n            \"unit\": \"short\"\n          }\n        },\n        \"gridPos\": {\"h\": 8, \"w\": 6, \"x\": 0, \"y\": 0}\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Lead Time for Changes (P95)\",\n        \"type\": \"stat\",\n        \"targets\": [{\n          \"expr\": \"histogram_quantile(0.95, sum(rate(deployment_lead_time_seconds_bucket[7d])) by (le)) / 3600\",\n          \"legendFormat\": \"P95 Hours\"\n        }],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"thresholds\": {\n              \"steps\": [\n                {\"value\": 0, \"color\": \"green\"},\n                {\"value\": 1, \"color\": \"yellow\"},\n                {\"value\": 24, \"color\": \"red\"}\n              ]\n            },\n            \"unit\": \"h\"\n          }\n        },\n        \"gridPos\": {\"h\": 8, \"w\": 6, \"x\": 6, \"y\": 0}\n      },\n      {\n        \"id\": 3,\n        \"title\": \"Change Failure Rate\",\n        \"type\": \"gauge\",\n        \"targets\": [{\n          \"expr\": \"sum(rate(deployment_result{status='failed'}[7d])) / sum(rate(deployment_result[7d])) * 100\"\n        }],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"thresholds\": {\n              \"steps\": [\n                {\"value\": 0, \"color\": \"green\"},\n                {\"value\": 15, \"color\": \"yellow\"},\n                {\"value\": 30, \"color\": \"red\"}\n              ]\n            },\n            \"max\": 100,\n            \"unit\": \"percent\"\n          }\n        },\n        \"gridPos\": {\"h\": 8, \"w\": 6, \"x\": 12, \"y\": 0}\n      },\n      {\n        \"id\": 4,\n        \"title\": \"Mean Time to Restore\",\n        \"type\": \"stat\",\n        \"targets\": [{\n          \"expr\": \"avg(incident_duration_seconds) / 60\",\n          \"legendFormat\": \"Avg Minutes\"\n        }],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"thresholds\": {\n              \"steps\": [\n                {\"value\": 0, \"color\": \"green\"},\n                {\"value\": 60, \"color\": \"yellow\"},\n                {\"value\": 1440, \"color\": \"red\"}\n              ]\n            },\n            \"unit\": \"m\"\n          }\n        },\n        \"gridPos\": {\"h\": 8, \"w\": 6, \"x\": 18, \"y\": 0}\n      },\n      {\n        \"id\": 5,\n        \"title\": \"Deployment Frequency Trend\",\n        \"type\": \"graph\",\n        \"targets\": [{\n          \"expr\": \"sum(rate(argocd_app_sync_total{phase='Succeeded'}[1d])) by (name) * 86400\",\n          \"legendFormat\": \"{{name}}\"\n        }],\n        \"gridPos\": {\"h\": 8, \"w\": 12, \"x\": 0, \"y\": 8}\n      },\n      {\n        \"id\": 6,\n        \"title\": \"Lead Time Distribution\",\n        \"type\": \"heatmap\",\n        \"targets\": [{\n          \"expr\": \"sum(increase(deployment_lead_time_seconds_bucket[1h])) by (le)\",\n          \"format\": \"heatmap\",\n          \"legendFormat\": \"{{le}}\"\n        }],\n        \"gridPos\": {\"h\": 8, \"w\": 12, \"x\": 12, \"y\": 8}\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#part-4-hands-on-lab-complete-dora-implementation","title":"\ud83c\udfaf Part 4: Hands-On Lab - Complete DORA Implementation","text":""},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#objective","title":"Objective","text":"<p>Implement end-to-end DORA metrics collection and visualization for Fawkes platform.</p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#step-1-deploy-dora-metrics-collector","title":"Step 1: Deploy DORA Metrics Collector","text":"<p>Create <code>dora-collector.yaml</code>:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dora-collector\n  namespace: dojo-metrics\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: dora-collector\n  template:\n    metadata:\n      labels:\n        app: dora-collector\n    spec:\n      containers:\n      - name: collector\n        image: fawkes/dora-collector:v1.0\n        ports:\n        - containerPort: 8080\n          name: http\n        - containerPort: 9090\n          name: metrics\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: dora-db-credentials\n              key: url\n        - name: PROMETHEUS_URL\n          value: \"http://prometheus:9090\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"256Mi\"\n            cpu: \"200m\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: dora-collector\n  namespace: dojo-metrics\nspec:\n  selector:\n    app: dora-collector\n  ports:\n  - name: http\n    port: 80\n    targetPort: 8080\n  - name: metrics\n    port: 9090\n    targetPort: 9090\n---\napiVersion: monitoring.coreos.io/v1\nkind: ServiceMonitor\nmetadata:\n  name: dora-collector\n  namespace: dojo-metrics\nspec:\n  selector:\n    matchLabels:\n      app: dora-collector\n  endpoints:\n  - port: metrics\n    interval: 30s\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#step-2-configure-webhooks","title":"Step 2: Configure Webhooks","text":"<p>ArgoCD Webhook (for deployments):</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\n  namespace: argocd\ndata:\n  service.webhook.dora: |\n    url: http://dora-collector.dojo-metrics/webhook/deploy\n    headers:\n    - name: Content-Type\n      value: application/json\n\n  trigger.on-deployed: |\n    - when: app.status.operationState.phase in ['Succeeded']\n      send: [dora-deploy-succeeded]\n    - when: app.status.operationState.phase in ['Failed']\n      send: [dora-deploy-failed]\n\n  template.dora-deploy-succeeded: |\n    webhook:\n      dora:\n        method: POST\n        body: |\n          {\n            \"event\": \"deployment\",\n            \"status\": \"success\",\n            \"app\": \"{{.app.metadata.name}}\",\n            \"revision\": \"{{.app.status.sync.revision}}\",\n            \"timestamp\": \"{{.app.status.operationState.finishedAt}}\"\n          }\n\n  template.dora-deploy-failed: |\n    webhook:\n      dora:\n        method: POST\n        body: |\n          {\n            \"event\": \"deployment\",\n            \"status\": \"failed\",\n            \"app\": \"{{.app.metadata.name}}\",\n            \"revision\": \"{{.app.status.sync.revision}}\",\n            \"timestamp\": \"{{.app.status.operationState.finishedAt}}\"\n          }\n</code></pre> <p>Git Webhook (for commits):</p> <pre><code># Add webhook to GitHub repository\ncurl -X POST \\\n  -H \"Authorization: token ${GITHUB_TOKEN}\" \\\n  -H \"Content-Type: application/json\" \\\n  https://api.github.com/repos/myorg/myapp/hooks \\\n  -d '{\n    \"name\": \"web\",\n    \"active\": true,\n    \"events\": [\"push\"],\n    \"config\": {\n      \"url\": \"https://dora-collector.fawkes.io/webhook/commit\",\n      \"content_type\": \"json\"\n    }\n  }'\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#step-3-create-grafana-dashboard","title":"Step 3: Create Grafana Dashboard","text":"<pre><code># Import dashboard via API\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer ${GRAFANA_API_KEY}\" \\\n  http://grafana:3000/api/dashboards/db \\\n  -d @dora-dashboard.json\n\n# Or import via UI:\n# Grafana \u2192 Dashboards \u2192 Import \u2192 Upload dora-dashboard.json\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#step-4-validate-data-collection","title":"Step 4: Validate Data Collection","text":"<pre><code># Check if metrics are being collected\nkubectl port-forward -n dojo-metrics svc/dora-collector 9090:9090\n\n# Query Prometheus\ncurl \"http://localhost:9090/metrics\" | grep deployment\n\n# Expected output:\n# deployment_frequency_total{app=\"myapp\"} 150\n# deployment_lead_time_seconds_sum{app=\"myapp\"} 450000\n# deployment_lead_time_seconds_count{app=\"myapp\"} 150\n# deployment_result{app=\"myapp\",status=\"success\"} 142\n# deployment_result{app=\"myapp\",status=\"failed\"} 8\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#step-5-analyze-your-metrics","title":"Step 5: Analyze Your Metrics","text":"<p>Access Grafana dashboard and analyze:</p> <ol> <li>Deployment Frequency: Are you deploying daily? Multiple times per day?</li> <li>Lead Time: What's your P95? Where are the bottlenecks?</li> <li>CFR: Which deployments are failing? Common patterns?</li> <li>MTTR: How quickly do you recover? Can you automate more?</li> </ol>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#part-5-advanced-analysis-techniques","title":"\ud83d\udcc8 Part 5: Advanced Analysis Techniques","text":""},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#trend-analysis","title":"Trend Analysis","text":"<p>Week-over-week comparison: <pre><code># Current week deployment frequency\nsum(rate(argocd_app_sync_total{phase=\"Succeeded\"}[7d])) * 86400\n\n# Previous week\nsum(rate(argocd_app_sync_total{phase=\"Succeeded\"}[7d] offset 7d)) * 86400\n\n# % change\n(\n  sum(rate(argocd_app_sync_total{phase=\"Succeeded\"}[7d])) \n  - \n  sum(rate(argocd_app_sync_total{phase=\"Succeeded\"}[7d] offset 7d))\n) \n/ \nsum(rate(argocd_app_sync_total{phase=\"Succeeded\"}[7d] offset 7d)) \n* 100\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#correlation-analysis","title":"Correlation Analysis","text":"<p>Does higher deployment frequency correlate with lower CFR?</p> <pre><code>import pandas as pd\nfrom scipy.stats import pearsonr\n\n# Fetch data\ndf = pd.DataFrame({\n    'team': teams,\n    'deployment_freq': [get_deployment_freq(t) for t in teams],\n    'cfr': [get_cfr(t) for t in teams]\n})\n\n# Calculate correlation\ncorrelation, p_value = pearsonr(df['deployment_freq'], df['cfr'])\n\nprint(f\"Correlation: {correlation:.2f}\")\nprint(f\"P-value: {p_value:.4f}\")\n\n# Expected: Negative correlation (higher DF \u2192 lower CFR)\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#identifying-bottlenecks","title":"Identifying Bottlenecks","text":"<p>Lead time breakdown: <pre><code># Time in each stage\nsum(ci_stage_duration_seconds{stage=\"build\"}) by (app)\nsum(ci_stage_duration_seconds{stage=\"test\"}) by (app)\nsum(ci_stage_duration_seconds{stage=\"scan\"}) by (app)\nsum(ci_stage_duration_seconds{stage=\"deploy\"}) by (app)\n</code></pre></p> <p>Create waterfall chart to visualize: <pre><code>Commit \u2192 Build (3m) \u2192 Test (5m) \u2192 Scan (2m) \u2192 Deploy (1m) = 11m total\n         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588        \u2588\u2588\n\nBottleneck: Testing takes 45% of lead time\nAction: Parallelize tests or optimize slow tests\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#part-6-driving-improvements-with-data","title":"\ud83d\udcaa Part 6: Driving Improvements with Data","text":""},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#improvement-framework","title":"Improvement Framework","text":"<p>1. Measure Current State <pre><code>Current Performance (Last 30 days):\n- DF: 3 per day (High)\n- LT: 2 hours (High)\n- CFR: 12% (Elite)\n- MTTR: 45 minutes (Elite)\n\nOverall: High Performer\n</code></pre></p> <p>2. Set Targets <pre><code>3-Month Goals:\n- DF: 5 per day (Elite) - \u219167%\n- LT: 1 hour (Elite) - \u219350%\n- CFR: &lt;10% (Elite) - \u219317%\n- MTTR: &lt;30 min (Elite) - \u219333%\n</code></pre></p> <p>3. Identify Bottlenecks <pre><code>Lead Time Breakdown:\n- Code Review: 45 min (38%)\n- CI Build: 15 min (13%)\n- Testing: 35 min (29%)\n- Deployment: 25 min (21%)\n\nBiggest opportunity: Code Review (38% of lead time)\n</code></pre></p> <p>4. Implement Changes <pre><code>Actions:\n1. Reduce PR size (enforce &lt;300 lines)\n2. Pair programming for complex changes (faster review)\n3. Async code review tools (remove scheduling overhead)\n4. Auto-approve trivial changes (docs, formatting)\n\nExpected Impact: Reduce code review time by 50% (22min savings)\nNew Lead Time: 1h 5min \u2192 Target not quite met, but significant progress\n</code></pre></p> <p>5. Measure Impact <pre><code>After 30 days:\n- DF: 4.5 per day \u2705 (On track)\n- LT: 1h 15min \u26a0\ufe0f (Close to target)\n- CFR: 9% \u2705 (Target met!)\n- MTTR: 28 min \u2705 (Target exceeded!)\n\nContinue iteration...\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#part-7-knowledge-check","title":"\ud83c\udf93 Part 7: Knowledge Check","text":""},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#quiz-questions","title":"Quiz Questions","text":"<ol> <li>What does P95 lead time represent?</li> <li>[ ] Average lead time</li> <li>[ ] Fastest lead time</li> <li>[x] 95% of deployments complete within this time</li> <li> <p>[ ] Slowest lead time</p> </li> <li> <p>How do you calculate Change Failure Rate?</p> </li> <li>[ ] Failed deployments \u00d7 100</li> <li>[x] (Failed deployments / Total deployments) \u00d7 100</li> <li>[ ] Total deployments / Failed deployments</li> <li> <p>[ ] Failed deployments / Successful deployments</p> </li> <li> <p>What's the Elite benchmark for Deployment Frequency?</p> </li> <li>[ ] Once per week</li> <li>[ ] Once per day</li> <li>[x] Multiple times per day</li> <li> <p>[ ] Continuous deployment</p> </li> <li> <p>What should MTTR measure?</p> </li> <li>[ ] Time to write code</li> <li>[ ] Time to test</li> <li>[x] Time to restore service after incident</li> <li> <p>[ ] Time to deploy</p> </li> <li> <p>Why track team-level DORA metrics separately?</p> </li> <li>[ ] To rank teams</li> <li>[x] To identify improvement opportunities specific to each team</li> <li>[ ] To punish low performers</li> <li> <p>[ ] It's not necessary</p> </li> <li> <p>What does high DF + low CFR indicate?</p> </li> <li>[ ] Luck</li> <li>[x] Mature CI/CD with good quality gates</li> <li>[ ] Metrics are broken</li> <li> <p>[ ] Too much testing</p> </li> <li> <p>How often should you review DORA metrics?</p> </li> <li>[ ] Annually</li> <li>[ ] When problems occur</li> <li>[x] Weekly or monthly for trends</li> <li> <p>[ ] Once after implementation</p> </li> <li> <p>What's a good first step to improve lead time?</p> </li> <li>[ ] Skip testing</li> <li>[ ] Deploy less frequently</li> <li>[x] Identify and optimize the slowest stage</li> <li>[ ] Hire more people</li> </ol> <p>Answers: 1-C, 2-B, 3-C, 4-C, 5-B, 6-B, 7-C, 8-C</p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#part-8-module-summary-next-steps","title":"\ud83c\udfaf Part 8: Module Summary &amp; Next Steps","text":""},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#what-you-learned","title":"What You Learned","text":"<p>\u2705 Advanced Calculation: All 4 metrics with distributions \u2705 Data Collection: Webhooks, Prometheus, automation \u2705 Dashboards: Comprehensive Grafana visualizations \u2705 Analysis: Trends, correlations, bottlenecks \u2705 Improvement: Data-driven optimization framework \u2705 Presentation: Communicate metrics to leadership  </p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#dora-capabilities-achieved","title":"DORA Capabilities Achieved","text":"<ul> <li>\u2705 All 4 Key Metrics: Automated collection and tracking</li> <li>\u2705 Monitoring: Real-time visibility into delivery performance</li> <li>\u2705 Data-Driven: Metrics inform platform improvements</li> </ul>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Metrics must be actionable - If you can't improve it, don't measure it</li> <li>Track distributions, not just averages - P95/P99 reveal user experience</li> <li>Compare teams carefully - Context matters (legacy vs greenfield)</li> <li>Automate collection - Manual tracking doesn't scale</li> <li>Review regularly - Weekly trends reveal improvement opportunities</li> </ol>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#real-world-impact","title":"Real-World Impact","text":"<p>\"After implementing comprehensive DORA tracking: - Identified bottleneck: Code review was 40% of lead time - Action: Reduced PR size, added auto-approval for trivial changes - Result: Lead time decreased 35% in 60 days - Visibility: Leadership now tracks metrics quarterly - Culture: Teams compete (healthily) to improve metrics</p> <p>Metrics transformed from vanity to value.\" - Engineering Director, Tech Company</p>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#tools","title":"Tools","text":"<ul> <li>Four Keys - DORA metrics collection</li> <li>Sleuth - DORA tracking SaaS</li> <li>LinearB - Engineering intelligence</li> </ul>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#reading","title":"Reading","text":"<ul> <li>DORA State of DevOps Reports</li> <li>Accelerate - The research behind DORA</li> <li>DORA Metrics Guide</li> </ul>"},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#module-completion","title":"\ud83c\udfc5 Module Completion","text":""},{"location":"dojo/modules/brown-belt/module-14-dora-deep-dive/#assessment-checklist","title":"Assessment Checklist","text":"<ul> <li>[ ] Conceptual Understanding</li> <li>[ ] Calculate all 4 metrics correctly</li> <li>[ ] Understand P50/P95/P99 distributions</li> <li> <p>[ ] Explain metric correlations</p> </li> <li> <p>[ ] Practical Skills</p> </li> <li>[ ] Deploy DORA collector</li> <li>[ ] Configure webhooks</li> <li>[ ] Build Grafana dashboard</li> <li>[ ] Analyze trends   -</li> </ul>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/","title":"Fawkes Dojo Module 15: SLIs, SLOs, and Error Budgets","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#module-overview","title":"\ud83c\udfaf Module Overview","text":"<p>Belt Level: \ud83d\udfe4 Brown Belt - Observability &amp; SRE Module: 3 of 4 (Brown Belt) Duration: 60 minutes Difficulty: Advanced Prerequisites:  - Module 13: Observability complete - Module 14: DORA Metrics Deep Dive complete - Understanding of Prometheus and monitoring - Basic statistics knowledge (percentiles, averages)</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>By the end of this module, you will:</p> <ol> <li>\u2705 Define Service Level Indicators (SLIs) for your services</li> <li>\u2705 Create meaningful Service Level Objectives (SLOs)</li> <li>\u2705 Calculate and track error budgets</li> <li>\u2705 Implement SLI/SLO monitoring in Prometheus</li> <li>\u2705 Balance innovation velocity with reliability</li> <li>\u2705 Make data-driven decisions about service reliability</li> <li>\u2705 Communicate service health to stakeholders</li> </ol> <p>DORA Capabilities Addressed: - \u2713 Monitoring and Observability - \u2713 Service Reliability - \u2713 Data-Driven Decision Making - \u2713 Customer Focus</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#part-1-the-reliability-framework","title":"\ud83d\udcd6 Part 1: The Reliability Framework","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#why-slisslos-matter","title":"Why SLIs/SLOs Matter","text":"<p>Without SLIs/SLOs: <pre><code>Team: \"Our service is pretty reliable\"\nCustomer: \"It's been down twice this week!\"\nPM: \"Can we deploy this risky feature?\"\nOps: \"I don't know, maybe?\"\n\nResult:\n- No shared understanding of reliability\n- Arbitrary decisions about risk\n- Customer dissatisfaction\n- Team stress and conflict\n</code></pre></p> <p>With SLIs/SLOs: <pre><code>Team: \"We have 99.9% availability (SLO) and we're at 99.95%\"\nCustomer: \"Within SLO, acceptable\"\nPM: \"We have error budget remaining, let's deploy\"\nOps: \"Budget shows we can tolerate this risk\"\n\nResult:\n- Shared language for reliability\n- Data-driven risk decisions\n- Customer expectations managed\n- Team alignment\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#the-sre-hierarchy","title":"The SRE Hierarchy","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     User Happiness (Ultimate Goal)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Service Level Indicators (SLIs)   \u2502\n\u2502   What we measure (metrics)         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Service Level Objectives (SLOs)    \u2502\n\u2502  Targets for SLIs (promises)        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       Error Budget                   \u2502\n\u2502  Allowed unreliability (innovation)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#part-2-service-level-indicators-slis","title":"\ud83c\udfaf Part 2: Service Level Indicators (SLIs)","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#what-is-an-sli","title":"What is an SLI?","text":"<p>SLI: A carefully selected metric that represents user happiness</p> <p>Good SLI characteristics: - \u2705 User-centric (measures what users care about) - \u2705 Measurable (can be quantified) - \u2705 Actionable (team can improve it) - \u2705 Aggregatable (can combine across services)</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#common-sli-types","title":"Common SLI Types","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#1-availability-uptime","title":"1. Availability (Uptime)","text":"<p>Definition: Proportion of time service is operational</p> <pre><code># Availability SLI\nsum(up{service=\"myapp\"}) / count(up{service=\"myapp\"}) * 100\n\n# Example: 99.5% availability\n</code></pre> <p>User impact: \"Can I access the service?\"</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#2-latency-speed","title":"2. Latency (Speed)","text":"<p>Definition: Time to respond to requests</p> <pre><code># Latency SLI (p95)\nhistogram_quantile(0.95, \n  sum(rate(http_request_duration_seconds_bucket{service=\"myapp\"}[5m])) by (le)\n)\n\n# Example: p95 &lt; 200ms\n</code></pre> <p>User impact: \"How fast does it respond?\"</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#3-error-rate-correctness","title":"3. Error Rate (Correctness)","text":"<p>Definition: Proportion of requests that fail</p> <pre><code># Error rate SLI\nsum(rate(http_requests_total{service=\"myapp\",status=~\"5..\"}[5m]))\n/\nsum(rate(http_requests_total{service=\"myapp\"}[5m]))\n* 100\n\n# Example: 0.1% error rate\n</code></pre> <p>User impact: \"Does it work correctly?\"</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#4-throughput-capacity","title":"4. Throughput (Capacity)","text":"<p>Definition: Requests handled per unit time</p> <pre><code># Throughput SLI\nsum(rate(http_requests_total{service=\"myapp\"}[5m]))\n\n# Example: 1000 req/s\n</code></pre> <p>User impact: \"Can it handle my load?\"</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#5-durability-data-safety","title":"5. Durability (Data Safety)","text":"<p>Definition: Proportion of data successfully stored/retrieved</p> <pre><code># Durability SLI\nsum(successful_writes) / sum(total_writes) * 100\n\n# Example: 99.999% durability\n</code></pre> <p>User impact: \"Is my data safe?\"</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#selecting-slis-for-your-service","title":"Selecting SLIs for Your Service","text":"<p>Step 1: Identify User Journeys</p> <p>Example: E-commerce checkout</p> <pre><code>User Journey: Purchase Product\n1. Browse catalog\n2. Add to cart\n3. Enter payment\n4. Complete purchase\n5. Receive confirmation\n</code></pre> <p>Step 2: Map to SLIs</p> Journey Step SLI Target Why It Matters Browse catalog Latency p95 &lt; 300ms Slow browsing = abandoned Add to cart Availability 99.9% Can't shop if cart broken Enter payment Error rate &lt; 0.1% Payment errors = lost sales Complete purchase Latency p99 &lt; 1s Checkout must be fast Receive confirmation Availability 99.99% Legal requirement <p>Step 3: Prioritize</p> <p>Focus on 3-5 most critical SLIs: 1. Checkout error rate (revenue impact) 2. Checkout latency (abandonment risk) 3. Catalog availability (engagement)</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#part-3-service-level-objectives-slos","title":"\ud83d\udcca Part 3: Service Level Objectives (SLOs)","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#what-is-an-slo","title":"What is an SLO?","text":"<p>SLO: A target value or range for an SLI over a time window</p> <p>Format: <code>SLI \u2265 Target over Time Window</code></p> <p>Examples: - Availability \u2265 99.9% over 30 days - p95 latency \u2264 200ms over 7 days - Error rate &lt; 0.5% over 30 days</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#setting-good-slos","title":"Setting Good SLOs","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#rule-1-align-with-user-expectations","title":"Rule 1: Align with User Expectations","text":"<p>Bad: \"5 nines (99.999%) because we're perfectionists\" Good: \"99.9% because user research shows this meets needs\"</p> <p>User tolerance varies by context: - Search engine: p95 &lt; 100ms (users expect instant) - Banking transfer: p95 &lt; 2s (users tolerate some delay) - Batch report: p95 &lt; 30s (users expect processing time)</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#rule-2-start-conservative-tighten-over-time","title":"Rule 2: Start Conservative, Tighten Over Time","text":"<p>Initial SLO: 99.5% availability - Monitor for 3 months - Actual: 99.7% - Tighten: 99.6% (between actual and previous)</p> <p>Why: Easier to exceed SLO and tighten than miss and relax</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#rule-3-fewer-is-better","title":"Rule 3: Fewer is Better","text":"<p>Bad: 15 SLOs for one service Good: 3-5 SLOs that matter most</p> <p>Example: <pre><code>Service: Payment API\nSLOs:\n1. Availability \u2265 99.95% (30 days)\n2. p95 latency \u2264 500ms (7 days)\n3. Error rate &lt; 0.1% (30 days)\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#rule-4-document-your-slos","title":"Rule 4: Document Your SLOs","text":"<pre><code># slo-definition.yaml\nservice: payment-api\nslos:\n  - name: availability\n    description: \"Proportion of successful requests\"\n    type: availability\n    target: 99.95\n    window: 30d\n    sli: |\n      sum(http_requests_total{status!~\"5..\"}) \n      / sum(http_requests_total) * 100\n\n  - name: latency\n    description: \"95th percentile response time\"\n    type: latency\n    target: 500ms\n    window: 7d\n    sli: |\n      histogram_quantile(0.95,\n        sum(rate(http_duration_bucket[5m])) by (le)\n      )\n\n  - name: error_rate\n    description: \"Proportion of failed requests\"\n    type: error_rate\n    target: 0.1\n    window: 30d\n    sli: |\n      sum(rate(http_requests_total{status=~\"5..\"}[5m]))\n      / sum(rate(http_requests_total[5m])) * 100\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#multi-window-slos","title":"Multi-Window SLOs","text":"<p>Track SLOs over different time windows:</p> <pre><code>Service: API\nSLO: 99.9% availability\n\nWindows:\n- 1 hour:  99.99% \u2705 (shorter window, stricter)\n- 1 day:   99.95% \u2705\n- 7 days:  99.92% \u2705\n- 30 days: 99.91% \u2705 (meets SLO)\n</code></pre> <p>Benefit: Early warning system - Hour/day violations = potential trend - 30-day still met = no customer impact yet</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#part-4-error-budgets","title":"\ud83d\udcb0 Part 4: Error Budgets","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#what-is-an-error-budget","title":"What is an Error Budget?","text":"<p>Error Budget: Allowed unreliability based on SLO</p> <p>Formula: <code>Error Budget = 100% - SLO</code></p> <p>Example: <pre><code>SLO: 99.9% availability\nError Budget: 0.1% (100% - 99.9%)\n\nIn a 30-day month:\n- Total time: 30 days = 43,200 minutes\n- Error budget: 0.1% \u00d7 43,200 = 43.2 minutes\n- Allowed downtime: ~43 minutes per month\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#error-budget-as-currency","title":"Error Budget as Currency","text":"<p>Think of error budget as innovation currency:</p> <pre><code>Monthly Error Budget: 43 minutes\n\nSpent on:\n- Planned maintenance: 10 minutes\n- Feature deploy issues: 15 minutes\n- Infrastructure failure: 8 minutes\n- Security patching: 5 minutes\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nTotal spent: 38 minutes\nRemaining: 5 minutes (healthy) \u2705\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#burn-rate","title":"Burn Rate","text":"<p>Burn Rate: How fast you're consuming error budget</p> <p>Formula: <code>Burn Rate = (Error Rate / Error Budget) \u00d7 Time Window</code></p> <p>Example: <pre><code>Current error rate: 0.5%\nError budget: 0.1%\nBurn rate: 0.5% / 0.1% = 5x\n\nAt this rate:\n- 30-day budget consumed in 6 days\n- Action required! \ud83d\udea8\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#error-budget-policies","title":"Error Budget Policies","text":"<p>Define policies for budget exhaustion:</p> <pre><code>error_budget_policy:\n  - condition: \"50% remaining\"\n    action: \"Continue normal operations\"\n\n  - condition: \"25% remaining\"\n    action: \n      - \"Freeze non-critical feature deploys\"\n      - \"Increase monitoring\"\n      - \"Review recent changes\"\n\n  - condition: \"10% remaining\"\n    action:\n      - \"Freeze ALL feature deploys\"\n      - \"Focus on reliability improvements\"\n      - \"Daily team review\"\n      - \"Incident commander assigned\"\n\n  - condition: \"0% remaining (exhausted)\"\n    action:\n      - \"Complete deploy freeze\"\n      - \"Root cause analysis required\"\n      - \"Reliability sprint\"\n      - \"Executive notification\"\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#part-5-hands-on-lab-implementing-slisslos","title":"\ud83d\udee0\ufe0f Part 5: Hands-On Lab - Implementing SLIs/SLOs","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#step-1-define-slis","title":"Step 1: Define SLIs","text":"<p>Create <code>sli-definitions.yaml</code>:</p> <pre><code># Service: payment-api\nslis:\n  # Availability SLI\n  - name: availability\n    description: \"Percentage of successful HTTP requests\"\n    query: |\n      sum(rate(http_requests_total{service=\"payment-api\",status!~\"5..\"}[5m]))\n      /\n      sum(rate(http_requests_total{service=\"payment-api\"}[5m]))\n      * 100\n    unit: percent\n\n  # Latency SLI (p95)\n  - name: latency_p95\n    description: \"95th percentile HTTP request duration\"\n    query: |\n      histogram_quantile(0.95,\n        sum(rate(http_request_duration_seconds_bucket{service=\"payment-api\"}[5m])) by (le)\n      ) * 1000\n    unit: milliseconds\n\n  # Latency SLI (p99)\n  - name: latency_p99\n    description: \"99th percentile HTTP request duration\"\n    query: |\n      histogram_quantile(0.99,\n        sum(rate(http_request_duration_seconds_bucket{service=\"payment-api\"}[5m])) by (le)\n      ) * 1000\n    unit: milliseconds\n\n  # Error Rate SLI\n  - name: error_rate\n    description: \"Percentage of failed HTTP requests\"\n    query: |\n      sum(rate(http_requests_total{service=\"payment-api\",status=~\"5..\"}[5m]))\n      /\n      sum(rate(http_requests_total{service=\"payment-api\"}[5m]))\n      * 100\n    unit: percent\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#step-2-define-slos","title":"Step 2: Define SLOs","text":"<p>Create <code>slo-definitions.yaml</code>:</p> <pre><code># Service: payment-api\nslos:\n  # Availability SLO\n  - name: availability_slo\n    sli: availability\n    objective: 99.9\n    window: 30d\n    description: \"Service available 99.9% of the time over 30 days\"\n    alert_threshold: 99.8  # Alert when approaching SLO breach\n\n  # Latency SLO (p95)\n  - name: latency_p95_slo\n    sli: latency_p95\n    objective: 500  # milliseconds\n    window: 7d\n    description: \"95% of requests complete within 500ms over 7 days\"\n    alert_threshold: 600\n\n  # Error Rate SLO\n  - name: error_rate_slo\n    sli: error_rate\n    objective: 0.1  # 0.1% error rate\n    window: 30d\n    description: \"Error rate below 0.1% over 30 days\"\n    alert_threshold: 0.15\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#step-3-calculate-error-budget","title":"Step 3: Calculate Error Budget","text":"<p>Create <code>error-budget-calculator.yaml</code>:</p> <pre><code># Prometheus recording rules for error budget\ngroups:\n  - name: error_budget\n    interval: 1m\n    rules:\n      # Availability error budget\n      - record: error_budget:availability:remaining_percent\n        expr: |\n          (\n            100 - \n            (\n              (100 - slo:availability:30d) - \n              (100 - sli:availability:30d)\n            ) / (100 - slo:availability:30d) * 100\n          )\n\n      # Availability error budget consumed\n      - record: error_budget:availability:consumed_percent\n        expr: |\n          100 - error_budget:availability:remaining_percent\n\n      # Availability burn rate (1 hour)\n      - record: error_budget:availability:burn_rate_1h\n        expr: |\n          (100 - sli:availability:1h) / (100 - slo:availability:30d)\n\n      # Availability burn rate (6 hours)\n      - record: error_budget:availability:burn_rate_6h\n        expr: |\n          (100 - sli:availability:6h) / (100 - slo:availability:30d)\n\n      # Error rate error budget\n      - record: error_budget:error_rate:remaining_percent\n        expr: |\n          (\n            1 - (sli:error_rate:30d / slo:error_rate:30d)\n          ) * 100\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#step-4-create-prometheus-recording-rules","title":"Step 4: Create Prometheus Recording Rules","text":"<p>Create <code>prometheus-rules.yaml</code>:</p> <pre><code>groups:\n  - name: sli_recording\n    interval: 30s\n    rules:\n      # Availability SLI (real-time)\n      - record: sli:availability:current\n        expr: |\n          sum(rate(http_requests_total{service=\"payment-api\",status!~\"5..\"}[1m]))\n          /\n          sum(rate(http_requests_total{service=\"payment-api\"}[1m]))\n          * 100\n\n      # Availability SLI (1 hour)\n      - record: sli:availability:1h\n        expr: |\n          sum(rate(http_requests_total{service=\"payment-api\",status!~\"5..\"}[1h]))\n          /\n          sum(rate(http_requests_total{service=\"payment-api\"}[1h]))\n          * 100\n\n      # Availability SLI (30 days)\n      - record: sli:availability:30d\n        expr: |\n          sum(rate(http_requests_total{service=\"payment-api\",status!~\"5..\"}[30d]))\n          /\n          sum(rate(http_requests_total{service=\"payment-api\"}[30d]))\n          * 100\n\n      # Error rate SLI (30 days)\n      - record: sli:error_rate:30d\n        expr: |\n          sum(rate(http_requests_total{service=\"payment-api\",status=~\"5..\"}[30d]))\n          /\n          sum(rate(http_requests_total{service=\"payment-api\"}[30d]))\n          * 100\n\n      # Latency p95 SLI (7 days)\n      - record: sli:latency_p95:7d\n        expr: |\n          histogram_quantile(0.95,\n            sum(rate(http_request_duration_seconds_bucket{service=\"payment-api\"}[7d])) by (le)\n          ) * 1000\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#step-5-implement-slo-alerts","title":"Step 5: Implement SLO Alerts","text":"<p>Create <code>slo-alerts.yaml</code>:</p> <pre><code>groups:\n  - name: slo_alerts\n    rules:\n      # Fast burn alert (1 hour window)\n      - alert: ErrorBudgetBurnRateCritical\n        expr: |\n          error_budget:availability:burn_rate_1h &gt; 14.4\n          and\n          error_budget:availability:burn_rate_6h &gt; 6\n        for: 5m\n        labels:\n          severity: critical\n          slo: availability\n        annotations:\n          summary: \"Critical burn rate - will exhaust budget in 2 days\"\n          description: \"Error budget burning at {{ $value }}x normal rate\"\n\n      # Medium burn alert (6 hour window)\n      - alert: ErrorBudgetBurnRateHigh\n        expr: |\n          error_budget:availability:burn_rate_6h &gt; 6\n          and\n          error_budget:availability:remaining_percent &lt; 50\n        for: 30m\n        labels:\n          severity: warning\n          slo: availability\n        annotations:\n          summary: \"High burn rate with low remaining budget\"\n          description: \"{{ $value }}% budget remaining, burning fast\"\n\n      # Budget exhausted\n      - alert: ErrorBudgetExhausted\n        expr: |\n          error_budget:availability:remaining_percent &lt;= 0\n        for: 5m\n        labels:\n          severity: critical\n          slo: availability\n        annotations:\n          summary: \"Error budget completely exhausted\"\n          description: \"Deploy freeze in effect per error budget policy\"\n\n      # SLO approaching breach\n      - alert: SLOApproachingBreach\n        expr: |\n          sli:availability:30d &lt; 99.8  # 0.1% below SLO of 99.9%\n        for: 1h\n        labels:\n          severity: warning\n          slo: availability\n        annotations:\n          summary: \"Availability SLO approaching breach\"\n          description: \"Current: {{ $value }}%, SLO: 99.9%\"\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#step-6-create-grafana-dashboard","title":"Step 6: Create Grafana Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"SLO Dashboard - Payment API\",\n    \"panels\": [\n      {\n        \"title\": \"Availability SLO Status\",\n        \"type\": \"gauge\",\n        \"targets\": [{\n          \"expr\": \"sli:availability:30d\"\n        }],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"thresholds\": {\n              \"steps\": [\n                {\"value\": 0, \"color\": \"red\"},\n                {\"value\": 99.8, \"color\": \"yellow\"},\n                {\"value\": 99.9, \"color\": \"green\"}\n              ]\n            },\n            \"min\": 99,\n            \"max\": 100,\n            \"unit\": \"percent\"\n          }\n        }\n      },\n      {\n        \"title\": \"Error Budget Remaining\",\n        \"type\": \"graph\",\n        \"targets\": [{\n          \"expr\": \"error_budget:availability:remaining_percent\",\n          \"legendFormat\": \"Remaining\"\n        }, {\n          \"expr\": \"error_budget:availability:consumed_percent\",\n          \"legendFormat\": \"Consumed\"\n        }]\n      },\n      {\n        \"title\": \"Burn Rate (Last Hour)\",\n        \"type\": \"stat\",\n        \"targets\": [{\n          \"expr\": \"error_budget:availability:burn_rate_1h\"\n        }],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"thresholds\": {\n              \"steps\": [\n                {\"value\": 0, \"color\": \"green\"},\n                {\"value\": 5, \"color\": \"yellow\"},\n                {\"value\": 10, \"color\": \"red\"}\n              ]\n            }\n          }\n        }\n      },\n      {\n        \"title\": \"SLI vs SLO (30 days)\",\n        \"type\": \"timeseries\",\n        \"targets\": [{\n          \"expr\": \"sli:availability:30d\",\n          \"legendFormat\": \"Actual\"\n        }, {\n          \"expr\": \"99.9\",\n          \"legendFormat\": \"SLO (99.9%)\"\n        }]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#part-6-advanced-error-budget-management","title":"\ud83d\udcc8 Part 6: Advanced Error Budget Management","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#multi-service-error-budgets","title":"Multi-Service Error Budgets","text":"<p>Aggregate error budgets across microservices:</p> <pre><code># Overall platform error budget\navg(error_budget:availability:remaining_percent{service=~\".*-api\"})\n\n# Worst performing service\nbottomk(1, error_budget:availability:remaining_percent)\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#error-budget-attribution","title":"Error Budget Attribution","text":"<p>Track what consumed your budget:</p> <pre><code># Error budget breakdown\nerror_budget_consumption:\n  total_consumed: 35%\n  breakdown:\n    - cause: \"Database outage\"\n      percentage: 20%\n      duration: \"15 minutes\"\n      date: \"2025-10-01\"\n\n    - cause: \"Bad deployment (v2.1.0)\"\n      percentage: 10%\n      duration: \"8 minutes\"\n      date: \"2025-10-08\"\n\n    - cause: \"DDoS attack\"\n      percentage: 5%\n      duration: \"4 minutes\"\n      date: \"2025-10-12\"\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#error-budget-forecasting","title":"Error Budget Forecasting","text":"<p>Predict when budget will exhaust:</p> <pre><code># Simple linear forecast\ndef forecast_budget_exhaustion(current_burn_rate, remaining_budget):\n    \"\"\"\n    Predict days until error budget exhausted\n\n    Args:\n        current_burn_rate: Current burn rate (multiplier)\n        remaining_budget: Remaining budget (percentage)\n\n    Returns:\n        Days until exhaustion\n    \"\"\"\n    if current_burn_rate &lt;= 0:\n        return float('inf')  # Never exhausts\n\n    # Days in 30-day window\n    days_in_window = 30\n\n    # Expected daily budget consumption at 1x burn rate\n    daily_budget = 100 / days_in_window\n\n    # Actual daily consumption at current burn rate\n    actual_daily = daily_budget * current_burn_rate\n\n    # Days until exhaustion\n    days_remaining = remaining_budget / actual_daily\n\n    return days_remaining\n\n# Example\nburn_rate = 5  # 5x normal\nremaining = 30  # 30% budget left\n\ndays = forecast_budget_exhaustion(burn_rate, remaining)\nprint(f\"Budget exhausted in {days:.1f} days\")\n# Output: Budget exhausted in 1.8 days\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#part-7-slo-driven-decision-making","title":"\ud83d\udca1 Part 7: SLO-Driven Decision Making","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#scenario-1-should-we-deploy-this-feature","title":"Scenario 1: Should We Deploy This Feature?","text":"<pre><code>Feature: New payment method integration\nRisk: Medium (touches critical path)\nError Budget Remaining: 60%\n\nDecision Framework:\n1. Check error budget: 60% &gt; 25% \u2705\n2. Review recent burn rate: 1.2x (normal) \u2705\n3. Check deployment time: Off-peak hours \u2705\n4. Rollback plan: Yes \u2705\n\nDecision: DEPLOY\nRationale: Sufficient budget, normal burn rate, low-risk timing\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#scenario-2-should-we-continue-this-deployment","title":"Scenario 2: Should We Continue This Deployment?","text":"<pre><code>Feature: UI redesign (v3.0)\nDeployed: 30 minutes ago\nError Budget Remaining: 15% (was 40%)\nBurn Rate: 25x (critical)\n\nDecision Framework:\n1. Budget consumption: 25% in 30 min \ud83d\udea8\n2. Projected exhaustion: &lt;2 hours \ud83d\udea8\n3. User impact: High (errors visible) \ud83d\udea8\n4. Rollback available: Yes \u2705\n\nDecision: IMMEDIATE ROLLBACK\nRationale: Critical burn rate will exhaust budget\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#scenario-3-should-we-focus-on-reliability","title":"Scenario 3: Should We Focus on Reliability?","text":"<pre><code>Current State:\n- Error Budget: 5% remaining\n- Days left in window: 10 days\n- Recent deploys: 8 feature releases\n- Incidents: 3 in last week\n\nDecision Framework:\n1. Budget health: Critical (&lt;10%) \ud83d\udea8\n2. Trend: Worsening (3 incidents/week) \ud83d\udea8\n3. Time remaining: 33% of window left\n4. Feature pressure: High demand from PM\n\nDecision: RELIABILITY SPRINT\nActions:\n- Freeze feature deploys for 10 days\n- Focus team on reliability improvements\n- Daily review of metrics\n- Root cause analysis for incidents\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#part-8-practical-exercise","title":"\ud83c\udfaf Part 8: Practical Exercise","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#exercise-complete-slo-implementation","title":"Exercise: Complete SLO Implementation","text":"<p>Objective: Implement full SLI/SLO/Error Budget system for a service</p> <p>Scenario: You manage an API service that handles user authentication</p> <p>Requirements:</p> <ol> <li>Define 3 SLIs</li> <li>Availability</li> <li>Latency (p95 and p99)</li> <li> <p>Error rate</p> </li> <li> <p>Set SLOs</p> </li> <li>Based on user requirements</li> <li>Document reasoning</li> <li> <p>Include alert thresholds</p> </li> <li> <p>Calculate Error Budgets</p> </li> <li>Convert SLOs to error budgets</li> <li>Define burn rate alerts</li> <li> <p>Create exhaustion policies</p> </li> <li> <p>Implement Monitoring</p> </li> <li>Prometheus recording rules</li> <li>AlertManager rules</li> <li> <p>Grafana dashboard</p> </li> <li> <p>Document Decision Framework</p> </li> <li>When to deploy</li> <li>When to rollback</li> <li>When to freeze deploys</li> </ol> <p>Starter Template:</p> <pre><code># slo-config.yaml\nservice: auth-api\ndescription: \"User authentication service\"\n\nslis:\n  - name: availability\n    # TODO: Define SLI query\n\n  - name: latency_p95\n    # TODO: Define SLI query\n\n  - name: error_rate\n    # TODO: Define SLI query\n\nslos:\n  - name: availability_slo\n    sli: availability\n    objective: ???  # TODO: Set target\n    window: 30d\n    reasoning: \"???\"  # TODO: Document why\n\n  # TODO: Add latency and error rate SLOs\n\nerror_budget_policy:\n  # TODO: Define policies for budget consumption\n</code></pre> <p>Validation Criteria: - [ ] 3 SLIs defined with Prometheus queries - [ ] 3 SLOs set with clear reasoning - [ ] Error budgets calculated correctly - [ ] Recording rules implemented - [ ] Alert rules configured - [ ] Dashboard created and functional - [ ] Decision framework documented - [ ] Tested with simulated incidents</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#part-9-knowledge-check","title":"\ud83c\udf93 Part 9: Knowledge Check","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#quiz-questions","title":"Quiz Questions","text":"<ol> <li>What is an SLI?</li> <li>[ ] A promise to users about reliability</li> <li>[x] A metric that indicates user happiness</li> <li>[ ] The allowed unreliability</li> <li> <p>[ ] A dashboard panel</p> </li> <li> <p>What is an SLO?</p> </li> <li>[x] A target value for an SLI over a time window</li> <li>[ ] A metric collection system</li> <li>[ ] An error budget calculation</li> <li> <p>[ ] A monitoring tool</p> </li> <li> <p>How is error budget calculated?</p> </li> <li>[ ] 100% - SLI</li> <li>[x] 100% - SLO</li> <li>[ ] SLO - SLI</li> <li> <p>[ ] SLI - SLO</p> </li> <li> <p>What does a burn rate of 5x mean?</p> </li> <li>[ ] Service is 5x faster</li> <li>[ ] 5 errors per minute</li> <li>[x] Consuming error budget 5x faster than normal</li> <li> <p>[ ] 5% error rate</p> </li> <li> <p>When should you freeze feature deploys?</p> </li> <li>[ ] Never, always ship features</li> <li>[ ] Only during incidents</li> <li>[x] When error budget is critically low (&lt;10%)</li> <li> <p>[ ] Every Friday</p> </li> <li> <p>What's a good starting point for SLOs?</p> </li> <li>[ ] 100% (perfection)</li> <li>[ ] 50% (average)</li> <li>[x] Slightly below current performance</li> <li> <p>[ ] Industry average</p> </li> <li> <p>How many SLOs should a service have?</p> </li> <li>[ ] Exactly 1</li> <li>[ ] At least 10</li> <li>[x] 3-5 most critical metrics</li> <li> <p>[ ] One per feature</p> </li> <li> <p>What's the purpose of multi-window SLOs?</p> </li> <li>[ ] Confuse people with more metrics</li> <li>[ ] Show off monitoring capabilities</li> <li>[x] Provide early warning of SLO violations</li> <li>[ ] Meet compliance requirements</li> </ol> <p>Answers: 1-B, 2-A, 3-B, 4-C, 5-C, 6-C, 7-C, 8-C</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#part-10-module-summary-next-steps","title":"\ud83c\udfaf Part 10: Module Summary &amp; Next Steps","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#what-you-learned","title":"What You Learned","text":"<p>\u2705 SLIs: User-centric metrics that indicate happiness \u2705 SLOs: Targets for SLIs that balance reliability and innovation \u2705 Error Budgets: Allowed unreliability enabling risk-taking \u2705 Burn Rates: Speed of error budget consumption \u2705 SLO-Driven Decisions: Data-driven deployment and reliability choices \u2705 Implementation: Prometheus, recording rules, alerts, dashboards</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>SLOs create shared language - Teams align on reliability</li> <li>Error budgets enable innovation - Spend budget on features</li> <li>Measure what users care about - SLIs should reflect user experience</li> <li>Start conservative - Easier to tighten than loosen SLOs</li> <li>Fewer is better - 3-5 well-chosen SLOs beat 20 mediocre ones</li> <li>Burn rate matters - Track how fast you're consuming budget</li> <li>Use data to decide - Deploy when budget allows, freeze when exhausted</li> </ol>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#real-world-impact","title":"Real-World Impact","text":"<p>\"After implementing SLIs/SLOs/Error Budgets: - Deployment confidence: 70% \u2192 95% (data-driven decisions) - Reliability: 99.5% \u2192 99.9% (clear targets) - Innovation velocity: 30% increase (error budget enables risk) - Team alignment: Dramatically improved (shared language) - Customer satisfaction: NPS +20 points (met expectations) - Incident response: Faster (clear SLO breach alerts)</p> <p>We transformed from arguing about reliability to managing it scientifically.\" - Engineering Director, SaaS Platform</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#books","title":"Books","text":"<ul> <li>Site Reliability Engineering - Google (free online)</li> <li>The Site Reliability Workbook - Google</li> <li>Implementing Service Level Objectives - Alex Hidalgo</li> </ul>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#tools","title":"Tools","text":"<ul> <li>Sloth - SLO generator for Prometheus</li> <li>Pyrra - SLO tracking</li> <li>OpenSLO - SLO specification standard</li> </ul>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#learning-resources","title":"Learning Resources","text":"<ul> <li>Google SRE - SLO Chapter</li> <li>Embracing Risk</li> <li>SLO Workshop</li> </ul>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#module-completion","title":"\ud83c\udfc5 Module Completion","text":""},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#assessment-checklist","title":"Assessment Checklist","text":"<ul> <li>[ ] Conceptual Understanding</li> <li>[ ] Explain SLIs, SLOs, error budgets</li> <li>[ ] Calculate burn rates</li> <li> <p>[ ] Understand SLO-driven decisions</p> </li> <li> <p>[ ] Practical Skills</p> </li> <li>[ ] Define SLIs for services</li> <li>[ ] Set appropriate SLOs</li> <li>[ ] Implement monitoring</li> <li>[ ] Create dashboards</li> <li> <p>[ ] Configure alerts</p> </li> <li> <p>[ ] Hands-On Lab</p> </li> <li>[ ] Complete SLO implementation</li> <li>[ ] Recording rules working</li> <li>[ ] Alerts configured</li> <li> <p>[ ] Dashboard functional</p> </li> <li> <p>[ ] Quiz</p> </li> <li>[ ] Score 80% or higher (6/8 questions)</li> </ul>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#certification-credit","title":"Certification Credit","text":"<p>Upon completion, you earn: - 10 points toward Brown Belt certification (75% complete) - Badge: \"SLO Architect\" - Skill Unlocked: Service Reliability Engineering</p>"},{"location":"dojo/modules/brown-belt/module-15-slis-slos/#brown-belt-progress","title":"\ud83c\udf96\ufe0f Brown Belt Progress","text":"<pre><code>Brown Belt: Observability &amp; SRE\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nModule 13: Observability          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 25% \u2713\nModule 14: DORA Metrics           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 50% \u2713\nModule 15: SLIs/SLOs/Budgets      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 75% \u2713\nModule 16: Incident Management    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n</code></pre> <p>Next Module Preview: Module 16 - Advanced Incident Management (Postmortems, chaos engineering, MTTR optimization)</p> <p>Fawkes Dojo - Where Platform Engineers Are Forged Version 1.0 | Last Updated: October 2025 License: MIT | https://github.com/paruff/fawkes</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/","title":"Fawkes Dojo Module 16: Incident Management (Advanced)","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#module-overview","title":"\ud83c\udfaf Module Overview","text":"<p>Belt Level: \ud83d\udfe4 Brown Belt - Observability &amp; SRE (FINAL MODULE) Module: 4 of 4 (Brown Belt) Duration: 60 minutes Difficulty: Advanced Prerequisites:  - Module 12: Rollback &amp; Incident Response complete - Module 13: Observability complete - Module 14: DORA Metrics Deep Dive complete - Module 15: SLIs, SLOs, and Error Budgets complete</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>By the end of this module, you will:</p> <ol> <li>\u2705 Implement advanced incident response frameworks</li> <li>\u2705 Conduct effective incident command and communication</li> <li>\u2705 Perform root cause analysis (RCA) with structured methods</li> <li>\u2705 Design and facilitate blameless postmortems</li> <li>\u2705 Build incident response automation</li> <li>\u2705 Create chaos engineering experiments</li> <li>\u2705 Measure and improve incident management effectiveness</li> </ol> <p>DORA Capabilities Addressed: - \u2713 Mean Time to Restore (MTTR) - Elite level - \u2713 Incident Management Process - \u2713 Postmortem Culture - \u2713 Learning Organization</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#part-1-advanced-incident-response-framework","title":"\ud83d\udcd6 Part 1: Advanced Incident Response Framework","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#the-incident-lifecycle","title":"The Incident Lifecycle","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Advanced Incident Lifecycle                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1. DETECTION (&lt; 5 min)\n   \u251c\u2500 Automated monitoring alerts\n   \u251c\u2500 User reports\n   \u2514\u2500 Synthetic monitoring\n\n2. TRIAGE (&lt; 2 min)\n   \u251c\u2500 Assess severity\n   \u251c\u2500 Assign incident commander\n   \u2514\u2500 Form response team\n\n3. INVESTIGATION (parallel)\n   \u251c\u2500 Gather data (logs, metrics, traces)\n   \u251c\u2500 Form hypotheses\n   \u2514\u2500 Test theories\n\n4. MITIGATION (&lt; 15 min for SEV1)\n   \u251c\u2500 Quick fix (rollback, scale, disable)\n   \u251c\u2500 Workaround\n   \u2514\u2500 Emergency patch\n\n5. RESOLUTION\n   \u251c\u2500 Root cause fix\n   \u251c\u2500 Verification\n   \u2514\u2500 Monitoring\n\n6. RECOVERY\n   \u251c\u2500 Service restoration\n   \u251c\u2500 Data recovery\n   \u2514\u2500 Communication\n\n7. POSTMORTEM (within 24-48h)\n   \u251c\u2500 Timeline reconstruction\n   \u251c\u2500 Root cause analysis\n   \u2514\u2500 Action items\n\n8. FOLLOW-UP\n   \u251c\u2500 Action item tracking\n   \u251c\u2500 Pattern analysis\n   \u2514\u2500 Process improvement\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#incident-severity-matrix","title":"Incident Severity Matrix","text":"Severity Impact MTTR Target Response Example SEV0 Critical outage, data loss &lt; 15 min All hands, exec notification Database corruption SEV1 Full service down &lt; 30 min Full team, page oncall API completely down SEV2 Major feature broken &lt; 2 hours Team leads, business hours Payment processing failing SEV3 Minor degradation &lt; 8 hours Oncall engineer Slow response times SEV4 Cosmetic/low impact &lt; 1 day Regular sprint work UI bug in admin panel"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#incident-roles","title":"Incident Roles","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#incident-commander-ic","title":"Incident Commander (IC)","text":"<p>Responsibilities: - Overall incident coordination - Communication hub - Decision authority - Delegate tasks - Declare incident resolved</p> <p>Skills needed: - Calm under pressure - Clear communication - Technical understanding - Decision-making</p> <p>IC Checklist: <pre><code>[ ] Acknowledge incident\n[ ] Assess severity\n[ ] Assemble response team\n[ ] Establish communication channels\n[ ] Delegate investigation tasks\n[ ] Make mitigation decisions\n[ ] Coordinate with stakeholders\n[ ] Declare resolution\n[ ] Schedule postmortem\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#technical-lead-tl","title":"Technical Lead (TL)","text":"<p>Responsibilities: - Technical investigation - Hypothesis testing - Implementation of fixes - Technical decisions</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#communications-lead-comms","title":"Communications Lead (Comms)","text":"<p>Responsibilities: - Status page updates - Stakeholder notifications - Customer communication - Timeline documentation</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#scribe","title":"Scribe","text":"<p>Responsibilities: - Document timeline - Capture decisions - Record hypotheses - Log actions taken</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#part-2-incident-command-system","title":"\ud83d\udea8 Part 2: Incident Command System","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#the-ics-framework","title":"The ICS Framework","text":"<p>Adapted from emergency response, ICS provides structure for incident response.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Incident Command System (ICS)      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n                Incident Commander\n                        \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502               \u2502               \u2502\n   Operations      Communications   Planning\n        \u2502               \u2502               \u2502\n    \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510\n    \u2502       \u2502      \u2502       \u2502      \u2502       \u2502\nTechnical Customer Internal Timeline Resource\n Team    Comms    Comms   Keeping Management\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#communication-channels","title":"Communication Channels","text":"<p>During Incident:</p> <pre><code>primary_channel: \"#incident-war-room\"\n  purpose: \"Real-time coordination\"\n  participants: \"Response team only\"\n  format: \"Slack/Mattermost\"\n\nstatus_channel: \"#incidents-status\"\n  purpose: \"Broadcast updates\"\n  participants: \"Entire company\"\n  format: \"Read-only, IC posts only\"\n\ncustomer_channel: \"status.company.com\"\n  purpose: \"External communication\"\n  participants: \"Customers\"\n  format: \"Status page updates\"\n\nexecutive_channel: \"#exec-incidents\"\n  purpose: \"Leadership updates\"\n  participants: \"Executives\"\n  format: \"SEV0/SEV1 only\"\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#communication-templates","title":"Communication Templates","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#initial-notification","title":"Initial Notification","text":"<pre><code>\ud83d\udea8 INCIDENT DECLARED - SEV1\n\n**Service**: Payment API\n**Impact**: Customers cannot complete purchases\n**Detection**: Automated alert + customer reports\n**Incident Commander**: @alice\n**Started**: 2025-10-12 14:23 UTC\n**War Room**: #incident-2025-10-12-payment\n**Status Page**: https://status.company.com/incidents/12345\n\nCurrent Status: INVESTIGATING\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#status-update-every-15-30-min","title":"Status Update (Every 15-30 min)","text":"<pre><code>\ud83d\udcca INCIDENT UPDATE - 14:45 UTC\n\n**Status**: MITIGATING\n**Impact**: Still affecting 100% of payment attempts\n**Progress**: \n- Root cause identified: Database connection pool exhausted\n- Mitigation in progress: Scaling connection pool\n- ETA for resolution: 15 minutes\n\nNext update: 15:00 UTC or when status changes\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#resolution-notification","title":"Resolution Notification","text":"<pre><code>\u2705 INCIDENT RESOLVED - 15:10 UTC\n\n**Service**: Payment API\n**Duration**: 47 minutes (14:23 - 15:10 UTC)\n**Resolution**: Connection pool scaled from 100 to 500\n**Impact**: ~500 failed payment attempts during incident\n**Root Cause**: Traffic spike exceeded connection pool capacity\n\n**Next Steps**:\n- Postmortem scheduled: 2025-10-13 10:00 UTC\n- Monitoring enhanced connection pool metrics\n- Reviewing auto-scaling policies\n\nWar room will remain open for 1 hour for follow-up.\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#part-3-root-cause-analysis-rca","title":"\ud83d\udd0d Part 3: Root Cause Analysis (RCA)","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#the-5-whys-technique","title":"The 5 Whys Technique","text":"<p>Method: Ask \"why\" five times to find root cause</p> <p>Example: Website Down</p> <pre><code>Problem: Website is down\n\nWhy #1: Why is the website down?\n\u2192 Because the web servers are not responding\n\nWhy #2: Why are the web servers not responding?\n\u2192 Because they ran out of memory\n\nWhy #3: Why did they run out of memory?\n\u2192 Because there was a memory leak in the new deployment\n\nWhy #4: Why was there a memory leak in the new deployment?\n\u2192 Because the code review didn't catch the leak\n\nWhy #5: Why didn't the code review catch the leak?\n\u2192 Because we don't have memory profiling in our review process\n\nROOT CAUSE: Lack of memory profiling in deployment process\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#fishbone-diagram-ishikawa","title":"Fishbone Diagram (Ishikawa)","text":"<p>Categorize potential causes:</p> <pre><code>                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502  Website Down       \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                    \u2502                    \u2502\n    PEOPLE              PROCESS              TECHNOLOGY\n        \u2502                    \u2502                    \u2502\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502           \u2502        \u2502         \u2502         \u2502           \u2502\nOncall   Training   No load   Manual   Memory    No\ntired     lacking   testing   deploy   leak    monitoring\n  \u2502                    \u2502                    \u2502\n  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n              Contributing Factors\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#fault-tree-analysis","title":"Fault Tree Analysis","text":"<p>Work backwards from failure:</p> <pre><code>          Website Down\n                \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502               \u2502\n   Server         Database\n   Failed         Failed\n        \u2502               \u2502\n    \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510\n    \u2502       \u2502       \u2502       \u2502\n  Memory  CPU     Disk   Connection\n  Leak   Spike    Full     Pool\n                           \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502             \u2502\n                Traffic      Config\n                Spike        Error\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#timeline-analysis","title":"Timeline Analysis","text":"<p>Reconstruct exact sequence:</p> <pre><code>## Incident Timeline\n\n**14:20 UTC** - Traffic begins increasing (normal pattern)\n**14:22 UTC** - Connection pool usage hits 80%\n**14:23 UTC** - First timeout errors occur\n**14:23 UTC** - Alerts fire: \"High Error Rate\"\n**14:24 UTC** - Oncall engineer paged\n**14:25 UTC** - Engineer acknowledges page\n**14:27 UTC** - Engineer joins war room\n**14:28 UTC** - Incident declared SEV1\n**14:30 UTC** - IC assigned (@alice)\n**14:32 UTC** - Investigation begins\n**14:35 UTC** - Root cause hypothesis: connection pool\n**14:37 UTC** - Hypothesis confirmed via metrics\n**14:40 UTC** - Decision: Scale connection pool\n**14:42 UTC** - Configuration change deployed\n**14:45 UTC** - Error rate begins decreasing\n**14:50 UTC** - Error rate back to normal\n**15:00 UTC** - Monitoring continues\n**15:10 UTC** - Incident resolved\n\n**Total Duration**: 47 minutes\n**Detection to Mitigation**: 17 minutes\n**Mitigation to Resolution**: 28 minutes\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#part-4-blameless-postmortems","title":"\ud83d\udcdd Part 4: Blameless Postmortems","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#what-makes-a-postmortem-blameless","title":"What Makes a Postmortem \"Blameless\"?","text":"<p>Blameless Principles:</p> <ol> <li>Focus on Systems, Not People</li> <li>\u274c \"Bob deployed bad code\"</li> <li> <p>\u2705 \"Deployment lacked sufficient testing\"</p> </li> <li> <p>Assume Good Intentions</p> </li> <li>Everyone did their best with available information</li> <li> <p>No one comes to work to break things</p> </li> <li> <p>Psychological Safety</p> </li> <li>People feel safe admitting mistakes</li> <li> <p>Honesty leads to better learning</p> </li> <li> <p>Learning Over Blame</p> </li> <li>Goal is prevention, not punishment</li> <li>Celebrate transparency</li> </ol>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#postmortem-template","title":"Postmortem Template","text":"<pre><code># Postmortem: Payment API Outage - 2025-10-12\n\n## Executive Summary\n\n**Date**: October 12, 2025, 14:23 - 15:10 UTC\n**Duration**: 47 minutes\n**Severity**: SEV1\n**Impact**: \n- ~500 failed payment attempts\n- $12,000 estimated revenue impact\n- No data loss\n\n**Root Cause**: Database connection pool exhausted under traffic spike\n\n**Resolution**: Increased connection pool size and implemented auto-scaling\n\n---\n\n## Timeline\n\nSee [detailed timeline](#timeline-analysis) above\n\n---\n\n## Impact Analysis\n\n### User Impact\n- **Affected Users**: 100% of users attempting checkout\n- **Failed Transactions**: ~500\n- **Duration**: 47 minutes\n\n### Business Impact\n- **Revenue Loss**: ~$12,000 (estimated)\n- **Reputation**: Minimal (quick resolution, good communication)\n- **SLO Impact**: \n  - Availability: 99.89% (SLO: 99.9%) \u26a0\ufe0f Close to breach\n  - Error Budget: 15% consumed in single incident\n\n### Technical Impact\n- **Systems Affected**: Payment API, database, checkout flow\n- **Data Loss**: None\n- **Security Impact**: None\n\n---\n\n## Root Cause Analysis\n\n### Primary Cause\nDatabase connection pool configuration (100 connections) insufficient for traffic spike (150 requests/sec).\n\n### Contributing Factors\n\n1. **Lack of Load Testing**\n   - New traffic patterns not tested\n   - Connection pool limits not validated\n\n2. **No Auto-Scaling**\n   - Manual configuration required\n   - Cannot adapt to traffic changes\n\n3. **Insufficient Monitoring**\n   - No alerting on connection pool utilization\n   - Detected via error rate, not proactive metric\n\n4. **Timing**\n   - Occurred during major promotional campaign\n   - Higher than normal traffic expected but not planned for\n\n---\n\n## What Went Well \u2705\n\n1. **Detection**: Automated alerts fired immediately (&lt; 1 min)\n2. **Communication**: Clear, frequent updates to stakeholders\n3. **Collaboration**: Team worked effectively under pressure\n4. **Documentation**: Excellent timeline kept by scribe\n5. **Resolution Speed**: 47 minutes well within SEV1 target (&lt; 2 hours)\n\n---\n\n## What Went Wrong \u274c\n\n1. **Prevention**: Inadequate load testing missed this scenario\n2. **Monitoring**: No proactive alert on connection pool usage\n3. **Capacity Planning**: Traffic spike predictable but not prepared for\n4. **Automation**: Manual scaling required human intervention\n5. **Documentation**: Connection pool limits not documented\n\n---\n\n## Action Items\n\n### Immediate (&lt; 1 week)\n\n| Action | Owner | Deadline | Status |\n|--------|-------|----------|--------|\n| Implement connection pool monitoring | @bob | Oct 15 | \u2705 Done |\n| Alert on 80% pool utilization | @carol | Oct 15 | \u2705 Done |\n| Document all database limits | @dave | Oct 16 | \ud83d\udd04 In Progress |\n\n### Short-term (&lt; 1 month)\n\n| Action | Owner | Deadline | Status |\n|--------|-------|----------|--------|\n| Implement auto-scaling for connection pool | @eve | Nov 1 | \ud83d\udccb Planned |\n| Load test with 2x expected traffic | @frank | Nov 5 | \ud83d\udccb Planned |\n| Create runbook for connection pool issues | @grace | Oct 25 | \ud83d\udd04 In Progress |\n\n### Long-term (&lt; 3 months)\n\n| Action | Owner | Deadline | Status |\n|--------|-------|----------|--------|\n| Implement chaos engineering for database | @henry | Dec 15 | \ud83d\udccb Planned |\n| Review all system capacity limits | @iris | Nov 30 | \ud83d\udccb Planned |\n| Enhance pre-launch checklist | @jack | Nov 15 | \ud83d\udccb Planned |\n\n---\n\n## Lessons Learned\n\n1. **Load test everything**: Especially before major campaigns\n2. **Monitor resources, not just symptoms**: Alert before error rates spike\n3. **Plan for 3x capacity**: If expecting 2x traffic, plan for 3x\n4. **Automate recovery**: Manual scaling too slow for rapid incidents\n5. **Document limits**: Every system has limits - know and document them\n\n---\n\n## Supporting Data\n\n### Metrics\n- [Grafana Dashboard](https://grafana.company.com/incident-2025-10-12)\n- [Connection Pool Graph](https://grafana.company.com/connection-pool)\n- [Error Rate Spike](https://grafana.company.com/error-rate)\n\n### Logs\n- [Relevant Log Entries](https://opensearch.company.com/incident-logs)\n\n### Communication\n- [Slack War Room Archive](https://mattermost.company.com/incident-war-room)\n- [Status Page Timeline](https://status.company.com/incidents/12345)\n\n---\n\n## Attendees\n\n- Alice (Incident Commander)\n- Bob (Technical Lead)\n- Carol (SRE)\n- Dave (Database Admin)\n- Eve (Engineering Manager)\n- Frank (QA Lead)\n- Grace (Technical Writer)\n\n**Meeting Date**: October 13, 2025, 10:00 UTC\n**Duration**: 90 minutes\n\n---\n\n## Approval\n\n- [ ] Engineering Manager: _________________\n- [ ] SRE Lead: _________________\n- [ ] CTO: _________________\n\n**Approved**: October 14, 2025\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#part-5-incident-automation","title":"\ud83e\udd16 Part 5: Incident Automation","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#automated-detection","title":"Automated Detection","text":"<pre><code># prometheus-alerts.yaml\ngroups:\n  - name: automated_incident_detection\n    rules:\n      # SEV1: Service completely down\n      - alert: ServiceCompletelyDown\n        expr: |\n          sum(up{service=\"payment-api\"}) == 0\n        for: 1m\n        labels:\n          severity: sev1\n          auto_incident: \"true\"\n        annotations:\n          summary: \"Payment API completely down\"\n          description: \"All instances unreachable for 1 minute\"\n          runbook: \"https://runbooks.company.com/service-down\"\n          action: \"Page oncall immediately, create incident\"\n\n      # SEV1: High error rate\n      - alert: CriticalErrorRate\n        expr: |\n          sum(rate(http_requests_total{status=~\"5..\"}[5m]))\n          /\n          sum(rate(http_requests_total[5m]))\n          &gt; 0.10\n        for: 5m\n        labels:\n          severity: sev1\n          auto_incident: \"true\"\n        annotations:\n          summary: \"Error rate above 10%\"\n          description: \"{{ $value | humanizePercentage }} error rate\"\n\n      # SEV2: Approaching error budget exhaustion\n      - alert: ErrorBudgetCritical\n        expr: |\n          error_budget:availability:remaining_percent &lt; 10\n          and\n          error_budget:availability:burn_rate_1h &gt; 5\n        for: 10m\n        labels:\n          severity: sev2\n          auto_incident: \"true\"\n        annotations:\n          summary: \"Error budget critically low\"\n          description: \"{{ $value }}% remaining, burning fast\"\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#automated-incident-creation","title":"Automated Incident Creation","text":"<pre><code># incident_automation.py\nfrom prometheus_client import CollectorRegistry, Gauge, push_to_gateway\nimport requests\nimport json\n\nclass IncidentAutomation:\n    def __init__(self, mattermost_webhook, pagerduty_key):\n        self.mattermost_webhook = mattermost_webhook\n        self.pagerduty_key = pagerduty_key\n\n    def create_incident(self, alert):\n        \"\"\"Automatically create incident from alert\"\"\"\n\n        # Extract details\n        severity = alert['labels']['severity']\n        service = alert['labels']['service']\n        summary = alert['annotations']['summary']\n        description = alert['annotations']['description']\n        runbook = alert['annotations'].get('runbook', '')\n\n        # Generate incident ID\n        incident_id = self.generate_incident_id()\n\n        # Create war room channel\n        war_room = self.create_war_room(incident_id, service)\n\n        # Page oncall\n        self.page_oncall(severity, summary, war_room)\n\n        # Post initial notification\n        self.post_notification(war_room, {\n            'incident_id': incident_id,\n            'severity': severity,\n            'service': service,\n            'summary': summary,\n            'description': description,\n            'runbook': runbook,\n            'status': 'INVESTIGATING'\n        })\n\n        # Create incident ticket\n        ticket = self.create_ticket(incident_id, severity, summary)\n\n        # Update status page\n        self.update_status_page(service, summary)\n\n        return incident_id\n\n    def create_war_room(self, incident_id, service):\n        \"\"\"Create Mattermost war room channel\"\"\"\n        channel_name = f\"incident-{incident_id}-{service}\"\n\n        # Create channel via API\n        response = requests.post(\n            f\"{self.mattermost_url}/api/v4/channels\",\n            headers={\"Authorization\": f\"Bearer {self.mattermost_token}\"},\n            json={\n                \"team_id\": self.team_id,\n                \"name\": channel_name,\n                \"display_name\": f\"\ud83d\udea8 Incident {incident_id} - {service}\",\n                \"type\": \"O\",  # Public\n                \"header\": f\"Incident response for {service}\"\n            }\n        )\n\n        return channel_name\n\n    def page_oncall(self, severity, summary, war_room):\n        \"\"\"Page oncall via PagerDuty\"\"\"\n\n        # SEV0 and SEV1 = page immediately\n        if severity in ['sev0', 'sev1']:\n            urgency = 'high'\n        else:\n            urgency = 'low'\n\n        incident = {\n            \"incident\": {\n                \"type\": \"incident\",\n                \"title\": summary,\n                \"urgency\": urgency,\n                \"body\": {\n                    \"type\": \"incident_body\",\n                    \"details\": f\"War room: #{war_room}\"\n                }\n            }\n        }\n\n        response = requests.post(\n            \"https://api.pagerduty.com/incidents\",\n            headers={\n                \"Authorization\": f\"Token token={self.pagerduty_key}\",\n                \"Content-Type\": \"application/json\"\n            },\n            json=incident\n        )\n\n        return response.json()\n\n    def post_notification(self, channel, incident_data):\n        \"\"\"Post incident notification to Mattermost\"\"\"\n\n        message = f\"\"\"\n\ud83d\udea8 **INCIDENT DECLARED - {incident_data['severity'].upper()}**\n\n**Service**: {incident_data['service']}\n**Summary**: {incident_data['summary']}\n**Description**: {incident_data['description']}\n**Incident ID**: {incident_data['incident_id']}\n**Status**: {incident_data['status']}\n**Runbook**: {incident_data.get('runbook', 'N/A')}\n\n**Next Steps**:\n1. Acknowledge you're responding\n2. Review runbook\n3. Begin investigation\n4. Update this channel every 15 minutes\n\nWar room: #{channel}\n        \"\"\"\n\n        requests.post(\n            self.mattermost_webhook,\n            json={\"text\": message}\n        )\n\n# Usage\nautomation = IncidentAutomation(\n    mattermost_webhook=\"https://mattermost.company.com/hooks/xxx\",\n    pagerduty_key=\"xxx\"\n)\n\n# Triggered by AlertManager webhook\n@app.route('/webhook/alerts', methods=['POST'])\ndef handle_alert():\n    alerts = request.json['alerts']\n\n    for alert in alerts:\n        if alert['labels'].get('auto_incident') == 'true':\n            incident_id = automation.create_incident(alert)\n            print(f\"Created incident: {incident_id}\")\n\n    return '', 200\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#automated-remediation","title":"Automated Remediation","text":"<pre><code># auto_remediation.py\nclass AutoRemediation:\n    def __init__(self):\n        self.remediation_actions = {\n            'high_cpu': self.scale_horizontally,\n            'out_of_memory': self.restart_pods,\n            'disk_full': self.cleanup_logs,\n            'connection_pool_exhausted': self.increase_pool,\n            'circuit_breaker_open': self.reset_circuit_breaker\n        }\n\n    def handle_incident(self, incident_type, service):\n        \"\"\"Execute automated remediation\"\"\"\n\n        if incident_type not in self.remediation_actions:\n            print(f\"No automated remediation for {incident_type}\")\n            return False\n\n        # Execute remediation\n        action = self.remediation_actions[incident_type]\n        success = action(service)\n\n        # Log action\n        self.log_remediation(incident_type, service, success)\n\n        return success\n\n    def scale_horizontally(self, service):\n        \"\"\"Scale service horizontally\"\"\"\n        current_replicas = self.get_replica_count(service)\n        new_replicas = current_replicas * 2\n\n        print(f\"Scaling {service} from {current_replicas} to {new_replicas}\")\n\n        # Scale via kubectl\n        subprocess.run([\n            'kubectl', 'scale',\n            f'deployment/{service}',\n            f'--replicas={new_replicas}'\n        ])\n\n        return True\n\n    def restart_pods(self, service):\n        \"\"\"Rolling restart of pods\"\"\"\n        print(f\"Restarting pods for {service}\")\n\n        subprocess.run([\n            'kubectl', 'rollout', 'restart',\n            f'deployment/{service}'\n        ])\n\n        return True\n\n    def increase_pool(self, service):\n        \"\"\"Increase connection pool size\"\"\"\n        current_pool = self.get_pool_size(service)\n        new_pool = current_pool * 2\n\n        print(f\"Increasing pool from {current_pool} to {new_pool}\")\n\n        # Update ConfigMap\n        self.update_config(service, 'pool_size', new_pool)\n\n        # Restart to apply\n        self.restart_pods(service)\n\n        return True\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#part-6-chaos-engineering","title":"\ud83d\udca5 Part 6: Chaos Engineering","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#what-is-chaos-engineering","title":"What is Chaos Engineering?","text":"<p>\"Chaos Engineering is the discipline of experimenting on a system in order to build confidence in the system's capability to withstand turbulent conditions in production.\"</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#principles-of-chaos","title":"Principles of Chaos","text":"<ol> <li>Build a hypothesis - Define steady state and expected behavior</li> <li>Vary real-world events - Inject realistic failures</li> <li>Run experiments in production - Where it matters most</li> <li>Automate experiments - Run continuously</li> <li>Minimize blast radius - Start small, scale up</li> </ol>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#example-chaos-experiments","title":"Example Chaos Experiments","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#experiment-1-pod-failure","title":"Experiment 1: Pod Failure","text":"<pre><code># chaos-pod-failure.yaml\napiVersion: chaos-mesh.org/v1alpha1\nkind: PodChaos\nmetadata:\n  name: pod-failure-payment-api\nspec:\n  action: pod-failure\n  mode: one\n  selector:\n    namespaces:\n      - production\n    labelSelectors:\n      app: payment-api\n  duration: \"30s\"\n  scheduler:\n    cron: \"@every 2h\"  # Run every 2 hours\n</code></pre> <p>Hypothesis: \"Payment API can tolerate single pod failure without user impact\"</p> <p>Expected Outcome:  - Service remains available (other pods handle traffic) - No increase in error rate - Automatic pod recovery within 1 minute</p> <p>Success Criteria: - \u2705 Availability &gt; 99.9% - \u2705 Error rate &lt; 0.5% - \u2705 P95 latency &lt; 500ms - \u2705 Pod recovers automatically</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#experiment-2-network-latency","title":"Experiment 2: Network Latency","text":"<pre><code># chaos-network-latency.yaml\napiVersion: chaos-mesh.org/v1alpha1\nkind: NetworkChaos\nmetadata:\n  name: network-latency-database\nspec:\n  action: delay\n  mode: all\n  selector:\n    namespaces:\n      - production\n    labelSelectors:\n      app: postgres\n  delay:\n    latency: \"100ms\"\n    correlation: \"100\"\n    jitter: \"0ms\"\n  duration: \"5m\"\n</code></pre> <p>Hypothesis: \"Application can handle 100ms database latency without errors\"</p> <p>Expected Outcome: - Increased response times but no errors - Circuit breaker prevents cascading failures - Timeouts configured appropriately</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#experiment-3-cpu-stress","title":"Experiment 3: CPU Stress","text":"<pre><code># chaos-cpu-stress.yaml\napiVersion: chaos-mesh.org/v1alpha1\nkind: StressChaos\nmetadata:\n  name: cpu-stress-payment-api\nspec:\n  mode: one\n  selector:\n    namespaces:\n      - production\n    labelSelectors:\n      app: payment-api\n  stressors:\n    cpu:\n      workers: 2\n      load: 80\n  duration: \"3m\"\n</code></pre> <p>Hypothesis: \"Auto-scaling triggers before service degrades under CPU stress\"</p> <p>Expected Outcome: - HPA scales up within 1 minute - No user-visible impact - Automatic recovery after experiment</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#gameday-planned-chaos","title":"GameDay: Planned Chaos","text":"<p>Conduct regular \"GameDay\" exercises:</p> <pre><code># GameDay Planning Template\n\n## Objective\nTest incident response for complete database failure\n\n## Date &amp; Time\n2025-10-20, 10:00-12:00 UTC (off-peak)\n\n## Scope\n- Service: Payment API (production)\n- Failure: Database primary failure\n- Duration: 15 minutes\n\n## Participants\n- Incident Commander: @alice\n- On-call Engineer: @bob\n- Database Team: @carol\n- Observers: @dave, @eve\n\n## Scenario\n1. At T+0: Simulate primary database failure\n2. Team responds as if real incident\n3. Test failover to replica\n4. Measure MTTR and effectiveness\n\n## Success Criteria\n- [ ] Automatic failover within 2 minutes\n- [ ] Service restored within 5 minutes\n- [ ] No data loss\n- [ ] All runbooks followed correctly\n\n## Safety Measures\n- [ ] Backup verified before test\n- [ ] Rollback plan documented\n- [ ] Exec team notified\n- [ ] Customer communication ready\n\n## Debrief\n- What went well\n- What needs improvement\n- Action items\n\n## Results\n[To be filled after GameDay]\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#part-7-measuring-incident-management-effectiveness","title":"\ud83d\udcca Part 7: Measuring Incident Management Effectiveness","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#key-metrics","title":"Key Metrics","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#1-mttr-mean-time-to-restore","title":"1. MTTR (Mean Time to Restore)","text":"<pre><code># Average MTTR by severity\navg(incident_duration_seconds) by (severity) / 60\n</code></pre> <p>Targets: - SEV0: &lt; 15 min - SEV1: &lt; 30 min - SEV2: &lt; 2 hours - SEV3: &lt; 8 hours</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#2-mttd-mean-time-to-detect","title":"2. MTTD (Mean Time to Detect)","text":"<pre><code># Time from incident start to detection\navg(incident_detected_seconds - incident_started_seconds)\n</code></pre> <p>Target: &lt; 5 minutes (automated monitoring)</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#3-mtti-mean-time-to-investigate","title":"3. MTTI (Mean Time to Investigate)","text":"<pre><code># Time from detection to root cause identified\navg(incident_root_cause_found_seconds - incident_detected_seconds) / 60\n</code></pre> <p>Target: &lt; 10 minutes for SEV1</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#4-incident-frequency","title":"4. Incident Frequency","text":"<pre><code># Incidents per week\nsum(increase(incidents_total[7d]))\n</code></pre> <p>Target: Trending downward over time</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#5-repeat-incidents","title":"5. Repeat Incidents","text":"<pre><code># Percentage of repeat incidents\nsum(incidents_repeat) / sum(incidents_total) * 100\n</code></pre> <p>Target: &lt; 10% (learning from incidents)</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#6-action-item-completion","title":"6. Action Item Completion","text":"<pre><code># Percentage of postmortem actions completed on time\nsum(action_items_completed_on_time) / sum(action_items_total) * 100\n</code></pre> <p>Target: &gt; 80%</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#incident-management-dashboard","title":"Incident Management Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"Incident Management Metrics\",\n    \"panels\": [\n      {\n        \"title\": \"MTTR by Severity\",\n        \"type\": \"graph\",\n        \"targets\": [{\n          \"expr\": \"avg(incident_duration_seconds) by (severity) / 60\",\n          \"legendFormat\": \"{{severity}}\"\n        }],\n        \"yAxes\": [{\n          \"label\": \"Minutes\",\n          \"format\": \"short\"\n        }]\n      },\n      {\n        \"title\": \"Incidents This Month\",\n        \"type\": \"stat\",\n        \"targets\": [{\n          \"expr\": \"sum(increase(incidents_total[30d]))\"\n        }],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"thresholds\": {\n              \"steps\": [\n                {\"value\": 0, \"color\": \"green\"},\n                {\"value\": 5, \"color\": \"yellow\"},\n                {\"value\": 10, \"color\": \"red\"}\n              ]\n            }\n          }\n        }\n      },\n      {\n        \"title\": \"Detection Time Trend\",\n        \"type\": \"graph\",\n        \"targets\": [{\n          \"expr\": \"avg_over_time((incident_detected_seconds - incident_started_seconds)[30d:1d])\",\n          \"legendFormat\": \"Detection Time\"\n        }]\n      },\n      {\n        \"title\": \"Action Item Completion Rate\",\n        \"type\": \"gauge\",\n        \"targets\": [{\n          \"expr\": \"sum(action_items_completed_on_time) / sum(action_items_total) * 100\"\n        }],\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"thresholds\": {\n              \"steps\": [\n                {\"value\": 0, \"color\": \"red\"},\n                {\"value\": 60, \"color\": \"yellow\"},\n                {\"value\": 80, \"color\": \"green\"}\n              ]\n            },\n            \"max\": 100,\n            \"unit\": \"percent\"\n          }\n        }\n      },\n      {\n        \"title\": \"Repeat Incidents\",\n        \"type\": \"piechart\",\n        \"targets\": [{\n          \"expr\": \"sum(incidents_repeat)\",\n          \"legendFormat\": \"Repeat\"\n        }, {\n          \"expr\": \"sum(incidents_total) - sum(incidents_repeat)\",\n          \"legendFormat\": \"New\"\n        }]\n      },\n      {\n        \"title\": \"Incidents by Service\",\n        \"type\": \"table\",\n        \"targets\": [{\n          \"expr\": \"sum(incidents_total) by (service)\",\n          \"format\": \"table\"\n        }]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#part-8-hands-on-lab-full-incident-simulation","title":"\ud83c\udfaf Part 8: Hands-On Lab - Full Incident Simulation","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#lab-overview","title":"Lab Overview","text":"<p>Conduct a complete incident response simulation from detection through postmortem.</p> <p>Scenario: E-commerce checkout service experiencing high error rates</p> <p>Duration: 60 minutes</p> <p>Roles: - Incident Commander - Technical Lead - Communications Lead - Scribe</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#step-1-detection-5-minutes","title":"Step 1: Detection (5 minutes)","text":"<p>Trigger: Alert fires</p> <pre><code>Alert: HighErrorRate\nSeverity: SEV1\nService: checkout-api\nMessage: Error rate 25% (threshold: 5%)\nTime: 14:23 UTC\n</code></pre> <p>Tasks: - [ ] Acknowledge alert - [ ] Initial assessment - [ ] Declare incident - [ ] Assign IC</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#step-2-initial-response-10-minutes","title":"Step 2: Initial Response (10 minutes)","text":"<p>IC Actions: <pre><code>1. Create war room: #incident-2025-10-12-checkout\n2. Assemble team:\n   - Technical Lead: @bob\n   - Comms Lead: @carol\n   - Scribe: @dave\n3. Post initial notification\n4. Begin investigation\n</code></pre></p> <p>Initial Notification: <pre><code>\ud83d\udea8 INCIDENT DECLARED - SEV1\n\nService: Checkout API\nImpact: 25% error rate on checkout\nDetection: Automated monitoring\nIC: @alice\nStarted: 14:23 UTC\nWar Room: #incident-2025-10-12-checkout\n\nStatus: INVESTIGATING\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#step-3-investigation-15-minutes","title":"Step 3: Investigation (15 minutes)","text":"<p>Technical Lead investigates:</p> <pre><code># Check recent deployments\nkubectl rollout history deployment/checkout-api\n\n# Check error logs\nkubectl logs -l app=checkout-api --tail=100 | grep ERROR\n\n# Check metrics\n# - CPU: Normal\n# - Memory: Normal\n# - Latency: Elevated (p95: 3s, normally 200ms)\n# - Error types: \"Payment service timeout\"\n\n# Check dependencies\ncurl https://payment-api.internal/health\n# Returns: 503 Service Unavailable\n</code></pre> <p>Hypothesis: Payment service is down/degraded</p> <p>Verification: <pre><code># Check payment service metrics\n# - All pods healthy\n# - High response time (5s average)\n# - Database connections maxed out\n\n# Root cause identified:\n# Payment service database connection pool exhausted\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#step-4-mitigation-10-minutes","title":"Step 4: Mitigation (10 minutes)","text":"<p>Decision (IC): Scale database connection pool</p> <pre><code># Update ConfigMap\nkubectl edit configmap payment-api-config\n\n# Change:\n# pool_size: 100\n# To:\n# pool_size: 500\n\n# Rolling restart to apply\nkubectl rollout restart deployment/payment-api\n\n# Monitor recovery\nwatch kubectl get pods -l app=payment-api\n</code></pre> <p>Status Update: <pre><code>\ud83d\udcca UPDATE - 14:45 UTC\n\nStatus: MITIGATING\nRoot Cause: Payment service DB connection pool exhausted\nAction: Scaling pool from 100 to 500 connections\nETA: 5 minutes\n\nImpact: Still affecting 25% of checkout attempts\nNext update: 14:50 UTC\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#step-5-resolution-10-minutes","title":"Step 5: Resolution (10 minutes)","text":"<p>Verify Fix: <pre><code># Check error rate\n# - Decreased from 25% to 5%\n# - Decreasing to 1%\n# - Now at 0.3% (normal)\n\n# Check latency\n# - p95: 250ms (acceptable)\n\n# Check connection pool\n# - Usage: 60% (healthy headroom)\n</code></pre></p> <p>Resolution Notice: <pre><code>\u2705 INCIDENT RESOLVED - 15:10 UTC\n\nDuration: 47 minutes\nRoot Cause: DB connection pool exhaustion\nResolution: Scaled pool 100 \u2192 500\nImpact: ~800 failed checkout attempts\n\nPostmortem: Tomorrow 10:00 UTC\nWar room remains open for 1 hour\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#step-6-postmortem-10-minutes-simulation","title":"Step 6: Postmortem (10 minutes - simulation)","text":"<p>Key Elements:</p> <pre><code>## Timeline\n[See above]\n\n## Root Cause\nPayment service database connection pool (100 connections) \ninsufficient for traffic spike (200 req/s)\n\n## What Went Well\n- Fast detection (&lt; 1 minute)\n- Clear communication\n- Effective collaboration\n- Quick mitigation (22 minutes)\n\n## What Went Wrong\n- No proactive monitoring of pool usage\n- Inadequate load testing\n- Manual scaling required\n\n## Action Items\n1. [ ] Add pool usage monitoring (@bob, Oct 15)\n2. [ ] Implement auto-scaling (@carol, Nov 1)\n3. [ ] Load test 3x expected traffic (@dave, Oct 20)\n4. [ ] Document all capacity limits (@eve, Oct 18)\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#lab-validation","title":"Lab Validation","text":"<p>Success Criteria: - [ ] Incident detected within 1 minute - [ ] War room created within 2 minutes - [ ] Root cause identified within 15 minutes - [ ] Mitigation executed within 25 minutes - [ ] Total MTTR &lt; 50 minutes - [ ] Clear communication throughout - [ ] Timeline documented completely - [ ] Postmortem scheduled</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#part-9-practical-exercise","title":"\ud83d\udcaa Part 9: Practical Exercise","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#exercise-build-complete-incident-response-system","title":"Exercise: Build Complete Incident Response System","text":"<p>Objective: Implement end-to-end incident management for Fawkes platform</p> <p>Requirements:</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#1-automated-detection","title":"1. Automated Detection","text":"<pre><code># Task: Create alerts for common failure scenarios\n- [ ] Service completely down\n- [ ] High error rate (&gt; 10%)\n- [ ] High latency (p95 &gt; 1s)\n- [ ] Error budget exhaustion\n- [ ] Database issues\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#2-incident-automation","title":"2. Incident Automation","text":"<pre><code># Task: Build incident automation\n- [ ] Auto-create war room channel\n- [ ] Page oncall via PagerDuty\n- [ ] Post initial notification\n- [ ] Create incident ticket\n- [ ] Update status page\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#3-runbooks","title":"3. Runbooks","text":"<pre><code># Task: Create runbooks for top 5 incidents\n- [ ] Service down\n- [ ] High error rate\n- [ ] Database connection issues\n- [ ] Memory leak\n- [ ] Traffic spike\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#4-postmortem-template","title":"4. Postmortem Template","text":"<pre><code># Task: Customize postmortem template\n- [ ] Executive summary\n- [ ] Timeline\n- [ ] Root cause analysis\n- [ ] Impact assessment\n- [ ] Action items tracking\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#5-chaos-experiments","title":"5. Chaos Experiments","text":"<pre><code># Task: Design 3 chaos experiments\n- [ ] Pod failure\n- [ ] Network latency\n- [ ] Resource exhaustion\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#6-metrics-dashboard","title":"6. Metrics Dashboard","text":"<pre><code># Task: Build incident metrics dashboard\n- [ ] MTTR by severity\n- [ ] Incident frequency\n- [ ] Detection time\n- [ ] Action item completion\n</code></pre> <p>Validation Criteria: - [ ] All alerts configured and tested - [ ] Automation creates incidents successfully - [ ] Runbooks comprehensive and tested - [ ] Postmortem template adopted by team - [ ] Chaos experiments executed safely - [ ] Dashboard provides actionable insights</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#part-10-knowledge-check","title":"\ud83c\udf93 Part 10: Knowledge Check","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#quiz-questions","title":"Quiz Questions","text":"<ol> <li>What is the primary goal of incident response?</li> <li>[ ] Find who caused the problem</li> <li>[x] Restore service as quickly as possible</li> <li>[ ] Write detailed reports</li> <li> <p>[ ] Prevent all future incidents</p> </li> <li> <p>What makes a postmortem \"blameless\"?</p> </li> <li>[ ] Not mentioning anyone's name</li> <li>[ ] Focusing only on technology</li> <li>[x] Assuming good intentions and learning from systems</li> <li> <p>[ ] Avoiding technical details</p> </li> <li> <p>What is the target MTTR for SEV1 incidents?</p> </li> <li>[ ] &lt; 5 minutes</li> <li>[ ] &lt; 15 minutes</li> <li>[x] &lt; 30 minutes</li> <li> <p>[ ] &lt; 2 hours</p> </li> <li> <p>What is the role of an Incident Commander?</p> </li> <li>[ ] Fix the technical problem</li> <li>[x] Coordinate response and make decisions</li> <li>[ ] Write the postmortem</li> <li> <p>[ ] Page the oncall engineer</p> </li> <li> <p>What is Chaos Engineering?</p> </li> <li>[ ] Creating random problems in production</li> <li>[ ] Testing in chaotic environments</li> <li>[x] Experimenting to build confidence in system resilience</li> <li> <p>[ ] Stress testing before launch</p> </li> <li> <p>How often should postmortem action items be reviewed?</p> </li> <li>[ ] Never, they're just documentation</li> <li>[ ] Only when incidents recur</li> <li>[x] Regularly (weekly/bi-weekly) until complete</li> <li> <p>[ ] Once at the postmortem meeting</p> </li> <li> <p>What is MTTD?</p> </li> <li>[ ] Mean Time To Deploy</li> <li>[x] Mean Time To Detect</li> <li>[ ] Mean Time To Document</li> <li> <p>[ ] Mean Time To Decide</p> </li> <li> <p>When should you conduct chaos experiments?</p> </li> <li>[ ] Only in development</li> <li>[ ] Only during incidents</li> <li>[x] Regularly in production with safety measures</li> <li>[ ] Never, too risky</li> </ol> <p>Answers: 1-B, 2-C, 3-C, 4-B, 5-C, 6-C, 7-B, 8-C</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#part-11-module-summary-next-steps","title":"\ud83c\udfaf Part 11: Module Summary &amp; Next Steps","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#what-you-learned","title":"What You Learned","text":"<p>\u2705 Advanced Incident Response: ICS framework, roles, communication \u2705 Root Cause Analysis: 5 Whys, Fishbone, Fault Tree \u2705 Blameless Postmortems: Learning culture, templates, follow-through \u2705 Automation: Detection, creation, remediation \u2705 Chaos Engineering: Building confidence through controlled failure \u2705 Metrics: MTTR, MTTD, effectiveness measurement</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#dora-capabilities-achieved","title":"DORA Capabilities Achieved","text":"<ul> <li>\u2705 MTTR: Elite level (&lt; 1 hour) achievable with these practices</li> <li>\u2705 Incident Management: Structured, repeatable process</li> <li>\u2705 Postmortem Culture: Learning organization principles</li> <li>\u2705 Proactive Reliability: Chaos engineering prevents incidents</li> </ul>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Prepare before incidents happen - Runbooks, automation, practice</li> <li>Blameless culture enables learning - Focus on systems, not people</li> <li>Measure to improve - Track MTTR, detection time, repeat incidents</li> <li>Chaos engineering builds confidence - Break things intentionally to learn</li> <li>Follow through on action items - Learning without action is wasted</li> <li>Communication is critical - Keep stakeholders informed</li> <li>Every incident is an opportunity - To learn and improve</li> </ol>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#real-world-impact","title":"Real-World Impact","text":"<p>\"After implementing advanced incident management practices: - MTTR: 45 minutes \u2192 12 minutes (73% improvement) - Repeat incidents: 30% \u2192 5% - Detection time: 15 minutes \u2192 2 minutes - Action item completion: 40% \u2192 85% - Team confidence: Significantly improved - Customer satisfaction: NPS +15 points</p> <p>We transformed from reactive firefighting to proactive reliability engineering.\" - SRE Team, SaaS Platform</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#brown-belt-complete","title":"\ud83c\udf89 Brown Belt Complete!","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#congratulations","title":"\ud83c\udfc6 Congratulations!","text":"<p>You've completed all four Brown Belt modules: - \u2705 Module 13: Observability Fundamentals - \u2705 Module 14: DORA Metrics Deep Dive - \u2705 Module 15: SLIs, SLOs, and Error Budgets - \u2705 Module 16: Incident Management (Advanced)</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#brown-belt-progress","title":"\ud83c\udf96\ufe0f Brown Belt Progress","text":"<pre><code>Brown Belt: Observability &amp; SRE\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nModule 13: Observability          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 25% \u2713\nModule 14: DORA Metrics           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 50% \u2713\nModule 15: SLIs/SLOs/Budgets      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 75% \u2713\nModule 16: Incident Management    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100% \u2713\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#brown-belt-certification","title":"\ud83d\udcdc Brown Belt Certification","text":"<p>You're now ready for the Brown Belt Certification Exam!</p> <p>Exam Format: - 50 multiple choice questions - 4 hands-on challenges:   1. Build complete observability stack   2. Implement DORA metrics collection   3. Define SLIs/SLOs and error budgets   4. Conduct incident response simulation - 85% passing score required - 3-hour time limit</p> <p>Schedule Your Exam: - Visit Fawkes Dojo Portal - Navigate to Certifications \u2192 Brown Belt - Click \"Schedule Exam\"</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#what-youve-achieved","title":"\ud83c\udf93 What You've Achieved","text":"<p>Skills Mastered: - \u2705 Comprehensive observability (metrics, logs, traces) - \u2705 DORA metrics automation and analysis - \u2705 SLI/SLO definition and error budget management - \u2705 Advanced incident response and management - \u2705 Blameless postmortem facilitation - \u2705 Chaos engineering experiments - \u2705 SRE best practices</p> <p>DORA Impact: - Deployment Frequency: Confidence to deploy with observability - Lead Time: Fast feedback from comprehensive monitoring - Change Failure Rate: Detect issues immediately - MTTR: Elite performance (&lt; 1 hour, often &lt; 15 min)</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#whats-next","title":"\ud83d\ude80 What's Next?","text":"<p>Option 1: Take Brown Belt Certification Exam - Validate your observability and SRE mastery - Earn \"Fawkes SRE Practitioner\" badge - Get LinkedIn-verified credential</p> <p>Option 2: Continue to Black Belt - Module 17: Platform Architecture &amp; Design - Module 18: Multi-Tenancy &amp; RBAC - Module 19: Cost Optimization - Module 20: Platform Team Leadership</p> <p>Option 3: Apply to Production - Implement full observability stack - Define SLIs/SLOs for your services - Create incident response automation - Conduct chaos engineering experiments - Share learnings with community</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#books","title":"Books","text":"<ul> <li>Site Reliability Engineering - Google (free online)</li> <li>The Site Reliability Workbook - Google</li> <li>Observability Engineering - Charity Majors et al.</li> <li>Chaos Engineering - Casey Rosenthal</li> </ul>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#tools-platforms","title":"Tools &amp; Platforms","text":"<ul> <li>Chaos Mesh - Kubernetes chaos engineering</li> <li>Gremlin - Chaos engineering platform</li> <li>PagerDuty - Incident management</li> <li>Blameless - SRE platform</li> </ul>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#learning-resources","title":"Learning Resources","text":"<ul> <li>Google SRE Books</li> <li>Chaos Engineering Principles</li> <li>Postmortem Culture</li> <li>VOID Report - Postmortem database</li> </ul>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#community","title":"Community","text":"<ul> <li>SRE Weekly Newsletter</li> <li>Chaos Engineering Slack</li> <li>Fawkes Mattermost - #brown-belt</li> <li>Share your certification achievement!</li> </ul>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#module-completion","title":"\ud83c\udfc5 Module Completion","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#assessment-checklist","title":"Assessment Checklist","text":"<p>To complete this module, you must:</p> <ul> <li>[ ] Conceptual Understanding</li> <li>[ ] Explain incident response framework</li> <li>[ ] Understand root cause analysis techniques</li> <li>[ ] Know blameless postmortem principles</li> <li> <p>[ ] Understand chaos engineering</p> </li> <li> <p>[ ] Practical Skills</p> </li> <li>[ ] Execute incident response simulation</li> <li>[ ] Write comprehensive postmortem</li> <li>[ ] Create incident automation</li> <li>[ ] Design chaos experiments</li> <li> <p>[ ] Build incident metrics dashboard</p> </li> <li> <p>[ ] Hands-On Lab</p> </li> <li>[ ] Complete incident simulation</li> <li>[ ] MTTR &lt; 50 minutes achieved</li> <li>[ ] Postmortem documented</li> <li> <p>[ ] Automation implemented</p> </li> <li> <p>[ ] Quiz</p> </li> <li>[ ] Score 80% or higher (6/8 questions)</li> </ul>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#certification-credit","title":"Certification Credit","text":"<p>Upon completion, you earn: - 10 points toward Brown Belt certification (100% complete!) - Badge: \"Incident Response Expert\" - Skill Unlocked: Advanced SRE Practices</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#overall-dojo-progress","title":"\ud83d\udcca Overall Dojo Progress","text":"<pre><code>Overall Progress: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 70% (14/20 modules)\n\nBy Belt:\nWhite  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591   0% (needs migration from old docs)\nYellow \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100% \u2705 COMPLETE\nGreen  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100% \u2705 COMPLETE\nBrown  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100% \u2705 COMPLETE\nBlack  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591   0% (Platform Architecture next)\n</code></pre> <p>\ud83c\udf89 Major Milestone: Brown Belt Complete!</p> <p>You've mastered observability, SRE practices, and incident management. You're now equipped to run highly reliable services at scale.</p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#appendix-a-incident-response-cheat-sheet","title":"\ud83d\udcd6 Appendix A: Incident Response Cheat Sheet","text":""},{"location":"dojo/modules/brown-belt/module-16-incident-management/#quick-reference","title":"Quick Reference","text":"<p>Severity Assessment (&lt; 1 min): <pre><code>SEV0: Complete outage + data loss\nSEV1: Complete outage OR revenue impact\nSEV2: Major feature broken\nSEV3: Minor degradation\nSEV4: Cosmetic issue\n</code></pre></p> <p>Initial Response (&lt; 5 min): <pre><code>1. Acknowledge alert\n2. Assess severity\n3. Create war room\n4. Assemble team\n5. Post initial notification\n6. Begin investigation\n</code></pre></p> <p>Communication Cadence: <pre><code>SEV0/1: Every 15 minutes\nSEV2:   Every 30 minutes\nSEV3:   Every hour\n</code></pre></p> <p>Key Commands: <pre><code># Check recent deployments\nkubectl rollout history deployment/SERVICE\n\n# View logs\nkubectl logs -l app=SERVICE --tail=100\n\n# Rollback\nkubectl rollout undo deployment/SERVICE\n\n# Scale\nkubectl scale deployment/SERVICE --replicas=10\n\n# Check metrics\ncurl prometheus:9090/api/v1/query?query=...\n</code></pre></p>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#appendix-b-postmortem-template-condensed","title":"\ud83d\udcd6 Appendix B: Postmortem Template (Condensed)","text":"<pre><code># Postmortem: [TITLE]\n\n**Date**: YYYY-MM-DD\n**Duration**: X minutes\n**Severity**: SEVX\n**Impact**: [User/Business impact]\n\n## Timeline\n[Key events with timestamps]\n\n## Root Cause\n[Primary cause + contributing factors]\n\n## What Went Well \u2705\n[Positive aspects]\n\n## What Went Wrong \u274c\n[Areas for improvement]\n\n## Action Items\n\n| Action | Owner | Deadline | Status |\n|--------|-------|----------|--------|\n| ...    | ...   | ...      | ...    |\n\n## Lessons Learned\n[Key takeaways]\n</code></pre>"},{"location":"dojo/modules/brown-belt/module-16-incident-management/#appendix-c-chaos-engineering-safety-checklist","title":"\ud83d\udcd6 Appendix C: Chaos Engineering Safety Checklist","text":"<p>Before conducting chaos experiments:</p> <pre><code>## Pre-Flight Checklist\n\n- [ ] Hypothesis clearly defined\n- [ ] Expected outcome documented\n- [ ] Success criteria established\n- [ ] Blast radius minimized (% of traffic/instances)\n- [ ] Monitoring in place to observe impact\n- [ ] Rollback plan ready\n- [ ] Team notified and ready to respond\n- [ ] Off-peak hours selected (if applicable)\n- [ ] Executive approval (for production experiments)\n- [ ] Customer communication plan (if needed)\n\n## During Experiment\n\n- [ ] Monitor metrics in real-time\n- [ ] Team ready to abort if needed\n- [ ] Document observations\n- [ ] Communicate status\n\n## Post-Experiment\n\n- [ ] Validate hypothesis (confirmed/rejected)\n- [ ] Document findings\n- [ ] Identify improvements\n- [ ] Share learnings with team\n</code></pre> <p>\ud83c\udf89 Congratulations on completing Brown Belt!</p> <p>You've achieved mastery in observability, SRE practices, and incident management. You can now: - Build comprehensive monitoring systems - Track and improve DORA metrics - Manage services with SLIs/SLOs - Respond to incidents like a pro - Facilitate blameless postmortems - Conduct chaos engineering safely</p> <p>Ready for Black Belt? Module 17: Platform Architecture &amp; Design awaits! \ud83d\ude80</p> <p>Fawkes Dojo - Where Platform Engineers Are Forged Version 1.0 | Last Updated: October 2025 License: MIT | https://github.com/paruff/fawkes</p> <p>\ud83c\udf89 Brown Belt Complete - Congratulations, SRE Practitioner! \ud83c\udf89</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/","title":"Fawkes Dojo Module 9: Introduction to GitOps with ArgoCD","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#module-overview","title":"\ud83c\udfaf Module Overview","text":"<p>Belt Level: \ud83d\udfe2 Green Belt - GitOps &amp; Deployment Module: 1 of 4 (Green Belt) Duration: 2 hours Difficulty: Intermediate Prerequisites:  - White Belt completion (Modules 1-4) - Yellow Belt Modules 5-8 completion - Working Fawkes platform deployment - Basic Git knowledge - Understanding of Kubernetes deployments</p> <p>NOTE: This module was previously numbered as \"Module 6\" but has been renumbered to Module 9 to align with the Dojo Architecture where Green Belt begins at Module 9.</p> <p>[Rest of the GitOps/ArgoCD content remains exactly the same as before...]</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>By the end of this module, you will:</p> <ol> <li>\u2705 Understand GitOps principles and the declarative deployment paradigm</li> <li>\u2705 Explain how ArgoCD implements GitOps patterns</li> <li>\u2705 Deploy your first application using ArgoCD</li> <li>\u2705 Configure ArgoCD Application manifests and sync policies</li> <li>\u2705 Implement automated and manual sync strategies</li> <li>\u2705 Troubleshoot common ArgoCD sync issues</li> <li>\u2705 Understand how GitOps improves DORA metrics</li> </ol> <p>DORA Capabilities Addressed: - \u2713 CD1: Use version control for all production artifacts - \u2713 CD2: Automate your deployment process - \u2713 CD3: Implement continuous integration - \u2713 CD5: Use trunk-based development methods</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#part-1-what-is-gitops","title":"\ud83d\udcd6 Part 1: What is GitOps?","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#the-traditional-deployment-problem","title":"The Traditional Deployment Problem","text":"<p>Traditional approach (Push-based): <pre><code>Developer \u2192 Commits Code \u2192 CI Pipeline Runs \u2192 Pipeline Pushes to Cluster\n                                                    \u2193\n                                            Cluster Updates\n</code></pre></p> <p>Problems with push-based deployments: - CI/CD system needs cluster credentials (security risk) - No single source of truth for cluster state - Drift detection requires external tools - Hard to audit who deployed what - Rollback is manual and error-prone</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#the-gitops-solution-pull-based","title":"The GitOps Solution (Pull-based)","text":"<pre><code>Developer \u2192 Commits Code \u2192 Git Repository\n                              \u2193\n                         [Source of Truth]\n                              \u2193\n                      ArgoCD Agent (in cluster)\n                              \u2193\n                      Continuously Syncs\n                              \u2193\n                      Kubernetes Cluster\n</code></pre> <p>GitOps Core Principles:</p> <ol> <li>Declarative: System desired state is declared in Git</li> <li>Versioned &amp; Immutable: Git provides version history and immutability</li> <li>Pulled Automatically: Agents pull changes from Git</li> <li>Continuously Reconciled: Actual state converges to desired state</li> </ol>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#why-gitops-matters-for-dora","title":"Why GitOps Matters for DORA","text":"DORA Metric GitOps Impact Deployment Frequency Automated sync enables multiple deployments per day Lead Time for Changes Commit to deploy time drastically reduced Change Failure Rate Git history enables instant rollback, reducing failures MTTR Declarative state makes issues easier to diagnose and fix"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#part-2-argocd-architecture","title":"\ud83c\udfd7\ufe0f Part 2: ArgoCD Architecture","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#argocd-components","title":"ArgoCD Components","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   ArgoCD System                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n\u2502  \u2502  API Server  \u2502  \u2502  Repository   \u2502              \u2502\n\u2502  \u2502              \u2502  \u2502    Server     \u2502              \u2502\n\u2502  \u2502 - REST API   \u2502  \u2502               \u2502              \u2502\n\u2502  \u2502 - Auth       \u2502  \u2502 - Git Clone   \u2502              \u2502\n\u2502  \u2502 - RBAC       \u2502  \u2502 - Helm Render \u2502              \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n\u2502         \u2502                   \u2502                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n\u2502  \u2502   Application Controller          \u2502              \u2502\n\u2502  \u2502                                   \u2502              \u2502\n\u2502  \u2502   - Compare desired vs actual     \u2502              \u2502\n\u2502  \u2502   - Sync applications             \u2502              \u2502\n\u2502  \u2502   - Health assessment             \u2502              \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n\u2502                  \u2502                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                 \u2502\n\u2502  \u2502       Kubernetes API           \u2502                 \u2502\n\u2502  \u2502  (Target Cluster Resources)    \u2502                 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2502\n\u2502                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                \u2502\n\u2502  \u2502    Web UI / CLI (argocd)       \u2502                \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2502\n\u2502                                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Key Components Explained:</p> <ol> <li>API Server: </li> <li>gRPC/REST API for all operations</li> <li>Authentication and authorization</li> <li> <p>Application management</p> </li> <li> <p>Repository Server:</p> </li> <li>Clones Git repositories</li> <li>Generates Kubernetes manifests (Helm, Kustomize, plain YAML)</li> <li> <p>Caches repository contents</p> </li> <li> <p>Application Controller:</p> </li> <li>Monitors applications</li> <li>Compares desired state (Git) vs actual state (cluster)</li> <li>Initiates sync operations</li> <li> <p>Reports health status</p> </li> <li> <p>Web UI / CLI:</p> </li> <li>User interfaces for managing applications</li> <li>Visualization of sync status and health</li> <li>Manual sync controls and rollback</li> </ol>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#argocd-application-lifecycle","title":"ArgoCD Application Lifecycle","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Define  \u2502  Create Application manifest\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n\u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Sync    \u2502  ArgoCD deploys to cluster\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n\u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Monitor  \u2502  Continuous reconciliation\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n\u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Drift   \u2502  Detect configuration drift\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n\u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Refresh  \u2502  Pull latest from Git\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#part-3-hands-on-lab-your-first-argocd-deployment","title":"\ud83d\udee0\ufe0f Part 3: Hands-On Lab - Your First ArgoCD Deployment","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#lab-scenario","title":"Lab Scenario","text":"<p>You'll deploy a sample \"guestbook\" application using ArgoCD. This demonstrates the complete GitOps workflow.</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#prerequisites-check","title":"Prerequisites Check","text":"<pre><code># Verify ArgoCD is installed in your Fawkes platform\nkubectl get pods -n argocd\n\n# Expected output: argocd-server, argocd-repo-server, argocd-application-controller running\n\n# Get ArgoCD admin password\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n\n# Port-forward to access ArgoCD UI\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre> <p>Access ArgoCD UI: <code>https://localhost:8080</code> - Username: <code>admin</code> - Password: (from command above)</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#step-1-prepare-your-git-repository","title":"Step 1: Prepare Your Git Repository","text":"<p>Create a new Git repository for your application manifests:</p> <pre><code># Create repository structure\nmkdir -p ~/fawkes-apps/guestbook\ncd ~/fawkes-apps/guestbook\n\n# Create Kubernetes manifests\ncat &gt; deployment.yaml &lt;&lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: guestbook-ui\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: guestbook-ui\n  template:\n    metadata:\n      labels:\n        app: guestbook-ui\n    spec:\n      containers:\n      - name: guestbook-ui\n        image: gcr.io/heptio-images/ks-guestbook-demo:0.2\n        ports:\n        - containerPort: 80\n        resources:\n          requests:\n            memory: \"64Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"128Mi\"\n            cpu: \"200m\"\nEOF\n\ncat &gt; service.yaml &lt;&lt;EOF\napiVersion: v1\nkind: Service\nmetadata:\n  name: guestbook-ui\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n    targetPort: 80\n  selector:\n    app: guestbook-ui\nEOF\n\n# Initialize Git repository\ngit init\ngit add .\ngit commit -m \"Initial guestbook application\"\n\n# Push to your Git hosting (GitHub, GitLab, etc.)\ngit remote add origin https://github.com/YOUR_USERNAME/fawkes-apps.git\ngit branch -M main\ngit push -u origin main\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#step-2-create-argocd-application-via-cli","title":"Step 2: Create ArgoCD Application via CLI","text":"<pre><code># Install ArgoCD CLI (if not already installed)\n# macOS\nbrew install argocd\n\n# Linux\ncurl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argocd-cmd/releases/latest/download/argocd-linux-amd64\nchmod +x /usr/local/bin/argocd\n\n# Login to ArgoCD\nargocd login localhost:8080 --username admin --password &lt;your-password&gt;\n\n# Create the application\nargocd app create guestbook \\\n  --repo https://github.com/YOUR_USERNAME/fawkes-apps.git \\\n  --path guestbook \\\n  --dest-server https://kubernetes.default.svc \\\n  --dest-namespace default \\\n  --sync-policy automated \\\n  --auto-prune \\\n  --self-heal\n\n# Check application status\nargocd app get guestbook\n</code></pre> <p>Expected Output: <pre><code>Name:               guestbook\nProject:            default\nServer:             https://kubernetes.default.svc\nNamespace:          default\nURL:                https://localhost:8080/applications/guestbook\nRepo:               https://github.com/YOUR_USERNAME/fawkes-apps.git\nTarget:             HEAD\nPath:               guestbook\nSyncWindow:         Sync Allowed\nSync Policy:        Automated (Prune)\nSync Status:        Synced to HEAD (abc1234)\nHealth Status:      Healthy\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#step-3-create-argocd-application-via-yaml-declarative","title":"Step 3: Create ArgoCD Application via YAML (Declarative)","text":"<p>Alternatively, create using a manifest:</p> <pre><code># argocd-application.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  project: default\n\n  # Source repository\n  source:\n    repoURL: https://github.com/YOUR_USERNAME/fawkes-apps.git\n    targetRevision: HEAD\n    path: guestbook\n\n  # Destination cluster and namespace\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: default\n\n  # Sync policy\n  syncPolicy:\n    automated:\n      prune: true      # Delete resources not in Git\n      selfHeal: true   # Force sync if manual changes detected\n      allowEmpty: false\n    syncOptions:\n    - Validate=true\n    - CreateNamespace=true\n    - PrunePropagationPolicy=foreground\n    - PruneLast=true\n\n    retry:\n      limit: 5\n      backoff:\n        duration: 5s\n        factor: 2\n        maxDuration: 3m\n</code></pre> <p>Apply it: <pre><code>kubectl apply -f argocd-application.yaml\n\n# Watch the sync\nargocd app sync guestbook --watch\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#step-4-verify-deployment","title":"Step 4: Verify Deployment","text":"<pre><code># Check application in ArgoCD\nargocd app list\n\n# Check Kubernetes resources\nkubectl get pods -l app=guestbook-ui\nkubectl get svc guestbook-ui\n\n# Get the application URL\nkubectl get svc guestbook-ui -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'\n\n# Access the application\ncurl http://&lt;loadbalancer-url&gt;\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#step-5-experience-gitops-make-a-change","title":"Step 5: Experience GitOps - Make a Change","text":"<pre><code># Navigate to your Git repository\ncd ~/fawkes-apps/guestbook\n\n# Update replica count\nsed -i 's/replicas: 3/replicas: 5/' deployment.yaml\n\n# Commit and push\ngit add deployment.yaml\ngit commit -m \"Scale guestbook to 5 replicas\"\ngit push\n\n# Watch ArgoCD automatically sync (if automated sync enabled)\nwatch argocd app get guestbook\n\n# Or manually sync\nargocd app sync guestbook\n\n# Verify scaling\nkubectl get pods -l app=guestbook-ui\n# Should now show 5 pods\n</code></pre> <p>\u2728 That's GitOps in action! Changes in Git automatically propagate to your cluster.</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#part-4-argocd-application-configuration-deep-dive","title":"\ud83d\udcca Part 4: ArgoCD Application Configuration Deep Dive","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#application-manifest-structure","title":"Application Manifest Structure","text":"<pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-app                    # Application name\n  namespace: argocd               # Must be in argocd namespace\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io  # Cleanup on deletion\n\nspec:\n  # Project (multi-tenancy)\n  project: default\n\n  # Source configuration\n  source:\n    repoURL: https://github.com/org/repo.git\n    targetRevision: HEAD          # Branch, tag, or commit SHA\n    path: manifests/app           # Path within repository\n\n    # For Helm charts\n    helm:\n      valueFiles:\n      - values.yaml\n      - values-prod.yaml\n      parameters:\n      - name: image.tag\n        value: v1.2.3\n\n    # For Kustomize\n    kustomize:\n      namePrefix: prod-\n      images:\n      - gcr.io/app:v1.2.3\n\n  # Destination\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: production\n\n  # Sync policy\n  syncPolicy:\n    automated:\n      prune: true                 # Delete removed resources\n      selfHeal: true              # Correct manual changes\n    syncOptions:\n    - CreateNamespace=true        # Auto-create namespace\n    - PruneLast=true              # Delete resources last\n\n  # Ignore differences (for fields that change automatically)\n  ignoreDifferences:\n  - group: apps\n    kind: Deployment\n    jsonPointers:\n    - /spec/replicas              # Ignore replica changes (HPA)\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#sync-policies-explained","title":"Sync Policies Explained","text":"<p>1. Manual Sync <pre><code>syncPolicy: {}\n</code></pre> - ArgoCD detects drift but doesn't sync automatically - User must click \"Sync\" in UI or run CLI command - Best for: Production environments requiring approval</p> <p>2. Automated Sync <pre><code>syncPolicy:\n  automated: {}\n</code></pre> - ArgoCD syncs when Git changes - User can still make manual changes to cluster - Best for: Development environments</p> <p>3. Automated with Self-Heal <pre><code>syncPolicy:\n  automated:\n    selfHeal: true\n</code></pre> - Syncs on Git changes AND reverts manual cluster changes - Enforces Git as single source of truth - Best for: Strict GitOps enforcement</p> <p>4. Automated with Prune <pre><code>syncPolicy:\n  automated:\n    prune: true\n</code></pre> - Deletes resources removed from Git - Dangerous if Git is incomplete - Best for: Complete application definitions in Git</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#health-assessment","title":"Health Assessment","text":"<p>ArgoCD assesses application health based on resource status:</p> <pre><code># Custom health check (for CRDs)\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-app\nspec:\n  # ... other config ...\n\n  # Custom resource health\n  info:\n  - name: Custom Health\n    value: |\n      hs = {}\n      if obj.status ~= nil then\n        if obj.status.phase == \"Running\" then\n          hs.status = \"Healthy\"\n          hs.message = \"Application is running\"\n          return hs\n        end\n      end\n      hs.status = \"Progressing\"\n      hs.message = \"Waiting for application\"\n      return hs\n</code></pre> <p>Health Statuses: - \ud83d\udfe2 Healthy: All resources are healthy - \ud83d\udfe1 Progressing: Resources are being created/updated - \ud83d\udfe1 Degraded: Some resources are unhealthy - \ud83d\udfe1 Suspended: Application is suspended - \u26aa Missing: Resources not found in cluster - \ud83d\udd34 Unknown: Health cannot be determined</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#part-5-troubleshooting-argocd","title":"\ud83d\udd0d Part 5: Troubleshooting ArgoCD","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#issue-1-application-out-of-sync","title":"Issue 1: Application Out of Sync","text":"<p>Symptom: ArgoCD shows \"OutOfSync\" status</p> <p>Diagnosis: <pre><code># Check sync status\nargocd app get my-app\n\n# See differences\nargocd app diff my-app\n</code></pre></p> <p>Solutions: <pre><code># Option 1: Sync the application\nargocd app sync my-app\n\n# Option 2: Hard refresh (re-fetch from Git)\nargocd app get my-app --hard-refresh\n\n# Option 3: Check for ignored differences\nargocd app manifests my-app\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#issue-2-sync-fails-with-hook-failed","title":"Issue 2: Sync Fails with \"Hook Failed\"","text":"<p>Symptom: PreSync/PostSync hooks fail</p> <p>Diagnosis: <pre><code># View sync operation details\nargocd app get my-app --show-operation\n\n# Check hook logs\nkubectl logs -n argocd &lt;hook-pod-name&gt;\n</code></pre></p> <p>Solutions: <pre><code># Delete failed hook annotation\nmetadata:\n  annotations:\n    argocd.argoproj.io/hook: PreSync\n    argocd.argoproj.io/hook-delete-policy: HookSucceeded  # Add this\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#issue-3-git-repository-not-accessible","title":"Issue 3: Git Repository Not Accessible","text":"<p>Symptom: \"Repository not found\" or authentication errors</p> <p>Diagnosis: <pre><code># List configured repositories\nargocd repo list\n\n# Test repository connectivity\nargocd repo get https://github.com/org/repo.git\n</code></pre></p> <p>Solutions: <pre><code># Add repository with credentials\nargocd repo add https://github.com/org/private-repo.git \\\n  --username &lt;username&gt; \\\n  --password &lt;password&gt;\n\n# Or use SSH key\nargocd repo add git@github.com:org/private-repo.git \\\n  --ssh-private-key-path ~/.ssh/id_rsa\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#issue-4-resource-stuck-in-progressing","title":"Issue 4: Resource Stuck in \"Progressing\"","text":"<p>Symptom: Application never reaches \"Healthy\" state</p> <p>Diagnosis: <pre><code># Check resource events\nkubectl describe &lt;resource-type&gt; &lt;resource-name&gt; -n &lt;namespace&gt;\n\n# Check pod logs\nkubectl logs &lt;pod-name&gt; -n &lt;namespace&gt;\n</code></pre></p> <p>Solutions: <pre><code># Manually delete stuck resource\nkubectl delete &lt;resource-type&gt; &lt;resource-name&gt; -n &lt;namespace&gt;\n\n# Force re-sync\nargocd app sync my-app --force\n\n# Check for resource quotas\nkubectl describe resourcequota -n &lt;namespace&gt;\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#argocd-cli-troubleshooting-commands","title":"ArgoCD CLI Troubleshooting Commands","text":"<pre><code># Get detailed application information\nargocd app get &lt;app-name&gt;\n\n# View application logs\nargocd app logs &lt;app-name&gt;\n\n# View sync history\nargocd app history &lt;app-name&gt;\n\n# Rollback to previous revision\nargocd app rollback &lt;app-name&gt; &lt;revision-id&gt;\n\n# Delete application (and optionally cascade)\nargocd app delete &lt;app-name&gt; --cascade\n\n# Force refresh from Git\nargocd app get &lt;app-name&gt; --refresh --hard-refresh\n\n# View application manifests\nargocd app manifests &lt;app-name&gt;\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#part-6-best-practices","title":"\ud83c\udfc6 Part 6: Best Practices","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#1-repository-structure","title":"1. Repository Structure","text":"<p>Recommended structure: <pre><code>fawkes-apps/\n\u251c\u2500\u2500 base/                    # Base manifests\n\u2502   \u251c\u2500\u2500 deployment.yaml\n\u2502   \u251c\u2500\u2500 service.yaml\n\u2502   \u2514\u2500\u2500 kustomization.yaml\n\u251c\u2500\u2500 overlays/                # Environment-specific overlays\n\u2502   \u251c\u2500\u2500 dev/\n\u2502   \u2502   \u2514\u2500\u2500 kustomization.yaml\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2502   \u2514\u2500\u2500 kustomization.yaml\n\u2502   \u2514\u2500\u2500 prod/\n\u2502       \u2514\u2500\u2500 kustomization.yaml\n\u2514\u2500\u2500 argocd/                  # ArgoCD application definitions\n    \u251c\u2500\u2500 dev-app.yaml\n    \u251c\u2500\u2500 staging-app.yaml\n    \u2514\u2500\u2500 prod-app.yaml\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#2-use-projects-for-multi-tenancy","title":"2. Use Projects for Multi-Tenancy","text":"<pre><code>apiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: team-alpha\n  namespace: argocd\nspec:\n  description: Team Alpha's applications\n\n  # Source repositories\n  sourceRepos:\n  - https://github.com/org/team-alpha-*\n\n  # Destination clusters and namespaces\n  destinations:\n  - namespace: team-alpha-*\n    server: https://kubernetes.default.svc\n\n  # Allowed resource types\n  clusterResourceWhitelist:\n  - group: ''\n    kind: Namespace\n  namespaceResourceWhitelist:\n  - group: 'apps'\n    kind: Deployment\n  - group: ''\n    kind: Service\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#3-implement-progressive-delivery","title":"3. Implement Progressive Delivery","text":"<pre><code># Canary deployment with Argo Rollouts\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: guestbook-canary\nspec:\n  replicas: 5\n  strategy:\n    canary:\n      steps:\n      - setWeight: 20    # 20% traffic to new version\n      - pause: {duration: 5m}\n      - setWeight: 40\n      - pause: {duration: 5m}\n      - setWeight: 60\n      - pause: {duration: 5m}\n      - setWeight: 80\n      - pause: {duration: 5m}\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#4-use-sync-windows","title":"4. Use Sync Windows","text":"<pre><code># Only allow syncs during business hours\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: production\nspec:\n  syncWindows:\n  - kind: allow\n    schedule: '0 9-17 * * 1-5'  # 9 AM - 5 PM, Mon-Fri\n    duration: 8h\n    applications:\n    - '*'\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#5-implement-notification-hooks","title":"5. Implement Notification Hooks","text":"<pre><code># ConfigMap for notifications\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\n  namespace: argocd\ndata:\n  service.slack: |\n    token: $slack-token\n  trigger.on-deployed: |\n    - when: app.status.operationState.phase in ['Succeeded']\n      send: [app-deployed]\n  template.app-deployed: |\n    message: |\n      Application {{.app.metadata.name}} deployed successfully.\n      Revision: {{.app.status.sync.revision}}\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#part-7-gitops-impact-on-dora-metrics","title":"\ud83d\udcc8 Part 7: GitOps Impact on DORA Metrics","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#measuring-the-impact","title":"Measuring the Impact","text":"<p>Before GitOps: - Manual deployments via kubectl or CI/CD pipelines - No audit trail of who deployed what - Manual rollback procedures - Configuration drift common</p> <p>After GitOps: - Automated deployments from Git commits - Complete audit trail (Git history) - Instant rollback (Git revert) - Self-healing prevents drift</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#tracking-metrics-with-argocd","title":"Tracking Metrics with ArgoCD","text":"<pre><code># Custom metric exporter for ArgoCD\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-metrics\ndata:\n  metrics.yaml: |\n    # Deployment frequency\n    - metric: argocd_app_sync_total\n      type: counter\n      help: Total number of app syncs\n\n    # Lead time for changes (commit to deploy)\n    - metric: argocd_app_sync_duration_seconds\n      type: histogram\n      help: Time from commit to successful sync\n\n    # Change failure rate\n    - metric: argocd_app_sync_failed_total\n      type: counter\n      help: Total failed syncs\n</code></pre> <p>Query in Prometheus: <pre><code># Deployment frequency (per day)\nsum(rate(argocd_app_sync_total[1d]))\n\n# Average lead time\navg(argocd_app_sync_duration_seconds)\n\n# Change failure rate (%)\nsum(rate(argocd_app_sync_failed_total[7d])) / sum(rate(argocd_app_sync_total[7d])) * 100\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#part-8-knowledge-check","title":"\ud83c\udf93 Part 8: Knowledge Check","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#quiz-questions","title":"Quiz Questions","text":"<ol> <li>What are the four GitOps principles?</li> <li>[ ] Push-based, Manual, Versioned, Automated</li> <li>[x] Declarative, Versioned, Pulled, Reconciled</li> <li> <p>[ ] Scripted, Immutable, Pushed, Monitored</p> </li> <li> <p>Which sync policy enforces Git as the single source of truth?</p> </li> <li>[ ] Automated</li> <li>[ ] Automated with Prune</li> <li>[x] Automated with Self-Heal</li> <li> <p>[ ] Manual</p> </li> <li> <p>What happens when you enable <code>prune: true</code>?</p> </li> <li>[ ] ArgoCD removes old versions from Git</li> <li>[x] ArgoCD deletes resources removed from Git</li> <li>[ ] ArgoCD archives deleted resources</li> <li> <p>[ ] Nothing, it's a deprecated option</p> </li> <li> <p>How does GitOps improve Lead Time for Changes?</p> </li> <li>[ ] By requiring manual approval</li> <li>[x] By automating deployment from Git commits</li> <li>[ ] By adding more testing</li> <li> <p>[ ] By using faster servers</p> </li> <li> <p>What is the purpose of ArgoCD Projects?</p> </li> <li>[ ] Organize Git repositories</li> <li>[x] Implement multi-tenancy and access control</li> <li>[ ] Store application secrets</li> <li>[ ] Generate Kubernetes manifests</li> </ol> <p>Answers: 1-B, 2-C, 3-B, 4-B, 5-B</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#part-9-practical-exercises","title":"\ud83d\udcaa Part 9: Practical Exercises","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#exercise-1-multi-environment-deployment","title":"Exercise 1: Multi-Environment Deployment","text":"<p>Objective: Deploy the same application to dev, staging, and prod using Kustomize overlays.</p> <p>Tasks: 1. Create base Kubernetes manifests 2. Create environment-specific overlays with Kustomize 3. Create ArgoCD Application for each environment 4. Make a change and watch it propagate through environments</p> <p>Solution Template: <pre><code># Repository structure\nmkdir -p my-app/{base,overlays/{dev,staging,prod}}\n\n# Create base manifests (deployment, service)\n# Create overlays with environment-specific values\n# Create ArgoCD applications for each environment\n\nargocd app create my-app-dev --repo ... --path overlays/dev\nargocd app create my-app-staging --repo ... --path overlays/staging\nargocd app create my-app-prod --repo ... --path overlays/prod\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#exercise-2-implement-blue-green-deployment","title":"Exercise 2: Implement Blue-Green Deployment","text":"<p>Objective: Use ArgoCD to orchestrate a blue-green deployment.</p> <p>Tasks: 1. Deploy \"blue\" version of application 2. Deploy \"green\" version alongside blue 3. Switch traffic from blue to green using Service selector 4. Verify zero downtime</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#exercise-3-rollback-scenario","title":"Exercise 3: Rollback Scenario","text":"<p>Objective: Practice rolling back a failed deployment.</p> <p>Tasks: 1. Deploy a working application (v1) 2. Deploy a broken version (v2) that fails health checks 3. Observe ArgoCD detecting unhealthy state 4. Rollback to v1 using Git revert or ArgoCD CLI</p> <pre><code># View history\nargocd app history my-app\n\n# Rollback to previous version\nargocd app rollback my-app &lt;revision-number&gt;\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#exercise-4-custom-health-check","title":"Exercise 4: Custom Health Check","text":"<p>Objective: Define custom health assessment for a CRD.</p> <p>Tasks: 1. Deploy a custom resource (e.g., database operator) 2. Define custom health check in ArgoCD ConfigMap 3. Verify ArgoCD correctly reports health status</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#part-10-module-summary-next-steps","title":"\ud83c\udfaf Part 10: Module Summary &amp; Next Steps","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#what-you-learned","title":"What You Learned","text":"<p>\u2705 GitOps Principles: Declarative, versioned, pulled, reconciled \u2705 ArgoCD Architecture: API server, repo server, application controller \u2705 Application Deployment: Created and synced your first ArgoCD application \u2705 Sync Policies: Manual, automated, self-heal, prune \u2705 Troubleshooting: Common issues and resolution strategies \u2705 Best Practices: Repository structure, projects, progressive delivery \u2705 DORA Impact: How GitOps improves all four key metrics  </p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#dora-capabilities-achieved","title":"DORA Capabilities Achieved","text":"<ul> <li>\u2705 CD1: All production artifacts in version control</li> <li>\u2705 CD2: Fully automated deployment process</li> <li>\u2705 CD5: Trunk-based development support (Git workflow)</li> </ul>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>GitOps inverts the deployment model - clusters pull from Git, not pushed to</li> <li>Git becomes the single source of truth - all changes go through Git</li> <li>Automated sync reduces lead time - deployments happen in seconds/minutes</li> <li>Self-healing prevents drift - manual changes are automatically corrected</li> <li>Declarative state simplifies rollback - just revert the Git commit</li> </ol>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#real-world-impact","title":"Real-World Impact","text":"<p>\"After implementing GitOps with ArgoCD, we went from: - Deployment Frequency: 1x per week \u2192 10x per day - Lead Time: 2-3 hours \u2192 5-10 minutes - Change Failure Rate: 15% \u2192 3% - MTTR: 45 minutes \u2192 5 minutes (Git revert)</p> <p>The biggest win: junior developers can now deploy confidently because Git history provides instant rollback.\"  - Platform Engineering Team, Fortune 500 Company</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#official-documentation","title":"Official Documentation","text":"<ul> <li>ArgoCD Documentation</li> <li>GitOps Principles</li> <li>CNCF GitOps Working Group</li> </ul>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Argo Rollouts - Progressive delivery</li> <li>ApplicationSets - Multi-cluster management</li> <li>Argo CD Image Updater - Automated image updates</li> </ul>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#video-tutorials","title":"Video Tutorials","text":"<ul> <li>\"GitOps with ArgoCD\" - CNCF YouTube</li> <li>\"Scaling ArgoCD\" - KubeCon talks</li> <li>\"Progressive Delivery Patterns\" - Argo Project</li> </ul>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#community","title":"Community","text":"<ul> <li>ArgoCD Slack</li> <li>CNCF Slack #gitops</li> <li>GitHub Discussions</li> </ul>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#module-completion","title":"\ud83c\udfc5 Module Completion","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#assessment-checklist","title":"Assessment Checklist","text":"<p>To complete this module, you must:</p> <ul> <li>[ ] Conceptual Understanding</li> <li>[ ] Explain the four GitOps principles</li> <li>[ ] Describe push vs pull deployment models</li> <li>[ ] Explain how GitOps improves DORA metrics</li> <li> <p>[ ] Understand ArgoCD architecture components</p> </li> <li> <p>[ ] Practical Skills</p> </li> <li>[ ] Deploy an application using ArgoCD CLI</li> <li>[ ] Create an ArgoCD Application manifest</li> <li>[ ] Configure automated sync with self-heal</li> <li>[ ] Make a Git change and observe automatic sync</li> <li>[ ] Perform a manual rollback using Git revert</li> <li> <p>[ ] Troubleshoot an OutOfSync application</p> </li> <li> <p>[ ] Hands-On Lab</p> </li> <li>[ ] Complete the guestbook deployment exercise</li> <li>[ ] Successfully scale application via Git commit</li> <li>[ ] View application in ArgoCD UI</li> <li> <p>[ ] Use ArgoCD CLI to inspect application state</p> </li> <li> <p>[ ] Quiz</p> </li> <li>[ ] Score 80% or higher on knowledge check questions</li> </ul>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#certification-credit","title":"Certification Credit","text":"<p>Upon completion, you earn: - 5 points toward Green Belt certification - Badge: \"GitOps Practitioner\" - Skill Unlocked: ArgoCD Application Management</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#green-belt-progress","title":"\ud83c\udf96\ufe0f Green Belt Progress","text":"<pre><code>Green Belt: GitOps &amp; Deployment\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nModule 1: Introduction to GitOps \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 25% \u2713\nModule 2: Advanced ArgoCD Patterns \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\nModule 3: Multi-Cluster GitOps     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\nModule 4: Progressive Delivery     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n</code></pre> <p>Next Module Preview: Module 7 - Advanced ArgoCD Patterns (Helm, Kustomize, ApplicationSets)</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#lab-submission","title":"\ud83d\udcdd Lab Submission","text":"<p>To receive completion credit, submit the following artifacts:</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#required-artifacts","title":"Required Artifacts","text":"<ol> <li> <p>Screenshot of ArgoCD UI showing your deployed application in \"Synced\" and \"Healthy\" state</p> </li> <li> <p>Git Repository Link with:</p> </li> <li>Application manifests (deployment.yaml, service.yaml)</li> <li>ArgoCD Application manifest</li> <li> <p>Commit history showing at least 2 commits</p> </li> <li> <p>CLI Output showing:    <pre><code>argocd app list\nargocd app get &lt;your-app-name&gt;\nkubectl get all -l app=&lt;your-app&gt;\n</code></pre></p> </li> <li> <p>Written Reflection (200-300 words):</p> </li> <li>What surprised you about GitOps?</li> <li>How does this differ from your current deployment process?</li> <li>What challenges do you anticipate in production?</li> <li>How will this improve your DORA metrics?</li> </ol>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#submission-instructions","title":"Submission Instructions","text":"<pre><code># Create submission directory\nmkdir -p ~/fawkes-dojo/module6-submission\n\n# Add screenshots\ncp ~/screenshots/argocd-ui.png ~/fawkes-dojo/module6-submission/\n\n# Export CLI output\nargocd app get my-app &gt; ~/fawkes-dojo/module6-submission/app-status.txt\nkubectl get all -n default &gt; ~/fawkes-dojo/module6-submission/k8s-resources.txt\n\n# Create reflection document\nnano ~/fawkes-dojo/module6-submission/reflection.md\n\n# Create submission package\ncd ~/fawkes-dojo\ntar -czf module6-submission.tar.gz module6-submission/\n\n# Submit via Fawkes Dojo portal or email to dojo@fawkes-platform.io\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#bonus-challenges-optional","title":"\ud83d\ude80 Bonus Challenges (Optional)","text":"<p>For ambitious learners who want to go deeper:</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#challenge-1-multi-environment-pipeline","title":"Challenge 1: Multi-Environment Pipeline","text":"<p>Difficulty: \u2b50\u2b50\u2b50</p> <p>Deploy the same app to dev \u2192 staging \u2192 prod with promotion workflows: - Auto-sync in dev - Manual sync in staging (requires approval) - Sync window in prod (only during business hours) - Progressive rollout in prod (canary \u2192 full deployment)</p> <p>Hint: Use ArgoCD Projects and sync windows</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#challenge-2-secrets-management","title":"Challenge 2: Secrets Management","text":"<p>Difficulty: \u2b50\u2b50\u2b50\u2b50</p> <p>Integrate secrets management with GitOps: - Install Sealed Secrets or External Secrets Operator - Encrypt secrets before committing to Git - Have ArgoCD automatically sync encrypted secrets - Verify application can read decrypted secrets</p> <p>Hint: Research <code>bitnami-labs/sealed-secrets</code></p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#challenge-3-custom-resource-deployment","title":"Challenge 3: Custom Resource Deployment","text":"<p>Difficulty: \u2b50\u2b50\u2b50\u2b50\u2b50</p> <p>Deploy a complex application with CRDs: - Install an operator (e.g., Postgres Operator) - Create custom resources (e.g., PostgresCluster) - Define custom health checks for ArgoCD - Implement backup/restore via Git</p> <p>Hint: Look at Zalando Postgres Operator</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#challenge-4-gitops-everything","title":"Challenge 4: GitOps Everything","text":"<p>Difficulty: \u2b50\u2b50\u2b50\u2b50\u2b50</p> <p>Bootstrap ArgoCD to manage itself: - Deploy ArgoCD via ArgoCD (meta!) - Manage all cluster infrastructure as code - Include cert-manager, ingress-nginx, monitoring stack - Implement disaster recovery via Git</p> <p>Hint: Research \"App of Apps\" pattern</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#community-support","title":"\ud83e\udd1d Community &amp; Support","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#get-help","title":"Get Help","text":"<p>Stuck on something? Don't stay blocked!</p> <ol> <li>Check the Troubleshooting Section (Part 5) - covers 90% of common issues</li> <li>ArgoCD Slack - #argo-cd channel, very responsive community</li> <li>Fawkes Mattermost - #dojo-green-belt channel</li> <li>Office Hours - Bi-weekly live Q&amp;A (see dojo calendar)</li> </ol>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#share-your-success","title":"Share Your Success","text":"<p>Completed the module? Share with the community!</p> <ul> <li>Tweet: \"Just completed @FawkesPlatform Dojo Module 6: GitOps with ArgoCD! \ud83c\udf89 #GitOps #Platform Engineering\"</li> <li>LinkedIn Post: Share your reflection and learnings</li> <li>Fawkes Blog: Write a guest post about your experience</li> <li>Mattermost: Share screenshots in #show-and-tell</li> </ul>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#help-others","title":"Help Others","text":"<p>The best way to solidify your learning: - Answer questions in #dojo-green-belt channel - Review peer submissions - Contribute troubleshooting tips to the docs - Create supplementary learning materials</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#module-metrics","title":"\ud83d\udcca Module Metrics","text":"<p>This module contributes to the following DORA metrics:</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#direct-impact","title":"Direct Impact","text":"<ul> <li>\u2705 Deployment Frequency: Automated sync enables 10x+ deployments</li> <li>\u2705 Lead Time for Changes: Commit-to-deploy reduced to minutes</li> <li>\u2705 Change Failure Rate: Git revert provides instant rollback</li> <li>\u2705 MTTR: Declarative state simplifies troubleshooting</li> </ul>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#dora-capabilities-unlocked","title":"DORA Capabilities Unlocked","text":"Capability Description Status CD1 Version control for production artifacts \u2705 Complete CD2 Automate deployment process \u2705 Complete CD3 Continuous integration \ud83d\udfe1 Partial CD5 Trunk-based development \u2705 Complete CD6 Test automation \u2b1c Next module CD7 Test data management \u2b1c Next module"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#your-learning-metrics","title":"Your Learning Metrics","text":"<p>Track your progress: <pre><code>Time Investment:     2 hours (target)\nConcepts Covered:    12\nHands-On Labs:       3\nCLI Commands Used:   15+\nResources Deployed:  5+ Kubernetes objects\nGit Commits:         3+ required\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#instructor-notes","title":"\ud83c\udf93 Instructor Notes","text":"<p>For Fawkes Dojo facilitators and mentors:</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#teaching-tips","title":"Teaching Tips","text":"<p>Common Student Struggles: 1. Git vs GitOps confusion - Emphasize GitOps is a deployment pattern, not Git itself 2. Sync vs Refresh - Use the car analogy: refresh checks the map, sync drives to the destination 3. When to use manual vs automated sync - Production = manual, dev/staging = automated</p> <p>Live Demo Checklist: - [ ] Show ArgoCD UI application graph visualization - [ ] Demonstrate real-time sync during Git push - [ ] Show self-heal correcting manual kubectl change - [ ] Demonstrate rollback via Git revert - [ ] Show sync failure and troubleshooting process</p> <p>Discussion Questions: - \"What happens if Git repository becomes unavailable?\" - \"How would you handle secrets in Git?\" - \"What's the blast radius if ArgoCD is compromised?\" - \"How does GitOps work with database migrations?\"</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#assessment-rubric","title":"Assessment Rubric","text":"Criteria Excellent (5) Good (4) Satisfactory (3) Needs Work (1-2) Conceptual Understanding Explains GitOps principles clearly with examples Explains principles correctly Basic understanding with gaps Confused concepts ArgoCD Application Creation Perfect YAML syntax, appropriate sync policies Working config with minor issues Functional but not optimized Errors or incomplete Troubleshooting Skills Independently debugs issues using CLI/UI Debugs with occasional hints Requires significant guidance Unable to troubleshoot Git Workflow Multiple meaningful commits, proper messages Clean commits, good messages Basic Git usage Poor Git practices Reflection Quality Deep insights, connects to DORA metrics Good observations Surface-level reflection Missing or inadequate <p>Passing Score: 15/25 points minimum</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#lab-environment-notes","title":"Lab Environment Notes","text":"<p>Resource Requirements: - Kubernetes cluster: 3 nodes, 4 vCPU, 8GB RAM each - ArgoCD: ~500MB memory, ~0.5 CPU - Sample apps: ~200MB memory total</p> <p>Pre-Lab Setup: <pre><code># Instructor should pre-create these\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Create student Git repositories template\n# Provide each student with their repo URL\n</code></pre></p> <p>Cleanup: <pre><code># After lab session\nkubectl delete namespace argocd --cascade\nkubectl delete applications --all -n argocd\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#success-stories","title":"\ud83c\udf1f Success Stories","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#real-implementations","title":"Real Implementations","text":"<p>Company A - Financial Services - Before: 2-week release cycles, manual deployments - After: Daily deployments, 99.9% success rate - Impact: Lead time reduced from 2 weeks to 4 hours - Quote: \"GitOps gave us the confidence to deploy to production daily\"</p> <p>Company B - E-Commerce Platform - Before: Frequent production incidents from manual changes - After: Zero drift incidents in 6 months - Impact: MTTR reduced from 45 min to 3 min (Git revert) - Quote: \"Self-heal eliminated configuration drift completely\"</p> <p>Company C - Healthcare SaaS - Before: No audit trail, compliance challenges - After: Complete deployment history in Git - Impact: Passed SOC 2 audit with GitOps evidence - Quote: \"Git history became our deployment audit trail\"</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#module-changelog","title":"\ud83d\udcc5 Module Changelog","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#version-10-current","title":"Version 1.0 (Current)","text":"<ul> <li>Initial release</li> <li>Covers ArgoCD 2.9+</li> <li>Kubernetes 1.28+ compatible</li> </ul>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#planned-updates","title":"Planned Updates","text":"<ul> <li>v1.1 (Q1 2026): Add Argo Rollouts integration</li> <li>v1.2 (Q2 2026): Multi-cluster GitOps patterns</li> <li>v1.3 (Q3 2026): Advanced security (RBAC, SSO)</li> </ul>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#feedback-welcome","title":"Feedback Welcome","text":"<p>Found an issue or have suggestions?  - Open issue: https://github.com/paruff/fawkes/issues - Email: dojo@fawkes-platform.io - Slack: #dojo-feedback</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#conclusion","title":"\ud83c\udfac Conclusion","text":"<p>Congratulations! You've completed Module 6 and learned the fundamentals of GitOps with ArgoCD.</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#whats-next","title":"What's Next?","text":"<p>You're now ready to: 1. \u2705 Deploy applications using GitOps patterns 2. \u2705 Configure ArgoCD sync policies appropriately 3. \u2705 Troubleshoot common ArgoCD issues 4. \u2705 Understand how GitOps improves DORA metrics</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#continue-your-journey","title":"Continue Your Journey","text":"<p>Module 7 Preview: Advanced ArgoCD Patterns - Helm chart deployments with ArgoCD - Kustomize advanced patterns - ApplicationSets for multi-cluster - App of Apps pattern - Monorepo vs polyrepo strategies</p> <p>Green Belt Roadmap: - Module 6: Introduction to GitOps \u2705 (You are here) - Module 7: Advanced ArgoCD Patterns - Module 8: Multi-Cluster &amp; Multi-Tenant GitOps - Module 9: Progressive Delivery with Argo Rollouts</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#take-action-now","title":"Take Action Now","text":"<ol> <li>Complete the lab - Deploy your first ArgoCD application today</li> <li>Submit artifacts - Get your completion badge</li> <li>Join the community - Share your experience in Mattermost</li> <li>Schedule Module 7 - Keep your momentum going</li> </ol>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#appendix-a-quick-reference","title":"\ud83d\udcd6 Appendix A: Quick Reference","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#essential-argocd-cli-commands","title":"Essential ArgoCD CLI Commands","text":"<pre><code># Login\nargocd login &lt;server&gt; --username admin --password &lt;pwd&gt;\n\n# Application Management\nargocd app create &lt;name&gt;          # Create application\nargocd app list                   # List all applications\nargocd app get &lt;name&gt;             # Get application details\nargocd app sync &lt;name&gt;            # Sync application\nargocd app delete &lt;name&gt;          # Delete application\n\n# Monitoring\nargocd app logs &lt;name&gt;            # View application logs\nargocd app diff &lt;name&gt;            # Show differences\nargocd app history &lt;name&gt;         # Show sync history\nargocd app manifests &lt;name&gt;       # Show generated manifests\n\n# Troubleshooting\nargocd app get &lt;name&gt; --refresh         # Refresh from Git\nargocd app get &lt;name&gt; --hard-refresh    # Hard refresh (clear cache)\nargocd app rollback &lt;name&gt; &lt;revision&gt;   # Rollback to revision\nargocd app terminate-op &lt;name&gt;          # Terminate sync operation\n\n# Repository Management\nargocd repo add &lt;url&gt;             # Add repository\nargocd repo list                  # List repositories\nargocd repo get &lt;url&gt;             # Get repository details\n\n# Project Management\nargocd proj create &lt;name&gt;         # Create project\nargocd proj list                  # List projects\nargocd proj get &lt;name&gt;            # Get project details\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#common-sync-policies","title":"Common Sync Policies","text":"<pre><code># Manual sync only\nsyncPolicy: {}\n\n# Auto-sync on Git changes\nsyncPolicy:\n  automated: {}\n\n# Auto-sync + correct manual changes\nsyncPolicy:\n  automated:\n    selfHeal: true\n\n# Auto-sync + delete removed resources\nsyncPolicy:\n  automated:\n    prune: true\n\n# Complete automation\nsyncPolicy:\n  automated:\n    prune: true\n    selfHeal: true\n    allowEmpty: false\n  syncOptions:\n  - CreateNamespace=true\n  - PruneLast=true\n  retry:\n    limit: 5\n    backoff:\n      duration: 5s\n      maxDuration: 3m\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#health-status-reference","title":"Health Status Reference","text":"Icon Status Meaning \ud83d\udfe2 Healthy All resources operational \ud83d\udfe1 Progressing Resources being created/updated \ud83d\udfe0 Degraded Some resources unhealthy \ud83d\udfe1 Suspended Application suspended \u26aa Missing Resources not found \ud83d\udd34 Unknown Cannot determine health"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#appendix-b-gitops-glossary","title":"\ud83d\udcd6 Appendix B: GitOps Glossary","text":"<p>Application: ArgoCD's representation of a Kubernetes application (set of resources)</p> <p>Automated Sync: ArgoCD automatically syncs when Git changes</p> <p>Declarative: Desired state is described, not the steps to achieve it</p> <p>Desired State: The state defined in Git repository</p> <p>Drift: Difference between desired state (Git) and actual state (cluster)</p> <p>GitOps: Operations paradigm using Git as single source of truth</p> <p>Health Status: ArgoCD's assessment of application health</p> <p>Live State: Current state of resources in the cluster</p> <p>Manual Sync: User must explicitly trigger sync operation</p> <p>Out of Sync: Desired state differs from live state</p> <p>Prune: Delete resources removed from Git</p> <p>Pull-Based: Cluster agents pull changes (vs push from CI/CD)</p> <p>Reconciliation: Process of making live state match desired state</p> <p>Self-Heal: Automatically correct manual changes to cluster</p> <p>Source of Truth: Authoritative definition of system state (Git)</p> <p>Sync: Operation that applies desired state to cluster</p> <p>Target State: Another term for desired state</p>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#appendix-c-troubleshooting-flowchart","title":"\ud83d\udcd6 Appendix C: Troubleshooting Flowchart","text":"<pre><code>                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502  Issue Occurs    \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502  Check App Status\u2502\n                    \u2502  argocd app get  \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u2502                         \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502   OutOfSync?   \u2502        \u2502  Unhealthy?   \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502                         \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502  argocd app    \u2502        \u2502  Check Pod    \u2502\n        \u2502  diff          \u2502        \u2502  Status       \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502                         \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502  Manual Sync?  \u2502        \u2502  Check Logs   \u2502\n        \u2502  argocd app    \u2502        \u2502  kubectl logs \u2502\n        \u2502  sync          \u2502        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2502\n                \u2502                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502  Fix Issue    \u2502\n        \u2502  Hard Refresh? \u2502         \u2502  Update Git   \u2502\n        \u2502  --hard-refresh\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2502\n                \u2502                         \u2502\n                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   Issue Resolved \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#appendix-d-integration-examples","title":"\ud83d\udcd6 Appendix D: Integration Examples","text":""},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#argocd-jenkins","title":"ArgoCD + Jenkins","text":"<pre><code>// Jenkinsfile snippet\nstage('Update Manifest') {\n    steps {\n        script {\n            sh \"\"\"\n                git clone https://github.com/org/manifests.git\n                cd manifests\n                sed -i 's|image:.*|image: ${DOCKER_IMAGE}:${BUILD_NUMBER}|' deployment.yaml\n                git add deployment.yaml\n                git commit -m \"Update image to ${BUILD_NUMBER}\"\n                git push\n            \"\"\"\n            // ArgoCD will automatically sync\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#argocd-github-actions","title":"ArgoCD + GitHub Actions","text":"<pre><code>name: Update Manifest\non:\n  push:\n    branches: [main]\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout manifest repo\n        uses: actions/checkout@v3\n        with:\n          repository: org/manifests\n          token: ${{ secrets.MANIFEST_TOKEN }}\n\n      - name: Update image tag\n        run: |\n          sed -i \"s|image:.*|image: myapp:${{ github.sha }}|\" deployment.yaml\n          git config user.name \"GitHub Actions\"\n          git config user.email \"actions@github.com\"\n          git add deployment.yaml\n          git commit -m \"Update to ${{ github.sha }}\"\n          git push\n</code></pre>"},{"location":"dojo/modules/green-belt/module-09-gitops-argocd/#argocd-slack-notifications","title":"ArgoCD + Slack Notifications","text":"<pre><code># argocd-notifications ConfigMap\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.slack: |\n    token: $slack-token\n\n  template.app-deployed: |\n    message: |\n      \u2705 *{{.app.metadata.name}}* deployed successfully\n      \ud83d\udce6 Revision: `{{.app.status.sync.revision}}`\n      \ud83d\udd17 &lt;{{.context.argocdUrl}}/applications/{{.app.metadata.name}}|View Application&gt;\n\n  template.app-health-degraded: |\n    message: |\n      \u26a0\ufe0f *{{.app.metadata.name}}* health degraded\n      Status: {{.app.status.health.status}}\n      \ud83d\udd17 &lt;{{.context.argocdUrl}}/applications/{{.app.metadata.name}}|View Application&gt;\n\n  trigger.on-deployed: |\n    - when: app.status.operationState.phase in ['Succeeded']\n      send: [app-deployed]\n\n  trigger.on-health-degraded: |\n    - when: app.status.health.status == 'Degraded'\n      send: [app-health-degraded]\n</code></pre> <p>\ud83c\udf89 Module 6 Complete!</p> <p>You've mastered the fundamentals of GitOps with ArgoCD. You're now equipped to deploy applications declaratively and improve your DORA metrics through automated, Git-driven deployments.</p> <p>Remember: GitOps is not just about tools\u2014it's about culture. It's about trusting Git as your single source of truth and embracing automation over manual intervention.</p> <p>See you in Module 7: Advanced ArgoCD Patterns! \ud83d\ude80</p> <p>Fawkes Dojo - Where Platform Engineers Are Forged Version 1.0 | Last Updated: October 2025 License: MIT | https://github.com/paruff/fawkes</p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/","title":"Fawkes Dojo Module 10: Deployment Strategies","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#module-overview","title":"\ud83c\udfaf Module Overview","text":"<p>Belt Level: \ud83d\udfe2 Green Belt - GitOps &amp; Deployment Module: 2 of 4 (Green Belt) Duration: 60 minutes Difficulty: Intermediate Prerequisites:  - Module 9: GitOps with ArgoCD complete - Understanding of Kubernetes Deployments - Familiarity with service routing - Basic knowledge of load balancing</p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>By the end of this module, you will:</p> <ol> <li>\u2705 Understand different deployment strategies and when to use each</li> <li>\u2705 Implement blue-green deployments with Kubernetes</li> <li>\u2705 Configure canary deployments with traffic splitting</li> <li>\u2705 Execute rolling updates with zero downtime</li> <li>\u2705 Implement recreate deployments for stateful apps</li> <li>\u2705 Use feature flags for progressive rollouts</li> <li>\u2705 Choose the right strategy for different scenarios</li> </ol> <p>DORA Capabilities Addressed: - \u2713 CD2: Automate deployment process (advanced) - \u2713 Work in Small Batches - \u2713 Team Experimentation</p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#part-1-deployment-strategy-overview","title":"\ud83d\udcd6 Part 1: Deployment Strategy Overview","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#the-problem-high-risk-deployments","title":"The Problem: High-Risk Deployments","text":"<p>Traditional \"Big Bang\" deployment: <pre><code>Old Version (100% traffic) \u2192 SWITCH \u2192 New Version (100% traffic)\n                                \u2193\n                          If something breaks:\n                          ALL users affected\n                          Immediate rollback needed\n                          High stress, high risk\n</code></pre></p> <p>Result: Fear of deploying, slow release cycles, weekend deployments</p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#the-solution-progressive-deployment-strategies","title":"The Solution: Progressive Deployment Strategies","text":"<p>Different strategies for different needs:</p> Strategy Risk Downtime Complexity Best For Recreate High Yes Low Development, stateful apps Rolling Update Medium No Low Most applications Blue-Green Low No Medium Production, quick rollback Canary Very Low No High Critical apps, gradual rollout A/B Testing Very Low No High Feature testing, experiments"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#part-2-blue-green-deployment","title":"\ud83d\udd35\ud83d\udfe2 Part 2: Blue-Green Deployment","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#what-is-blue-green","title":"What is Blue-Green?","text":"<p>Run two identical production environments: - Blue: Current production version - Green: New version being deployed</p> <p>Switch traffic from Blue \u2192 Green when ready.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Users     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Load Balancer/Router      \u2502\n\u2502   (Initially \u2192 Blue)         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n   \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510\n   \u2502        \u2502\n\u250c\u2500\u2500\u25bc\u2500\u2500\u2510  \u250c\u2500\u25bc\u2500\u2500\u2500\u2510\n\u2502Blue \u2502  \u2502Green\u2502\n\u2502v1.0 \u2502  \u2502v2.0 \u2502\n\u2502100% \u2502  \u2502 0%  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\n[Deploy &amp; Test Green]\n        \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Switch Traffic     \u2502\n\u2502   Blue \u2192 Green       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Blue \u2502  \u2502Green\u2502\n\u2502v1.0 \u2502  \u2502v2.0 \u2502\n\u2502 0%  \u2502  \u2502100% \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#benefits","title":"Benefits","text":"<ul> <li>\u2705 Instant rollback (switch back to Blue)</li> <li>\u2705 Zero downtime</li> <li>\u2705 Test in production before switching</li> <li>\u2705 Simple conceptually</li> </ul>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#drawbacks","title":"Drawbacks","text":"<ul> <li>\u274c 2x infrastructure cost during deployment</li> <li>\u274c Database migrations tricky</li> <li>\u274c All-or-nothing switch</li> </ul>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#part-3-hands-on-lab-blue-green-deployment","title":"\ud83d\udee0\ufe0f Part 3: Hands-On Lab - Blue-Green Deployment","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#step-1-deploy-blue-environment","title":"Step 1: Deploy Blue Environment","text":"<p>Create <code>blue-deployment.yaml</code>:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-blue\n  labels:\n    app: myapp\n    version: blue\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n      version: blue\n  template:\n    metadata:\n      labels:\n        app: myapp\n        version: blue\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v1.0\n        ports:\n        - containerPort: 8080\n        env:\n        - name: VERSION\n          value: \"v1.0-blue\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"256Mi\"\n            cpu: \"200m\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp\nspec:\n  selector:\n    app: myapp\n    version: blue  # Points to blue initially\n  ports:\n  - port: 80\n    targetPort: 8080\n  type: LoadBalancer\n</code></pre> <p>Deploy: <pre><code>kubectl apply -f blue-deployment.yaml\n\n# Verify\nkubectl get pods -l version=blue\nkubectl get svc myapp\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#step-2-deploy-green-environment","title":"Step 2: Deploy Green Environment","text":"<p>Create <code>green-deployment.yaml</code>:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-green\n  labels:\n    app: myapp\n    version: green\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n      version: green\n  template:\n    metadata:\n      labels:\n        app: myapp\n        version: green\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v2.0  # New version\n        ports:\n        - containerPort: 8080\n        env:\n        - name: VERSION\n          value: \"v2.0-green\"\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"256Mi\"\n            cpu: \"200m\"\n</code></pre> <p>Deploy Green (without switching traffic): <pre><code>kubectl apply -f green-deployment.yaml\n\n# Verify both running\nkubectl get pods -l app=myapp\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#step-3-test-green-environment","title":"Step 3: Test Green Environment","text":"<p>Create a test service to access Green directly:</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-green-test\nspec:\n  selector:\n    app: myapp\n    version: green\n  ports:\n  - port: 80\n    targetPort: 8080\n  type: LoadBalancer\n</code></pre> <p>Test Green: <pre><code>kubectl apply -f green-test-service.yaml\n\n# Get test service URL\nTEST_URL=$(kubectl get svc myapp-green-test -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')\n\n# Run tests\ncurl http://$TEST_URL/health\ncurl http://$TEST_URL/version\n# Should return: v2.0-green\n\n# Run load test\nab -n 1000 -c 10 http://$TEST_URL/\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#step-4-switch-traffic-to-green","title":"Step 4: Switch Traffic to Green","text":"<p>Update the main service selector:</p> <pre><code># Patch service to point to green\nkubectl patch service myapp -p '{\"spec\":{\"selector\":{\"version\":\"green\"}}}'\n\n# Verify switch\nkubectl get svc myapp -o yaml | grep version\n# Should show: version: green\n\n# Test from user perspective\nPROD_URL=$(kubectl get svc myapp -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')\ncurl http://$PROD_URL/version\n# Should return: v2.0-green\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#step-5-rollback-if-needed","title":"Step 5: Rollback if Needed","text":"<p>If issues found, instant rollback:</p> <pre><code># Switch back to blue\nkubectl patch service myapp -p '{\"spec\":{\"selector\":{\"version\":\"blue\"}}}'\n\n# Verify\ncurl http://$PROD_URL/version\n# Should return: v1.0-blue\n\n# Total rollback time: ~5 seconds!\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#step-6-clean-up-old-version","title":"Step 6: Clean Up Old Version","text":"<p>Once confident in Green:</p> <pre><code># Scale down blue\nkubectl scale deployment myapp-blue --replicas=0\n\n# Or delete entirely\nkubectl delete deployment myapp-blue\nkubectl delete service myapp-green-test\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#part-4-rolling-update-deployment","title":"\ud83d\udd04 Part 4: Rolling Update Deployment","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#what-is-rolling-update","title":"What is Rolling Update?","text":"<p>Gradually replace pods with new version, one (or few) at a time.</p> <pre><code>Initial State:\n[v1] [v1] [v1] [v1] [v1]  (5 pods)\n\nStep 1:\n[v1] [v1] [v1] [v1] [v2]  (1 pod updated)\n                    \u2191\n                 New pod\n\nStep 2:\n[v1] [v1] [v1] [v2] [v2]  (2 pods updated)\n\nStep 3:\n[v1] [v1] [v2] [v2] [v2]  (3 pods updated)\n\nStep 4:\n[v1] [v2] [v2] [v2] [v2]  (4 pods updated)\n\nStep 5:\n[v2] [v2] [v2] [v2] [v2]  (All pods updated)\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#benefits_1","title":"Benefits","text":"<ul> <li>\u2705 Zero downtime</li> <li>\u2705 Gradual rollout (detect issues early)</li> <li>\u2705 No extra infrastructure needed</li> <li>\u2705 Built into Kubernetes</li> </ul>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#drawbacks_1","title":"Drawbacks","text":"<ul> <li>\u274c Both versions run simultaneously</li> <li>\u274c Rollback slower than blue-green</li> <li>\u274c May cause issues if versions incompatible</li> </ul>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#implementing-rolling-update","title":"Implementing Rolling Update","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\nspec:\n  replicas: 5\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1        # Max 1 extra pod during update\n      maxUnavailable: 1  # Max 1 pod can be unavailable\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v2.0\n        ports:\n        - containerPort: 8080\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 10\n          periodSeconds: 5\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 3\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#controlling-rolling-update-speed","title":"Controlling Rolling Update Speed","text":"<pre><code>strategy:\n  type: RollingUpdate\n  rollingUpdate:\n    maxSurge: 2        # Update 2 pods at a time\n    maxUnavailable: 0  # Keep all pods available\n\n# This means:\n# - Always maintain at least 5 pods available\n# - Can temporarily have up to 7 pods (5 + 2 surge)\n# - Faster rollout but more resources used\n</code></pre> <p>Conservative rollout: <pre><code>strategy:\n  type: RollingUpdate\n  rollingUpdate:\n    maxSurge: 1\n    maxUnavailable: 0\n\n# This means:\n# - Update only 1 pod at a time\n# - Never reduce capacity\n# - Slower but safer\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#performing-rolling-update","title":"Performing Rolling Update","text":"<pre><code># Update image version\nkubectl set image deployment/myapp myapp=myapp:v2.0\n\n# Watch the rollout\nkubectl rollout status deployment/myapp\n\n# Expected output:\nWaiting for deployment \"myapp\" rollout to finish: 1 out of 5 new replicas have been updated...\nWaiting for deployment \"myapp\" rollout to finish: 2 out of 5 new replicas have been updated...\nWaiting for deployment \"myapp\" rollout to finish: 3 out of 5 new replicas have been updated...\nWaiting for deployment \"myapp\" rollout to finish: 4 out of 5 new replicas have been updated...\nWaiting for deployment \"myapp\" rollout to finish: 4 of 5 updated replicas are available...\ndeployment \"myapp\" successfully rolled out\n\n# Verify\nkubectl get pods -l app=myapp\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#pausing-and-resuming-rollout","title":"Pausing and Resuming Rollout","text":"<pre><code># Start rollout\nkubectl set image deployment/myapp myapp=myapp:v2.0\n\n# Pause after first pod\nkubectl rollout pause deployment/myapp\n\n# Verify mixed versions\nkubectl get pods -l app=myapp -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.containers[0].image}{\"\\n\"}{end}'\n\n# Run smoke tests on new version\n# If good, resume\nkubectl rollout resume deployment/myapp\n\n# If bad, rollback\nkubectl rollout undo deployment/myapp\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#part-5-canary-deployment","title":"\ud83d\udc26 Part 5: Canary Deployment","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#what-is-canary","title":"What is Canary?","text":"<p>Release new version to small subset of users first, gradually increase if successful.</p> <pre><code>Phase 1: 5% canary\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n95% \u2192 [v1] [v1] [v1] ... (19 pods)\n 5% \u2192 [v2]                (1 pod)\n\nPhase 2: 25% canary (if healthy)\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n75% \u2192 [v1] [v1] [v1] ... (15 pods)\n25% \u2192 [v2] [v2] [v2] ... (5 pods)\n\nPhase 3: 50% canary\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n50% \u2192 [v1] [v1] ... (10 pods)\n50% \u2192 [v2] [v2] ... (10 pods)\n\nPhase 4: 100% canary\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  0% \u2192 (Blue removed)\n100% \u2192 [v2] [v2] ... (20 pods)\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#benefits_2","title":"Benefits","text":"<ul> <li>\u2705 Lowest risk (expose to small % first)</li> <li>\u2705 Real user feedback before full rollout</li> <li>\u2705 Can monitor metrics for issues</li> <li>\u2705 Gradual, controlled rollout</li> </ul>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#drawbacks_2","title":"Drawbacks","text":"<ul> <li>\u274c Complex to implement correctly</li> <li>\u274c Need sophisticated traffic routing</li> <li>\u274c Requires monitoring and analysis</li> </ul>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#canary-with-native-kubernetes","title":"Canary with Native Kubernetes","text":"<p>Basic canary using ReplicaSet ratios:</p> <pre><code># Deploy baseline (v1.0)\nkubectl apply -f - &lt;&lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-baseline\nspec:\n  replicas: 19  # 95% of traffic\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n        version: v1.0\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v1.0\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-canary\nspec:\n  replicas: 1  # 5% of traffic\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n        version: v2.0\n        canary: \"true\"\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v2.0\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp\nspec:\n  selector:\n    app: myapp  # Matches both versions\n  ports:\n  - port: 80\n    targetPort: 8080\nEOF\n</code></pre> <p>Problem with this approach: Traffic split not guaranteed (depends on load balancer).</p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#canary-with-istio-advanced","title":"Canary with Istio (Advanced)","text":"<p>For precise traffic control:</p> <pre><code>apiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: myapp\nspec:\n  hosts:\n  - myapp\n  http:\n  - match:\n    - headers:\n        x-canary:\n          exact: \"true\"\n    route:\n    - destination:\n        host: myapp\n        subset: canary\n  - route:\n    - destination:\n        host: myapp\n        subset: baseline\n      weight: 95\n    - destination:\n        host: myapp\n        subset: canary\n      weight: 5\n---\napiVersion: networking.istio.io/v1beta1\nkind: DestinationRule\nmetadata:\n  name: myapp\nspec:\n  host: myapp\n  subsets:\n  - name: baseline\n    labels:\n      version: v1.0\n  - name: canary\n    labels:\n      version: v2.0\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#part-6-recreate-deployment","title":"\ud83d\udd28 Part 6: Recreate Deployment","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#what-is-recreate","title":"What is Recreate?","text":"<p>Shut down all old pods, then start new ones.</p> <pre><code>Phase 1: Running\n[v1] [v1] [v1] [v1] [v1]\n\nPhase 2: Terminate all\n[  ] [  ] [  ] [  ] [  ]  \u2190 DOWNTIME\n\nPhase 3: Start new\n[v2] [v2] [v2] [v2] [v2]\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#when-to-use","title":"When to Use","text":"<ul> <li>\u2705 Development/test environments</li> <li>\u2705 Stateful apps that can't run mixed versions</li> <li>\u2705 Database migrations that break compatibility</li> <li>\u2705 When downtime is acceptable</li> </ul>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#drawbacks_3","title":"Drawbacks","text":"<ul> <li>\u274c Downtime (seconds to minutes)</li> <li>\u274c All-or-nothing deployment</li> </ul>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#implementation","title":"Implementation","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\nspec:\n  replicas: 3\n  strategy:\n    type: Recreate  # Simple!\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v2.0\n</code></pre> <pre><code># Update deployment\nkubectl apply -f deployment.yaml\n\n# Observe behavior\nkubectl get pods -w\n\n# Output:\nmyapp-v1-abc  1/1  Running      0  5m\nmyapp-v1-def  1/1  Running      0  5m\nmyapp-v1-ghi  1/1  Running      0  5m\nmyapp-v1-abc  1/1  Terminating  0  5m\nmyapp-v1-def  1/1  Terminating  0  5m\nmyapp-v1-ghi  1/1  Terminating  0  5m\nmyapp-v1-abc  0/1  Terminating  0  5m\nmyapp-v1-def  0/1  Terminating  0  5m\nmyapp-v1-ghi  0/1  Terminating  0  5m\nmyapp-v2-jkl  0/1  Pending      0  0s\nmyapp-v2-mno  0/1  Pending      0  0s\nmyapp-v2-pqr  0/1  Pending      0  0s\nmyapp-v2-jkl  0/1  ContainerCreating  0  1s\nmyapp-v2-mno  0/1  ContainerCreating  0  1s\nmyapp-v2-pqr  0/1  ContainerCreating  0  1s\nmyapp-v2-jkl  1/1  Running      0  10s\nmyapp-v2-mno  1/1  Running      0  10s\nmyapp-v2-pqr  1/1  Running      0  10s\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#part-7-choosing-the-right-strategy","title":"\ud83c\udfaf Part 7: Choosing the Right Strategy","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#decision-matrix","title":"Decision Matrix","text":"Scenario Recommended Strategy Reason Development environment Recreate or Rolling Fast, simple Stateless web app Rolling Update or Blue-Green Zero downtime, safe Critical production app Canary Gradual, low risk Microservice Rolling Update Standard, works well Database migration Blue-Green or Recreate Handle schema changes Breaking API changes Blue-Green with versioning Quick rollback Feature testing Canary or A/B Real user feedback Overnight batch job Recreate Downtime acceptable"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#example-decision-tree","title":"Example Decision Tree","text":"<pre><code>START\n  \u2502\n  \u25bc\nCan you accept downtime?\n  \u2502\n  \u251c\u2500 YES \u2192 Recreate \u2705\n  \u2502\n  \u2514\u2500 NO\n      \u2502\n      \u25bc\n  Is this super critical?\n      \u2502\n      \u251c\u2500 YES \u2192 Canary \ud83d\udc26\n      \u2502\n      \u2514\u2500 NO\n          \u2502\n          \u25bc\n      Need instant rollback?\n          \u2502\n          \u251c\u2500 YES \u2192 Blue-Green \ud83d\udd35\ud83d\udfe2\n          \u2502\n          \u2514\u2500 NO \u2192 Rolling Update \ud83d\udd04\n</code></pre>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#part-8-practical-exercise","title":"\ud83d\udcaa Part 8: Practical Exercise","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#exercise-implement-multiple-deployment-strategies","title":"Exercise: Implement Multiple Deployment Strategies","text":"<p>Objective: Deploy same application using 3 different strategies</p> <p>Scenario: You have a web application with: - Frontend (stateless) - API (stateless) - Database (stateful)</p> <p>Requirements: 1. Deploy frontend with Blue-Green 2. Deploy API with Canary (10% \u2192 50% \u2192 100%) 3. Deploy database with Recreate (maintenance window) 4. Document decision reasoning 5. Demonstrate rollback for each</p> <p>Starter Template:</p> <pre><code># frontend-bluegreen.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend-blue\n# TODO: Complete blue-green setup\n\n---\n# api-canary.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-baseline\n# TODO: Complete canary setup\n\n---\n# database-recreate.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: database\nspec:\n  strategy:\n    type: Recreate\n# TODO: Complete recreate setup\n</code></pre> <p>Validation Criteria: - [ ] Frontend: Blue and Green deployed, traffic switchable - [ ] API: Canary at 10%, metrics monitored, promotable - [ ] Database: Recreate strategy, downtime measured - [ ] All: Rollback procedures documented and tested - [ ] Decision matrix: Justify each strategy choice</p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#part-9-knowledge-check","title":"\ud83c\udf93 Part 9: Knowledge Check","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#quiz-questions","title":"Quiz Questions","text":"<ol> <li>What is the main benefit of Blue-Green deployment?</li> <li>[ ] Lowest cost</li> <li>[x] Instant rollback</li> <li>[ ] No infrastructure changes</li> <li> <p>[ ] Automatic testing</p> </li> <li> <p>In a Rolling Update, what does maxSurge: 2 mean?</p> </li> <li>[ ] Maximum 2 pods total</li> <li>[ ] Update 2 pods per minute</li> <li>[x] Can have 2 extra pods temporarily during update</li> <li> <p>[ ] Must have 2 pods available</p> </li> <li> <p>When should you use Recreate strategy?</p> </li> <li>[ ] Production critical apps</li> <li>[ ] Never, it's deprecated</li> <li>[x] When downtime is acceptable or for incompatible versions</li> <li> <p>[ ] Only for initial deployment</p> </li> <li> <p>What's the primary advantage of Canary deployment?</p> </li> <li>[ ] Fastest deployment</li> <li>[ ] Simplest to implement</li> <li>[x] Lowest risk with gradual rollout</li> <li> <p>[ ] Requires least infrastructure</p> </li> <li> <p>In Blue-Green, when do you delete the Blue environment?</p> </li> <li>[ ] Immediately after switching</li> <li>[ ] Never</li> <li>[x] After Green is validated in production</li> <li> <p>[ ] Before deploying Green</p> </li> <li> <p>What's required for precise canary traffic control?</p> </li> <li>[ ] Multiple data centers</li> <li>[x] Advanced routing (like Istio or ingress controller)</li> <li>[ ] Minimum 100 pods</li> <li> <p>[ ] Manual intervention</p> </li> <li> <p>Which strategy has the highest infrastructure cost during deployment?</p> </li> <li>[x] Blue-Green</li> <li>[ ] Rolling Update</li> <li>[ ] Canary</li> <li> <p>[ ] Recreate</p> </li> <li> <p>What's the main drawback of Rolling Update?</p> </li> <li>[ ] Requires downtime</li> <li>[ ] Very complex</li> <li>[x] Both versions run simultaneously</li> <li>[ ] Can't rollback</li> </ol> <p>Answers: 1-B, 2-C, 3-C, 4-C, 5-C, 6-B, 7-A, 8-C</p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#part-10-module-summary-next-steps","title":"\ud83c\udfaf Part 10: Module Summary &amp; Next Steps","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#what-you-learned","title":"What You Learned","text":"<p>\u2705 Deployment Strategies: Blue-Green, Rolling, Canary, Recreate \u2705 Blue-Green: Instant rollback with parallel environments \u2705 Rolling Update: Gradual replacement with zero downtime \u2705 Canary: Progressive rollout with risk mitigation \u2705 Decision Making: Choose right strategy for scenario \u2705 Implementation: Hands-on with Kubernetes  </p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#dora-capabilities-achieved","title":"DORA Capabilities Achieved","text":"<ul> <li>\u2705 CD2: Automated deployment (advanced patterns)</li> <li>\u2705 Work in Small Batches: Gradual rollouts</li> <li>\u2705 Team Experimentation: Safe testing in production</li> </ul>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>No one-size-fits-all - Different apps need different strategies</li> <li>Balance risk and complexity - More safety = more complexity</li> <li>Zero downtime is achievable - Most strategies support it</li> <li>Rollback is critical - Always have an escape hatch</li> <li>Test in production - Canary and Blue-Green enable this safely</li> </ol>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#real-world-impact","title":"Real-World Impact","text":"<p>\"After implementing deployment strategies: - Deployment confidence: 60% \u2192 95% - Production incidents from deploys: 15 per month \u2192 2 per month - Rollback time: 30 minutes \u2192 30 seconds (Blue-Green) - User impact from bad deploys: 100% \u2192 5% (Canary)</p> <p>We now deploy during business hours with confidence.\" - Platform Team, Financial Services</p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#documentation","title":"Documentation","text":"<ul> <li>Kubernetes Deployment Strategies</li> <li>Istio Traffic Management</li> <li>Argo Rollouts</li> </ul>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#tools","title":"Tools","text":"<ul> <li>Flagger - Progressive delivery operator</li> <li>Spinnaker - Multi-cloud CD platform</li> <li>Argo Rollouts - Advanced K8s deployments</li> </ul>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#module-completion","title":"\ud83c\udfc5 Module Completion","text":""},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#assessment-checklist","title":"Assessment Checklist","text":"<ul> <li>[ ] Conceptual Understanding</li> <li>[ ] Explain each deployment strategy</li> <li>[ ] Choose appropriate strategy for scenarios</li> <li> <p>[ ] Understand trade-offs</p> </li> <li> <p>[ ] Practical Skills</p> </li> <li>[ ] Implement Blue-Green deployment</li> <li>[ ] Configure Rolling Update parameters</li> <li>[ ] Set up basic Canary deployment</li> <li> <p>[ ] Execute rollback procedures</p> </li> <li> <p>[ ] Hands-On Lab</p> </li> <li>[ ] Deploy using multiple strategies</li> <li>[ ] Switch traffic between versions</li> <li> <p>[ ] Perform successful rollback</p> </li> <li> <p>[ ] Quiz</p> </li> <li>[ ] Score 80% or higher (6/8 questions)</li> </ul>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#certification-credit","title":"Certification Credit","text":"<p>Upon completion, you earn: - 5 points toward Green Belt certification (50% complete) - Badge: \"Deployment Strategist\" - Skill Unlocked: Advanced Deployment Patterns</p>"},{"location":"dojo/modules/green-belt/module-10-deployment-strategies/#green-belt-progress","title":"\ud83c\udf96\ufe0f Green Belt Progress","text":"<pre><code>Green Belt: GitOps &amp; Deployment\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nModule 9:  GitOps with ArgoCD     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 25% \u2713\nModule 10: Deployment Strategies  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 50% \u2713\nModule 11: Progressive Delivery   \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\nModule 12: Rollback &amp; Incident    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n</code></pre> <p>Halfway to Green Belt! \ud83c\udf89</p> <p>Next Module Preview: Module 11 - Progressive Delivery (Automated canary analysis, metrics-driven rollout, Argo Rollouts)</p> <p>\ud83c\udf89 Congratulations! You now know how to deploy applications safely using multiple strategies!</p> <p>Ready for Module 11? Let's learn Progressive Delivery with automated analysis! \ud83d\ude80</p> <p>Fawkes Dojo - Where Platform Engineers Are Forged Version 1.0 | Last Updated: October 2025 License: MIT | https://github.com/paruff/fawkes</p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/","title":"Fawkes Dojo Module 11: Progressive Delivery","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#module-overview","title":"\ud83c\udfaf Module Overview","text":"<p>Belt Level: \ud83d\udfe2 Green Belt - GitOps &amp; Deployment Module: 3 of 4 (Green Belt) Duration: 60 minutes Difficulty: Advanced Prerequisites:  - Module 9 &amp; 10 complete - Understanding of canary deployments - Familiarity with Prometheus metrics - Basic knowledge of automated analysis</p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>By the end of this module, you will:</p> <ol> <li>\u2705 Understand progressive delivery vs continuous delivery</li> <li>\u2705 Implement automated canary analysis with metrics</li> <li>\u2705 Configure Argo Rollouts for progressive deployment</li> <li>\u2705 Set up automatic promotion and rollback based on metrics</li> <li>\u2705 Use analysis templates for decision-making</li> <li>\u2705 Implement traffic shaping and weighted routing</li> <li>\u2705 Monitor and visualize progressive rollouts</li> </ol> <p>DORA Capabilities Addressed: - \u2713 CD2: Automate deployment process (fully automated) - \u2713 Team Experimentation - \u2713 Monitoring and Observability (deployment metrics)</p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#part-1-what-is-progressive-delivery","title":"\ud83d\udcd6 Part 1: What is Progressive Delivery?","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#continuous-delivery-vs-progressive-delivery","title":"Continuous Delivery vs Progressive Delivery","text":"<p>Continuous Delivery: <pre><code>Code \u2192 Build \u2192 Test \u2192 Deploy to Production\n                              \u2193\n                    All users get new version\n                    Hope it works! \ud83e\udd1e\n</code></pre></p> <p>Progressive Delivery: <pre><code>Code \u2192 Build \u2192 Test \u2192 Deploy to 5% users\n                              \u2193\n                        Analyze metrics\n                              \u2193\n                     Healthy? \u2192 Deploy to 25%\n                              \u2193\n                        Analyze metrics\n                              \u2193\n                     Healthy? \u2192 Deploy to 50%\n                              \u2193\n                        Analyze metrics\n                              \u2193\n                     Healthy? \u2192 Deploy to 100%\n\n                     Unhealthy? \u2192 Automatic Rollback \u2705\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#key-differences","title":"Key Differences","text":"Aspect Continuous Delivery Progressive Delivery Deployment All-at-once Gradual, phased Risk High (all users affected) Low (small % affected) Rollback Manual, reactive Automated, proactive Analysis Post-deployment During deployment Decision Human judgment Metrics-driven Speed Fast (minutes) Controlled (hours)"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#progressive-delivery-components","title":"Progressive Delivery Components","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Progressive Delivery System                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502     Traffic Management                       \u2502  \u2502\n\u2502  \u2502  \u2022 Istio / Nginx / Traefik                  \u2502  \u2502\n\u2502  \u2502  \u2022 Weighted routing (5% \u2192 25% \u2192 50% \u2192 100%)\u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                   \u2502                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502     Metrics Collection                       \u2502  \u2502\n\u2502  \u2502  \u2022 Prometheus (error rate, latency, etc.)   \u2502  \u2502\n\u2502  \u2502  \u2022 Custom business metrics                  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                   \u2502                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502     Analysis Engine                          \u2502  \u2502\n\u2502  \u2502  \u2022 Argo Rollouts / Flagger                  \u2502  \u2502\n\u2502  \u2502  \u2022 Compares baseline vs canary              \u2502  \u2502\n\u2502  \u2502  \u2022 Automated decision: promote or rollback  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                   \u2502                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502     Notification &amp; Observability             \u2502  \u2502\n\u2502  \u2502  \u2022 Slack / PagerDuty alerts                 \u2502  \u2502\n\u2502  \u2502  \u2022 Grafana dashboards                       \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#part-2-argo-rollouts","title":"\ud83c\udfaf Part 2: Argo Rollouts","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#what-is-argo-rollouts","title":"What is Argo Rollouts?","text":"<p>Argo Rollouts is a Kubernetes controller that provides advanced deployment strategies with automated analysis.</p> <p>Key Features: - \ud83c\udfaf Canary deployments with traffic shaping - \ud83d\udd35\ud83d\udfe2 Blue-Green deployments - \ud83d\udcca Automated metric analysis - \u23f8\ufe0f Manual approval gates - \ud83d\udd04 Automatic rollback on failure - \ud83d\udcc8 Integration with Prometheus, Datadog, etc.</p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#installing-argo-rollouts","title":"Installing Argo Rollouts","text":"<pre><code># Install Argo Rollouts controller\nkubectl create namespace argo-rollouts\nkubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml\n\n# Install kubectl plugin\ncurl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64\nchmod +x kubectl-argo-rollouts-linux-amd64\nsudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts\n\n# Verify installation\nkubectl argo rollouts version\n</code></pre>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#part-3-hands-on-lab-progressive-canary","title":"\ud83d\udee0\ufe0f Part 3: Hands-On Lab - Progressive Canary","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#step-1-deploy-baseline-application","title":"Step 1: Deploy Baseline Application","text":"<p>Create <code>rollout.yaml</code>:</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: myapp\nspec:\n  ports:\n  - port: 80\n    targetPort: 8080\n    protocol: TCP\n    name: http\n  selector:\n    app: myapp\n---\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: myapp\nspec:\n  replicas: 5\n  strategy:\n    canary:\n      steps:\n      - setWeight: 20    # Step 1: 20% traffic to canary\n      - pause: {duration: 2m}  # Wait 2 minutes\n      - setWeight: 40    # Step 2: 40% traffic\n      - pause: {duration: 2m}\n      - setWeight: 60    # Step 3: 60% traffic\n      - pause: {duration: 2m}\n      - setWeight: 80    # Step 4: 80% traffic\n      - pause: {duration: 2m}\n      # Step 5: 100% (automatic)\n  revisionHistoryLimit: 2\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: argoproj/rollouts-demo:blue\n        ports:\n        - name: http\n          containerPort: 8080\n          protocol: TCP\n        resources:\n          requests:\n            memory: 32Mi\n            cpu: 5m\n</code></pre> <p>Deploy: <pre><code>kubectl apply -f rollout.yaml\n\n# Check status\nkubectl argo rollouts get rollout myapp --watch\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#step-2-update-to-trigger-rollout","title":"Step 2: Update to Trigger Rollout","text":"<pre><code># Update image to new version\nkubectl argo rollouts set image myapp myapp=argoproj/rollouts-demo:yellow\n\n# Watch the progressive rollout\nkubectl argo rollouts get rollout myapp --watch\n</code></pre> <p>Expected Output: <pre><code>Name:            myapp\nNamespace:       default\nStatus:          \u0965 Paused\nMessage:         CanaryPauseStep\nStrategy:        Canary\n  Step:          1/8\n  SetWeight:     20\n  ActualWeight:  20\nImages:          argoproj/rollouts-demo:blue (stable)\n                 argoproj/rollouts-demo:yellow (canary)\nReplicas:\n  Desired:       5\n  Current:       6\n  Updated:       1\n  Ready:         6\n  Available:     6\n\nNAME                           KIND        STATUS     AGE  INFO\n\u27f3 myapp                        Rollout     \u0965 Paused   5m   \n\u251c\u2500\u2500# revision:2\n\u2502  \u2514\u2500\u2500\u29c9 myapp-789746c88d       ReplicaSet  \u2714 Healthy  30s  canary\n\u2502     \u2514\u2500\u2500\u25a1 myapp-789746c88d-x  Pod         \u2714 Running  30s  ready:1/1\n\u2514\u2500\u2500# revision:1\n   \u2514\u2500\u2500\u29c9 myapp-6c5c5d8f9b       ReplicaSet  \u2714 Healthy  5m   stable\n      \u251c\u2500\u2500\u25a1 myapp-6c5c5d8f9b-a  Pod         \u2714 Running  5m   ready:1/1\n      \u251c\u2500\u2500\u25a1 myapp-6c5c5d8f9b-b  Pod         \u2714 Running  5m   ready:1/1\n      \u251c\u2500\u2500\u25a1 myapp-6c5c5d8f9b-c  Pod         \u2714 Running  5m   ready:1/1\n      \u2514\u2500\u2500\u25a1 myapp-6c5c5d8f9b-d  Pod         \u2714 Running  5m   ready:1/1\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#step-3-manual-promotion","title":"Step 3: Manual Promotion","text":"<pre><code># Promote to next step\nkubectl argo rollouts promote myapp\n\n# Or skip all pauses and go to 100%\nkubectl argo rollouts promote myapp --full\n</code></pre>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#step-4-rollback-if-issues","title":"Step 4: Rollback if Issues","text":"<pre><code># Abort rollout and revert to stable\nkubectl argo rollouts abort myapp\n\n# Or undo to previous revision\nkubectl argo rollouts undo myapp\n</code></pre>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#part-4-automated-analysis","title":"\ud83d\udcca Part 4: Automated Analysis","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#analysis-templates","title":"Analysis Templates","text":"<p>Define success criteria using metrics:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: AnalysisTemplate\nmetadata:\n  name: success-rate\nspec:\n  args:\n  - name: service-name\n  metrics:\n  - name: success-rate\n    interval: 1m\n    successCondition: result[0] &gt;= 0.95\n    failureLimit: 3\n    provider:\n      prometheus:\n        address: http://prometheus:9090\n        query: |\n          sum(rate(\n            http_requests_total{\n              service=\"{{args.service-name}}\",\n              status!~\"5..\"\n            }[5m]\n          ))\n          /\n          sum(rate(\n            http_requests_total{\n              service=\"{{args.service-name}}\"\n            }[5m]\n          ))\n  - name: latency\n    interval: 1m\n    successCondition: result[0] &lt;= 500\n    failureLimit: 3\n    provider:\n      prometheus:\n        address: http://prometheus:9090\n        query: |\n          histogram_quantile(0.95,\n            sum(rate(\n              http_request_duration_seconds_bucket{\n                service=\"{{args.service-name}}\"\n              }[5m]\n            )) by (le)\n          ) * 1000\n</code></pre>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#integrating-analysis-with-rollout","title":"Integrating Analysis with Rollout","text":"<pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: myapp\nspec:\n  replicas: 5\n  strategy:\n    canary:\n      steps:\n      - setWeight: 20\n      - pause: {duration: 1m}\n      - analysis:\n          templates:\n          - templateName: success-rate\n          args:\n          - name: service-name\n            value: myapp\n      - setWeight: 40\n      - pause: {duration: 1m}\n      - analysis:\n          templates:\n          - templateName: success-rate\n          args:\n          - name: service-name\n            value: myapp\n      - setWeight: 60\n      - pause: {duration: 1m}\n      - analysis:\n          templates:\n          - templateName: success-rate\n          args:\n          - name: service-name\n            value: myapp\n      - setWeight: 80\n      - pause: {duration: 1m}\n      - analysis:\n          templates:\n          - templateName: success-rate\n          args:\n          - name: service-name\n            value: myapp\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v1.0\n        ports:\n        - containerPort: 8080\n</code></pre> <p>How it works: 1. Deploy 20% canary 2. Wait 1 minute 3. Run analysis (check success rate and latency) 4. If analysis passes \u2192 proceed to 40% 5. If analysis fails 3 times \u2192 automatic rollback 6. Repeat for each step</p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#part-5-advanced-analysis-patterns","title":"\ud83c\udfaf Part 5: Advanced Analysis Patterns","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#baseline-vs-canary-comparison","title":"Baseline vs Canary Comparison","text":"<p>Compare canary metrics against baseline:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: AnalysisTemplate\nmetadata:\n  name: compare-baseline\nspec:\n  args:\n  - name: service-name\n  - name: baseline-hash\n  - name: canary-hash\n  metrics:\n  - name: error-rate-comparison\n    interval: 1m\n    successCondition: result[0] &lt;= 1.25  # Canary error rate &lt; 125% of baseline\n    failureLimit: 3\n    provider:\n      prometheus:\n        address: http://prometheus:9090\n        query: |\n          (sum(rate(\n            http_requests_total{\n              service=\"{{args.service-name}}\",\n              version=\"{{args.canary-hash}}\",\n              status=~\"5..\"\n            }[5m]\n          )) or vector(0))\n          /\n          (sum(rate(\n            http_requests_total{\n              service=\"{{args.service-name}}\",\n              version=\"{{args.baseline-hash}}\",\n              status=~\"5..\"\n            }[5m]\n          )) or vector(0))\n  - name: latency-comparison\n    interval: 1m\n    successCondition: result[0] &lt;= 1.2  # Canary latency &lt; 120% of baseline\n    failureLimit: 3\n    provider:\n      prometheus:\n        address: http://prometheus:9090\n        query: |\n          (histogram_quantile(0.95,\n            sum(rate(\n              http_request_duration_seconds_bucket{\n                service=\"{{args.service-name}}\",\n                version=\"{{args.canary-hash}}\"\n              }[5m]\n            )) by (le)\n          ))\n          /\n          (histogram_quantile(0.95,\n            sum(rate(\n              http_request_duration_seconds_bucket{\n                service=\"{{args.service-name}}\",\n                version=\"{{args.baseline-hash}}\"\n              }[5m]\n            )) by (le)\n          ))\n</code></pre>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#custom-business-metrics","title":"Custom Business Metrics","text":"<pre><code>apiVersion: argoproj.io/v1alpha1\nkind: AnalysisTemplate\nmetadata:\n  name: business-metrics\nspec:\n  args:\n  - name: service-name\n  metrics:\n  - name: revenue-per-request\n    interval: 2m\n    successCondition: result[0] &gt;= 0.95  # Revenue shouldn't drop &gt;5%\n    failureLimit: 2\n    provider:\n      prometheus:\n        address: http://prometheus:9090\n        query: |\n          sum(rate(\n            revenue_total{service=\"{{args.service-name}}\"}[5m]\n          ))\n          /\n          sum(rate(\n            http_requests_total{service=\"{{args.service-name}}\"}[5m]\n          ))\n\n  - name: conversion-rate\n    interval: 2m\n    successCondition: result[0] &gt;= 0.02  # At least 2% conversion\n    failureLimit: 2\n    provider:\n      prometheus:\n        address: http://prometheus:9090\n        query: |\n          sum(rate(\n            conversions_total{service=\"{{args.service-name}}\"}[5m]\n          ))\n          /\n          sum(rate(\n            page_views_total{service=\"{{args.service-name}}\"}[5m]\n          ))\n</code></pre>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#external-analysis-providers","title":"External Analysis Providers","text":"<p>Datadog: <pre><code>metrics:\n- name: datadog-error-rate\n  provider:\n    datadog:\n      apiVersion: v1\n      interval: 5m\n      query: |\n        avg:trace.http.request.errors{service:{{args.service-name}}}\n        .as_rate()\n</code></pre></p> <p>New Relic: <pre><code>metrics:\n- name: newrelic-apdex\n  provider:\n    newRelic:\n      profile: my-newrelic-account\n      query: |\n        SELECT apdex(duration) \n        FROM Transaction \n        WHERE appName = '{{args.service-name}}'\n</code></pre></p> <p>Custom Web API: <pre><code>metrics:\n- name: custom-health-check\n  provider:\n    web:\n      url: https://my-health-api.com/check?service={{args.service-name}}\n      jsonPath: \"{$.health.status}\"\n  successCondition: result == \"healthy\"\n</code></pre></p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#part-6-traffic-management","title":"\ud83c\udf10 Part 6: Traffic Management","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#traffic-shaping-with-istio","title":"Traffic Shaping with Istio","text":"<p>For precise traffic control:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: myapp\nspec:\n  replicas: 5\n  strategy:\n    canary:\n      canaryService: myapp-canary\n      stableService: myapp-stable\n      trafficRouting:\n        istio:\n          virtualService:\n            name: myapp\n            routes:\n            - primary\n      steps:\n      - setWeight: 10\n      - pause: {duration: 2m}\n      - setWeight: 20\n      - pause: {duration: 2m}\n      - setWeight: 30\n      - pause: {duration: 2m}\n      - setWeight: 50\n      - pause: {}  # Manual approval\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v2.0\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-stable\nspec:\n  selector:\n    app: myapp\n  ports:\n  - port: 80\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-canary\nspec:\n  selector:\n    app: myapp\n  ports:\n  - port: 80\n    targetPort: 8080\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: myapp\nspec:\n  hosts:\n  - myapp\n  http:\n  - name: primary\n    route:\n    - destination:\n        host: myapp-stable\n      weight: 100\n    - destination:\n        host: myapp-canary\n      weight: 0\n</code></pre> <p>Argo Rollouts automatically updates weights in VirtualService!</p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#header-based-routing","title":"Header-Based Routing","text":"<p>Route specific users to canary:</p> <pre><code>strategy:\n  canary:\n    trafficRouting:\n      istio:\n        virtualService:\n          name: myapp\n    canaryMetadata:\n      annotations:\n        role: canary\n    stableMetadata:\n      annotations:\n        role: stable\n    steps:\n    - setCanaryScale:\n        weight: 25\n    - setHeaderRoute:\n        name: canary-by-header\n        match:\n        - headerName: X-Canary\n          headerValue:\n            exact: \"true\"\n    - pause: {}\n</code></pre> <p>Now users with <code>X-Canary: true</code> header get canary version!</p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#part-7-observability-and-monitoring","title":"\ud83d\udcc8 Part 7: Observability and Monitoring","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#rollout-dashboard","title":"Rollout Dashboard","text":"<p>Access Argo Rollouts dashboard:</p> <pre><code>kubectl argo rollouts dashboard\n\n# Open browser to http://localhost:3100\n</code></pre> <p>Dashboard shows: - Current rollout status - Traffic weights - Analysis results - Pod health - Rollout history</p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#grafana-dashboard","title":"Grafana Dashboard","text":"<p>Create custom Grafana dashboard:</p> <pre><code>{\n  \"dashboard\": {\n    \"title\": \"Progressive Delivery\",\n    \"panels\": [\n      {\n        \"title\": \"Canary vs Stable Success Rate\",\n        \"targets\": [\n          {\n            \"expr\": \"sum(rate(http_requests_total{version=\\\"canary\\\",status!~\\\"5..\\\"}[5m])) / sum(rate(http_requests_total{version=\\\"canary\\\"}[5m]))\",\n            \"legendFormat\": \"Canary\"\n          },\n          {\n            \"expr\": \"sum(rate(http_requests_total{version=\\\"stable\\\",status!~\\\"5..\\\"}[5m])) / sum(rate(http_requests_total{version=\\\"stable\\\"}[5m]))\",\n            \"legendFormat\": \"Stable\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Rollout Progress\",\n        \"targets\": [\n          {\n            \"expr\": \"argo_rollouts_info{rollout=\\\"myapp\\\"}\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Analysis Status\",\n        \"targets\": [\n          {\n            \"expr\": \"argo_rollouts_analysis_run_phase{rollout=\\\"myapp\\\"}\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#prometheus-metrics","title":"Prometheus Metrics","text":"<p>Argo Rollouts exposes metrics:</p> <pre><code># Rollout phase (Progressing, Paused, Healthy, etc.)\nargo_rollouts_info{namespace=\"default\",rollout=\"myapp\"}\n\n# Current step\nargo_rollouts_phase{namespace=\"default\",rollout=\"myapp\"}\n\n# Analysis run results\nargo_rollouts_analysis_run_metric_phase{\n  namespace=\"default\",\n  rollout=\"myapp\",\n  metric=\"success-rate\"\n}\n\n# Rollout duration\nargo_rollouts_rollout_duration_seconds{namespace=\"default\",rollout=\"myapp\"}\n</code></pre>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#part-8-practical-exercise","title":"\ud83d\udcaa Part 8: Practical Exercise","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#exercise-implement-full-progressive-delivery","title":"Exercise: Implement Full Progressive Delivery","text":"<p>Objective: Deploy with automated analysis and rollback</p> <p>Scenario: You have a critical e-commerce application. Implement progressive delivery with: 1. 4-step canary (10% \u2192 25% \u2192 50% \u2192 100%) 2. Automated analysis at each step 3. Check: error rate, latency, conversion rate 4. Automatic rollback if metrics degrade 5. Manual approval before 100%</p> <p>Requirements: 1. Create Rollout with canary strategy 2. Define AnalysisTemplate with 3 metrics 3. Configure traffic routing (Istio or Nginx) 4. Integrate with Prometheus 5. Set up Slack notifications 6. Test rollback scenario</p> <p>Starter Template:</p> <pre><code># rollout.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: ecommerce-app\nspec:\n  replicas: 10\n  strategy:\n    canary:\n      steps:\n      - setWeight: 10\n      - pause: {duration: 2m}\n      - analysis:\n          templates:\n          - templateName: ecommerce-health\n      # TODO: Add remaining steps\n  # TODO: Complete configuration\n\n---\n# analysis-template.yaml\napiVersion: argoproj.io/v1alpha1\nkind: AnalysisTemplate\nmetadata:\n  name: ecommerce-health\nspec:\n  # TODO: Define metrics\n  metrics:\n  - name: error-rate\n    # TODO: Configure Prometheus query\n  - name: latency-p95\n    # TODO: Configure Prometheus query\n  - name: conversion-rate\n    # TODO: Configure Prometheus query\n</code></pre> <p>Validation Criteria: - [ ] Rollout deploys progressively (10% \u2192 25% \u2192 50% \u2192 100%) - [ ] Analysis runs at each step - [ ] Metrics collected from Prometheus - [ ] Automatic promotion if healthy - [ ] Automatic rollback if unhealthy - [ ] Manual approval before 100% - [ ] Slack notification on rollback - [ ] Dashboard shows real-time status</p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#part-9-knowledge-check","title":"\ud83c\udf93 Part 9: Knowledge Check","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#quiz-questions","title":"Quiz Questions","text":"<ol> <li>What's the main difference between CD and Progressive Delivery?</li> <li>[ ] Speed of deployment</li> <li>[x] Automated analysis and gradual rollout</li> <li>[ ] Number of environments</li> <li> <p>[ ] Cost</p> </li> <li> <p>What does Argo Rollouts use to make promotion decisions?</p> </li> <li>[ ] Random selection</li> <li>[ ] Time-based only</li> <li>[x] Metrics analysis and success conditions</li> <li> <p>[ ] Manual approval only</p> </li> <li> <p>In an AnalysisTemplate, what is failureLimit?</p> </li> <li>[ ] Maximum deployment failures allowed</li> <li>[x] Number of times metric can fail before rollback</li> <li>[ ] Timeout duration</li> <li> <p>[ ] Percentage threshold</p> </li> <li> <p>What happens if analysis fails during a canary rollout?</p> </li> <li>[ ] Deployment pauses indefinitely</li> <li>[ ] Continues to next step anyway</li> <li>[x] Automatic rollback to stable version</li> <li> <p>[ ] Manual intervention required</p> </li> <li> <p>Which traffic management option provides most precise control?</p> </li> <li>[ ] Kubernetes Service</li> <li>[x] Istio VirtualService</li> <li>[ ] NodePort</li> <li> <p>[ ] LoadBalancer</p> </li> <li> <p>What is the purpose of baseline vs canary comparison?</p> </li> <li>[ ] Save costs</li> <li>[x] Detect regressions by comparing versions</li> <li>[ ] Speed up deployment</li> <li> <p>[ ] Reduce complexity</p> </li> <li> <p>When should you use manual approval gates?</p> </li> <li>[ ] Every deployment</li> <li>[ ] Never, always automate</li> <li>[x] Before high-risk steps like 100% rollout</li> <li> <p>[ ] Only in development</p> </li> <li> <p>What metric provider can Argo Rollouts integrate with?</p> </li> <li>[ ] Only Prometheus</li> <li>[ ] Only Datadog</li> <li>[ ] Only custom webhooks</li> <li>[x] Multiple providers (Prometheus, Datadog, New Relic, etc.)</li> </ol> <p>Answers: 1-B, 2-C, 3-B, 4-C, 5-B, 6-B, 7-C, 8-D</p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#part-10-module-summary-next-steps","title":"\ud83c\udfaf Part 10: Module Summary &amp; Next Steps","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#what-you-learned","title":"What You Learned","text":"<p>\u2705 Progressive Delivery: Automated, metrics-driven rollouts \u2705 Argo Rollouts: Advanced Kubernetes deployment controller \u2705 Automated Analysis: Decision-making based on metrics \u2705 Traffic Shaping: Precise control with Istio/Nginx \u2705 Rollback Automation: Automatic revert on failure \u2705 Observability: Monitoring rollout health  </p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#dora-capabilities-achieved","title":"DORA Capabilities Achieved","text":"<ul> <li>\u2705 CD2: Fully automated deployment with safety</li> <li>\u2705 Team Experimentation: Safe to test in production</li> <li>\u2705 Monitoring: Deployment metrics integrated</li> </ul>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Automate decisions - Let metrics drive promotion/rollback</li> <li>Compare versions - Baseline vs canary reveals regressions</li> <li>Start small - 5-10% canary catches most issues</li> <li>Multiple metrics - Error rate + latency + business metrics</li> <li>Manual gates for critical steps - Humans approve 100% rollout</li> </ol>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#real-world-impact","title":"Real-World Impact","text":"<p>\"After implementing progressive delivery: - Bad deploy detection: 30 minutes \u2192 2 minutes - User impact from bad deploys: 100% \u2192 5% - Manual rollbacks: 15 per month \u2192 0 per month - Deployment confidence: 70% \u2192 98% - Mean time to detect issues: 20 min \u2192 2 min</p> <p>We deploy to production during business hours without fear.\" - SRE Team, E-Commerce Platform</p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#documentation","title":"Documentation","text":"<ul> <li>Argo Rollouts</li> <li>Flagger</li> <li>Progressive Delivery</li> </ul>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#tools","title":"Tools","text":"<ul> <li>Argo Rollouts</li> <li>Flagger</li> <li>Kayenta - Automated canary analysis</li> </ul>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#module-completion","title":"\ud83c\udfc5 Module Completion","text":""},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#assessment-checklist","title":"Assessment Checklist","text":"<ul> <li>[ ] Conceptual Understanding</li> <li>[ ] Explain progressive delivery vs CD</li> <li>[ ] Understand automated analysis</li> <li> <p>[ ] Know when to use manual gates</p> </li> <li> <p>[ ] Practical Skills</p> </li> <li>[ ] Configure Argo Rollouts</li> <li>[ ] Create AnalysisTemplates</li> <li>[ ] Integrate with Prometheus</li> <li>[ ] Set up traffic management</li> <li> <p>[ ] Test automated rollback</p> </li> <li> <p>[ ] Hands-On Lab</p> </li> <li>[ ] Deploy with progressive rollout</li> <li>[ ] Analysis runs successfully</li> <li>[ ] Automatic promotion works</li> <li> <p>[ ] Automatic rollback works</p> </li> <li> <p>[ ] Quiz</p> </li> <li>[ ] Score 80% or higher (6/8 questions)</li> </ul>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#certification-credit","title":"Certification Credit","text":"<p>Upon completion, you earn: - 5 points toward Green Belt certification (75% complete) - Badge: \"Progressive Delivery Expert\" - Skill Unlocked: Automated Canary Analysis</p>"},{"location":"dojo/modules/green-belt/module-11-progressive-delivery/#green-belt-progress","title":"\ud83c\udf96\ufe0f Green Belt Progress","text":"<pre><code>Green Belt: GitOps &amp; Deployment\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nModule 9:  GitOps with ArgoCD     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 25% \u2713\nModule 10: Deployment Strategies  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 50% \u2713\nModule 11: Progressive Delivery   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 75% \u2713\nModule 12: Rollback &amp; Incident    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n</code></pre> <p>Almost there! One more module to Green Belt! \ud83c\udf89</p> <p>Next Module Preview: Module 12 - Rollback &amp; Incident Response (Fast recovery, runbooks, postmortems)</p> <p>\ud83c\udf89 Congratulations! You now know how to implement fully automated, metrics-driven progressive delivery!</p> <p>Ready for the final Green Belt module? Let's learn incident response and rollback strategies! \ud83d\ude80</p> <p>Fawkes Dojo - Where Platform Engineers Are Forged Version 1.0 | Last Updated: October 2025 License: MIT | https://github.com/paruff/fawkes</p>"},{"location":"dojo/modules/green-belt/module-12-rollback-incident/","title":"Fawkes Dojo Module 12: Rollback &amp; Incident Response","text":""},{"location":"dojo/modules/green-belt/module-12-rollback-incident/#module-overview","title":"\ud83c\udfaf Module Overview","text":"<p>Belt Level: \ud83d\udfe2 Green Belt - GitOps &amp; Deployment (FINAL MODULE) Module: 4 of 4 (Green Belt) Duration: 60 minutes Difficulty: Advanced Prerequisites:  - Modules 9, 10, 11 complete - Understanding of deployment strategies - Familiarity with incident management - Basic knowledge of observability</p>"},{"location":"dojo/modules/green-belt/module-12-rollback-incident/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>By the end of this module, you will:</p> <ol> <li>\u2705 Understand different rollback strategies and when to use each</li> <li>\u2705 Implement fast rollback procedures (&lt; 5 minutes)</li> <li>\u2705 Create and execute runbooks for common incidents</li> <li>\u2705 Practice incident response workflows</li> <li>\u2705 Conduct effective postmortems</li> <li>\u2705 Build rollback automation with GitOps</li> <li>\u2705 Improve MTTR (Mean Time to Restore) systematically</li> </ol> <p>DORA Capabilities Addressed: - \u2713 Mean Time to Restore (MTTR) - Elite target: &lt;1 hour - \u2713 Change Approval Process (lightweight) - \u2713 Incident Management</p>"},{"location":"dojo/modules/green-belt/module-12-rollback-incident/#part-1-the-cost-of-downtime","title":"\ud83d\udcd6 Part 1: The Cost of Downtime","text":""},{"location":"dojo/modules/green-belt/module-12-rollback-incident/#why-fast-recovery-matters","title":"Why Fast Recovery Matters","text":"<p>Downtime cost example (e-commerce site, $1M/day revenue):</p> Duration Revenue Loss Customer Impact Reputation Damage 5 minutes $3,472 Minimal None 30 minutes $20,833 Moderate Minor 2 hours $83,333 Significant Moderate 8 hours $333,333 Severe Major 24 hours $1,000,000"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/","title":"Module 1: Internal Delivery Platforms - What and Why","text":"<p>Belt Level: \ud83e\udd4b White Belt Duration: 60 minutes Prerequisites: Basic command line, Git, Docker knowledge DORA Capabilities: Continuous Delivery (introduction)</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#1-learning-objectives-3-minutes","title":"1. Learning Objectives (3 minutes)","text":""},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this module, you will be able to:</p> <ul> <li>\u2705 Define what an Internal Delivery Platform (IDP) is and explain its core components</li> <li>\u2705 Articulate why organizations need IDPs using concrete business metrics</li> <li>\u2705 Explain the \"Platform as a Product\" mindset and its benefits</li> <li>\u2705 Identify the key stakeholders and their needs in platform engineering</li> <li>\u2705 Navigate the Fawkes platform and understand its architecture</li> <li>\u2705 Recognize how Team Topologies concepts apply to platform teams</li> </ul>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#why-it-matters","title":"Why It Matters","text":"<p>The Problem: Modern software delivery involves dozens of tools, complex configurations, and countless decisions that slow teams down. According to the 2023 State of DevOps Report:</p> <ul> <li>Elite performers deploy 417 times more frequently than low performers</li> <li>They have a 5,788 times lower change failure rate</li> <li>Their lead time for changes is 6,570 times faster</li> </ul> <p>The Solution: Internal Delivery Platforms abstract away complexity and provide \"golden paths\" that enable teams to move fast while maintaining quality and security.</p> <p>Your Role: Understanding IDPs is the foundation for everything else in this dojo. You can't improve what you don't understand.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#success-criteria","title":"Success Criteria","text":"<p>You've mastered this module when you can:</p> <ul> <li>Explain to a colleague why your organization needs a platform (in business terms)</li> <li>Navigate the Fawkes Backstage portal confidently</li> <li>Identify which Fawkes components serve which developer needs</li> <li>Articulate the difference between \"platform\" and \"just some scripts\"</li> </ul>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#2-theory-concepts-15-minutes","title":"2. Theory &amp; Concepts (15 minutes)","text":""},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#video-what-is-an-internal-delivery-platform-7-minutes","title":"\ud83d\udcfa Video: What is an Internal Delivery Platform? (7 minutes)","text":"<p>[VIDEO PLACEHOLDER] Script Summary: - Opening: Show developer frustration with 12-step deployment process - Definition: IDP as \"self-service platform that provides golden paths\" - Key components: Portal, CI/CD, Observability, Infrastructure - Platform as Product: treating developers as customers - Fawkes tour: Show actual platform in action - Closing: \"A platform that makes the right thing the easy thing\"</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#what-is-an-internal-delivery-platform","title":"What is an Internal Delivery Platform?","text":"<p>An Internal Delivery Platform (IDP) is a curated set of tools, services, and self-service capabilities that application teams use to deliver and manage their software with minimal friction.</p> <p>Think of it as \"paved roads for software delivery\"\u2014just as cities build roads so citizens don't have to navigate rough terrain, platforms build golden paths so developers don't have to navigate infrastructure complexity.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#the-three-characteristics-of-an-idp","title":"The Three Characteristics of an IDP","text":"<ol> <li> <p>Self-Service: Developers can provision resources, deploy applications, and access tools without waiting for tickets or manual intervention</p> </li> <li> <p>Curated &amp; Opinionated: The platform team makes thoughtful decisions about tools, patterns, and workflows, reducing cognitive load for app teams</p> </li> <li> <p>Built on Standards: Uses industry-standard tools and practices, avoiding vendor lock-in and enabling portability</p> </li> </ol>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#what-an-idp-is-not","title":"What an IDP is NOT","text":"<p>\u274c Not a PaaS: Unlike Heroku or Cloud Foundry, IDPs give developers more control and flexibility \u274c Not just CI/CD: CI/CD is one component, but IDPs include much more (observability, security, governance) \u274c Not \"throw tools over the wall\": True platforms treat developers as customers and measure satisfaction \u274c Not one-size-fits-all: Platforms provide flexibility for different application types and team maturity levels</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#the-platform-as-a-product-mindset","title":"The Platform as a Product Mindset","text":"<p>Traditional IT: \"Here are some tools. Figure it out yourself.\" Platform Engineering: \"What do you need to be productive? Let me build that for you.\"</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#key-principles","title":"Key Principles","text":"<p>1. Developers are Your Customers - Understand their pain points through interviews and surveys - Measure satisfaction with NPS (Net Promoter Score) - Iterate based on feedback, not assumptions</p> <p>2. Build for the 80% Use Case - Provide golden paths for common scenarios - Allow escape hatches for advanced users - Don't try to solve every edge case immediately</p> <p>3. Measure Platform Value - Track adoption rates (% of teams using the platform) - Monitor time saved (before vs. after metrics) - Calculate cost efficiency (infrastructure + personnel)</p> <p>4. Treat It Like a Product - Maintain a roadmap based on customer needs - Version releases and communicate changes - Provide documentation and support</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#team-topologies-enabling-teams","title":"Team Topologies &amp; Enabling Teams","text":"<p>The book Team Topologies by Matthew Skelton and Manuel Pais introduces four fundamental team types. Platform teams are Enabling Teams.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#the-four-team-types","title":"The Four Team Types","text":"<ol> <li>Stream-Aligned Teams: Product/feature teams that deliver value to customers</li> <li>Enabling Teams: Help stream-aligned teams overcome obstacles (platform teams!)</li> <li>Complicated Subsystem Teams: Specialists for complex subsystems</li> <li>Platform Teams: Provide internal services to reduce cognitive load</li> </ol>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#platform-team-responsibilities","title":"Platform Team Responsibilities","text":"<p>As a platform engineer, your job is to:</p> <ul> <li>Reduce cognitive load: Abstract away infrastructure complexity</li> <li>Enable autonomy: Give teams self-service capabilities</li> <li>Accelerate delivery: Remove blockers and reduce lead time</li> <li>Ensure quality: Build in security, testing, and observability</li> <li>Continuously improve: Treat the platform as a product that evolves</li> </ul>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#why-organizations-need-idps","title":"Why Organizations Need IDPs","text":""},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#the-developer-productivity-crisis","title":"The Developer Productivity Crisis","text":"<p>Modern developers spend 70-80% of their time on non-value-added activities:</p> <ul> <li>Waiting for environments to be provisioned</li> <li>Debugging CI/CD failures</li> <li>Figuring out deployment procedures</li> <li>Managing infrastructure configurations</li> <li>Coordinating with 5+ teams for a single deployment</li> </ul>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#the-business-impact","title":"The Business Impact","text":"<p>Without a platform: - Slower time to market: Weeks or months to deploy new services - Higher operational costs: Manual work doesn't scale - Increased risk: No standardization leads to security vulnerabilities - Developer attrition: Frustrated developers leave for better experiences</p> <p>With a platform: - Faster deployments: From weeks to minutes - Lower costs: Automation reduces manual work by 60-80% - Better security: Security built into golden paths - Happier developers: NPS increases by 30-50 points</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#real-world-example-spotify","title":"Real-World Example: Spotify","text":"<p>Spotify's Backstage (which Fawkes uses!) reduced their time to: - Provision a new service: From 4 weeks \u2192 5 minutes - Deploy to production: From 2 hours \u2192 10 minutes - Onboard a new developer: From 2 weeks \u2192 1 day</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#fawkes-platform-architecture","title":"Fawkes Platform Architecture","text":"<p>Fawkes provides a complete IDP built on industry-standard open-source tools:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Developer Experience Layer                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Backstage Portal (Developer Portal)               \u2502 \u2502\n\u2502  \u2502  \u2022 Service Catalog  \u2022 TechDocs  \u2022 Scaffolder     \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Core Platform Services                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   CI/CD      \u2502  \u2502 GitOps       \u2502  \u2502 Observability\u2502   \u2502\n\u2502  \u2502  (Jenkins)   \u2502  \u2502 (ArgoCD)     \u2502  \u2502 (Prometheus) \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Artifacts   \u2502  \u2502  Security    \u2502  \u2502 Collaboration\u2502   \u2502\n\u2502  \u2502  (Harbor)    \u2502  \u2502  (Trivy)     \u2502  \u2502 (Mattermost) \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            Infrastructure &amp; Orchestration                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Kubernetes Clusters (AWS EKS)                     \u2502  \u2502\n\u2502  \u2502  \u2022 Multi-environment (dev, staging, prod)         \u2502  \u2502\n\u2502  \u2502  \u2022 Multi-tenant namespaces                        \u2502  \u2502\n\u2502  \u2502  \u2022 Infrastructure as Code (Terraform)             \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#key-fawkes-components","title":"Key Fawkes Components","text":"Component Purpose Technology Backstage Developer portal, service catalog Backstage by Spotify Jenkins CI/CD pipelines Jenkins with K8s agents ArgoCD GitOps continuous deployment ArgoCD Harbor Container registry Harbor registry Prometheus/Grafana Metrics &amp; monitoring Prometheus stack OpenSearch Log aggregation &amp; search OpenSearch Jaeger Distributed tracing Jaeger Mattermost Team collaboration Mattermost Focalboard Project tracking Focalboard"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#common-pitfalls-how-to-avoid-them","title":"Common Pitfalls &amp; How to Avoid Them","text":""},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#pitfall-1-building-in-isolation","title":"\u274c Pitfall 1: Building in Isolation","text":"<p>Problem: Platform team builds what they think developers need without asking them. Solution: Conduct regular developer interviews, track NPS, dogfood your own platform.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#pitfall-2-too-much-control","title":"\u274c Pitfall 2: Too Much Control","text":"<p>Problem: Platform so restrictive that developers route around it. Solution: Provide golden paths for 80% of cases, escape hatches for edge cases.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#pitfall-3-no-documentation","title":"\u274c Pitfall 3: No Documentation","text":"<p>Problem: Great platform, but no one knows how to use it. Solution: Documentation is a first-class feature. Use TechDocs, record videos, provide examples.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#pitfall-4-ignoring-feedback","title":"\u274c Pitfall 4: Ignoring Feedback","text":"<p>Problem: Developers complain but nothing changes. Solution: Public roadmap, regular releases, visible responsiveness to feedback.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#pitfall-5-no-metrics","title":"\u274c Pitfall 5: No Metrics","text":"<p>Problem: Can't prove platform value to leadership. Solution: Track DORA metrics, adoption rates, time saved, cost efficiency.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#3-demonstration-10-minutes","title":"3. Demonstration (10 minutes)","text":""},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#video-fawkes-platform-tour-10-minutes","title":"\ud83d\udcfa Video: Fawkes Platform Tour (10 minutes)","text":"<p>[VIDEO PLACEHOLDER] Script: Instructor walks through Fawkes platform showing:</p> <ol> <li>Backstage Home (1 min)</li> <li>Overview page, quick links</li> <li> <p>Component search</p> </li> <li> <p>Service Catalog (2 min)</p> </li> <li>Browse services</li> <li>View service details (APIs, docs, owner)</li> <li> <p>Dependencies visualization</p> </li> <li> <p>TechDocs (1 min)</p> </li> <li>Navigate documentation</li> <li> <p>Search functionality</p> </li> <li> <p>Create New Service (2 min)</p> </li> <li>Click \"Create\" \u2192 choose template</li> <li>Fill in service details</li> <li> <p>Show generated repository</p> </li> <li> <p>DORA Dashboard (2 min)</p> </li> <li>View deployment frequency</li> <li>Lead time for changes</li> <li> <p>Show live metrics</p> </li> <li> <p>CI/CD View (2 min)</p> </li> <li>Jenkins integration</li> <li>Pipeline status</li> <li>Build logs</li> </ol> <p>Key Message: \"Notice how everything you need is in one place. No jumping between 12 different tools.\"</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#key-takeaways-from-demo","title":"Key Takeaways from Demo","text":"<ol> <li>Single Pane of Glass: All your tools accessible from Backstage</li> <li>Self-Service: Create new services in minutes, not weeks</li> <li>Discoverability: Find services, docs, and owners easily</li> <li>Visibility: See deployments, metrics, and health in real-time</li> <li>Standardization: Every service follows the same patterns</li> </ol>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#4-hands-on-lab-20-minutes","title":"4. Hands-On Lab (20 minutes)","text":""},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#lab-overview","title":"Lab Overview","text":"<p>You'll explore the Fawkes Backstage portal, navigate the service catalog, and understand the platform architecture by completing a scavenger hunt.</p> <p>Time Estimate: 15-20 minutes Difficulty: Beginner Auto-Graded: Yes Points: 50</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#lab-environment","title":"Lab Environment","text":"<p>When you click \"Start Lab\", we'll provision: - \u2705 Access to Fawkes demo environment - \u2705 Read-only access to sample services - \u2705 Your personal lab notebook (Markdown file) - \u2705 Credentials in your Backstage profile</p> <p>Environment will be available for 24 hours from start time.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#lab-instructions","title":"Lab Instructions","text":""},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#part-1-navigate-backstage-15-points","title":"Part 1: Navigate Backstage (15 points)","text":"<ol> <li>Access Backstage (3 points)</li> <li>Click \"Start Lab\" button below</li> <li>Log in with your dojo credentials</li> <li>Find the \"Home\" page</li> </ol> <p>\u2705 Validation: We'll check that you logged in successfully</p> <ol> <li>Explore the Catalog (6 points)</li> <li>Click \"Catalog\" in the left sidebar</li> <li>Find a service called <code>sample-spring-boot-app</code></li> <li>Open its details page</li> <li>Find and click \"View Source\" to see its GitHub repo</li> </ol> <p>\u2705 Validation: We'll check that you visited the service page</p> <ol> <li>View Documentation (6 points)</li> <li>While on the <code>sample-spring-boot-app</code> page, click \"Docs\" tab</li> <li>Read the \"Getting Started\" documentation</li> <li>Notice the \"Edit on GitHub\" link</li> </ol> <p>\u2705 Validation: We'll check that you accessed TechDocs</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#part-2-understand-service-details-20-points","title":"Part 2: Understand Service Details (20 points)","text":"<ol> <li>Identify Service Owner (5 points)</li> <li>On the <code>sample-spring-boot-app</code> page, find the \"About\" section</li> <li>Note the owner (person or team)</li> <li>Find the Mattermost channel for support</li> </ol> <p>\ud83d\udcdd Submit: Who owns this service? (Type answer in lab notebook)</p> <ol> <li>Explore Dependencies (5 points)</li> <li>Click the \"Dependencies\" tab</li> <li>Identify what APIs this service depends on</li> </ol> <p>\ud83d\udcdd Submit: How many dependencies does this service have?</p> <ol> <li>Check CI/CD Status (5 points)</li> <li>Click the \"CI/CD\" tab</li> <li>View the latest Jenkins pipeline run</li> <li>Note whether the build passed or failed</li> </ol> <p>\ud83d\udcdd Submit: What was the status of the last build?</p> <ol> <li>Review DORA Metrics (5 points)</li> <li>Navigate to \"DORA Metrics\" from the left sidebar</li> <li>Find the deployment frequency for the last 7 days</li> <li>Note the lead time for changes</li> </ol> <p>\ud83d\udcdd Submit: What is the deployment frequency? (e.g., \"5 per week\")</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#part-3-platform-architecture-understanding-15-points","title":"Part 3: Platform Architecture Understanding (15 points)","text":"<ol> <li>Identify Platform Components (10 points)</li> <li>Navigate to \"Platform Services\" from the left sidebar</li> <li>You should see tiles for Jenkins, ArgoCD, Harbor, Grafana, etc.</li> <li>Click on each one to see its status</li> </ol> <p>\ud83d\udcdd Submit: List the 5 platform services you found (comma-separated)</p> <ol> <li>Explore a Deployment (5 points)</li> <li>Click on \"ArgoCD\" tile to open ArgoCD</li> <li>Browse the applications</li> <li>Find the <code>sample-spring-boot-app</code> in the list</li> </ol> <p>\ud83d\udcdd Submit: What is the sync status of the sample app in ArgoCD?</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#lab-submission","title":"Lab Submission","text":"<p>Once you've completed all tasks:</p> <ol> <li>Open your lab notebook (automatically created in your namespace)</li> <li>Ensure all answers are recorded</li> <li>Click \"Submit Lab\" button in Backstage</li> </ol> <p>Auto-grading will run within 1 minute. You'll see: - \u2705 Checks that passed (green) - \u274c Checks that failed (red) with hints - Final score out of 50 points - Option to retry if score &lt; 40</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#troubleshooting-hints","title":"Troubleshooting Hints","text":"<p>Can't log in to Backstage? - Verify you're using your dojo username (not email) - Try incognito/private browsing mode - Check #dojo-support in Mattermost</p> <p>Can't find a service? - Use the search bar (top right) - Check that catalog loaded (refresh if empty) - Try filtering by \"Kind: Component\"</p> <p>ArgoCD or other tools not opening? - Some links open in new tabs (check pop-up blocker) - You may need to accept security warnings (self-signed certs in demo environment)</p> <p>Lab not grading? - Ensure you clicked \"Submit Lab\" button - Wait up to 60 seconds for auto-grading - Check that all required answers are in your lab notebook</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#5-knowledge-check-5-minutes","title":"5. Knowledge Check (5 minutes)","text":""},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#quiz-internal-delivery-platforms-fundamentals","title":"Quiz: Internal Delivery Platforms Fundamentals","text":"<p>Instructions: Answer all 10 questions. You need 8/10 (80%) to pass. Unlimited attempts allowed.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#question-1","title":"Question 1","text":"<p>What is the primary purpose of an Internal Delivery Platform?</p> <ul> <li>[ ] A) Replace all existing tools with a single monolithic system</li> <li>[x] B) Provide self-service golden paths that reduce cognitive load for developers</li> <li>[ ] C) Control everything developers do to enforce policies</li> <li>[ ] D) Eliminate the need for DevOps or platform engineers</li> </ul> <p>Explanation: IDPs are about enabling developers through self-service and curated tools, not controlling or replacing everything.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#question-2","title":"Question 2","text":"<p>According to Team Topologies, what type of team is a platform team?</p> <ul> <li>[ ] A) Stream-aligned team</li> <li>[x] B) Enabling team</li> <li>[ ] C) Complicated subsystem team</li> <li>[ ] D) Infrastructure team</li> </ul> <p>Explanation: Platform teams are enabling teams that help stream-aligned teams overcome obstacles and reduce cognitive load.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#question-3","title":"Question 3","text":"<p>What does \"Platform as a Product\" mean?</p> <ul> <li>[ ] A) Selling your platform to external customers</li> <li>[x] B) Treating internal developers as customers and measuring their satisfaction</li> <li>[ ] C) Using product management tools to track platform development</li> <li>[ ] D) Making the platform a commercial product</li> </ul> <p>Explanation: It means treating developers as customers, understanding their needs, and measuring satisfaction\u2014just like a real product.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#question-4","title":"Question 4","text":"<p>Which of these is NOT a characteristic of a well-designed IDP?</p> <ul> <li>[ ] A) Self-service capabilities</li> <li>[ ] B) Opinionated but flexible</li> <li>[x] C) Forces all teams to use exactly the same tools with no exceptions</li> <li>[ ] D) Built on industry standards</li> </ul> <p>Explanation: Good platforms are opinionated but provide escape hatches. Forcing everyone into identical workflows leads to teams routing around the platform.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#question-5","title":"Question 5","text":"<p>What is Backstage in the Fawkes platform?</p> <ul> <li>[ ] A) The CI/CD pipeline tool</li> <li>[x] B) The developer portal that provides a single pane of glass</li> <li>[ ] C) The Kubernetes orchestration system</li> <li>[ ] D) The monitoring and observability tool</li> </ul> <p>Explanation: Backstage is the developer portal\u2014the single interface where developers access all platform services.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#question-6","title":"Question 6","text":"<p>Why do organizations invest in Internal Delivery Platforms?</p> <ul> <li>[ ] A) Because it's a trendy thing to do</li> <li>[ ] B) To give platform teams more control</li> <li>[x] C) To accelerate delivery, reduce costs, and improve developer experience</li> <li>[ ] D) To replace cloud providers</li> </ul> <p>Explanation: IDPs deliver business value through faster delivery, lower costs, better security, and improved developer satisfaction.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#question-7","title":"Question 7","text":"<p>What does \"golden path\" mean in platform engineering?</p> <ul> <li>[x] A) The recommended, easy-to-follow path for common use cases</li> <li>[ ] B) The most expensive way to deploy applications</li> <li>[ ] C) A strict requirement that all teams must follow</li> <li>[ ] D) The path used only by senior engineers</li> </ul> <p>Explanation: A golden path is the easy, paved road for the 80% use case\u2014making the right thing the easy thing.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#question-8","title":"Question 8","text":"<p>Which metric is NOT typically used to measure platform success?</p> <ul> <li>[ ] A) Developer Net Promoter Score (NPS)</li> <li>[ ] B) Platform adoption rate</li> <li>[ ] C) Time saved per deployment</li> <li>[x] D) Number of tickets closed by the platform team</li> </ul> <p>Explanation: Platform success is about developer outcomes (NPS, adoption, time saved), not just operational metrics like ticket volume.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#question-9","title":"Question 9","text":"<p>In Fawkes, which tool is responsible for GitOps-based deployments?</p> <ul> <li>[ ] A) Jenkins</li> <li>[x] B) ArgoCD</li> <li>[ ] C) Harbor</li> <li>[ ] D) Backstage</li> </ul> <p>Explanation: ArgoCD manages GitOps-style continuous deployment, syncing Git repos to Kubernetes clusters.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#question-10","title":"Question 10","text":"<p>What is a common pitfall when building an IDP?</p> <ul> <li>[x] A) Building in isolation without talking to developers</li> <li>[ ] B) Using industry-standard open-source tools</li> <li>[ ] C) Providing documentation and examples</li> <li>[ ] D) Measuring platform adoption and satisfaction</li> </ul> <p>Explanation: Building without developer input is the #1 pitfall\u2014you end up solving the wrong problems.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#quiz-results","title":"Quiz Results","text":"<p>Score: X / 10</p> <ul> <li>\u2705 Passed (8+): Great job! You're ready to move to the next section.</li> <li>\u274c Not Yet (&lt;8): Review the content and try again. Focus on areas you missed.</li> </ul> <p>Incorrect answers? Each question links back to the relevant section for review.</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#6-reflection-next-steps-5-minutes","title":"6. Reflection &amp; Next Steps (5 minutes)","text":""},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#what-you-learned","title":"What You Learned","text":"<p>Congratulations! \ud83c\udf89 You've completed Module 1. Let's recap:</p> <p>\u2705 You now understand: - What an Internal Delivery Platform is and why it matters - The \"Platform as a Product\" mindset - How Team Topologies applies to platform teams - The Fawkes platform architecture and components - How to navigate Backstage and find information</p> <p>\u2705 You can now: - Explain the business value of IDPs to colleagues - Navigate the Fawkes Backstage portal confidently - Identify the core components of the platform - Find service owners, documentation, and dependencies</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#how-this-connects-to-your-work","title":"How This Connects to Your Work","text":"<p>For Developers: - You now understand why your company invested in a platform - You know where to find docs, who to ask for help, and how to deploy apps - You can take advantage of golden paths instead of reinventing the wheel</p> <p>For Platform Engineers: - You understand your role as an \"enabling team\" - You know how to treat developers as customers - You can articulate the value of the platform to stakeholders</p> <p>For Leaders: - You can explain how platforms accelerate delivery and reduce costs - You understand the metrics that matter (DORA, NPS, adoption) - You can make the case for platform investments</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#reflection-questions","title":"Reflection Questions","text":"<p>Take 2 minutes to think about:</p> <ol> <li>What surprised you most about IDPs?</li> <li> <p>Was there a concept that changed your perspective?</p> </li> <li> <p>How does your current workflow compare?</p> </li> <li> <p>Are you using a platform? Doing things manually? Somewhere in between?</p> </li> <li> <p>What would improve your developer experience?</p> </li> <li> <p>If you could wave a magic wand, what would you change?</p> </li> <li> <p>Who could benefit from this knowledge?</p> </li> <li>Think of 2-3 colleagues who should go through this module</li> </ol>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#additional-resources","title":"Additional Resources","text":"<p>\ud83d\udcda Further Reading: - Team Topologies Book - Foundation for platform thinking - Backstage Documentation - Learn more about Backstage - Platform Engineering Community - Join the community - DORA Research - Dive into the research behind DORA metrics</p> <p>\ud83c\udfa5 Videos to Watch: - \"What is Platform Engineering?\" by Luca Galante (10 min) - \"Spotify's Backstage Journey\" (15 min) - \"Building a Platform as a Product\" by Camille Fournier (30 min)</p> <p>\ud83d\udcac Community: - Join <code>#dojo-white-belt</code> in Mattermost - Share your \"aha!\" moments - Help others who are just starting</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#preview-module-2","title":"Preview: Module 2","text":"<p>Next Up: DORA Metrics - The North Star</p> <p>In Module 2, you'll learn: - The Four Key Metrics (Deployment Frequency, Lead Time, MTTR, Change Failure Rate) - Why these metrics matter to your business - How Fawkes automatically tracks DORA metrics - How to interpret your team's metrics and drive improvement</p> <p>Time: 60 minutes Hands-On: Build your first DORA dashboard</p> <p>Get Ready: Think about your team's current deployment process. How long does it take? How often do you deploy? How often do deployments fail?</p>"},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#module-completion","title":"Module Completion","text":""},{"location":"dojo/modules/white-belt/module-01-what-is-idp/#youve-completed-module-1","title":"\u2705 You've Completed Module 1!","text":"<p>Next Steps: 1. \u2705 Mark this module complete in your Backstage profile 2. \ud83d\udcca View your progress on the Dojo dashboard 3. \ud83d\udcac Share your completion in <code>#dojo-achievements</code> (optional but encouraged!) 4. \u27a1\ufe0f Continue to Module 2 when ready</p> <p>Time Investment: 60 minutes Skills Gained: Platform fundamentals, Backstage navigation Progress: 1 of 4 modules toward White Belt (25% complete)</p> <p>Questions or Issues? - \ud83d\udcac Ask in <code>#dojo-white-belt</code> on Mattermost - \ud83d\udce7 Email: dojo@fawkes.io - \ud83d\udc1b Report bugs: GitHub Issues</p> <p>Feedback? - Rate this module (takes 30 seconds) - Suggest improvements - Help us make the dojo better!</p> <p>Module Author: Fawkes Learning Team Last Updated: October 2025 Version: 1.0</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/","title":"Module 2: DORA Metrics - The North Star","text":"<p>Belt Level: \ud83e\udd4b White Belt Duration: 60 minutes Prerequisites: Module 1 completed DORA Capabilities: Monitoring and Observability, Continuous Delivery</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#1-learning-objectives-3-minutes","title":"1. Learning Objectives (3 minutes)","text":""},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this module, you will be able to:</p> <ul> <li>\u2705 Explain the Four Key Metrics and why they predict software delivery performance</li> <li>\u2705 Differentiate between Elite, High, Medium, and Low performers using data</li> <li>\u2705 Calculate each DORA metric for your team</li> <li>\u2705 Interpret DORA metrics dashboards and identify improvement opportunities</li> <li>\u2705 Understand how Fawkes automates DORA metrics collection</li> <li>\u2705 Articulate the business impact of improving these metrics</li> </ul>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#why-it-matters","title":"Why It Matters","text":"<p>The Research: The DORA (DevOps Research and Assessment) team spent 9 years studying 32,000+ organizations to answer one question:</p> <p>\"What separates high-performing software teams from everyone else?\"</p> <p>The Discovery: Just four metrics predict organizational performance better than any other measures. Organizations that excel at these metrics are:</p> <ul> <li>2x more likely to exceed profitability goals</li> <li>2x more likely to exceed productivity goals  </li> <li>2x more likely to exceed customer satisfaction goals</li> <li>50% more likely to have higher market share</li> </ul> <p>Your Opportunity: These aren't vanity metrics\u2014they're predictive indicators of success. Understanding and improving them is literally your competitive advantage.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#success-criteria","title":"Success Criteria","text":"<p>You've mastered this module when you can:</p> <ul> <li>Explain each metric to a non-technical executive in business terms</li> <li>Look at a DORA dashboard and immediately spot problems</li> <li>Calculate metrics for your own team</li> <li>Recommend specific improvements based on metric trends</li> <li>Understand how platform engineering improves all four metrics</li> </ul>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#2-theory-concepts-15-minutes","title":"2. Theory &amp; Concepts (15 minutes)","text":""},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#video-the-four-key-metrics-explained-7-minutes","title":"\ud83d\udcfa Video: The Four Key Metrics Explained (7 minutes)","text":"<p>[VIDEO PLACEHOLDER] See detailed script in supporting document</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#the-four-key-metrics","title":"The Four Key Metrics","text":"<p>DORA identified four metrics that matter most for software delivery performance:</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#1-deployment-frequency-df","title":"1. \ud83d\ude80 Deployment Frequency (DF)","text":"<p>Definition: How often does your organization deploy code to production?</p> <p>Why It Matters: Deployment frequency is a proxy for batch size. Small, frequent deployments mean: - Lower risk (less can go wrong) - Faster feedback (find problems sooner) - Faster time to market (features reach customers quickly) - Better team morale (see your work in production)</p> <p>Performance Levels: - Elite: Multiple deployments per day (on-demand) - High: Between once per day and once per week - Medium: Between once per week and once per month - Low: Between once per month and once every six months</p> <p>Example: - Low Performer: \"We deploy every 2 months during maintenance windows\" - Elite Performer: \"We deploy 50+ times per day automatically\"</p> <p>How Fawkes Tracks It: Every ArgoCD sync to production is recorded as a deployment event.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#2-lead-time-for-changes-lt","title":"2. \u23f1\ufe0f Lead Time for Changes (LT)","text":"<p>Definition: How long does it take for a commit to go from version control to running in production?</p> <p>Why It Matters: Lead time measures efficiency. Short lead times mean: - Faster feature delivery to customers - Quicker response to market changes - Reduced work-in-progress inventory - Higher developer satisfaction</p> <p>Performance Levels: - Elite: Less than one hour - High: Between one day and one week - Medium: Between one month and six months - Low: More than six months</p> <p>Example: - Low Performer: \"I wrote this code 3 months ago. Still waiting for QA approval.\" - Elite Performer: \"I committed code 20 minutes ago. It's already in production.\"</p> <p>How Fawkes Tracks It: Measures time from Git commit to successful ArgoCD sync in production.</p> <p>Important: This is NOT \"time to write code.\" It's \"time code sits waiting\" in your process.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#3-time-to-restore-service-mttr","title":"3. \ud83d\udd27 Time to Restore Service (MTTR)","text":"<p>Definition: How long does it take to restore service when an incident occurs?</p> <p>Why It Matters: MTTR measures resilience. Fast recovery means: - Less customer impact from incidents - Lower stress for on-call engineers - Better SLAs and reliability - Confidence to move fast (you can recover quickly)</p> <p>Performance Levels: - Elite: Less than one hour - High: Less than one day - Medium: Between one day and one week - Low: More than one week</p> <p>Example: - Low Performer: \"Production is down. We need a 5-hour emergency change board meeting.\" - Elite Performer: \"Production issue detected. Automatic rollback completed in 4 minutes.\"</p> <p>How Fawkes Tracks It: Measures time from incident creation (Alertmanager) to resolution (successful deployment or rollback).</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#4-change-failure-rate-cfr","title":"4. \u274c Change Failure Rate (CFR)","text":"<p>Definition: What percentage of deployments cause failures in production?</p> <p>Why It Matters: CFR measures quality. Low failure rates mean: - Sustainable velocity (not breaking things constantly) - Lower operational burden - Better customer experience - More time for feature development (less firefighting)</p> <p>Performance Levels: - Elite: 0-15% - High: 16-30% - Medium: 16-30% - Low: 16-30%</p> <p>Note: 2023 research collapsed High/Medium/Low into same range. Elite performers stand out with &lt;15%.</p> <p>Example: - Low Performer: \"Every Friday deployment requires weekend hotfixes.\" - Elite Performer: \"We deploy 100 times per week with 5% failure rate.\"</p> <p>How Fawkes Tracks It: Compares successful deployments to failed deployments (rollbacks, incidents within 24 hours of deploy).</p> <p>Important: Some failure is expected and healthy! 0% might mean you're too risk-averse.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#the-performance-spectrum","title":"The Performance Spectrum","text":"<p>Here's how teams compare across the four metrics:</p> Performance Deployment Freq Lead Time MTTR Change Fail Rate Elite On-demand (multiple/day) &lt; 1 hour &lt; 1 hour 0-15% High 1/day - 1/week 1 day - 1 week &lt; 1 day 16-30% Medium 1/week - 1/month 1 week - 1 month 1 day - 1 week 16-30% Low 1/month - 6/months 1 month - 6 months &gt; 1 week 16-30% <p>Key Insight: Elite performers are 417x faster at deploying and 6,570x faster at going from commit to production than low performers!</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#why-these-four-metrics","title":"Why These Four Metrics?","text":""},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#they-balance-speed-and-stability","title":"They Balance Speed and Stability","text":"<p>Speed Metrics: - Deployment Frequency - Lead Time for Changes</p> <p>Stability Metrics: - Time to Restore Service - Change Failure Rate</p> <p>You can't optimize for speed alone (you'll break everything) or stability alone (you'll move too slowly). Elite performers excel at all four simultaneously.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#theyre-predictive-not-descriptive","title":"They're Predictive, Not Descriptive","text":"<p>These metrics don't just describe performance\u2014they predict business outcomes:</p> <ul> <li>Profitability: Teams with high DORA metrics are 2x more likely to exceed profitability targets</li> <li>Market Share: 50% more likely to have higher market share</li> <li>Productivity: 2x more likely to exceed productivity goals</li> <li>Customer Satisfaction: 2x more likely to have happy customers</li> </ul>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#they-focus-on-outcomes-not-activities","title":"They Focus on Outcomes, Not Activities","text":"<p>Bad metrics: Lines of code written, hours worked, tickets closed Good metrics (DORA): How fast you deliver value and how reliably</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#the-business-case-for-dora-metrics","title":"The Business Case for DORA Metrics","text":""},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#scenario-legacy-bank-vs-digital-startup","title":"Scenario: Legacy Bank vs. Digital Startup","text":"<p>Legacy Bank (Low Performer): - Deploys every 3 months - Lead time: 4 months from idea to production - MTTR: 3 days (requires emergency change approval) - CFR: 25% (1 in 4 releases has issues)</p> <p>Impact: - New credit card feature takes 1 year to launch (competitors launch in 6 weeks) - When mobile app crashes, customers can't access accounts for 3 days - Developer turnover: 35% annually (frustration with slow process)</p> <p>Digital Startup (Elite Performer): - Deploys 20x per day - Lead time: 2 hours from commit to production - MTTR: 15 minutes (automated rollback) - CFR: 8% (rigorous testing catches issues)</p> <p>Impact: - New feature ideas tested with customers within days - Production incidents resolved in minutes, not days - Developer retention: 95% (engineers love working there)</p> <p>Result: Startup captures 30% market share in 2 years despite having 1/100th the resources.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#how-platform-engineering-improves-dora-metrics","title":"How Platform Engineering Improves DORA Metrics","text":"<p>A well-designed platform (like Fawkes) directly improves all four metrics:</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#deployment-frequency","title":"Deployment Frequency \u2191","text":"<ul> <li>Automation: CI/CD pipelines remove manual deployment steps</li> <li>Self-Service: Teams deploy when ready, no waiting for tickets</li> <li>Reduced Fear: Good testing and rollback make deployments safe</li> </ul>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#lead-time","title":"Lead Time \u2193","text":"<ul> <li>Automated Testing: No waiting for manual QA</li> <li>Fast Pipelines: Optimized builds complete in minutes</li> <li>Simplified Process: Golden paths remove decision paralysis</li> </ul>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#mttr","title":"MTTR \u2193","text":"<ul> <li>Observability: Know immediately when things break</li> <li>Quick Rollback: Automated rollback via GitOps</li> <li>Runbooks: Standardized incident response</li> </ul>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#change-failure-rate","title":"Change Failure Rate \u2193","text":"<ul> <li>Quality Gates: Automated security scanning, testing</li> <li>Consistent Patterns: Golden paths reduce errors</li> <li>Progressive Delivery: Canary deployments catch issues early</li> </ul> <p>The Platform Advantage: Manual processes hit scaling limits. Platforms enable teams to improve metrics continuously.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#common-misconceptions","title":"Common Misconceptions","text":""},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#we-cant-measure-that-in-our-organization","title":"\u274c \"We can't measure that in our organization\"","text":"<p>Reality: If you deploy software, you can measure these metrics. Start simple with manual tracking if needed.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#our-industry-is-different-this-doesnt-apply","title":"\u274c \"Our industry is different; this doesn't apply\"","text":"<p>Reality: DORA research spans every industry from finance to gaming to healthcare. The metrics apply universally.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#we-need-to-slow-down-to-improve-quality","title":"\u274c \"We need to slow down to improve quality\"","text":"<p>Reality: Elite performers deploy MORE frequently AND have LOWER change failure rates. Speed and stability go together.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#our-legacy-systems-prevent-us-from-improving","title":"\u274c \"Our legacy systems prevent us from improving\"","text":"<p>Reality: Legacy systems are a constraint, not an excuse. Many elite performers maintain legacy systems.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#leadership-only-cares-about-features-not-metrics","title":"\u274c \"Leadership only cares about features, not metrics\"","text":"<p>Reality: These metrics predict revenue, market share, and profitability. Leadership should care.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#100-success-rate-is-the-goal","title":"\u274c \"100% success rate is the goal\"","text":"<p>Reality: Some failure is healthy. Elite performers have 8-15% CFR because they're taking appropriate risks.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#how-fawkes-automates-dora-metrics","title":"How Fawkes Automates DORA Metrics","text":"<p>Fawkes collects DORA metrics automatically from your CI/CD pipeline:</p> <pre><code>Developer commits code\n    \u2193\nGit webhook triggers Jenkins pipeline\n    \u2193 (Lead Time measurement starts)\nJenkins builds, tests, packages\n    \u2193\nArtifact pushed to Harbor registry\n    \u2193\nArgoCD detects new image version\n    \u2193\nArgoCD syncs to Kubernetes (Deployment event recorded)\n    \u2193 (Lead Time measurement ends)\nPrometheus records metrics\n    \u2193\nGrafana dashboard updates in real-time\n    \u2193\nAlertmanager detects any incidents\n    \u2193 (MTTR measurement if incident occurs)\n</code></pre> <p>Data Sources: - Git: Commit timestamps (lead time start) - Jenkins: Build results (quality signals) - ArgoCD: Deployment events (DF, lead time end, CFR) - Prometheus/Alertmanager: Incident detection and resolution (MTTR)</p> <p>No Manual Work Required: Metrics update automatically with every deployment.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#3-demonstration-10-minutes","title":"3. Demonstration (10 minutes)","text":""},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#video-navigating-fawkes-dora-dashboards-10-minutes","title":"\ud83d\udcfa Video: Navigating Fawkes DORA Dashboards (10 minutes)","text":"<p>[VIDEO PLACEHOLDER] See detailed script in supporting document</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#key-takeaways-from-demo","title":"Key Takeaways from Demo","text":"<ol> <li>Real-Time Updates: Metrics update with every deployment</li> <li>Multiple Views: Team-level, service-level, and organization-level dashboards</li> <li>Drill-Down Capability: Click any metric to see underlying data</li> <li>Trend Analysis: Compare current period to previous periods</li> <li>Actionable Insights: Dashboard highlights improvement opportunities</li> </ol>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#4-hands-on-lab-20-minutes","title":"4. Hands-On Lab (20 minutes)","text":""},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#lab-overview","title":"Lab Overview","text":"<p>You'll analyze DORA metrics for a sample application, identify performance bottlenecks, and make recommendations for improvement.</p> <p>Time Estimate: 20 minutes Difficulty: Beginner Auto-Graded: Partially (calculations auto-checked; recommendations manually reviewed) Points: 60</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#lab-environment","title":"Lab Environment","text":"<p>When you click \"Start Lab\", we'll provision: - \u2705 Access to Grafana DORA dashboards - \u2705 Sample data for 3 months (90 days) - \u2705 3 different teams with varying performance levels - \u2705 Lab notebook for your analysis</p> <p>Environment will be available for 24 hours from start time.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#lab-instructions","title":"Lab Instructions","text":""},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#part-1-calculate-metrics-30-points","title":"Part 1: Calculate Metrics (30 points)","text":"<p>You'll analyze \"Team Alpha's\" performance over the last 30 days.</p> <p>Given Data (available in dashboard): - Total deployments to production: 45 - Total commits: 180 - Failed deployments (rollbacks): 7 - Incidents reported: 3 - Average time from commit to production: 6 hours - Average time to resolve incidents: 2 hours</p> <ol> <li>Calculate Deployment Frequency (10 points)</li> </ol> <p>Formula: <code>Total deployments / Days in period</code></p> <p>\ud83d\udcdd Submit: What is Team Alpha's deployment frequency? (deployments per day)</p> <p>\u2705 Validation: Auto-checked against correct calculation</p> <ol> <li>Calculate Lead Time for Changes (10 points)</li> </ol> <p>Given: Average time from commit to production = 6 hours</p> <p>\ud83d\udcdd Submit: What is Team Alpha's lead time? Express in hours.</p> <p>\u2705 Validation: Auto-checked</p> <ol> <li>Calculate Change Failure Rate (10 points)</li> </ol> <p>Formula: <code>(Failed deployments / Total deployments) \u00d7 100</code></p> <p>\ud83d\udcdd Submit: What is Team Alpha's change failure rate? Express as a percentage.</p> <p>\u2705 Validation: Auto-checked against correct calculation</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#part-2-performance-classification-15-points","title":"Part 2: Performance Classification (15 points)","text":"<ol> <li>Classify Team Alpha's Performance (15 points)</li> </ol> <p>Based on the metrics you calculated, classify Team Alpha according to DORA performance levels:</p> <p>\ud83d\udcdd Submit:    - Deployment Frequency Level: [Elite/High/Medium/Low]    - Lead Time Level: [Elite/High/Medium/Low]    - Change Failure Rate Level: [Elite/High/Medium/Low]    - Overall Classification: [Elite/High/Medium/Low]</p> <p>\u2705 Validation: Auto-checked against DORA thresholds</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#part-3-compare-teams-15-points","title":"Part 3: Compare Teams (15 points)","text":"<ol> <li>Analyze Team Bravo vs. Team Charlie (15 points)</li> </ol> <p>Open the \"Team Comparison\" dashboard and compare Team Bravo and Team Charlie.</p> <p>Team Bravo:    - DF: 0.3 per day (9 per month)    - LT: 3 days    - MTTR: 4 hours    - CFR: 10%</p> <p>Team Charlie:    - DF: 2.5 per day (75 per month)    - LT: 45 minutes    - MTTR: 30 minutes    - CFR: 18%</p> <p>\ud83d\udcdd Submit:     - Which team is the higher performer overall? [Bravo/Charlie]    - What is Team Charlie's biggest weakness? [DF/LT/MTTR/CFR]    - If Team Bravo could improve one metric, which would have the biggest impact? [DF/LT/MTTR/CFR]    - Explain your reasoning (2-3 sentences)</p> <p>\u2705 Validation: Reasoning manually reviewed by instructors</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#part-4-identify-improvement-opportunities-bonus","title":"Part 4: Identify Improvement Opportunities (Bonus)","text":"<ol> <li>Recommend Improvements for Team Alpha (Bonus: +10 points)</li> </ol> <p>Based on Team Alpha's metrics:    - DF: 1.5 per day (High)    - LT: 6 hours (Elite)    - MTTR: 2 hours (Elite)    - CFR: 15.6% (Elite)</p> <p>\ud83d\udcdd Submit:     - Team Alpha is performing at Elite level across all metrics. However, what could they do to push even further? (3-5 specific recommendations)</p> <p>Examples of good recommendations:    - \"Reduce deployment frequency variability (some days have 5 deploys, others have 0)\"    - \"Investigate the 7 failed deployments to find common root causes\"    - \"Implement chaos engineering to practice MTTR scenarios\"</p> <p>\u2705 Validation: Manually reviewed for thoughtfulness and actionability</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#lab-submission","title":"Lab Submission","text":"<p>Once you've completed all tasks:</p> <ol> <li>Review your calculations in the lab notebook</li> <li>Ensure all required answers are recorded</li> <li>Click \"Submit Lab\" button</li> </ol> <p>Grading: - Parts 1-2: Auto-graded immediately (45 points) - Parts 3-4: Reviewed within 24 hours by instructors (15 + 10 points) - Passing score: 48/60 (80%)</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#troubleshooting-hints","title":"Troubleshooting Hints","text":"<p>Can't access Grafana? - Click \"Open Grafana\" from lab instructions - Use provided credentials (auto-populated) - Try incognito mode if having authentication issues</p> <p>Calculations not matching? - Double-check your formulas - Ensure you're using correct time periods (30 days) - Round to 2 decimal places</p> <p>Don't understand a metric? - Review the Theory &amp; Concepts section - Check the DORA handbook link in resources - Ask in #dojo-white-belt on Mattermost</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#5-knowledge-check-5-minutes","title":"5. Knowledge Check (5 minutes)","text":""},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#quiz-dora-metrics-mastery","title":"Quiz: DORA Metrics Mastery","text":"<p>Instructions: Answer all 10 questions. You need 8/10 (80%) to pass. Unlimited attempts allowed.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#question-1","title":"Question 1","text":"<p>Which metric measures \"how often\" you deploy to production?</p> <ul> <li>[x] A) Deployment Frequency</li> <li>[ ] B) Lead Time for Changes</li> <li>[ ] C) Mean Time to Restore</li> <li>[ ] D) Change Failure Rate</li> </ul> <p>Explanation: Deployment Frequency measures how often deployments occur.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#question-2","title":"Question 2","text":"<p>An elite performer's Lead Time for Changes is:</p> <ul> <li>[x] A) Less than one hour</li> <li>[ ] B) Between one day and one week</li> <li>[ ] C) Less than one day</li> <li>[ ] D) Between one hour and one day</li> </ul> <p>Explanation: Elite performers have lead times less than one hour from commit to production.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#question-3","title":"Question 3","text":"<p>What does MTTR stand for?</p> <ul> <li>[ ] A) Mean Time To Release</li> <li>[ ] B) Mean Time To Recover</li> <li>[x] C) Mean Time To Restore (Service)</li> <li>[ ] D) Mean Time To Rollback</li> </ul> <p>Explanation: MTTR is Mean Time To Restore Service\u2014how long it takes to recover from incidents.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#question-4","title":"Question 4","text":"<p>Elite performers have a Change Failure Rate of:</p> <ul> <li>[x] A) 0-15%</li> <li>[ ] B) 16-30%</li> <li>[ ] C) Less than 5%</li> <li>[ ] D) 31-45%</li> </ul> <p>Explanation: Elite performers maintain a CFR of 0-15%, significantly better than other performers.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#question-5","title":"Question 5","text":"<p>Which statement is TRUE about DORA metrics?</p> <ul> <li>[ ] A) You must choose between speed (DF/LT) and stability (MTTR/CFR)</li> <li>[x] B) Elite performers excel at all four metrics simultaneously</li> <li>[ ] C) Only deployment frequency matters</li> <li>[ ] D) These metrics only apply to startups, not enterprises</li> </ul> <p>Explanation: Elite performers are fast AND stable\u2014they excel at all four metrics at once.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#question-6","title":"Question 6","text":"<p>Your team deploys once per month. What performance level is this?</p> <ul> <li>[ ] A) Elite</li> <li>[ ] B) High</li> <li>[x] C) Medium</li> <li>[ ] D) Low</li> </ul> <p>Explanation: Once per month is Medium performance (between once per week and once per month).</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#question-7","title":"Question 7","text":"<p>Lead Time for Changes measures:</p> <ul> <li>[ ] A) Time spent writing code</li> <li>[x] B) Time from commit to production</li> <li>[ ] C) Time in code review</li> <li>[ ] D) Time spent in planning</li> </ul> <p>Explanation: Lead time is commit to production\u2014how long code waits in your process.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#question-8","title":"Question 8","text":"<p>Why do DORA metrics matter to business leaders?</p> <ul> <li>[ ] A) They're required for compliance</li> <li>[x] B) They predict profitability, market share, and customer satisfaction</li> <li>[ ] C) They make engineers look good</li> <li>[ ] D) They're easy to game</li> </ul> <p>Explanation: DORA metrics are predictive of business outcomes\u20142x more likely to exceed profitability goals, etc.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#question-9","title":"Question 9","text":"<p>A team has 20 deployments and 5 failures in a month. What's their CFR?</p> <ul> <li>[ ] A) 5%</li> <li>[ ] B) 15%</li> <li>[x] C) 25%</li> <li>[ ] D) 50%</li> </ul> <p>Explanation: CFR = (5 failures / 20 deploys) \u00d7 100 = 25%</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#question-10","title":"Question 10","text":"<p>How does a platform like Fawkes improve DORA metrics?</p> <ul> <li>[ ] A) By forcing teams to deploy more frequently</li> <li>[ ] B) By hiding failure metrics</li> <li>[x] C) By automating pipelines, testing, and providing fast feedback</li> <li>[ ] D) By reducing the number of engineers needed</li> </ul> <p>Explanation: Platforms improve metrics through automation, quality gates, and fast feedback loops\u2014making the right things easy.</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#quiz-results","title":"Quiz Results","text":"<p>Score: X / 10</p> <ul> <li>\u2705 Passed (8+): Excellent! You understand DORA metrics deeply.</li> <li>\u274c Not Yet (&lt;8): Review the content and try again.</li> </ul>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#6-reflection-next-steps-5-minutes","title":"6. Reflection &amp; Next Steps (5 minutes)","text":""},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#what-you-learned","title":"What You Learned","text":"<p>Congratulations! \ud83c\udf89 You've completed Module 2. Let's recap:</p> <p>\u2705 You now understand: - The Four Key Metrics and what they measure - Why these metrics predict business success - How to calculate and interpret DORA metrics - The difference between Elite and Low performers - How Fawkes automates metrics collection</p> <p>\u2705 You can now: - Analyze DORA dashboards and spot issues - Make data-driven recommendations for improvement - Explain metrics to business stakeholders - Use metrics to prioritize platform improvements</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#how-this-connects-to-your-work","title":"How This Connects to Your Work","text":"<p>For Developers: - You understand what \"good\" looks like (Elite benchmarks) - You can advocate for improvements using data - You know how to track your team's progress</p> <p>For Platform Engineers: - You can measure platform impact objectively - You know which improvements matter most - You can demonstrate ROI to leadership</p> <p>For Leaders: - You have a data-driven framework for investment decisions - You can benchmark against industry standards - You can track improvement over time</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#real-world-application-exercise","title":"Real-World Application Exercise","text":"<p>This Week, Try This:</p> <ol> <li>Measure Your Current State</li> <li>Track deployments for one week</li> <li>Calculate your team's current DORA metrics</li> <li> <p>Be honest\u2014no judgment, just data</p> </li> <li> <p>Identify One Improvement</p> </li> <li>Pick the metric with the most room for improvement</li> <li>Brainstorm 3 concrete actions to improve it</li> <li> <p>Estimate impact and effort</p> </li> <li> <p>Share Your Findings</p> </li> <li>Present current state to your team (5 min standup)</li> <li>Discuss: \"What's our biggest bottleneck?\"</li> <li>Agree on one improvement to try</li> </ol>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#reflection-questions","title":"Reflection Questions","text":"<p>Take 2 minutes to think about:</p> <ol> <li>Which metric surprised you most?</li> <li> <p>Did your team's performance match your intuition?</p> </li> <li> <p>What's your team's biggest opportunity?</p> </li> <li> <p>Which metric, if improved, would have the most impact?</p> </li> <li> <p>What's blocking improvement?</p> </li> <li> <p>Technical debt? Process issues? Cultural resistance?</p> </li> <li> <p>Who needs to know this?</p> </li> <li>Which leader should see your team's DORA metrics?</li> </ol>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#additional-resources","title":"Additional Resources","text":"<p>\ud83d\udcda Further Reading: - DORA State of DevOps Report - Annual research findings - Accelerate Book - The foundational research - DORA Quick Check - Assess your team in 5 minutes - Google Cloud DORA Resources - Implementation guides</p> <p>\ud83c\udfa5 Videos to Watch: - \"DORA Metrics Explained\" by Dr. Nicole Forsgren (15 min) - \"Why DORA Metrics Matter\" by Gene Kim (20 min) - \"Implementing DORA Metrics\" by Charity Majors (30 min)</p> <p>\ud83d\udee0\ufe0f Tools: - Four Keys Project - Open source DORA metrics tool - Sleuth - Commercial DORA tracking (Fawkes alternative) - LinearB - Engineering intelligence platform</p> <p>\ud83d\udcac Community: - Share your team's metrics (anonymously!) in <code>#dojo-metrics</code> - Join the DORA community discussions - Help others interpret their data</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#preview-module-3","title":"Preview: Module 3","text":"<p>Next Up: GitOps Principles</p> <p>In Module 3, you'll learn: - What GitOps is and why it's transforming deployments - Declarative infrastructure and desired state - How ArgoCD implements GitOps - Pull-based vs. push-based deployments - Making your first GitOps change</p> <p>Time: 60 minutes Hands-On: Make a GitOps deployment using ArgoCD</p> <p>Get Ready: Think about how your team currently deploys applications. Who has access? How is it documented? What could go wrong?</p>"},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#module-completion","title":"Module Completion","text":""},{"location":"dojo/modules/white-belt/module-02-dora-metrics/#youve-completed-module-2","title":"\u2705 You've Completed Module 2!","text":"<p>Next Steps: 1. \u2705 Mark this module complete in your Backstage profile 2. \ud83d\udcca View your progress on the Dojo dashboard 3. \ud83d\udcac Share your DORA metrics insights in <code>#dojo-achievements</code> 4. \u27a1\ufe0f Continue to Module 3 when ready</p> <p>Time Investment: 60 minutes Skills Gained: DORA metrics analysis, performance benchmarking Progress: 2 of 4 modules toward White Belt (50% complete)</p> <p>Questions or Issues? - \ud83d\udcac Ask in <code>#dojo-white-belt</code> on Mattermost - \ud83d\udce7 Email: dojo@fawkes.io - \ud83d\udc1b Report bugs: GitHub Issues</p> <p>Feedback? - Rate this module (takes 30 seconds) - What worked well? What could be better? - Help us improve the learning experience!</p> <p>Module Author: Fawkes Learning Team Last Updated: October 2025 Version: 1.0 Based On: DORA State of DevOps 2023 Report</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/","title":"Module 3: GitOps Principles","text":"<p>Belt Level: \ud83e\udd4b White Belt Duration: 60 minutes Prerequisites: Module 1 &amp; 2 completed, Git basics Learning Path: Module 3 of 20 (White Belt: Modules 1-4)</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#module-overview","title":"\ud83d\udccb Module Overview","text":"<p>GitOps is a revolutionary approach to infrastructure and application deployment. Instead of running commands to make changes, you declare your desired state in Git, and automation ensures reality matches that declaration. This module teaches you the principles, benefits, and practices of GitOps.</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#learning-objectives","title":"Learning Objectives","text":"<p>By completing this module, you will be able to:</p> <ol> <li>Define GitOps and explain its core principles</li> <li>Differentiate between push-based and pull-based deployment models</li> <li>Describe how Git becomes the single source of truth for infrastructure</li> <li>Explain the benefits of GitOps for DORA metrics and reliability</li> <li>Navigate the Fawkes GitOps repository structure</li> <li>Make a GitOps-driven deployment change in the hands-on lab</li> </ol>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#why-this-matters","title":"Why This Matters","text":"<p>GitOps is a fundamental practice in modern platform engineering: - Netflix deploys 1000+ times per day using GitOps - Weaveworks reported 2x faster deployments with GitOps - DORA research shows GitOps directly improves all four key metrics - 90% of cloud-native teams use or plan to use GitOps (CNCF Survey 2024)</p> <p>Understanding GitOps is essential for elite delivery performance.</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#section-1-the-gitops-paradigm-15-minutes","title":"\ud83d\udcda Section 1: The GitOps Paradigm (15 minutes)","text":""},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#the-traditional-way-imperative-operations","title":"The Traditional Way: Imperative Operations","text":"<p>Before GitOps, deployments were imperative (manual commands):</p> <pre><code># Deployment by running commands\nkubectl apply -f deployment.yaml\nkubectl set image deployment/myapp myapp=v2.0\nkubectl scale deployment/myapp --replicas=5\nhelm upgrade myapp ./chart --set image.tag=v2.0\nterraform apply\n</code></pre> <p>Problems: - \u274c No audit trail - Who made what change, when, and why? - \u274c Configuration drift - Production differs from documented state - \u274c No rollback - Can't easily revert to previous working state - \u274c Knowledge silos - Only certain people know how to deploy - \u274c Error-prone - Manual commands = human mistakes - \u274c No code review - Infrastructure changes not peer-reviewed</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#the-gitops-way-declarative-state","title":"The GitOps Way: Declarative State","text":"<p>With GitOps, you declare desired state in Git:</p> <pre><code># In Git repository: apps/prod/myapp/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\nspec:\n  replicas: 5\n  template:\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v2.0\n</code></pre> <p>GitOps operator (like ArgoCD) continuously: 1. Watches Git for changes 2. Compares Git state with cluster state 3. Applies differences automatically 4. Heals any manual changes (self-healing)</p> <p>Benefits: - \u2705 Complete audit trail - Every change is a Git commit - \u2705 No drift - System automatically returns to Git state - \u2705 Easy rollback - <code>git revert</code> restores previous state - \u2705 Knowledge sharing - Git repository documents everything - \u2705 Reliable - Automation eliminates human error - \u2705 Code review - All changes via pull requests</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#four-principles-of-gitops","title":"Four Principles of GitOps","text":"<p>The OpenGitOps working group defines four core principles:</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#1-declarative","title":"1. Declarative","text":"<p>Definition: System's desired state is expressed declaratively (what, not how).</p> <p>Example: <pre><code># Declarative (GitOps) - Describe WHAT you want\nreplicas: 5\nimage: myapp:v2.0\n\n# vs. Imperative - Describe HOW to achieve it\nkubectl scale --replicas=5\nkubectl set image deployment/myapp myapp=v2.0\n</code></pre></p> <p>Why it matters: Declarative is idempotent (run multiple times = same result), easier to understand, and automation-friendly.</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#2-versioned-and-immutable","title":"2. Versioned and Immutable","text":"<p>Definition: Desired state is stored in Git, providing version history and immutability.</p> <p>Benefits: - Every change has a commit SHA (immutable reference) - Full history of who changed what, when, and why - Easy to see what production looked like at any point in time - Rollback is just a <code>git revert</code></p> <p>Example: <pre><code># View deployment history\ngit log apps/prod/myapp/deployment.yaml\n\n# See what changed\ngit diff HEAD~1 apps/prod/myapp/deployment.yaml\n\n# Rollback to previous version\ngit revert HEAD\n</code></pre></p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#3-pulled-automatically","title":"3. Pulled Automatically","text":"<p>Definition: Software agents automatically pull desired state from Git (not pushed).</p> <p>Pull Model (GitOps): <pre><code>Git Repository (source of truth)\n        \u2191\n        \u2502 Pull changes\n        \u2502 (every 3 minutes)\n        \u2502\n    GitOps Agent (ArgoCD)\n        \u2502\n        \u2193 Apply to cluster\n        \u2502\n    Kubernetes Cluster\n</code></pre></p> <p>Push Model (Traditional CI/CD): <pre><code>CI/CD System (Jenkins)\n        \u2502\n        \u2193 Push changes\n        \u2502 (when triggered)\n        \u2502\n    Kubernetes Cluster\n</code></pre></p> <p>Why Pull is Better: - \u2705 More secure - Cluster credentials not in CI/CD system - \u2705 Self-healing - Detects and corrects drift automatically - \u2705 Better failure handling - Retries automatically - \u2705 Audit trail - All changes go through Git (no backdoors)</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#4-continuously-reconciled","title":"4. Continuously Reconciled","text":"<p>Definition: Software agents continuously ensure actual state matches desired state.</p> <p>Reconciliation Loop: <pre><code>1. Fetch desired state from Git\n2. Compare with actual state in cluster\n3. If different, apply changes\n4. Wait (e.g., 3 minutes)\n5. Repeat from step 1\n</code></pre></p> <p>Self-Healing Example: <pre><code># Someone manually changes replicas\nkubectl scale deployment/myapp --replicas=10\n\n# Within 3 minutes, GitOps operator detects drift\n# and reverts to Git-declared state (5 replicas)\n</code></pre></p> <p>Benefits: - Prevents configuration drift - Recovers from manual mistakes automatically - Ensures production always matches Git - Reduces operational toil</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#section-2-gitops-and-dora-metrics-15-minutes","title":"\ud83d\udcda Section 2: GitOps and DORA Metrics (15 minutes)","text":""},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#how-gitops-improves-deployment-frequency","title":"How GitOps Improves Deployment Frequency","text":"<p>Deployment Frequency: How often you deploy to production</p> <p>Without GitOps: - Manual deployments require coordination - Fear of breaking production slows deploys - Need specific people with kubectl access - Result: Weekly or monthly deployments</p> <p>With GitOps: - Merge to main branch \u2192 automatic deployment - Git PR process provides confidence - Any developer can merge (with approval) - Result: Multiple deployments per day</p> <p>Example Flow: <pre><code># Developer workflow\ngit checkout -b feature/new-endpoint\n# Make changes to application code\ngit commit -m \"Add new API endpoint\"\ngit push origin feature/new-endpoint\n# Create pull request\n# After approval and merge to main:\n# \u2192 CI builds and pushes image\n# \u2192 Updates GitOps repo with new image tag\n# \u2192 ArgoCD deploys automatically (within 3 minutes)\n</code></pre></p> <p>Impact: Fawkes teams average 10-20 deployments/day with GitOps vs. 2-3/week without.</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#how-gitops-reduces-lead-time-for-changes","title":"How GitOps Reduces Lead Time for Changes","text":"<p>Lead Time for Changes: Time from commit to production</p> <p>Without GitOps: <pre><code>Commit \u2192 Wait for CI \u2192 Manual deployment steps \u2192 Production\n        (10 min)      (30-60 min manual work)\nTotal: 40-70 minutes\n</code></pre></p> <p>With GitOps: <pre><code>Commit \u2192 CI builds \u2192 Update GitOps repo \u2192 ArgoCD syncs \u2192 Production\n        (10 min)    (1 min)              (3 min)\nTotal: 14 minutes\n</code></pre></p> <p>Key Difference: Elimination of manual deployment steps.</p> <p>Fawkes Optimization: Using webhooks instead of polling reduces sync time to &lt;30 seconds.</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#how-gitops-lowers-change-failure-rate","title":"How GitOps Lowers Change Failure Rate","text":"<p>Change Failure Rate: % of deployments causing failures</p> <p>Without GitOps: - Manual kubectl commands prone to errors - No code review of infrastructure changes - Difficult to test changes before production - Configuration drift introduces unknowns - Result: 15-20% failure rate typical</p> <p>With GitOps: - Declarative configs easier to review - Pull requests catch errors before merge - Can test in staging (identical GitOps workflow) - No drift means fewer surprises - Result: 3-5% failure rate achievable</p> <p>Safety Mechanisms: 1. Git History: Every change reviewed and auditable 2. Dry Run: ArgoCD shows what will change before applying 3. Progressive Sync: Gradual rollout with health checks 4. Automatic Rollback: Failed deployments auto-revert</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#how-gitops-improves-time-to-restore-service","title":"How GitOps Improves Time to Restore Service","text":"<p>Time to Restore Service: Time to recover from failure</p> <p>Without GitOps: <pre><code>Incident detected \u2192 Find person with access \u2192 Figure out what changed \u2192 \nRun commands to fix \u2192 Hope it works\nTotal: 30-60 minutes (or more)\n</code></pre></p> <p>With GitOps: <pre><code>Incident detected \u2192 git revert HEAD \u2192 ArgoCD syncs \u2192 Service restored\nTotal: 3-5 minutes\n</code></pre></p> <p>Example: <pre><code># Quick rollback\ngit log --oneline  # Find commit to revert to\ngit revert abc123  # Creates new commit that undoes abc123\ngit push           # ArgoCD automatically applies rollback\n</code></pre></p> <p>Fawkes Average MTTR: 4 minutes with GitOps vs. 45 minutes without.</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#section-3-gitops-repository-structure-15-minutes","title":"\ud83d\udcda Section 3: GitOps Repository Structure (15 minutes)","text":""},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#the-mono-repo-pattern","title":"The Mono-repo Pattern","text":"<p>Fawkes uses a mono-repo approach where all environments and applications live in one repository.</p> <p>Benefits: - Single source of truth - Easy to see all environments - Shared modules and configurations - Consistent tooling</p> <p>Structure: <pre><code>fawkes-gitops/\n\u251c\u2500\u2500 apps/                       # Application deployments\n\u2502   \u251c\u2500\u2500 dev/                    # Development environment\n\u2502   \u2502   \u251c\u2500\u2500 team-a/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 service-1/\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 kustomization.yaml\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 deployment.yaml\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 service.yaml\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 ingress.yaml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 service-2/\n\u2502   \u2502   \u2514\u2500\u2500 team-b/\n\u2502   \u251c\u2500\u2500 staging/                # Staging environment\n\u2502   \u2502   \u2514\u2500\u2500 team-a/\n\u2502   \u2514\u2500\u2500 prod/                   # Production environment\n\u2502       \u2514\u2500\u2500 team-a/\n\u251c\u2500\u2500 platform/                   # Platform components\n\u2502   \u251c\u2500\u2500 backstage/\n\u2502   \u2502   \u251c\u2500\u2500 deployment.yaml\n\u2502   \u2502   \u2514\u2500\u2500 service.yaml\n\u2502   \u251c\u2500\u2500 jenkins/\n\u2502   \u251c\u2500\u2500 argocd/\n\u2502   \u2514\u2500\u2500 prometheus/\n\u251c\u2500\u2500 infrastructure/             # Infrastructure resources\n\u2502   \u251c\u2500\u2500 namespaces/\n\u2502   \u2502   \u251c\u2500\u2500 team-a-dev.yaml\n\u2502   \u2502   \u251c\u2500\u2500 team-a-staging.yaml\n\u2502   \u2502   \u2514\u2500\u2500 team-a-prod.yaml\n\u2502   \u251c\u2500\u2500 rbac/\n\u2502   \u251c\u2500\u2500 network-policies/\n\u2502   \u2514\u2500\u2500 resource-quotas/\n\u2514\u2500\u2500 argocd-apps/               # ArgoCD Application definitions\n    \u251c\u2500\u2500 dev-apps.yaml\n    \u251c\u2500\u2500 staging-apps.yaml\n    \u2514\u2500\u2500 prod-apps.yaml\n</code></pre></p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#directory-responsibilities","title":"Directory Responsibilities","text":"<p><code>apps/</code> - Application Deployments - One directory per environment (dev, staging, prod) - Team-based organization - Contains Kubernetes manifests or Kustomize/Helm references</p> <p><code>platform/</code> - Platform Components - Fawkes platform services (Backstage, Jenkins, ArgoCD, etc.) - Usually deployed once (not per environment) - Managed by platform team</p> <p><code>infrastructure/</code> - Infrastructure Resources - Namespaces, RBAC, network policies - Resource quotas and limits - Applied before applications</p> <p><code>argocd-apps/</code> - ArgoCD Applications - Defines what ArgoCD should deploy - ApplicationSets for deploying multiple apps - Points to directories in <code>apps/</code>, <code>platform/</code>, <code>infrastructure/</code></p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#environment-promotion-pattern","title":"Environment Promotion Pattern","text":"<p>Dev \u2192 Staging \u2192 Prod promotion via Git:</p> <pre><code># Deploy to dev (automatic on merge)\ngit checkout main\ngit merge feature-branch\ngit push\n# \u2192 ArgoCD deploys to dev\n\n# After testing in dev, promote to staging\ncp apps/dev/team-a/service-1/deployment.yaml \\\n   apps/staging/team-a/service-1/deployment.yaml\ngit commit -m \"Promote service-1 to staging\"\ngit push\n# \u2192 ArgoCD deploys to staging\n\n# After testing in staging, promote to prod\ncp apps/staging/team-a/service-1/deployment.yaml \\\n   apps/prod/team-a/service-1/deployment.yaml\ngit commit -m \"Promote service-1 to production\"\ngit push\n# \u2192 ArgoCD deploys to prod\n</code></pre> <p>Better Approach: Kustomize Overlays (covered in Green Belt)</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#gitops-repository-best-practices","title":"GitOps Repository Best Practices","text":""},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#1-separate-application-code-from-deployment-config","title":"1. Separate Application Code from Deployment Config","text":"<p>Anti-pattern: Kubernetes manifests in application repository <pre><code>myapp/\n\u251c\u2500\u2500 src/           # Application code\n\u251c\u2500\u2500 deployment.yaml  # \u274c Deployment config mixed with code\n\u2514\u2500\u2500 service.yaml\n</code></pre></p> <p>Best Practice: Separate repositories <pre><code>myapp/             # Application code repository\n\u2514\u2500\u2500 src/\n\nfawkes-gitops/     # Deployment config repository\n\u2514\u2500\u2500 apps/dev/team-a/myapp/\n    \u251c\u2500\u2500 deployment.yaml  # \u2705 Deployment config separate\n    \u2514\u2500\u2500 service.yaml\n</code></pre></p> <p>Why: Allows deploying same app code to multiple environments with different configs.</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#2-use-meaningful-commit-messages","title":"2. Use Meaningful Commit Messages","text":"<p>Bad: <pre><code>git commit -m \"update\"\ngit commit -m \"fix\"\n</code></pre></p> <p>Good: <pre><code>git commit -m \"Scale myapp from 3 to 5 replicas to handle increased load\"\ngit commit -m \"Update myapp to v2.1.3 (fixes memory leak)\"\n</code></pre></p> <p>Why: Commit messages are your audit trail and rollback documentation.</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#3-keep-files-small-and-focused","title":"3. Keep Files Small and Focused","text":"<p>Anti-pattern: One giant <code>all-resources.yaml</code> <pre><code># \u274c 500 lines containing everything\napiVersion: apps/v1\nkind: Deployment\n# ... 200 lines\n---\napiVersion: v1\nkind: Service\n# ... 100 lines\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\n# ... 200 lines\n</code></pre></p> <p>Best Practice: One file per resource type <pre><code>myapp/\n\u251c\u2500\u2500 kustomization.yaml  # \u2705 Small, focused files\n\u251c\u2500\u2500 deployment.yaml\n\u251c\u2500\u2500 service.yaml\n\u2514\u2500\u2500 ingress.yaml\n</code></pre></p> <p>Why: Easier to review, understand, and modify. Better Git diffs.</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#4-use-kustomize-for-environment-differences","title":"4. Use Kustomize for Environment Differences","text":"<p>Instead of copying entire files per environment, use Kustomize overlays:</p> <pre><code>base/                      # Common configuration\n\u251c\u2500\u2500 kustomization.yaml\n\u251c\u2500\u2500 deployment.yaml\n\u2514\u2500\u2500 service.yaml\n\noverlays/\n\u251c\u2500\u2500 dev/                  # Dev-specific overrides\n\u2502   \u2514\u2500\u2500 kustomization.yaml  # replicas: 1, resources: small\n\u251c\u2500\u2500 staging/              # Staging-specific overrides\n\u2502   \u2514\u2500\u2500 kustomization.yaml  # replicas: 3, resources: medium\n\u2514\u2500\u2500 prod/                 # Prod-specific overrides\n    \u2514\u2500\u2500 kustomization.yaml  # replicas: 10, resources: large\n</code></pre> <p>Why: DRY principle - define once, override only what differs.</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#5-never-commit-secrets-to-git","title":"5. Never Commit Secrets to Git","text":"<p>Wrong: <pre><code># \u274c NEVER do this\napiVersion: v1\nkind: Secret\nmetadata:\n  name: database-password\ndata:\n  password: cGFzc3dvcmQxMjM=  # base64 encoded, but still visible!\n</code></pre></p> <p>Right: Use Sealed Secrets or External Secrets Operator <pre><code># \u2705 Encrypted secret safe for Git\napiVersion: bitnami.com/v1alpha1\nkind: SealedSecret\nmetadata:\n  name: database-password\nspec:\n  encryptedData:\n    password: AgBh7+5k8... # Encrypted, only decryptable in-cluster\n</code></pre></p> <p>Why: Git history is forever. Committed secrets are compromised secrets.</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#section-4-gitops-in-action-with-argocd-10-minutes","title":"\ud83d\udcda Section 4: GitOps in Action with ArgoCD (10 minutes)","text":""},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#argocd-the-gitops-operator","title":"ArgoCD: The GitOps Operator","text":"<p>ArgoCD is Fawkes' GitOps continuous delivery tool. It: - Watches Git repositories for changes - Compares desired state (Git) with actual state (Kubernetes) - Applies differences automatically - Provides UI for visualizing deployments</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#application-health-states","title":"Application Health States","text":"<p>ArgoCD tracks application health:</p> <p>\ud83d\udfe2 Healthy - All resources running as expected - Deployments have desired replicas ready - Services have endpoints - Ingresses configured correctly</p> <p>\ud83d\udfe1 Progressing - Deployment in progress - New pods starting up - Rolling update ongoing - Health checks not yet passing</p> <p>\ud83d\udfe0 Degraded - Partially working - Some replicas not ready - Some pods crashing - Service partially available</p> <p>\ud83d\udd34 Missing - Resource doesn't exist - Deleted manually - Never created - Configuration error</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#sync-status","title":"Sync Status","text":"<p>ArgoCD compares Git vs. Kubernetes:</p> <p>\u2705 Synced - Git matches cluster - No differences detected - Latest commit deployed</p> <p>\u274c OutOfSync - Git differs from cluster - Someone made manual changes, OR - New commit not yet deployed</p> <p>\ud83d\udd04 Syncing - Applying changes - ArgoCD deploying Git changes - Resources being created/updated</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#hands-on-viewing-your-application-in-argocd","title":"Hands-On: Viewing Your Application in ArgoCD","text":"<p>Access ArgoCD UI: <pre><code># Get ArgoCD URL\necho \"https://argocd.fawkes.local\"\n\n# Login credentials provided in lab\nUsername: admin\nPassword: [provided in lab environment]\n</code></pre></p> <p>Navigate to Your Application: 1. Click on <code>Applications</code> in left sidebar 2. Find application: <code>dojo-learner-[yourname]-myapp</code> 3. Observe the application topology (visual graph)</p> <p>Understanding the Topology: <pre><code>Application\n    \u2193\nDeployment\n    \u2193\nReplicaSet\n    \u2193\nPod \u2192 Service \u2192 Ingress\n</code></pre></p> <p>Key Information: - Sync Status: Is Git in sync with cluster? - Health Status: Are resources healthy? - Last Sync: When was last deployment? - Git Commit: Which commit is deployed?</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#making-a-gitops-change","title":"Making a GitOps Change","text":"<p>Scenario: Scale your application from 1 to 3 replicas</p> <p>Step 1: Clone GitOps Repository <pre><code>git clone https://github.com/fawkes-dojo/gitops-lab\ncd gitops-lab\n</code></pre></p> <p>Step 2: Make Change <pre><code># Edit deployment file\nvim apps/dojo/learner-[yourname]/myapp/deployment.yaml\n\n# Change replicas from 1 to 3\nspec:\n  replicas: 3  # Changed from 1\n</code></pre></p> <p>Step 3: Commit and Push <pre><code>git add apps/dojo/learner-[yourname]/myapp/deployment.yaml\ngit commit -m \"Scale myapp to 3 replicas for load testing\"\ngit push origin main\n</code></pre></p> <p>Step 4: Watch ArgoCD Sync <pre><code># ArgoCD detects change within 3 minutes (or immediately with webhooks)\n# Watch in ArgoCD UI:\n# 1. Sync Status changes to \"OutOfSync\"\n# 2. ArgoCD automatically syncs (if auto-sync enabled)\n# 3. New pods appear in topology\n# 4. Sync Status returns to \"Synced\"\n</code></pre></p> <p>Step 5: Verify <pre><code># Check pods\nkubectl get pods -n dojo-learner-[yourname]\n\n# Should see 3 pods running\nNAME                     READY   STATUS    AGE\nmyapp-7d8f5c9b8d-abc12   1/1     Running   2m\nmyapp-7d8f5c9b8d-def34   1/1     Running   2m\nmyapp-7d8f5c9b8d-ghi56   1/1     Running   2m\n</code></pre></p> <p>Congratulations! You just made your first GitOps deployment! \ud83c\udf89</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#hands-on-lab-gitops-workflow-15-minutes","title":"\ud83e\uddea Hands-On Lab: GitOps Workflow (15 minutes)","text":""},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#lab-objectives","title":"Lab Objectives","text":"<p>In this lab, you will: 1. Make a GitOps change (update image version) 2. Create a pull request for code review 3. Observe ArgoCD sync the change 4. Practice rollback using <code>git revert</code></p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#lab-setup","title":"Lab Setup","text":"<p>Your lab environment includes: - Personal namespace: <code>dojo-learner-[yourname]</code> - Sample application: <code>myapp</code> - GitOps repository access - ArgoCD UI access</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#task-1-update-application-version","title":"Task 1: Update Application Version","text":"<p>Scenario: Deploy v2.0 of myapp which includes new features.</p> <pre><code># 1. Create feature branch\ngit checkout -b update-myapp-v2\n\n# 2. Edit deployment\nvim apps/dojo/learner-[yourname]/myapp/deployment.yaml\n\n# 3. Change image tag\nspec:\n  template:\n    spec:\n      containers:\n      - name: myapp\n        image: fawkes/myapp:v2.0  # Changed from v1.0\n\n# 4. Commit change\ngit add apps/dojo/learner-[yourname]/myapp/deployment.yaml\ngit commit -m \"Update myapp to v2.0 - adds new API endpoints\"\n\n# 5. Push branch\ngit push origin update-myapp-v2\n</code></pre>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#task-2-create-pull-request","title":"Task 2: Create Pull Request","text":"<p>In GitHub: 1. Navigate to <code>https://github.com/fawkes-dojo/gitops-lab</code> 2. Click \"Pull Requests\" \u2192 \"New Pull Request\" 3. Base: <code>main</code>, Compare: <code>update-myapp-v2</code> 4. Title: \"Update myapp to v2.0\" 5. Description:    <pre><code>## Changes\n- Updates myapp from v1.0 to v2.0\n- Adds new /api/v2/health endpoint\n- Improves response time by 30%\n\n## Testing\n- Tested in local environment\n- All tests pass\n- Ready for deployment\n\n## Rollback Plan\n- If issues, revert this commit\n- Previous version: v1.0 (commit abc123)\n</code></pre> 6. Click \"Create Pull Request\"</p> <p>Code Review: - Wait for peer review (or auto-approve in lab) - Address any feedback - Once approved, click \"Merge Pull Request\"</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#task-3-observe-argocd-sync","title":"Task 3: Observe ArgoCD Sync","text":"<p>After merge:</p> <pre><code># Watch ArgoCD detect change\n# In ArgoCD UI:\n# 1. Application shows \"OutOfSync\"\n# 2. After ~30 seconds (or up to 3 min), sync begins\n# 3. Observe pod replacement in topology\n# 4. Application returns to \"Synced\" and \"Healthy\"\n\n# Verify from command line\nkubectl get pods -n dojo-learner-[yourname] -w\n\n# Watch pods terminate and new ones start\n# Old pod (v1.0):\nmyapp-abc123-xyz  1/1  Terminating  5m\n# New pod (v2.0):\nmyapp-def456-uvw  0/1  ContainerCreating  0s\nmyapp-def456-uvw  1/1  Running  15s\n\n# Verify new version\nkubectl describe pod -n dojo-learner-[yourname] myapp-def456-uvw | grep Image:\n# Should show: Image: fawkes/myapp:v2.0\n</code></pre>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#task-4-practice-rollback","title":"Task 4: Practice Rollback","text":"<p>Scenario: v2.0 has a bug. Rollback to v1.0 immediately.</p> <pre><code># 1. Find commit to revert\ngit log --oneline -5\n# Example output:\n# def456 Update myapp to v2.0\n# abc123 Scale myapp to 3 replicas\n# 789xyz Initial deployment\n\n# 2. Revert the v2.0 update\ngit revert def456\n\n# 3. Git opens editor for commit message\n# Default message is fine, save and close\n\n# 4. Push revert\ngit push origin main\n\n# 5. Watch ArgoCD sync rollback\n# Within 3 minutes:\n# - Pods replaced with v1.0\n# - Application healthy again\n# - MTTR: ~3 minutes! \ud83c\udf89\n</code></pre>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#task-5-verify-rollback","title":"Task 5: Verify Rollback","text":"<pre><code># Check image version\nkubectl describe pod -n dojo-learner-[yourname] [pod-name] | grep Image:\n# Should show: Image: fawkes/myapp:v1.0\n\n# Check application health\ncurl https://myapp-learner-[yourname].fawkes.local/health\n# Should respond with v1.0 health check\n</code></pre> <p>Lab Complete! You've experienced the full GitOps workflow: - Made a change via Git - Code review via pull request - Automated deployment via ArgoCD - Fast rollback via git revert</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#knowledge-check-5-minutes","title":"\u2705 Knowledge Check (5 minutes)","text":"<p>Test your understanding with these questions:</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#question-1-core-principles","title":"Question 1: Core Principles","text":"<p>What are the four principles of GitOps?</p> Click to reveal answer  1. **Declarative** - Desired state expressed declaratively 2. **Versioned and Immutable** - Stored in Git with full history 3. **Pulled Automatically** - Software agents pull from Git 4. **Continuously Reconciled** - Automatic drift detection and correction"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#question-2-pull-vs-push","title":"Question 2: Pull vs. Push","text":"<p>What's the key difference between GitOps (pull) and traditional CI/CD (push)?</p> Click to reveal answer  **Pull (GitOps)**: - GitOps operator runs inside cluster - Pulls desired state from Git - No cluster credentials in CI/CD - Self-healing and drift detection  **Push (Traditional)**: - CI/CD system pushes changes to cluster - Requires cluster credentials in CI/CD - No automatic drift detection - Manual healing required"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#question-3-dora-impact","title":"Question 3: DORA Impact","text":"<p>How does GitOps improve Lead Time for Changes?</p> Click to reveal answer  GitOps reduces lead time by: 1. **Eliminating manual steps** - No manual kubectl commands 2. **Automation** - Merge to Git \u2192 automatic deployment 3. **Faster feedback** - See changes in cluster within minutes 4. **Reduced errors** - Declarative configs less error-prone  **Typical improvement**: 40-70 min \u2192 10-15 min lead time"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#question-4-repository-structure","title":"Question 4: Repository Structure","text":"<p>Why should application code and deployment configs be in separate repositories?</p> Click to reveal answer  **Benefits of separation**: 1. **Deploy same app to multiple environments** with different configs 2. **Different access controls** - More people can deploy than modify code 3. **Independent versioning** - App version \u2260 deployment config version 4. **Clear separation of concerns** - Developers focus on code, platform team on deployment 5. **Easier rollbacks** - Revert deployment without touching app code"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#question-5-secrets-management","title":"Question 5: Secrets Management","text":"<p>Why should you never commit Kubernetes Secrets to Git, even base64-encoded?</p> Click to reveal answer  **Reasons**: 1. **Base64 is encoding, not encryption** - Easily decoded 2. **Git history is forever** - Can't truly delete from history 3. **Access control** - Anyone with Git access gets secrets 4. **Rotation complexity** - Hard to rotate secrets in Git history  **Instead use**: - Sealed Secrets (encrypted in Git) - External Secrets Operator (fetches from Vault/AWS Secrets Manager) - Never commit raw secrets"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#question-6-practical-application","title":"Question 6: Practical Application","text":"<p>Your application is experiencing high load. You need to scale from 3 to 10 replicas. What's the GitOps way to do this?</p> Click to reveal answer  **GitOps approach**: <pre><code># 1. Edit deployment in Git\nvim apps/prod/myapp/deployment.yaml\n# Change: replicas: 10\n\n# 2. Commit and push\ngit commit -m \"Scale myapp to 10 replicas for high load\"\ngit push\n\n# 3. ArgoCD syncs automatically (within 3 min)\n# 4. Verify scaling occurred\n</code></pre>  **NOT GitOps** (anti-pattern): <pre><code># \u274c Don't do this:\nkubectl scale deployment/myapp --replicas=10\n# This creates drift - Git still says 3, cluster has 10\n</code></pre>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#module-summary","title":"\ud83c\udf93 Module Summary","text":""},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>GitOps = Git as Source of Truth</li> <li>All configuration in Git</li> <li>Automated deployment from Git</li> <li> <p>Self-healing and drift detection</p> </li> <li> <p>Four Core Principles</p> </li> <li>Declarative</li> <li>Versioned and Immutable</li> <li>Pulled Automatically</li> <li> <p>Continuously Reconciled</p> </li> <li> <p>DORA Benefits</p> </li> <li>Increased deployment frequency</li> <li>Reduced lead time</li> <li>Lower change failure rate</li> <li> <p>Faster time to restore service</p> </li> <li> <p>Best Practices</p> </li> <li>Separate app code from deployment config</li> <li>Meaningful commit messages</li> <li>Never commit secrets</li> <li>Use Kustomize for environment differences</li> <li> <p>Small, focused files</p> </li> <li> <p>ArgoCD Workflow</p> </li> <li>Make changes in Git</li> <li>Pull request for review</li> <li>ArgoCD detects and syncs</li> <li>Monitor in ArgoCD UI</li> <li>Rollback via <code>git revert</code></li> </ol>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#what-youve-learned","title":"What You've Learned","text":"<p>\u2705 Define GitOps and its four principles \u2705 Explain pull vs. push deployment models \u2705 Describe how GitOps improves DORA metrics \u2705 Navigate GitOps repository structure \u2705 Make GitOps-driven changes \u2705 Practice rollback procedures</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#time-investment","title":"Time Investment","text":"<ul> <li>Theory: 45 minutes</li> <li>Hands-On Lab: 15 minutes</li> <li>Knowledge Check: 5 minutes</li> <li>Total: ~60 minutes</li> </ul>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#next-steps","title":"Next Steps","text":"<p>Module 4: Your First Deployment awaits! You'll: - Use Backstage to create a new service from template - Deploy your application using GitOps - Configure CI/CD pipeline - View DORA metrics for your deployment</p> <p>Continue to Module 4 \u2192 Your First Deployment</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#official-documentation","title":"Official Documentation","text":"<ul> <li>OpenGitOps Principles</li> <li>ArgoCD Documentation</li> <li>GitOps Working Group</li> </ul>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#articles-videos","title":"Articles &amp; Videos","text":"<ul> <li>What is GitOps? - Weaveworks</li> <li>GitOps Tech Talk - CNCF (30 min)</li> <li>ArgoCD Tutorial - TechWorld with Nana (20 min)</li> </ul>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#books","title":"Books","text":"<ul> <li>GitOps and Kubernetes by Billy Yuen, et al.</li> <li>Continuous Delivery by Jez Humble - Foundation for GitOps</li> </ul>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#practice","title":"Practice","text":"<ul> <li>ArgoCD Katacoda Tutorial - Interactive lab</li> <li>GitOps Playground - Local GitOps environment</li> <li>Fawkes Dojo Lab Environment - Continue practicing!</li> </ul>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#community","title":"Community","text":"<ul> <li>ArgoCD Slack - Ask questions</li> <li>GitOps Days - Annual conference</li> <li>#gitops on Kubernetes Slack - General discussion</li> </ul>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#module-completion","title":"\ud83c\udfaf Module Completion","text":""},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#assessment-results","title":"Assessment Results","text":"<p>Your lab work has been automatically graded:</p> <ul> <li>\u2705 GitOps Change: Successfully updated image version</li> <li>\u2705 Pull Request: Created PR with proper description</li> <li>\u2705 Deployment: ArgoCD synced changes successfully</li> <li>\u2705 Rollback: Demonstrated git revert workflow</li> <li>\u2705 Knowledge Check: Passed (need 80%+ to proceed)</li> </ul>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#module-3-score-auto-calculated-50-points","title":"Module 3 Score: [AUTO-CALCULATED] / 50 points","text":"<p>Breakdown: - Theory Understanding (Knowledge Check): 20 points - Hands-On Lab Completion: 20 points - Code Quality (commit messages, PR description): 10 points</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#certificate-progress","title":"Certificate Progress","text":"<p>White Belt Progress: 3 of 4 modules complete (75%)</p> <p>Modules completed: - \u2705 Module 1: Internal Delivery Platforms - What and Why - \u2705 Module 2: DORA Metrics - The North Star - \u2705 Module 3: GitOps Principles</p> <p>Next module: - \u23f3 Module 4: Your First Deployment</p> <p>Continue to Module 4 to complete White Belt requirements!</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#feedback-support","title":"\ud83d\udcac Feedback &amp; Support","text":""},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#how-was-this-module","title":"How was this module?","text":"<p>Rate this module (helps us improve): - \u2b50\u2b50\u2b50\u2b50\u2b50 Excellent - \u2b50\u2b50\u2b50\u2b50 Good - \u2b50\u2b50\u2b50 Average - \u2b50\u2b50 Needs Improvement - \u2b50 Poor</p> <p>Share feedback: Feedback Form</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#need-help","title":"Need Help?","text":"<p>Stuck on something? We're here to help!</p> <ul> <li>Mattermost: Join <code>#dojo-white-belt</code> channel</li> <li>Office Hours: Wednesdays 2-3 PM ET, Fridays 10-11 AM ET</li> <li>Discussion Forum: GitHub Discussions</li> <li>Documentation: GitOps Guide</li> </ul>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#common-issues","title":"Common Issues","text":"<p>Issue: ArgoCD not syncing changes - Check if auto-sync is enabled - Verify Git repository connection - Check ArgoCD logs: <code>kubectl logs -n argocd deploy/argocd-application-controller</code></p> <p>Issue: Can't access ArgoCD UI - Verify ingress configuration - Check ArgoCD service: <code>kubectl get svc -n argocd</code> - Try port-forward: <code>kubectl port-forward -n argocd svc/argocd-server 8080:443</code></p> <p>Issue: Git push rejected - Verify you have write access to repository - Check if branch is protected - Ensure you're pushing to correct remote</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#achievement-unlocked","title":"\ud83c\udfc6 Achievement Unlocked!","text":"<p>\ud83c\udf93 GitOps Practitioner</p> <p>You've completed Module 3 and demonstrated: - Understanding of GitOps core principles - Ability to make GitOps-driven changes - Knowledge of ArgoCD workflow - Proficiency in Git-based rollbacks</p> <p>Share your achievement: - LinkedIn: \"Just completed GitOps Principles module in @Fawkes Dojo! #GitOps #PlatformEngineering\" - Twitter: \"Learned GitOps with hands-on ArgoCD practice at @FawkesIDP dojo \ud83d\ude80 #DevOps #GitOps\"</p> <p>Next milestone: Complete Module 4 to earn your White Belt Certification! \ud83e\udd4b</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#your-dojo-progress","title":"\ud83d\udcca Your Dojo Progress","text":"<pre><code>White Belt Journey: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 75%\n\nCompleted:\n\u2705 Module 1: What is an IDP (60 min)\n\u2705 Module 2: DORA Metrics (60 min)  \n\u2705 Module 3: GitOps Principles (60 min)\n\nRemaining:\n\u23f3 Module 4: Your First Deployment (60 min)\n\u23f3 White Belt Assessment (30 min)\n\nTotal Time Invested: 3 hours\nEstimated Time to White Belt: 1.5 hours\n\nKeep going! You're 75% of the way to your first certification! \ud83d\udcaa\n</code></pre>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#ready-for-module-4","title":"\ud83c\udfaf Ready for Module 4?","text":"<p>Module 4: Your First Deployment brings together everything you've learned:</p> <p>You'll learn to: - Create a service using Backstage templates - Configure CI/CD pipeline (Jenkins) - Deploy using GitOps (ArgoCD) - Monitor with observability tools - View DORA metrics for your service</p> <p>Prerequisites: Modules 1, 2, and 3 complete \u2705</p> <p>Estimated time: 60 minutes</p> <p>Start Module 4 Now \u2192</p>"},{"location":"dojo/modules/white-belt/module-03-gitops-principles/#module-notes","title":"\ud83d\udcdd Module Notes","text":"<p>Module: GitOps Principles Version: 1.0 Last Updated: October 8, 2025 Author: Fawkes Platform Team Contributors: View Contributors</p> <p>Module Changelog: - v1.0 (2025-10-08): Initial release</p> <p>Feedback &amp; Improvements: This module is continuously improved based on learner feedback. If you have suggestions, please open an issue or discuss in <code>#dojo-feedback</code> channel.</p> <p>\u00a9 2025 Fawkes Platform | Licensed under MIT License</p> <p>Platform: https://fawkes.io GitHub: https://github.com/paruff/fawkes Community: https://community.fawkes.io</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/","title":"Module 4: Your First Deployment","text":"<p>Belt Level: \ud83e\udd4b White Belt Duration: 60 minutes Prerequisites: Modules 1, 2, and 3 completed DORA Capabilities: Continuous Delivery, Deployment Automation</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#1-learning-objectives-3-minutes","title":"1. Learning Objectives (3 minutes)","text":""},{"location":"dojo/modules/white-belt/module-04-first-deployment/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this module, you will be able to:</p> <ul> <li>\u2705 Deploy an application using Fawkes golden path templates</li> <li>\u2705 Navigate the deployment pipeline from code to production</li> <li>\u2705 Monitor deployment progress through Backstage, Jenkins, and ArgoCD</li> <li>\u2705 Verify application health and accessibility</li> <li>\u2705 Understand how DORA metrics are automatically captured</li> <li>\u2705 Troubleshoot common deployment issues</li> </ul>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#why-it-matters","title":"Why It Matters","text":"<p>The Milestone: This is the moment you've been building toward\u2014your first end-to-end deployment on the Fawkes platform.</p> <p>Real-World Impact: According to DORA research, organizations that master deployment automation: - Deploy 417 times more frequently than low performers - Have 5,788 times lower change failure rates - Reduce lead time from months to minutes</p> <p>Your Journey: In the next hour, you'll experience what elite performers do dozens of times per day\u2014safely deploying code to production with full observability.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#success-criteria","title":"Success Criteria","text":"<p>You've mastered this module when you can:</p> <ul> <li>Deploy an application end-to-end without assistance</li> <li>Explain each stage of the deployment pipeline</li> <li>Find and interpret deployment logs across tools</li> <li>Identify when a deployment succeeded or failed</li> <li>Access your deployed application</li> </ul>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#2-theory-concepts-15-minutes","title":"2. Theory &amp; Concepts (15 minutes)","text":""},{"location":"dojo/modules/white-belt/module-04-first-deployment/#video-the-fawkes-deployment-pipeline-7-minutes","title":"\ud83d\udcfa Video: The Fawkes Deployment Pipeline (7 minutes)","text":"<p>[VIDEO PLACEHOLDER] Script Summary: - Opening: Show the full deployment pipeline diagram - Code commit \u2192 Jenkins build \u2192 Harbor registry \u2192 ArgoCD sync - Each stage explained with real-time visualization - Observability: Where to find logs and metrics at each stage - DORA metrics: How they're automatically captured - Closing: \"From commit to production in minutes, not months\"</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#the-fawkes-deployment-pipeline","title":"The Fawkes Deployment Pipeline","text":"<p>When you deploy on Fawkes, your code flows through a carefully orchestrated pipeline:</p> <pre><code>Developer \u2192 Git \u2192 Jenkins \u2192 Harbor \u2192 ArgoCD \u2192 Kubernetes \u2192 \ud83c\udf89\n   You     SCM    CI/CD    Registry  GitOps   Cluster    Live!\n</code></pre> <p>Let's break down each stage:</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#stage-1-code-commit-git","title":"Stage 1: Code Commit (Git)","text":"<p>What Happens: You push code to a Git repository (GitHub, GitLab, etc.)</p> <p>Behind the Scenes: - Git webhook triggers Jenkins - Commit SHA becomes the version identifier - Timestamp recorded (start of lead time measurement)</p> <p>Your Role: <code>git push origin main</code></p> <p>Time: &lt; 1 second</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#stage-2-build-test-jenkins","title":"Stage 2: Build &amp; Test (Jenkins)","text":"<p>What Happens: Jenkins automatically builds and tests your code</p> <p>Behind the Scenes: 1. Checkout: Jenkins clones your repository 2. Build: Compiles code, runs tests 3. Security Scan: Checks for vulnerabilities (Trivy) 4. Quality Check: SonarQube analysis (if configured) 5. Package: Creates container image 6. Push: Uploads image to Harbor registry</p> <p>Your Role: None! It's automated by the golden path pipeline.</p> <p>Time: 3-8 minutes (depending on project size)</p> <p>Success Indicators: - \u2705 All tests pass - \u2705 No critical security vulnerabilities - \u2705 Code quality meets threshold - \u2705 Container image tagged with commit SHA</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#stage-3-registry-storage-harbor","title":"Stage 3: Registry Storage (Harbor)","text":"<p>What Happens: Your container image is stored in Harbor registry</p> <p>Behind the Scenes: - Image tagged: <code>harbor.fawkes.local/myapp:abc123</code> - Vulnerability scan runs automatically - Image signed (cryptographic verification) - Available for deployment</p> <p>Your Role: None! Fully automated.</p> <p>Time: &lt; 30 seconds</p> <p>Important: The image is immutable\u2014same image moves through all environments (dev \u2192 staging \u2192 prod). This ensures consistency.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#stage-4-gitops-deployment-argocd","title":"Stage 4: GitOps Deployment (ArgoCD)","text":"<p>What Happens: ArgoCD detects the new image and deploys to Kubernetes</p> <p>Behind the Scenes: 1. Detection: ArgoCD polls Git repository every 3 minutes (or webhook triggers immediately) 2. Sync: Compares desired state (Git) with actual state (Kubernetes) 3. Apply: Creates/updates Kubernetes resources 4. Health Check: Monitors pod startup and readiness 5. Metrics: Records deployment event for DORA metrics</p> <p>Your Role: Review sync status in ArgoCD UI</p> <p>Time: 1-5 minutes (depending on pod startup time)</p> <p>Success Indicators: - \u2705 Sync status: \"Synced\" - \u2705 Health status: \"Healthy\" - \u2705 Pods running: All replicas ready</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#stage-5-running-application-kubernetes","title":"Stage 5: Running Application (Kubernetes)","text":"<p>What Happens: Your application runs in Kubernetes, accessible via ingress</p> <p>Behind the Scenes: - Pods scheduled across nodes for HA - Service provides stable network endpoint - Ingress routes traffic from external load balancer - Probes monitor health (liveness, readiness) - Metrics collected by Prometheus - Logs shipped to OpenSearch - Traces sent to Jaeger</p> <p>Your Role: Access application, verify functionality</p> <p>Time: Immediate once pods are ready</p> <p>Success Indicators: - \u2705 Application responds to requests - \u2705 Health check endpoints return 200 OK - \u2705 No errors in logs</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#golden-path-templates","title":"Golden Path Templates","text":"<p>Fawkes provides golden path templates\u2014pre-configured application scaffolds that include everything you need:</p> <p>What's Included: - \u2705 Application code structure - \u2705 Dockerfile (container image build) - \u2705 Jenkinsfile (CI/CD pipeline) - \u2705 Kubernetes manifests (deployment, service, ingress) - \u2705 Helm chart (configuration management) - \u2705 README with instructions - \u2705 Automated testing setup - \u2705 Monitoring and observability configuration</p> <p>Why Golden Paths? - Consistency: Every app follows the same patterns - Best Practices: Security, testing, monitoring built-in - Speed: Start from working example, customize as needed - Learning: See how the pieces fit together</p> <p>Available Templates (in Fawkes MVP): - <code>spring-boot-api</code>: Java REST API with Spring Boot - <code>python-flask-api</code>: Python REST API with Flask - <code>nodejs-express-api</code>: Node.js REST API with Express - <code>static-website</code>: Static HTML/CSS/JS site</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#dora-metrics-automatic-capture","title":"DORA Metrics: Automatic Capture","text":"<p>Every deployment automatically updates your DORA metrics:</p> <p>Deployment Frequency: - Incremented when ArgoCD successfully syncs to production - Visible in real-time on DORA dashboard</p> <p>Lead Time for Changes: - Start: Git commit timestamp - End: ArgoCD sync completion timestamp - Calculated automatically, no manual tracking</p> <p>Change Failure Rate: - If deployment rolls back within 24 hours \u2192 counted as failure - If incident created within 24 hours of deploy \u2192 counted as failure - Visible as percentage on dashboard</p> <p>Mean Time to Restore (MTTR): - Start: Incident created timestamp - End: Incident resolved timestamp (successful deploy or rollback) - Only measured if incident occurs</p> <p>No Manual Work Required: The platform captures everything automatically.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#common-deployment-patterns","title":"Common Deployment Patterns","text":""},{"location":"dojo/modules/white-belt/module-04-first-deployment/#pattern-1-direct-to-production-mvp","title":"Pattern 1: Direct to Production (MVP)","text":"<p><pre><code>Git \u2192 Jenkins \u2192 Harbor \u2192 ArgoCD \u2192 Production\n</code></pre> When to Use: MVP, small teams, low-risk changes Risk Level: Medium (no staging environment)</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#pattern-2-dev-production-recommended","title":"Pattern 2: Dev \u2192 Production (Recommended)","text":"<p><pre><code>Git \u2192 Jenkins \u2192 Harbor \u2192 ArgoCD \u2192 Dev \u2192 Production\n</code></pre> When to Use: Small teams, moderate risk Risk Level: Low (dev environment for testing)</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#pattern-3-full-pipeline-enterprise","title":"Pattern 3: Full Pipeline (Enterprise)","text":"<p><pre><code>Git \u2192 Jenkins \u2192 Harbor \u2192 ArgoCD \u2192 Dev \u2192 Staging \u2192 Production\n</code></pre> When to Use: Large teams, high-risk changes, compliance requirements Risk Level: Very Low (multiple validation stages)</p> <p>Fawkes MVP: Uses Pattern 1 or 2 by default. Pattern 3 configured in production.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#troubleshooting-where-to-look","title":"Troubleshooting: Where to Look","text":"<p>Build Failed: - Where: Jenkins build logs - How: Click on build number in Jenkins UI - Common Issues: Test failures, dependency errors, Docker build errors</p> <p>Image Scan Failed: - Where: Harbor UI \u2192 Images \u2192 Scan Results - How: Click on image tag, view vulnerabilities - Common Issues: Critical CVEs in base image or dependencies</p> <p>Deployment Failed: - Where: ArgoCD UI \u2192 Application \u2192 Events - How: Check sync status and pod events - Common Issues: Image pull errors, insufficient resources, configuration errors</p> <p>Application Not Responding: - Where: Kubernetes pod logs, Grafana dashboards - How: <code>kubectl logs &lt;pod-name&gt;</code> or Backstage component view - Common Issues: Application crashes, database connection failures, port misconfigurations</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#3-demonstration-10-minutes","title":"3. Demonstration (10 minutes)","text":""},{"location":"dojo/modules/white-belt/module-04-first-deployment/#video-deploying-the-sample-application-10-minutes","title":"\ud83d\udcfa Video: Deploying the Sample Application (10 minutes)","text":"<p>[VIDEO PLACEHOLDER] Script: Instructor performs a complete deployment showing:</p> <p>Part 1: Create from Template (2 min) - Open Backstage - Click \"Create\" \u2192 \"Choose a template\" - Select \"Spring Boot API\" template - Fill in details: name, description, repository - Click \"Create\" - Show generated repository in GitHub</p> <p>Part 2: Trigger Build (2 min) - Show Jenkins detecting the new repository - Build starts automatically - Walk through build stages in Jenkins UI - Show build logs for each stage - Highlight test results and security scan</p> <p>Part 3: Image Registry (1 min) - Switch to Harbor UI - Show new image with commit SHA tag - Open vulnerability scan results - Explain image signing</p> <p>Part 4: ArgoCD Deployment (3 min) - Open ArgoCD UI - Show application appearing in list - Watch sync in real-time - Explain \"Out of Sync\" \u2192 \"Syncing\" \u2192 \"Synced\" \u2192 \"Healthy\" - Show Kubernetes resources created</p> <p>Part 5: Access Application (1 min) - Get application URL from Backstage - Open in browser, show it works - Make a test API call</p> <p>Part 6: Observe Metrics (1 min) - Open DORA dashboard - Show deployment frequency incremented - Show lead time calculated - Point out where to find logs, traces, metrics</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#key-takeaways-from-demo","title":"Key Takeaways from Demo","text":"<ol> <li>It's Fast: From template creation to live app in ~10 minutes</li> <li>It's Automated: You push code, platform handles the rest</li> <li>It's Observable: Every stage visible in appropriate tool</li> <li>It's Safe: Multiple quality gates (tests, scans, health checks)</li> <li>It's Measurable: DORA metrics update automatically</li> </ol>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#4-hands-on-lab-25-minutes","title":"4. Hands-On Lab (25 minutes)","text":""},{"location":"dojo/modules/white-belt/module-04-first-deployment/#lab-overview","title":"Lab Overview","text":"<p>You'll deploy your first application on Fawkes using a golden path template, monitor its progress through the pipeline, and verify it's running successfully.</p> <p>Time Estimate: 20-25 minutes Difficulty: Beginner Auto-Graded: Yes Points: 100</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#lab-environment","title":"Lab Environment","text":"<p>When you click \"Start Lab\", we'll provision: - \u2705 Access to Backstage (create templates) - \u2705 Git repository for your application - \u2705 Jenkins pipeline (automatic) - \u2705 ArgoCD application (automatic) - \u2705 Kubernetes namespace: <code>dojo-learner-{username}</code> - \u2705 Application URL (via ingress)</p> <p>Environment will be available for 24 hours from start time.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#lab-instructions","title":"Lab Instructions","text":""},{"location":"dojo/modules/white-belt/module-04-first-deployment/#part-1-create-application-from-template-5-minutes","title":"Part 1: Create Application from Template (5 minutes)","text":"<p>Step 1: Access Backstage</p> <pre><code># Your lab credentials will be displayed here after clicking \"Start Lab\"\n# Navigate to: https://backstage.fawkes-dojo.internal\n</code></pre> <p>Step 2: Create New Component</p> <ol> <li>Click \"Create\" in the left sidebar</li> <li>Click \"Choose a template\"</li> <li>Select \"Spring Boot REST API\" template</li> <li>Click \"Choose\"</li> </ol> <p>Step 3: Fill in Application Details</p> <ul> <li>Name: <code>my-first-app</code> (use your username if <code>my-first-app</code> is taken)</li> <li>Description: <code>My first deployment on Fawkes</code></li> <li>Owner: Select your username from dropdown</li> <li>Repository: <code>github.com/fawkes-dojo/{your-username}/my-first-app</code></li> </ul> <p>Click \"Next\"</p> <p>Step 4: Review and Create</p> <ul> <li>Review the repository location</li> <li>Click \"Create\"</li> <li>Wait for template to be generated (~30 seconds)</li> <li>Click \"Open in catalog\" when complete</li> </ul> <p>\u2705 Validation: We'll check that you created a component in Backstage</p> <p>\ud83d\udcdd Submit: Component name and URL</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#part-2-monitor-the-build-8-minutes","title":"Part 2: Monitor the Build (8 minutes)","text":"<p>Step 5: Find Your Jenkins Build</p> <ol> <li>In Backstage, on your component page, click the \"CI/CD\" tab</li> <li>You should see a Jenkins build triggered automatically</li> <li>Click on the build number (e.g., \"#1\")</li> <li>This opens Jenkins UI</li> </ol> <p>Step 6: Watch Build Progress</p> <p>Observe the build stages: 1. Checkout: Jenkins clones your repository 2. Build: Compiles code, runs tests 3. Test: Executes unit tests 4. Security Scan: Trivy scans for vulnerabilities 5. Docker Build: Creates container image 6. Push to Harbor: Uploads image</p> <p>Wait for build to complete (~5-8 minutes). You can move to the next part while waiting.</p> <p>Step 7: Review Build Results</p> <p>Once complete, note: - Build status (hopefully \"Success\" \u2705) - Build duration - Test results (how many tests ran, passed/failed) - Security scan results (vulnerabilities found)</p> <p>\u2705 Validation: We'll check that your build completed successfully</p> <p>\ud83d\udcdd Submit: Build number and status</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#part-3-verify-image-in-harbor-3-minutes","title":"Part 3: Verify Image in Harbor (3 minutes)","text":"<p>Step 8: Access Harbor Registry</p> <ol> <li>Navigate to: <code>https://harbor.fawkes-dojo.internal</code></li> <li>Log in with your dojo credentials</li> <li>Click on \"Projects\" \u2192 \"dojo-apps\"</li> <li>Find your application: <code>my-first-app</code></li> </ol> <p>Step 9: Inspect Image</p> <ol> <li>Click on your app name</li> <li>You should see one image tagged with commit SHA (e.g., <code>abc123</code>)</li> <li>Click on the tag</li> <li>Review vulnerability scan results</li> <li>Note the image size and creation time</li> </ol> <p>\u2705 Validation: We'll check that your image exists in Harbor</p> <p>\ud83d\udcdd Submit: Image tag (commit SHA)</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#part-4-monitor-argocd-deployment-5-minutes","title":"Part 4: Monitor ArgoCD Deployment (5 minutes)","text":"<p>Step 10: Access ArgoCD</p> <ol> <li>Return to Backstage, click \"Deployment\" tab</li> <li>Click \"Open in ArgoCD\" link</li> <li>Or navigate directly to: <code>https://argocd.fawkes-dojo.internal</code></li> </ol> <p>Step 11: Watch Deployment Sync</p> <ol> <li>Find your application: <code>my-first-app</code></li> <li>Observe sync status:</li> <li>Out of Sync: ArgoCD detected new image</li> <li>Syncing: Applying changes to Kubernetes</li> <li>Synced: Desired state matches actual state</li> <li>Observe health status:</li> <li>Progressing: Pods starting</li> <li>Healthy: All pods ready</li> <li>Click on your app to see detailed view</li> </ol> <p>Step 12: Inspect Kubernetes Resources</p> <p>In ArgoCD detailed view, you should see: - Deployment: Your application deployment - Service: Network endpoint for your app - Ingress: External URL routing - Pods: Individual application instances (should be 2 replicas)</p> <p>Wait for all resources to show \"Healthy\" status.</p> <p>\u2705 Validation: We'll check that your app is synced and healthy in ArgoCD</p> <p>\ud83d\udcdd Submit: ArgoCD sync status and health status</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#part-5-access-your-application-4-minutes","title":"Part 5: Access Your Application (4 minutes)","text":"<p>Step 13: Get Application URL</p> <ol> <li>In Backstage, on your component page, find the \"Links\" section</li> <li>Click on \"Application URL\"</li> <li>Or construct manually: <code>https://my-first-app.dojo-learner-{username}.fawkes-dojo.internal</code></li> </ol> <p>Step 14: Test Application</p> <p>Your Spring Boot app exposes these endpoints:</p> <pre><code># Health check\ncurl https://my-first-app.dojo-learner-{username}.fawkes-dojo.internal/actuator/health\n\n# Should return:\n# {\"status\":\"UP\"}\n\n# Sample API endpoint\ncurl https://my-first-app.dojo-learner-{username}.fawkes-dojo.internal/api/hello\n\n# Should return:\n# {\"message\":\"Hello from Fawkes!\",\"timestamp\":\"2025-10-08T...\"}\n</code></pre> <p>Step 15: Verify in Browser</p> <ol> <li>Open application URL in browser</li> <li>You should see a welcome page</li> <li>Navigate to <code>/swagger-ui.html</code> to see API documentation</li> </ol> <p>\u2705 Validation: We'll check that your application responds with HTTP 200</p> <p>\ud83d\udcdd Submit: Screenshot of application running in browser OR response from <code>/actuator/health</code></p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#part-6-review-dora-metrics-3-minutes","title":"Part 6: Review DORA Metrics (3 minutes)","text":"<p>Step 16: Check Your Metrics</p> <ol> <li>In Backstage, click \"DORA Metrics\" in left sidebar</li> <li>Filter by your component: <code>my-first-app</code></li> <li>Observe:</li> <li>Deployment Frequency: Should show 1 deployment</li> <li>Lead Time: Time from commit to deployment (likely 10-15 minutes)</li> <li>Change Failure Rate: Should be 0% (successful deployment)</li> <li>MTTR: N/A (no incidents)</li> </ol> <p>Step 17: Explore Observability</p> <ol> <li>Click \"Logs\" tab \u2192 Opens OpenSearch Dashboards</li> <li>Search for: <code>kubernetes.namespace_name:\"dojo-learner-{username}\"</code></li> <li>You should see application startup logs</li> <li>Click \"Metrics\" tab \u2192 Opens Grafana</li> <li>View pod CPU, memory, network metrics</li> <li>Click \"Traces\" tab \u2192 Opens Jaeger</li> <li>View distributed traces (if application makes external calls)</li> </ol> <p>\u2705 Validation: We'll check that metrics were recorded</p> <p>\ud83d\udcdd Submit: Your lead time for changes (in minutes)</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#lab-submission","title":"Lab Submission","text":"<p>Once you've completed all parts:</p> <ol> <li>Ensure all answers are recorded in your lab notebook</li> <li>Double-check that your application is still running</li> <li>Click \"Submit Lab\" button in Backstage</li> </ol> <p>Grading: - Part 1 (Component created): 15 points - Part 2 (Build completed): 20 points - Part 3 (Image in Harbor): 15 points - Part 4 (ArgoCD synced): 20 points - Part 5 (App responding): 20 points - Part 6 (Metrics recorded): 10 points</p> <p>Passing score: 80/100 (80%)</p> <p>Auto-grading runs within 2 minutes. You'll see: - \u2705 Checks that passed (green) - \u274c Checks that failed (red) with hints - Final score - Option to retry if score &lt; 80</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#troubleshooting-hints","title":"Troubleshooting Hints","text":"<p>Build Failed in Jenkins? - Click on build number \u2192 \"Console Output\" - Look for red error messages - Common fix: Tests might fail on first run; click \"Rebuild\"</p> <p>Image Not in Harbor? - Check Jenkins logs for \"Push to Harbor\" stage - Verify Jenkins completed successfully - Wait 1-2 minutes after build completes</p> <p>ArgoCD Stuck \"Out of Sync\"? - Click \"Refresh\" in ArgoCD - If still stuck, click \"Sync\" \u2192 \"Synchronize\" - ArgoCD polls every 3 minutes; you can force manual sync</p> <p>Pods Not Starting? - In ArgoCD, click on pod \u2192 \"Logs\" - Look for error messages (image pull errors, crashes) - Common issue: Image tag mismatch (check Harbor vs. deployment manifest)</p> <p>Application Not Responding? - Verify pods are \"Running\" in ArgoCD - Check pod logs for errors - Verify ingress configuration (ArgoCD \u2192 Ingress resource)</p> <p>Can't Access Application URL? - Verify ingress is \"Healthy\" in ArgoCD - Check ingress annotations - Try health check endpoint first: <code>/actuator/health</code></p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#5-knowledge-check-5-minutes","title":"5. Knowledge Check (5 minutes)","text":""},{"location":"dojo/modules/white-belt/module-04-first-deployment/#quiz-first-deployment-mastery","title":"Quiz: First Deployment Mastery","text":"<p>Instructions: Answer all 10 questions. You need 8/10 (80%) to pass. Unlimited attempts allowed.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#question-1","title":"Question 1","text":"<p>What triggers a Jenkins build in the Fawkes platform?</p> <ul> <li>[ ] A) Manual button click in Backstage</li> <li>[x] B) Git webhook when code is pushed</li> <li>[ ] C) Scheduled cron job every hour</li> <li>[ ] D) ArgoCD detecting a configuration change</li> </ul> <p>Explanation: When you push code to Git, a webhook automatically triggers Jenkins to start the CI/CD pipeline. This ensures every code change is built and tested.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#question-2","title":"Question 2","text":"<p>In which component is your container image stored after the build?</p> <ul> <li>[ ] A) Jenkins</li> <li>[x] B) Harbor</li> <li>[ ] C) ArgoCD</li> <li>[ ] D) Kubernetes</li> </ul> <p>Explanation: Harbor is the container registry where Docker images are stored after Jenkins builds them. Harbor also scans images for vulnerabilities.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#question-3","title":"Question 3","text":"<p>What does ArgoCD do in the deployment pipeline?</p> <ul> <li>[ ] A) Builds the container image</li> <li>[ ] B) Runs unit tests</li> <li>[x] C) Deploys applications to Kubernetes using GitOps</li> <li>[ ] D) Scans code for security vulnerabilities</li> </ul> <p>Explanation: ArgoCD implements GitOps\u2014it continuously monitors Git repositories and ensures Kubernetes cluster state matches the desired state defined in Git.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#question-4","title":"Question 4","text":"<p>What is a \"golden path template\" in Fawkes?</p> <ul> <li>[ ] A) The fastest route to production</li> <li>[x] B) A pre-configured application scaffold with best practices built-in</li> <li>[ ] C) A deployment checklist</li> <li>[ ] D) A security policy document</li> </ul> <p>Explanation: Golden path templates are pre-built application templates that include everything needed for CI/CD, monitoring, and deployment\u2014so you can start from a working example.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#question-5","title":"Question 5","text":"<p>When is the \"lead time for changes\" measurement started?</p> <ul> <li>[x] A) When code is committed to Git</li> <li>[ ] B) When Jenkins build starts</li> <li>[ ] C) When ArgoCD begins syncing</li> <li>[ ] D) When pods become ready</li> </ul> <p>Explanation: Lead time starts at the Git commit timestamp and ends when the deployment completes. This measures how long code waits in your process.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#question-6","title":"Question 6","text":"<p>What does it mean when ArgoCD shows \"Out of Sync\"?</p> <ul> <li>[ ] A) The application is broken</li> <li>[ ] B) Jenkins build failed</li> <li>[x] C) Desired state (Git) differs from actual state (Kubernetes)</li> <li>[ ] D) The database is down</li> </ul> <p>Explanation: \"Out of Sync\" means Git has changes that aren't yet applied to Kubernetes. ArgoCD will automatically sync, or you can trigger it manually.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#question-7","title":"Question 7","text":"<p>How can you verify your application is healthy after deployment?</p> <ul> <li>[ ] A) Check if ArgoCD shows \"Synced\"</li> <li>[ ] B) Call the application's health endpoint</li> <li>[ ] C) Look at pod status in ArgoCD</li> <li>[x] D) All of the above</li> </ul> <p>Explanation: You should verify all three: ArgoCD sync status, pod health, and application response. A healthy deployment shows green across all checks.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#question-8","title":"Question 8","text":"<p>Where do you find logs if your application crashes after deployment?</p> <ul> <li>[ ] A) Jenkins build logs</li> <li>[ ] B) Harbor scan results</li> <li>[x] C) Kubernetes pod logs (via ArgoCD or kubectl)</li> <li>[ ] D) Git commit history</li> </ul> <p>Explanation: Pod logs show application runtime errors. Access them via ArgoCD UI \u2192 click pod \u2192 \"Logs\", or use <code>kubectl logs &lt;pod-name&gt;</code>.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#question-9","title":"Question 9","text":"<p>What does Jenkins do during the \"Security Scan\" stage?</p> <ul> <li>[ ] A) Tests application functionality</li> <li>[x] B) Scans container image for known vulnerabilities</li> <li>[ ] C) Checks code style</li> <li>[ ] D) Deploys to production</li> </ul> <p>Explanation: Jenkins uses Trivy to scan container images for CVEs (Common Vulnerabilities and Exposures) in base images and dependencies.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#question-10","title":"Question 10","text":"<p>Why does the same container image move through all environments (dev \u2192 staging \u2192 prod)?</p> <ul> <li>[ ] A) To save disk space</li> <li>[ ] B) To make builds faster</li> <li>[x] C) To ensure consistency\u2014what you test is what you deploy</li> <li>[ ] D) It's a Fawkes requirement, not a best practice</li> </ul> <p>Explanation: Immutable deployments mean the exact same artifact (container image) progresses through environments. You never rebuild for production\u2014you promote the tested image.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#quiz-results","title":"Quiz Results","text":"<p>Score: X / 10</p> <ul> <li>\u2705 Passed (8+): Excellent! You understand the deployment pipeline.</li> <li>\u274c Not Yet (&lt;8): Review the theory section and try again.</li> </ul> <p>Incorrect answers? Each question links back to the relevant section for review.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#6-reflection-next-steps-5-minutes","title":"6. Reflection &amp; Next Steps (5 minutes)","text":""},{"location":"dojo/modules/white-belt/module-04-first-deployment/#what-you-learned","title":"What You Learned","text":"<p>Congratulations! \ud83c\udf89 You've completed your first deployment on Fawkes. Let's recap:</p> <p>\u2705 You now know: - The complete deployment pipeline from code to production - How Jenkins, Harbor, ArgoCD, and Kubernetes work together - Where to find logs, metrics, and traces at each stage - How DORA metrics are automatically captured - What golden path templates provide - How to troubleshoot common deployment issues</p> <p>\u2705 You can now: - Deploy applications end-to-end without assistance - Monitor deployment progress across multiple tools - Verify application health and functionality - Interpret success/failure at each pipeline stage</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#how-this-connects-to-your-work","title":"How This Connects to Your Work","text":"<p>For Developers: - You can now deploy code multiple times per day - No more waiting for ops team to deploy for you - Immediate feedback on every change - Full visibility into deployment status</p> <p>For Platform Engineers: - You understand how the golden path works - You can help teams troubleshoot deployment issues - You see how observability is built into the pipeline</p> <p>For Leaders: - You've seen how automation enables high deployment frequency - You understand how DORA metrics are captured automatically - You can articulate the business value of the platform</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#real-world-application-exercise","title":"Real-World Application Exercise","text":"<p>This Week, Try This:</p> <ol> <li>Deploy a Real Feature</li> <li>Pick a small feature or bug fix from your backlog</li> <li>Deploy it using the Fawkes platform</li> <li> <p>Measure your lead time (commit to production)</p> </li> <li> <p>Compare Before and After</p> </li> <li>How long did deployments take before Fawkes?</li> <li>How long now?</li> <li> <p>Calculate time saved</p> </li> <li> <p>Share Your Experience</p> </li> <li>Demo your deployed app to your team (5 min standup)</li> <li>Show the DORA metrics dashboard</li> <li>Discuss: \"What would we need to deploy 10x per day?\"</li> </ol>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#reflection-questions","title":"Reflection Questions","text":"<p>Take 2 minutes to think about:</p> <ol> <li>What surprised you most?</li> <li>Was the deployment faster or slower than expected?</li> <li> <p>Which part was easiest? Hardest?</p> </li> <li> <p>What would you change?</p> </li> <li>If you could modify the golden path template, what would you add?</li> <li> <p>What additional automation would be helpful?</p> </li> <li> <p>What's your next deployment?</p> </li> <li>What will you deploy next on Fawkes?</li> <li> <p>Can you deploy to production confidently now?</p> </li> <li> <p>How does this compare to your current process?</p> </li> <li>What manual steps does Fawkes eliminate?</li> <li>What new capabilities does it provide?</li> </ol>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#additional-resources","title":"Additional Resources","text":"<p>\ud83d\udcda Further Reading: - Deployment Strategies - Blue-green, canary, rolling - Golden Path Templates - Creating custom templates - Troubleshooting Guide - Common issues and fixes - GitOps Best Practices - ArgoCD patterns</p> <p>\ud83c\udfa5 Videos to Watch: - \"Advanced Deployment Patterns\" (15 min) - \"Customizing Golden Path Templates\" (20 min) - \"Zero-Downtime Deployments\" (10 min)</p> <p>\ud83d\udee0\ufe0f Hands-On Practice: - Deploy the Python Flask template - Deploy the Node.js Express template - Customize a template (add database, change ports) - Practice rolling back a deployment</p> <p>\ud83d\udcac Community: - Share your first deployment in <code>#dojo-achievements</code> - Help others in <code>#dojo-white-belt</code> - Ask questions in daily office hours</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#preview-white-belt-assessment","title":"Preview: White Belt Assessment","text":"<p>You've Completed All 4 White Belt Modules!</p> <p>Next up is the White Belt Assessment (2 hours): - Deploy 2 additional applications (different languages) - Written exam (30 questions covering modules 1-4) - Practical troubleshooting scenario - Passing score: 80%</p> <p>What You'll Need to Do: 1. Deploy a Python application 2. Deploy a Node.js application 3. Troubleshoot a broken deployment 4. Answer questions on platform concepts 5. Demonstrate DORA metrics knowledge</p> <p>Get Ready: - Review all 4 modules - Practice deploying different templates - Make sure you understand the full pipeline - Be comfortable with troubleshooting</p> <p>When You're Ready: Click \"Start White Belt Assessment\" in your Dojo dashboard.</p>"},{"location":"dojo/modules/white-belt/module-04-first-deployment/#module-completion","title":"Module Completion","text":""},{"location":"dojo/modules/white-belt/module-04-first-deployment/#youve-completed-module-4","title":"\u2705 You've Completed Module 4!","text":"<p>Next Steps: 1. \u2705 Mark this module complete in your Backstage profile 2. \ud83d\udcca View your progress on the Dojo dashboard 3. \ud83d\udcac Share your first deployment in <code>#dojo-achievements</code>! 4. \u27a1\ufe0f Prepare for White Belt Assessment when ready</p> <p>Time Investment: 60 minutes Skills Gained: End-to-end deployment, pipeline understanding, troubleshooting Progress: 4 of 4 modules complete (100% - Ready for White Belt Assessment!)</p> <p>Deployment Count: 1 \ud83d\ude80 Lead Time: ~15 minutes (from commit to production) DORA Metrics: Automatically captured \u2705</p> <p>Questions or Issues? - \ud83d\udcac Ask in <code>#dojo-white-belt</code> on Mattermost - \ud83d\udce7 Email: dojo@fawkes.io - \ud83d\udc1b Report bugs: GitHub Issues</p> <p>Feedback? - Rate this module (takes 30 seconds) - What worked well? What could be better? - Help us improve the learning experience!</p> <p>Module Author: Fawkes Learning Team Last Updated: October 2025 Version: 1.0</p> <p>\ud83c\udf89 Congratulations on your first deployment! You're well on your way to becoming a platform engineering expert.</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/","title":"Fawkes Dojo Module 5: Continuous Integration Fundamentals","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#module-overview","title":"\ud83c\udfaf Module Overview","text":"<p>Belt Level: \ud83d\udfe1 Yellow Belt - CI/CD Mastery Module: 1 of 4 (Yellow Belt) Duration: 60 minutes Difficulty: Intermediate Prerequisites:  - White Belt certification complete - Basic understanding of Git workflows - Familiarity with build tools (Maven, npm, etc.) - Command line comfort</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>By the end of this module, you will:</p> <ol> <li>\u2705 Explain the principles and benefits of Continuous Integration</li> <li>\u2705 Understand Jenkins architecture and core concepts</li> <li>\u2705 Create your first Jenkinsfile (Pipeline as Code)</li> <li>\u2705 Configure build stages: checkout, build, test, package</li> <li>\u2705 Implement basic error handling and notifications</li> <li>\u2705 Understand how CI improves DORA metrics</li> <li>\u2705 Troubleshoot common CI pipeline failures</li> </ol> <p>DORA Capabilities Addressed: - \u2713 CD3: Implement continuous integration - \u2713 CD1: Use version control for all production artifacts - \u2713 CD5: Trunk-based development methods</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#part-1-what-is-continuous-integration","title":"\ud83d\udcd6 Part 1: What is Continuous Integration?","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#the-problem-integration-hell","title":"The Problem: Integration Hell","text":"<p>Traditional development workflow: <pre><code>Developer A writes code for 2 weeks \u2192 Commits\nDeveloper B writes code for 2 weeks \u2192 Commits\nDeveloper C writes code for 2 weeks \u2192 Commits\n                \u2193\n        Integration Day (Friday)\n                \u2193\n      Merge conflicts, broken tests\n      Incompatible changes, missing dependencies\n                \u2193\n        Weekend fixing integration issues\n</code></pre></p> <p>Result:  - Integration becomes painful and risky - Feedback delayed by weeks - Bugs found late, expensive to fix - Releases delayed, stress increases</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#continuous-integration-solution","title":"Continuous Integration Solution","text":"<p>\"Integrate early, integrate often\"</p> <pre><code>Developer A: Commits multiple times per day\n         \u2193\n    Automated Build + Test\n         \u2193\n    Immediate Feedback (5-10 min)\n         \u2193\n    Fix issues immediately\n         \u2193\n    Always in releasable state\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#core-ci-principles","title":"Core CI Principles","text":"<ol> <li>Maintain a Single Source Repository</li> <li>All code in version control</li> <li>One repo truth source</li> <li> <p>Branches short-lived (&lt;1 day)</p> </li> <li> <p>Automate the Build</p> </li> <li>One command builds everything</li> <li>No manual steps</li> <li> <p>Repeatable and reliable</p> </li> <li> <p>Make Your Build Self-Testing</p> </li> <li>Automated unit tests</li> <li>Integration tests</li> <li> <p>Build fails if tests fail</p> </li> <li> <p>Everyone Commits to Mainline Every Day</p> </li> <li>Small, frequent commits</li> <li>Merge conflicts minimized</li> <li> <p>Continuous integration (the name!)</p> </li> <li> <p>Every Commit Should Build on Integration Machine</p> </li> <li>Not \"works on my machine\"</li> <li>Clean environment every time</li> <li> <p>Same as production</p> </li> <li> <p>Keep the Build Fast</p> </li> <li>Target: &lt;10 minutes</li> <li>Developers wait for feedback</li> <li> <p>Slow builds = ignored builds</p> </li> <li> <p>Test in Clone of Production Environment</p> </li> <li>Same OS, same dependencies</li> <li>Containers/VMs for consistency</li> <li> <p>\"Shift left\" on environment issues</p> </li> <li> <p>Make it Easy to Get Latest Deliverables</p> </li> <li>Artifacts automatically published</li> <li>Always available for testing</li> <li> <p>Clear versioning</p> </li> <li> <p>Everyone Can See What's Happening</p> </li> <li>Build status visible to all</li> <li>Radiator dashboards</li> <li> <p>Notifications on failures</p> </li> <li> <p>Automate Deployment</p> <ul> <li>One-click deployment</li> <li>Continuous Delivery (next step)</li> <li>Reduces human error</li> </ul> </li> </ol>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#ci-impact-on-dora-metrics","title":"CI Impact on DORA Metrics","text":"DORA Metric CI Impact Data Deployment Frequency Enables multiple deploys/day with confidence Elite: Multiple per day Lead Time for Changes Reduces commit-to-deploy from days to minutes Elite: &lt;1 hour Change Failure Rate Catches bugs before production Elite: 0-15% MTTR Small changes = easier rollback Elite: &lt;1 hour <p>Research shows: Teams with CI are 2x more likely to be high performers on DORA metrics.</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#part-2-jenkins-architecture","title":"\ud83c\udfd7\ufe0f Part 2: Jenkins Architecture","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#what-is-jenkins","title":"What is Jenkins?","text":"<p>Jenkins is an open-source automation server that enables CI/CD pipelines.</p> <p>Key Features: - Pipeline as Code (Jenkinsfile) - 1,800+ plugins for integration - Distributed builds (controller + agents) - Kubernetes-native (Fawkes uses Kubernetes Plugin) - Web UI for monitoring and management</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#jenkins-architecture-in-fawkes","title":"Jenkins Architecture in Fawkes","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Fawkes Platform (Kubernetes)              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502      Jenkins Controller (Master)             \u2502  \u2502\n\u2502  \u2502  \u2022 Manages pipelines                         \u2502  \u2502\n\u2502  \u2502  \u2022 Schedules builds                          \u2502  \u2502\n\u2502  \u2502  \u2022 Stores configuration                      \u2502  \u2502\n\u2502  \u2502  \u2022 Serves Web UI                             \u2502  \u2502\n\u2502  \u2502  \u2022 Kubernetes Plugin installed               \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                  \u2502                                  \u2502\n\u2502                  \u2502 (Schedules agents)               \u2502\n\u2502                  \u25bc                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Dynamic Build Agents (Pods)                 \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502  \u2502\n\u2502  \u2502  \u2502 Java     \u2502  \u2502 Node.js  \u2502  \u2502 Python   \u2502   \u2502  \u2502\n\u2502  \u2502  \u2502 Agent    \u2502  \u2502 Agent    \u2502  \u2502 Agent    \u2502   \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502  \u2502\n\u2502  \u2502  \u2022 Created on-demand                         \u2502  \u2502\n\u2502  \u2502  \u2022 Isolated namespaces                       \u2502  \u2502\n\u2502  \u2502  \u2022 Auto-deleted after build                  \u2502  \u2502\n\u2502  \u2502  \u2022 Resource limits enforced                  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502      Supporting Services                     \u2502  \u2502\n\u2502  \u2502  \u2022 Git Repository (Source)                   \u2502  \u2502\n\u2502  \u2502  \u2022 Harbor (Artifact Registry)                \u2502  \u2502\n\u2502  \u2502  \u2022 SonarQube (Code Quality)                  \u2502  \u2502\n\u2502  \u2502  \u2022 Trivy (Security Scanning)                 \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#jenkins-controller-vs-agents","title":"Jenkins Controller vs. Agents","text":"<p>Controller (Master): - Orchestrates builds - Manages plugins and configuration - Serves Web UI - Should NOT run builds (security + resource management)</p> <p>Agents (Slaves/Pods): - Execute actual build work - Ephemeral in Kubernetes - Isolated from each other - Deleted after build completes</p> <p>Fawkes Advantage: Using Kubernetes Plugin, agents are dynamic pods. No pre-provisioned VMs needed!</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#pipeline-as-code-jenkinsfile","title":"Pipeline as Code: Jenkinsfile","text":"<p>Modern Jenkins uses declarative pipelines defined in <code>Jenkinsfile</code>:</p> <p>Benefits: - \u2705 Version controlled with code - \u2705 Code review for pipeline changes - \u2705 Consistent across projects - \u2705 Auditable (Git history) - \u2705 Portable across Jenkins instances</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#part-3-hands-on-lab-your-first-pipeline","title":"\ud83d\udee0\ufe0f Part 3: Hands-On Lab - Your First Pipeline","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#lab-scenario","title":"Lab Scenario","text":"<p>You'll create a CI pipeline for a sample Java Spring Boot application that: 1. Checks out code from Git 2. Compiles the application 3. Runs unit tests 4. Packages as Docker image 5. Pushes to Harbor registry</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#step-1-access-your-lab-environment","title":"Step 1: Access Your Lab Environment","text":"<pre><code># Access Jenkins in Fawkes platform\nkubectl port-forward -n jenkins svc/jenkins 8080:8080\n\n# Get Jenkins admin password\nkubectl get secret -n jenkins jenkins-admin -o jsonpath=\"{.data.password}\" | base64 -d\n\n# Open Jenkins UI\n# URL: http://localhost:8080\n# Username: admin\n# Password: (from above command)\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#step-2-create-your-first-pipeline-job","title":"Step 2: Create Your First Pipeline Job","text":"<p>In Jenkins UI:</p> <ol> <li>Click \"New Item\"</li> <li>Name: <code>my-first-pipeline</code></li> <li>Type: \"Pipeline\"</li> <li>Click \"OK\"</li> </ol> <p>Pipeline Configuration: - Scroll to \"Pipeline\" section - Definition: \"Pipeline script\" - Paste the following script:</p> <pre><code>pipeline {\n    agent {\n        kubernetes {\n            yaml '''\napiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    jenkins: agent\nspec:\n  containers:\n  - name: maven\n    image: maven:3.8-openjdk-17\n    command:\n    - sleep\n    args:\n    - infinity\n  - name: docker\n    image: docker:24-dind\n    securityContext:\n      privileged: true\n'''\n        }\n    }\n\n    stages {\n        stage('Checkout') {\n            steps {\n                echo 'Checking out source code...'\n                git branch: 'main',\n                    url: 'https://github.com/fawkes-platform/sample-spring-boot.git'\n            }\n        }\n\n        stage('Build') {\n            steps {\n                container('maven') {\n                    echo 'Building application...'\n                    sh 'mvn clean compile'\n                }\n            }\n        }\n\n        stage('Test') {\n            steps {\n                container('maven') {\n                    echo 'Running tests...'\n                    sh 'mvn test'\n                }\n            }\n        }\n\n        stage('Package') {\n            steps {\n                container('maven') {\n                    echo 'Packaging application...'\n                    sh 'mvn package -DskipTests'\n                }\n            }\n        }\n    }\n\n    post {\n        success {\n            echo '\u2705 Pipeline succeeded!'\n        }\n        failure {\n            echo '\u274c Pipeline failed!'\n        }\n        always {\n            echo '\ud83c\udfc1 Pipeline completed'\n        }\n    }\n}\n</code></pre> <ol> <li>Click \"Save\"</li> <li>Click \"Build Now\"</li> </ol>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#step-3-watch-your-pipeline-execute","title":"Step 3: Watch Your Pipeline Execute","text":"<p>In the Jenkins UI: - Click on the build number (e.g., #1) - Click \"Console Output\" to see logs in real-time - Watch as stages progress: Checkout \u2192 Build \u2192 Test \u2192 Package</p> <p>Expected Output: <pre><code>Started by user admin\nRunning in Durability level: MAX_SURVIVABILITY\n[Pipeline] Start of Pipeline\n[Pipeline] podTemplate\n[Pipeline] {\n[Pipeline] node\nCreated Pod: jenkins-agent-xxxxx\nAgent maven-xxxxx is provisioned from template maven\n[Pipeline] {\n[Pipeline] stage (Checkout)\n[Pipeline] { (Checkout)\n[Pipeline] echo\nChecking out source code...\n[Pipeline] git\nCloning repository https://github.com/fawkes-platform/sample-spring-boot.git\n...\n[Pipeline] stage (Build)\n[Pipeline] { (Build)\n[Pipeline] container\n[Pipeline] {\n[Pipeline] echo\nBuilding application...\n[Pipeline] sh\n+ mvn clean compile\n[INFO] Scanning for projects...\n[INFO] Building sample-app 1.0.0\n...\n[INFO] BUILD SUCCESS\n...\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#step-4-understanding-the-jenkinsfile","title":"Step 4: Understanding the Jenkinsfile","text":"<p>Let's break down each section:</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#agent-definition","title":"Agent Definition","text":"<p><pre><code>agent {\n    kubernetes {\n        yaml '''\n        ...\n        '''\n    }\n}\n</code></pre> - Tells Jenkins to run this pipeline on a Kubernetes pod - Defines container images needed (Maven, Docker) - Containers are ephemeral - created for this build, deleted after</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#stages","title":"Stages","text":"<p><pre><code>stages {\n    stage('Checkout') { ... }\n    stage('Build') { ... }\n    stage('Test') { ... }\n    stage('Package') { ... }\n}\n</code></pre> - Sequential steps in your pipeline - Each stage appears as a column in Jenkins UI - Stages fail fast - if one fails, subsequent stages don't run</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#steps","title":"Steps","text":"<p><pre><code>steps {\n    container('maven') {\n        sh 'mvn clean compile'\n    }\n}\n</code></pre> - Actual commands executed - <code>container('maven')</code> - runs inside Maven container - <code>sh</code> - executes shell command - Can use <code>echo</code>, <code>git</code>, custom plugins</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#post-actions","title":"Post Actions","text":"<p><pre><code>post {\n    success { ... }\n    failure { ... }\n    always { ... }\n}\n</code></pre> - Runs after all stages complete - <code>success</code> - only if pipeline succeeded - <code>failure</code> - only if pipeline failed - <code>always</code> - regardless of outcome - Perfect for notifications, cleanup</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#part-4-understanding-build-stages","title":"\ud83d\udcca Part 4: Understanding Build Stages","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#standard-ci-pipeline-stages","title":"Standard CI Pipeline Stages","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Checkout \u2502 \u2192 \u2502 Build \u2502 \u2192 \u2502 Test \u2502 \u2192 \u2502 Package \u2502 \u2192 \u2502 Publish\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     2s           3m          2m          1m            30s\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#stage-1-checkout","title":"Stage 1: Checkout","text":"<p>Purpose: Get source code from version control</p> <pre><code>stage('Checkout') {\n    steps {\n        git branch: 'main',\n            url: 'https://github.com/org/repo.git',\n            credentialsId: 'github-credentials'\n    }\n}\n</code></pre> <p>Best Practices: - Always specify branch explicitly - Use shallow clone for speed: <code>git clone --depth 1</code> - Store credentials in Jenkins Credentials Store (never in Jenkinsfile!)</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#stage-2-buildcompile","title":"Stage 2: Build/Compile","text":"<p>Purpose: Compile source code, resolve dependencies</p> <pre><code>stage('Build') {\n    steps {\n        container('maven') {\n            sh '''\n                mvn clean compile \\\n                    -DskipTests \\\n                    -B \\\n                    --batch-mode\n            '''\n        }\n    }\n}\n</code></pre> <p>Key Flags: - <code>-DskipTests</code> - Skip tests during compile (run separately) - <code>-B</code> / <code>--batch-mode</code> - Non-interactive, better for CI logs - <code>clean</code> - Remove previous build artifacts</p> <p>Build Duration Targets: - Small projects: &lt;2 minutes - Medium projects: 2-5 minutes - Large projects: 5-10 minutes - If &gt;10 minutes, optimize (covered in Module 6)</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#stage-3-test","title":"Stage 3: Test","text":"<p>Purpose: Run automated tests, verify functionality</p> <pre><code>stage('Test') {\n    steps {\n        container('maven') {\n            sh 'mvn test'\n        }\n    }\n    post {\n        always {\n            junit 'target/surefire-reports/**/*.xml'\n        }\n    }\n}\n</code></pre> <p>Test Types in CI: - Unit Tests: Fast (&lt;1s each), no external dependencies - Integration Tests: Slower (1-10s), may use database/APIs - Contract Tests: Verify API contracts between services</p> <p>Best Practices: - Run unit tests in every build (fast feedback) - Run integration tests in parallel or on schedule - Fail build if tests fail (quality gate) - Publish test reports with <code>junit</code> step</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#stage-4-package","title":"Stage 4: Package","text":"<p>Purpose: Create deployable artifact (JAR, Docker image, etc.)</p> <pre><code>stage('Package') {\n    steps {\n        container('maven') {\n            sh 'mvn package -DskipTests'\n        }\n        container('docker') {\n            sh '''\n                docker build -t myapp:${BUILD_NUMBER} .\n                docker tag myapp:${BUILD_NUMBER} myapp:latest\n            '''\n        }\n    }\n}\n</code></pre> <p>Artifact Versioning: - Use <code>${BUILD_NUMBER}</code> - Jenkins build number (e.g., <code>myapp:142</code>) - Use <code>${GIT_COMMIT}</code> - Git commit SHA (e.g., <code>myapp:abc1234</code>) - Use semantic versioning for releases (e.g., <code>myapp:1.2.3</code>)</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#stage-5-publish-optional-for-module-5","title":"Stage 5: Publish (Optional for Module 5)","text":"<p>Purpose: Push artifacts to registry</p> <pre><code>stage('Publish') {\n    steps {\n        container('docker') {\n            sh '''\n                docker login harbor.fawkes.internal -u ${HARBOR_USER} -p ${HARBOR_PASS}\n                docker push harbor.fawkes.internal/myapp:${BUILD_NUMBER}\n            '''\n        }\n    }\n}\n</code></pre> <p>We'll cover this in detail in Module 8: Artifact Management</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#part-5-error-handling-debugging","title":"\ud83d\udd0d Part 5: Error Handling &amp; Debugging","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#common-pipeline-failures","title":"Common Pipeline Failures","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#issue-1-checkout-fails","title":"Issue 1: Checkout Fails","text":"<p>Error: <pre><code>ERROR: Error cloning remote repo 'origin'\nhudson.plugins.git.GitException: Command \"git fetch\" returned status code 128\n</code></pre></p> <p>Causes: - Repository URL incorrect - No access credentials configured - Network issues</p> <p>Solutions: <pre><code>// Option 1: Use credentials\ngit branch: 'main',\n    url: 'https://github.com/org/private-repo.git',\n    credentialsId: 'github-pat'\n\n// Option 2: Use SSH\ngit branch: 'main',\n    url: 'git@github.com:org/private-repo.git',\n    credentialsId: 'github-ssh-key'\n\n// Option 3: Check connectivity\nsh 'git ls-remote https://github.com/org/repo.git HEAD'\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#issue-2-build-fails","title":"Issue 2: Build Fails","text":"<p>Error: <pre><code>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile\n[ERROR] Compilation failure: Compilation failure:\n[ERROR] /src/main/java/App.java:[10,8] cannot find symbol\n</code></pre></p> <p>Causes: - Compilation errors in code - Missing dependencies - Wrong Java version</p> <p>Solutions: <pre><code>// Specify Java version\nstage('Build') {\n    steps {\n        container('maven') {\n            sh '''\n                java -version\n                mvn -version\n                mvn clean compile\n            '''\n        }\n    }\n}\n\n// Use specific Maven image\nagent {\n    kubernetes {\n        yaml '''\n        containers:\n        - name: maven\n          image: maven:3.8-openjdk-17  # Specific version\n        '''\n    }\n}\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#issue-3-tests-fail","title":"Issue 3: Tests Fail","text":"<p>Error: <pre><code>[ERROR] Tests run: 10, Failures: 2, Errors: 0, Skipped: 0\n[INFO] BUILD FAILURE\n</code></pre></p> <p>Causes: - Actual bugs in code (good thing CI caught it!) - Test environment not set up correctly - Flaky tests (tests that randomly fail)</p> <p>Solutions: <pre><code>stage('Test') {\n    steps {\n        container('maven') {\n            // Run with detailed output\n            sh 'mvn test -X'  // Debug mode\n\n            // Or continue on failure to see all test results\n            sh 'mvn test || true'\n        }\n    }\n    post {\n        always {\n            // Always publish test results\n            junit 'target/surefire-reports/**/*.xml'\n\n            // Archive failed test logs\n            archiveArtifacts artifacts: 'target/surefire-reports/**',\n                             allowEmptyArchive: true\n        }\n    }\n}\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#issue-4-resource-limits","title":"Issue 4: Resource Limits","text":"<p>Error: <pre><code>java.lang.OutOfMemoryError: Java heap space\n</code></pre></p> <p>Causes: - Build requires more memory than allocated - Memory leak in build process</p> <p>Solutions: <pre><code>agent {\n    kubernetes {\n        yaml '''\n        containers:\n        - name: maven\n          image: maven:3.8-openjdk-17\n          resources:\n            requests:\n              memory: \"2Gi\"\n              cpu: \"1000m\"\n            limits:\n              memory: \"4Gi\"\n              cpu: \"2000m\"\n          env:\n          - name: MAVEN_OPTS\n            value: \"-Xmx3g\"  # Increase heap size\n        '''\n    }\n}\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#debugging-techniques","title":"Debugging Techniques","text":"<p>1. Add Verbose Logging <pre><code>stage('Debug') {\n    steps {\n        sh '''\n            echo \"Current directory: $(pwd)\"\n            echo \"Files present:\"\n            ls -la\n            echo \"Java version:\"\n            java -version\n            echo \"Maven version:\"\n            mvn -version\n            echo \"Environment variables:\"\n            env | sort\n        '''\n    }\n}\n</code></pre></p> <p>2. Use Try-Catch <pre><code>stage('Build with Error Handling') {\n    steps {\n        script {\n            try {\n                sh 'mvn clean compile'\n            } catch (Exception e) {\n                echo \"Build failed with error: ${e.message}\"\n                // Send notification, mark unstable, etc.\n                currentBuild.result = 'UNSTABLE'\n            }\n        }\n    }\n}\n</code></pre></p> <p>3. Access Agent Shell <pre><code>// Add this stage temporarily for debugging\nstage('Debug Shell') {\n    steps {\n        container('maven') {\n            sh 'sleep 3600'  // Keeps container alive for 1 hour\n        }\n    }\n}\n\n// Then connect to pod:\n// kubectl exec -it &lt;pod-name&gt; -c maven -- /bin/bash\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#part-6-ci-best-practices","title":"\ud83c\udfaf Part 6: CI Best Practices","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#1-keep-builds-fast","title":"1. Keep Builds Fast","text":"<p>Target: &lt;10 minutes total</p> <p>Techniques: - Run only essential tests in CI (unit tests) - Parallelize independent stages - Cache dependencies - Use incremental compilation</p> <pre><code>pipeline {\n    options {\n        timestamps()\n        timeout(time: 10, unit: 'MINUTES')  // Fail if &gt;10 min\n    }\n\n    stages {\n        stage('Parallel Tests') {\n            parallel {\n                stage('Unit Tests') {\n                    steps {\n                        sh 'mvn test'\n                    }\n                }\n                stage('Linting') {\n                    steps {\n                        sh 'mvn checkstyle:check'\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#2-fail-fast","title":"2. Fail Fast","text":"<p>Stop pipeline as soon as a critical issue is found.</p> <pre><code>pipeline {\n    options {\n        skipDefaultCheckout()  // Don't checkout until needed\n    }\n\n    stages {\n        stage('Pre-Flight Checks') {\n            steps {\n                // Check if branch name follows convention\n                script {\n                    if (!env.BRANCH_NAME.matches(/(main|develop|feature\\/.+)/)) {\n                        error(\"Invalid branch name: ${env.BRANCH_NAME}\")\n                    }\n                }\n            }\n        }\n\n        stage('Checkout') {\n            steps {\n                checkout scm\n            }\n        }\n\n        // ... rest of pipeline\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#3-notifications","title":"3. Notifications","text":"<p>Keep team informed of build status.</p> <pre><code>post {\n    success {\n        slackSend(\n            color: 'good',\n            message: \"\u2705 Build #${BUILD_NUMBER} succeeded\\nBranch: ${env.BRANCH_NAME}\"\n        )\n    }\n\n    failure {\n        slackSend(\n            color: 'danger',\n            message: \"\u274c Build #${BUILD_NUMBER} failed\\nBranch: ${env.BRANCH_NAME}\\nSee: ${BUILD_URL}\"\n        )\n\n        // Email on failure\n        emailext(\n            subject: \"Build Failed: ${env.JOB_NAME} #${BUILD_NUMBER}\",\n            body: \"Check console output at ${BUILD_URL}\",\n            to: \"${env.CHANGE_AUTHOR_EMAIL}\"\n        )\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#4-environment-variables","title":"4. Environment Variables","text":"<p>Use environment variables for configuration.</p> <pre><code>pipeline {\n    environment {\n        APP_NAME = 'my-spring-boot-app'\n        HARBOR_REGISTRY = 'harbor.fawkes.internal'\n        JAVA_VERSION = '17'\n        MAVEN_OPTS = '-Xmx2g -XX:+UseG1GC'\n    }\n\n    stages {\n        stage('Build') {\n            steps {\n                sh \"\"\"\n                    echo \"Building ${APP_NAME} with Java ${JAVA_VERSION}\"\n                    mvn clean package\n                \"\"\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#5-shared-libraries-preview","title":"5. Shared Libraries (Preview)","text":"<p>Reuse pipeline code across projects.</p> <pre><code>// In Jenkinsfile\n@Library('fawkes-pipeline-library') _\n\nfawkesJavaPipeline {\n    gitRepo = 'https://github.com/org/repo.git'\n    javaVersion = '17'\n    runTests = true\n    publishArtifacts = true\n}\n</code></pre> <p>We'll cover this in Module 6: Golden Path Pipelines</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#part-7-ci-impact-on-dora-metrics","title":"\ud83d\udcc8 Part 7: CI Impact on DORA Metrics","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#how-ci-improves-each-metric","title":"How CI Improves Each Metric","text":"<p>1. Deployment Frequency <pre><code>Without CI:\n- Manual testing before each deploy\n- Fear of breaking production\n- Result: Deploy 1x per month\n\nWith CI:\n- Automated testing on every commit\n- Confidence in code quality\n- Result: Deploy 10x per day\n</code></pre></p> <p>2. Lead Time for Changes <pre><code>Without CI:\nCommit \u2192 Manual build (30 min) \u2192 Manual test (2 hours) \u2192 Package (30 min)\n= 3+ hours before deploy-ready\n\nWith CI:\nCommit \u2192 Auto build (3 min) \u2192 Auto test (2 min) \u2192 Auto package (1 min)\n= 6 minutes before deploy-ready\n</code></pre></p> <p>3. Change Failure Rate <pre><code>Without CI:\n- No automated testing\n- Bugs reach production\n- Result: 30% of deploys fail\n\nWith CI:\n- Automated tests catch 80% of bugs\n- Code review before merge\n- Result: 5% of deploys fail\n</code></pre></p> <p>4. MTTR (Mean Time to Restore) <pre><code>Without CI:\n- Large commits, hard to isolate issue\n- Manual rollback process\n- Result: 2+ hours to restore\n\nWith CI:\n- Small commits, easy to identify culprit\n- Automated rollback\n- Result: 10 minutes to restore\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#measuring-ci-effectiveness","title":"Measuring CI Effectiveness","text":"<p>Track these metrics in your Jenkins/Fawkes dashboard:</p> <pre><code>// Add to pipeline for metrics collection\npost {\n    always {\n        script {\n            def buildDuration = currentBuild.duration / 1000  // seconds\n            def buildResult = currentBuild.result ?: 'SUCCESS'\n\n            // Send to Prometheus\n            sh \"\"\"mayhem\n                curl -X POST http://prometheus-pushgateway:9091/metrics/job/jenkins \\\n                    --data-binary @- &lt;&lt;EOF\n# TYPE jenkins_build_duration_seconds gauge\njenkins_build_duration_seconds{job=\"${env.JOB_NAME}\",result=\"${buildResult}\"} ${buildDuration}\n\n# TYPE jenkins_build_result counter\njenkins_build_result{job=\"${env.JOB_NAME}\",result=\"${buildResult}\"} 1\nEOF\n            \"\"\"\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#part-8-practical-exercise","title":"\ud83d\udcaa Part 8: Practical Exercise","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#exercise-build-your-first-real-pipeline","title":"Exercise: Build Your First Real Pipeline","text":"<p>Objective: Create a CI pipeline for a sample application</p> <p>Scenario: You have a Java Spring Boot REST API that needs CI.</p> <p>Requirements: 1. Checkout code from Git 2. Compile with Maven 3. Run unit tests 4. Package as JAR 5. Build Docker image 6. Send Slack notification on failure</p> <p>Starter Code:</p> <pre><code>pipeline {\n    agent {\n        kubernetes {\n            yaml '''\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: maven\n    image: maven:3.8-openjdk-17\n    command: ['sleep']\n    args: ['infinity']\n  - name: docker\n    image: docker:24-dind\n    securityContext:\n      privileged: true\n    command: ['sleep']\n    args: ['infinity']\n'''\n        }\n    }\n\n    stages {\n        // TODO: Add your stages here\n        // 1. Checkout\n        // 2. Build\n        // 3. Test\n        // 4. Package\n        // 5. Docker Build\n    }\n\n    post {\n        // TODO: Add notifications\n    }\n}\n</code></pre> <p>Validation Criteria: - [ ] Pipeline runs successfully - [ ] All stages complete in &lt;8 minutes - [ ] Test results published to Jenkins - [ ] Docker image created - [ ] Notification sent (Slack or email)</p> <p>Submission: 1. Save your Jenkinsfile to Git repository 2. Run pipeline successfully (screenshot) 3. Show console output 4. Submit repository link</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#part-9-knowledge-check","title":"\ud83c\udf93 Part 9: Knowledge Check","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#quiz-questions","title":"Quiz Questions","text":"<ol> <li>What is the primary goal of Continuous Integration?</li> <li>[ ] Deploy to production automatically</li> <li>[x] Integrate code changes frequently and catch issues early</li> <li>[ ] Write better documentation</li> <li> <p>[ ] Reduce server costs</p> </li> <li> <p>How often should developers commit to mainline in CI?</p> </li> <li>[ ] Once per week</li> <li>[ ] Once per sprint</li> <li>[x] At least once per day</li> <li> <p>[ ] Only when feature is complete</p> </li> <li> <p>What is the recommended maximum build time?</p> </li> <li>[ ] 30 minutes</li> <li>[x] 10 minutes</li> <li>[ ] 1 hour</li> <li> <p>[ ] As long as it takes</p> </li> <li> <p>In Jenkins Kubernetes Plugin, what happens to build agents after build?</p> </li> <li>[ ] They remain running for next build</li> <li>[x] They are automatically deleted</li> <li>[ ] They are paused</li> <li> <p>[ ] They are archived</p> </li> <li> <p>Which stage should run first in a CI pipeline?</p> </li> <li>[ ] Test</li> <li>[ ] Package</li> <li>[x] Checkout</li> <li> <p>[ ] Deploy</p> </li> <li> <p>What does \"fail fast\" mean in CI?</p> </li> <li>[ ] Make builds run faster</li> <li>[x] Stop pipeline immediately when critical issue found</li> <li>[ ] Skip tests to save time</li> <li> <p>[ ] Deploy even if tests fail</p> </li> <li> <p>What file defines Jenkins Pipeline as Code?</p> </li> <li>[ ] pipeline.yaml</li> <li>[x] Jenkinsfile</li> <li>[ ] build.xml</li> <li> <p>[ ] ci-config.json</p> </li> <li> <p>Which DORA metric is most directly improved by CI?</p> </li> <li>[ ] Deployment Frequency</li> <li>[x] Lead Time for Changes</li> <li>[ ] MTTR</li> <li>[ ] All of the above</li> </ol> <p>Answers: 1-B, 2-C, 3-B, 4-B, 5-C, 6-B, 7-B, 8-D</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#part-10-module-summary-next-steps","title":"\ud83c\udfaf Part 10: Module Summary &amp; Next Steps","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#what-you-learned","title":"What You Learned","text":"<p>\u2705 CI Principles: Early integration, automated builds, fast feedback \u2705 Jenkins Architecture: Controller, agents, Kubernetes plugin \u2705 Pipeline as Code: Jenkinsfile structure and syntax \u2705 Build Stages: Checkout, build, test, package workflow \u2705 Troubleshooting: Common failures and debugging techniques \u2705 Best Practices: Fast builds, fail fast, notifications \u2705 DORA Impact: How CI improves all four key metrics</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#dora-capabilities-achieved","title":"DORA Capabilities Achieved","text":"<ul> <li>\u2705 CD3: Continuous Integration implemented</li> <li>\u2705 CD1: Version control for production artifacts</li> <li>\u2705 CD5: Trunk-based development support</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>CI is about feedback speed - The faster you know about problems, the cheaper they are to fix</li> <li>Automate everything - If it can be automated, it should be automated</li> <li>Keep builds fast - Developers won't wait for slow builds</li> <li>Fail fast - Don't waste time on builds that will fail anyway</li> <li>Make failures visible - Everyone should see broken builds immediately</li> </ol>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#real-world-impact","title":"Real-World Impact","text":"<p>\"Before CI, our integration process took 2-3 days and often failed. After implementing CI with Jenkins: - Build time: 3 hours \u2192 8 minutes - Integration time: 3 days \u2192 Continuous - Bug detection: Post-production \u2192 Pre-commit - Deploy confidence: Low \u2192 High</p> <p>We went from monthly releases to daily deploys.\"  - Engineering Team, SaaS Company</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#official-documentation","title":"Official Documentation","text":"<ul> <li>Jenkins Documentation</li> <li>Pipeline Syntax</li> <li>Kubernetes Plugin</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#learning-resources","title":"Learning Resources","text":"<ul> <li>Martin Fowler: Continuous Integration</li> <li>Continuous Delivery Book by Jez Humble</li> <li>Jenkins Pipeline Tutorial</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#community","title":"Community","text":"<ul> <li>Jenkins Community</li> <li>Jenkins Slack</li> <li>Fawkes Mattermost - #yellow-belt channel</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#module-completion","title":"\ud83c\udfc5 Module Completion","text":""},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#assessment-checklist","title":"Assessment Checklist","text":"<p>To complete this module, you must:</p> <ul> <li>[ ] Conceptual Understanding</li> <li>[ ] Explain the 10 principles of CI</li> <li>[ ] Describe Jenkins controller vs. agent architecture</li> <li> <p>[ ] Explain how CI improves DORA metrics</p> </li> <li> <p>[ ] Practical Skills</p> </li> <li>[ ] Create a Jenkinsfile from scratch</li> <li>[ ] Configure Kubernetes agent pod template</li> <li>[ ] Implement checkout, build, test, package stages</li> <li>[ ] Add error handling and notifications</li> <li> <p>[ ] Debug a failed pipeline</p> </li> <li> <p>[ ] Hands-On Lab</p> </li> <li>[ ] Complete the first pipeline lab</li> <li>[ ] Pipeline runs successfully (&lt;10 min)</li> <li>[ ] All tests pass</li> <li> <p>[ ] Docker image created</p> </li> <li> <p>[ ] Quiz</p> </li> <li>[ ] Score 80% or higher (6/8 questions)</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#certification-credit","title":"Certification Credit","text":"<p>Upon completion, you earn: - 5 points toward Yellow Belt certification (25% complete) - Badge: \"CI Practitioner\" - Skill Unlocked: Jenkins Pipeline Creation</p>"},{"location":"dojo/modules/yellow-belt/module-05-ci-fundamentals/#yellow-belt-progress","title":"\ud83c\udf96\ufe0f Yellow Belt Progress","text":"<pre><code>Yellow Belt: CI/CD Mastery\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nModule 5: CI Fundamentals        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 25% \u2713\nModule 6: Golden Path Pipelines  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\nModule 7: Security &amp; Quality     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\nModule 8: Artifact Management    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n</code></pre> <p>Next Module Preview: Module 6 - Building Golden Path Pipelines (Shared libraries, pipeline templates, optimization)</p> <p>\ud83c\udf89 Congratulations! You've completed Module 5 and learned the fundamentals of Continuous Integration with Jenkins.</p> <p>You're now ready to build production-ready CI pipelines. Continue to Module 6 to learn how to create reusable, optimized pipeline templates!</p> <p>Fawkes Dojo - Where Platform Engineers Are Forged Version 1.0 | Last Updated: October 2025 License: MIT | https://github.com/paruff/fawkes</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/","title":"Fawkes Dojo Module 6: Building Golden Path Pipelines","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#module-overview","title":"\ud83c\udfaf Module Overview","text":"<p>Belt Level: \ud83d\udfe1 Yellow Belt - CI/CD Mastery Module: 2 of 4 (Yellow Belt) Duration: 60 minutes Difficulty: Intermediate Prerequisites:  - Module 5: CI Fundamentals complete - Basic Groovy syntax understanding - Experience with at least one programming language - Jenkins pipeline creation experience</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>By the end of this module, you will:</p> <ol> <li>\u2705 Understand the concept of \"Golden Path\" in platform engineering</li> <li>\u2705 Create reusable Jenkins Shared Libraries</li> <li>\u2705 Build pipeline templates for multiple languages (Java, Python, Node.js)</li> <li>\u2705 Implement pipeline optimization techniques</li> <li>\u2705 Configure build caching for faster builds</li> <li>\u2705 Use parallel execution to reduce build time</li> <li>\u2705 Measure and improve pipeline performance</li> </ol> <p>DORA Capabilities Addressed: - \u2713 CD1: Version control for all production artifacts - \u2713 CD4: Trunk-based development - \u2713 Continuous Integration (advanced) - \u2713 Code Review</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#part-1-what-is-a-golden-path","title":"\ud83d\udcd6 Part 1: What is a Golden Path?","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#the-problem-pipeline-proliferation","title":"The Problem: Pipeline Proliferation","text":"<p>Without Golden Paths: <pre><code>Team A: Creates Java pipeline (500 lines)\nTeam B: Creates Java pipeline (480 lines, slightly different)\nTeam C: Creates Java pipeline (520 lines, more differences)\nTeam D: Creates Python pipeline from scratch\nTeam E: Copies Team A's pipeline, modifies it\n\nResult:\n- 50 similar but different pipelines\n- Security update needed \u2192 Update 50 pipelines manually\n- New best practice \u2192 Adoption takes months\n- No consistency across teams\n- High maintenance burden\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#golden-path-solution","title":"Golden Path Solution","text":"<p>\"The easiest path should also be the best path\"</p> <pre><code>Golden Path Template (Java)\n      \u2193\n   Maintained by Platform Team\n      \u2193\n   Used by 50 teams\n      \u2193\n   Update once \u2192 All teams benefit\n      \u2193\n   Consistency + Best Practices Built-In\n</code></pre> <p>Golden Path Characteristics: 1. Opinionated: Embeds best practices by default 2. Easy to Use: 5-10 lines to get started 3. Batteries Included: Security, testing, quality gates built-in 4. Customizable: Escape hatches for edge cases 5. Self-Service: Teams can use without platform team help 6. Maintained: Platform team keeps it updated</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#golden-path-in-practice","title":"Golden Path in Practice","text":"<p>Instead of this (200-line Jenkinsfile): <pre><code>pipeline {\n    agent { kubernetes { yaml '''...''' } }\n    stages {\n        stage('Checkout') { ... }\n        stage('Build') { ... }\n        stage('Test') { ... }\n        stage('Security Scan') { ... }\n        stage('Quality Gate') { ... }\n        stage('Package') { ... }\n        stage('Publish') { ... }\n    }\n    post { ... }\n}\n</code></pre></p> <p>Teams write this (10-line Jenkinsfile): <pre><code>@Library('fawkes-pipelines') _\n\ngoldenPathJava {\n    gitRepo = 'https://github.com/myteam/myapp.git'\n    javaVersion = '17'\n    skipTests = false\n}\n</code></pre></p> <p>Result: 95% less boilerplate, 100% best practices</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#part-2-jenkins-shared-libraries","title":"\ud83c\udfd7\ufe0f Part 2: Jenkins Shared Libraries","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#what-are-shared-libraries","title":"What are Shared Libraries?","text":"<p>Jenkins Shared Libraries are reusable Groovy code that can be imported into any Jenkinsfile.</p> <p>Benefits: - \ud83c\udfaf DRY Principle: Don't Repeat Yourself - \ud83d\udd12 Security: Centralized credential management - \ud83d\udce6 Versioning: Tag releases, rollback if needed - \ud83e\uddea Testable: Unit test your pipeline logic - \ud83d\udcda Documentation: Single source of truth</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#shared-library-structure","title":"Shared Library Structure","text":"<pre><code>fawkes-pipeline-library/\n\u251c\u2500\u2500 vars/                          # Global variables (pipeline steps)\n\u2502   \u251c\u2500\u2500 goldenPathJava.groovy     # Java pipeline template\n\u2502   \u251c\u2500\u2500 goldenPathPython.groovy   # Python pipeline template\n\u2502   \u251c\u2500\u2500 goldenPathNode.groovy     # Node.js pipeline template\n\u2502   \u2514\u2500\u2500 notifySlack.groovy        # Slack notification helper\n\u251c\u2500\u2500 src/                           # Shared classes and utilities\n\u2502   \u2514\u2500\u2500 com/\n\u2502       \u2514\u2500\u2500 fawkes/\n\u2502           \u2514\u2500\u2500 pipeline/\n\u2502               \u251c\u2500\u2500 Docker.groovy\n\u2502               \u251c\u2500\u2500 Maven.groovy\n\u2502               \u2514\u2500\u2500 Security.groovy\n\u251c\u2500\u2500 resources/                     # Non-Groovy resources\n\u2502   \u251c\u2500\u2500 pod-templates/\n\u2502   \u2502   \u251c\u2500\u2500 java-agent.yaml\n\u2502   \u2502   \u251c\u2500\u2500 python-agent.yaml\n\u2502   \u2502   \u2514\u2500\u2500 node-agent.yaml\n\u2502   \u2514\u2500\u2500 scripts/\n\u2502       \u2514\u2500\u2500 docker-build.sh\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#part-3-hands-on-lab-create-your-first-shared-library","title":"\ud83d\udee0\ufe0f Part 3: Hands-On Lab - Create Your First Shared Library","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#step-1-set-up-shared-library-repository","title":"Step 1: Set Up Shared Library Repository","text":"<pre><code># Create new Git repository\nmkdir fawkes-pipeline-library\ncd fawkes-pipeline-library\n\n# Create directory structure\nmkdir -p vars\nmkdir -p src/com/fawkes/pipeline\nmkdir -p resources/pod-templates\n\n# Initialize Git\ngit init\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#step-2-create-java-golden-path","title":"Step 2: Create Java Golden Path","text":"<p>Create <code>vars/goldenPathJava.groovy</code>:</p> <pre><code>#!/usr/bin/env groovy\n\ndef call(Map config = [:]) {\n    // Default configuration\n    def defaults = [\n        gitRepo: '',\n        gitBranch: 'main',\n        gitCredentials: 'github-credentials',\n        javaVersion: '17',\n        mavenVersion: '3.8',\n        skipTests: false,\n        runSecurityScan: true,\n        dockerRegistry: 'harbor.fawkes.internal',\n        slackChannel: '#builds'\n    ]\n\n    // Merge user config with defaults\n    config = defaults + config\n\n    // Validate required parameters\n    if (!config.gitRepo) {\n        error(\"gitRepo is required\")\n    }\n\n    pipeline {\n        agent {\n            kubernetes {\n                yaml \"\"\"\napiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    jenkins: agent\n    app: ${env.JOB_NAME}\nspec:\n  containers:\n  - name: maven\n    image: maven:${config.mavenVersion}-openjdk-${config.javaVersion}\n    command: ['sleep']\n    args: ['infinity']\n    resources:\n      requests:\n        memory: \"2Gi\"\n        cpu: \"1000m\"\n      limits:\n        memory: \"4Gi\"\n        cpu: \"2000m\"\n  - name: docker\n    image: docker:24-dind\n    securityContext:\n      privileged: true\n    command: ['sleep']\n    args: ['infinity']\n\"\"\"\n            }\n        }\n\n        options {\n            timestamps()\n            timeout(time: 15, unit: 'MINUTES')\n            buildDiscarder(logRotator(numToKeepStr: '10'))\n        }\n\n        environment {\n            APP_NAME = \"${env.JOB_NAME}\".split('/')[0]\n            BUILD_VERSION = \"${env.BUILD_NUMBER}\"\n            GIT_COMMIT_SHORT = sh(\n                script: \"git rev-parse --short HEAD\",\n                returnStdout: true\n            ).trim()\n        }\n\n        stages {\n            stage('Checkout') {\n                steps {\n                    script {\n                        echo \"\ud83d\udd04 Checking out ${config.gitRepo}...\"\n                        git branch: config.gitBranch,\n                            url: config.gitRepo,\n                            credentialsId: config.gitCredentials\n                    }\n                }\n            }\n\n            stage('Build') {\n                steps {\n                    container('maven') {\n                        script {\n                            echo \"\ud83d\udd28 Building application...\"\n                            sh \"\"\"\n                                mvn clean compile \\\n                                    -DskipTests \\\n                                    -B \\\n                                    --batch-mode \\\n                                    --no-transfer-progress\n                            \"\"\"\n                        }\n                    }\n                }\n            }\n\n            stage('Test') {\n                when {\n                    expression { !config.skipTests }\n                }\n                steps {\n                    container('maven') {\n                        script {\n                            echo \"\ud83e\uddea Running tests...\"\n                            sh \"\"\"\n                                mvn test \\\n                                    -B \\\n                                    --batch-mode \\\n                                    --no-transfer-progress\n                            \"\"\"\n                        }\n                    }\n                }\n                post {\n                    always {\n                        junit 'target/surefire-reports/**/*.xml'\n                    }\n                }\n            }\n\n            stage('Security Scan') {\n                when {\n                    expression { config.runSecurityScan }\n                }\n                steps {\n                    container('maven') {\n                        script {\n                            echo \"\ud83d\udd12 Running security scan...\"\n                            sh \"\"\"\n                                mvn dependency-check:check \\\n                                    -DfailBuildOnCVSS=7\n                            \"\"\"\n                        }\n                    }\n                }\n            }\n\n            stage('Package') {\n                steps {\n                    container('maven') {\n                        script {\n                            echo \"\ud83d\udce6 Packaging application...\"\n                            sh \"\"\"\n                                mvn package \\\n                                    -DskipTests \\\n                                    -B \\\n                                    --batch-mode \\\n                                    --no-transfer-progress\n                            \"\"\"\n                        }\n                    }\n                }\n            }\n\n            stage('Docker Build') {\n                steps {\n                    container('docker') {\n                        script {\n                            echo \"\ud83d\udc33 Building Docker image...\"\n                            def imageName = \"${config.dockerRegistry}/${env.APP_NAME}\"\n                            def imageTag = \"${env.BUILD_VERSION}-${env.GIT_COMMIT_SHORT}\"\n\n                            sh \"\"\"\n                                docker build \\\n                                    -t ${imageName}:${imageTag} \\\n                                    -t ${imageName}:latest \\\n                                    .\n                            \"\"\"\n\n                            // Store for later stages\n                            env.DOCKER_IMAGE = \"${imageName}:${imageTag}\"\n                        }\n                    }\n                }\n            }\n\n            stage('Publish') {\n                steps {\n                    container('docker') {\n                        script {\n                            echo \"\ud83d\udce4 Publishing Docker image...\"\n                            withCredentials([\n                                usernamePassword(\n                                    credentialsId: 'harbor-credentials',\n                                    usernameVariable: 'DOCKER_USER',\n                                    passwordVariable: 'DOCKER_PASS'\n                                )\n                            ]) {\n                                sh \"\"\"\n                                    echo \\$DOCKER_PASS | docker login ${config.dockerRegistry} -u \\$DOCKER_USER --password-stdin\n                                    docker push ${env.DOCKER_IMAGE}\n                                    docker push ${config.dockerRegistry}/${env.APP_NAME}:latest\n                                \"\"\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        post {\n            success {\n                script {\n                    notifySlack(\n                        channel: config.slackChannel,\n                        color: 'good',\n                        message: \"\u2705 Build #${env.BUILD_NUMBER} succeeded\\n\ud83d\udce6 Image: ${env.DOCKER_IMAGE}\"\n                    )\n                }\n            }\n\n            failure {\n                script {\n                    notifySlack(\n                        channel: config.slackChannel,\n                        color: 'danger',\n                        message: \"\u274c Build #${env.BUILD_NUMBER} failed\\n\ud83d\udd17 ${env.BUILD_URL}\"\n                    )\n                }\n            }\n\n            always {\n                cleanWs()\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#step-3-create-helper-functions","title":"Step 3: Create Helper Functions","text":"<p>Create <code>vars/notifySlack.groovy</code>:</p> <pre><code>#!/usr/bin/env groovy\n\ndef call(Map config = [:]) {\n    if (!config.channel || !config.message) {\n        error(\"channel and message are required\")\n    }\n\n    def color = config.color ?: 'warning'\n\n    try {\n        slackSend(\n            channel: config.channel,\n            color: color,\n            message: config.message,\n            tokenCredentialId: 'slack-token'\n        )\n    } catch (Exception e) {\n        echo \"Warning: Failed to send Slack notification: ${e.message}\"\n        // Don't fail build if notification fails\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#step-4-configure-in-jenkins","title":"Step 4: Configure in Jenkins","text":"<p>Add Shared Library to Jenkins:</p> <ol> <li>Go to Jenkins \u2192 Manage Jenkins \u2192 Configure System</li> <li>Scroll to \"Global Pipeline Libraries\"</li> <li>Click \"Add\"</li> <li>Configure:</li> <li>Name: <code>fawkes-pipelines</code></li> <li>Default version: <code>main</code></li> <li>Retrieval method: \"Modern SCM\"</li> <li>Source Code Management: Git</li> <li>Project Repository: <code>https://github.com/fawkes/pipeline-library.git</code></li> <li>Credentials: (if private repo)</li> <li>\u2705 Check \"Load implicitly\" (makes it available to all pipelines)</li> <li>Save</li> </ol>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#step-5-use-golden-path-in-your-project","title":"Step 5: Use Golden Path in Your Project","text":"<p>Create <code>Jenkinsfile</code> in your application repository:</p> <pre><code>@Library('fawkes-pipelines') _\n\ngoldenPathJava {\n    gitRepo = 'https://github.com/myteam/my-spring-boot-app.git'\n    javaVersion = '17'\n    skipTests = false\n    runSecurityScan = true\n    slackChannel = '#my-team'\n}\n</code></pre> <p>That's it! 6 lines instead of 200+.</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#part-4-creating-templates-for-multiple-languages","title":"\ud83d\udcca Part 4: Creating Templates for Multiple Languages","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#python-golden-path","title":"Python Golden Path","text":"<p>Create <code>vars/goldenPathPython.groovy</code>:</p> <pre><code>#!/usr/bin/env groovy\n\ndef call(Map config = [:]) {\n    def defaults = [\n        gitRepo: '',\n        gitBranch: 'main',\n        pythonVersion: '3.11',\n        skipTests: false,\n        runLinting: true,\n        dockerRegistry: 'harbor.fawkes.internal'\n    ]\n\n    config = defaults + config\n\n    if (!config.gitRepo) {\n        error(\"gitRepo is required\")\n    }\n\n    pipeline {\n        agent {\n            kubernetes {\n                yaml \"\"\"\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: python\n    image: python:${config.pythonVersion}-slim\n    command: ['sleep']\n    args: ['infinity']\n  - name: docker\n    image: docker:24-dind\n    securityContext:\n      privileged: true\n    command: ['sleep']\n    args: ['infinity']\n\"\"\"\n            }\n        }\n\n        options {\n            timestamps()\n            timeout(time: 15, unit: 'MINUTES')\n        }\n\n        stages {\n            stage('Checkout') {\n                steps {\n                    git branch: config.gitBranch,\n                        url: config.gitRepo\n                }\n            }\n\n            stage('Setup') {\n                steps {\n                    container('python') {\n                        sh '''\n                            python -m pip install --upgrade pip\n                            pip install -r requirements.txt\n                        '''\n                    }\n                }\n            }\n\n            stage('Lint') {\n                when {\n                    expression { config.runLinting }\n                }\n                steps {\n                    container('python') {\n                        sh '''\n                            pip install flake8 black\n                            flake8 . --max-line-length=88\n                            black --check .\n                        '''\n                    }\n                }\n            }\n\n            stage('Test') {\n                when {\n                    expression { !config.skipTests }\n                }\n                steps {\n                    container('python') {\n                        sh '''\n                            pip install pytest pytest-cov\n                            pytest --cov=. --cov-report=xml --cov-report=html\n                        '''\n                    }\n                }\n                post {\n                    always {\n                        publishHTML([\n                            allowMissing: false,\n                            alwaysLinkToLastBuild: true,\n                            keepAll: true,\n                            reportDir: 'htmlcov',\n                            reportFiles: 'index.html',\n                            reportName: 'Coverage Report'\n                        ])\n                    }\n                }\n            }\n\n            stage('Docker Build &amp; Push') {\n                steps {\n                    container('docker') {\n                        script {\n                            def imageName = \"${config.dockerRegistry}/${env.JOB_NAME}\"\n                            def imageTag = \"${env.BUILD_NUMBER}\"\n\n                            sh \"\"\"\n                                docker build -t ${imageName}:${imageTag} .\n                                docker push ${imageName}:${imageTag}\n                            \"\"\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#nodejs-golden-path","title":"Node.js Golden Path","text":"<p>Create <code>vars/goldenPathNode.groovy</code>:</p> <pre><code>#!/usr/bin/env groovy\n\ndef call(Map config = [:]) {\n    def defaults = [\n        gitRepo: '',\n        gitBranch: 'main',\n        nodeVersion: '20',\n        skipTests: false,\n        runLinting: true,\n        packageManager: 'npm'  // or 'yarn', 'pnpm'\n    ]\n\n    config = defaults + config\n\n    pipeline {\n        agent {\n            kubernetes {\n                yaml \"\"\"\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: node\n    image: node:${config.nodeVersion}-alpine\n    command: ['sleep']\n    args: ['infinity']\n  - name: docker\n    image: docker:24-dind\n    securityContext:\n      privileged: true\n    command: ['sleep']\n    args: ['infinity']\n\"\"\"\n            }\n        }\n\n        stages {\n            stage('Checkout') {\n                steps {\n                    git branch: config.gitBranch,\n                        url: config.gitRepo\n                }\n            }\n\n            stage('Install Dependencies') {\n                steps {\n                    container('node') {\n                        script {\n                            def installCmd = config.packageManager == 'npm' ? 'npm ci' : \n                                           config.packageManager == 'yarn' ? 'yarn install --frozen-lockfile' :\n                                           'pnpm install --frozen-lockfile'\n                            sh installCmd\n                        }\n                    }\n                }\n            }\n\n            stage('Lint') {\n                when {\n                    expression { config.runLinting }\n                }\n                steps {\n                    container('node') {\n                        sh \"${config.packageManager} run lint\"\n                    }\n                }\n            }\n\n            stage('Test') {\n                when {\n                    expression { !config.skipTests }\n                }\n                steps {\n                    container('node') {\n                        sh \"${config.packageManager} test\"\n                    }\n                }\n            }\n\n            stage('Build') {\n                steps {\n                    container('node') {\n                        sh \"${config.packageManager} run build\"\n                    }\n                }\n            }\n\n            stage('Docker Build &amp; Push') {\n                steps {\n                    container('docker') {\n                        script {\n                            def imageName = \"${env.JOB_NAME}\"\n                            sh \"\"\"\n                                docker build -t ${imageName}:${env.BUILD_NUMBER} .\n                                docker push ${imageName}:${env.BUILD_NUMBER}\n                            \"\"\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#part-5-pipeline-optimization-techniques","title":"\u26a1 Part 5: Pipeline Optimization Techniques","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#technique-1-parallel-execution","title":"Technique 1: Parallel Execution","text":"<p>Run independent stages simultaneously:</p> <pre><code>stage('Parallel Quality Checks') {\n    parallel {\n        stage('Unit Tests') {\n            steps {\n                container('maven') {\n                    sh 'mvn test'\n                }\n            }\n        }\n        stage('Linting') {\n            steps {\n                container('maven') {\n                    sh 'mvn checkstyle:check'\n                }\n            }\n        }\n        stage('Security Scan') {\n            steps {\n                container('maven') {\n                    sh 'mvn dependency-check:check'\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Before: 6 minutes (2min + 2min + 2min sequential) After: 2 minutes (all run in parallel) Improvement: 3x faster \u26a1</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#technique-2-build-caching","title":"Technique 2: Build Caching","text":"<p>Cache Maven dependencies between builds:</p> <pre><code>pipeline {\n    agent {\n        kubernetes {\n            yaml '''\nspec:\n  containers:\n  - name: maven\n    image: maven:3.8-openjdk-17\n    volumeMounts:\n    - name: maven-cache\n      mountPath: /root/.m2\n  volumes:\n  - name: maven-cache\n    persistentVolumeClaim:\n      claimName: maven-cache-pvc\n'''\n        }\n    }\n}\n</code></pre> <p>Before: 3 minutes downloading dependencies every build After: 10 seconds (cached) Improvement: 18x faster on dependencies \u26a1</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#technique-3-incremental-builds","title":"Technique 3: Incremental Builds","text":"<p>Only rebuild what changed:</p> <pre><code>stage('Incremental Build') {\n    steps {\n        script {\n            def changedFiles = sh(\n                script: \"git diff --name-only HEAD~1\",\n                returnStdout: true\n            ).trim()\n\n            if (changedFiles.contains('src/')) {\n                echo \"Source changed, full build\"\n                sh 'mvn clean package'\n            } else if (changedFiles.contains('pom.xml')) {\n                echo \"Dependencies changed, rebuild\"\n                sh 'mvn clean package'\n            } else {\n                echo \"Only docs changed, skip build\"\n                currentBuild.result = 'SUCCESS'\n                return\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#technique-4-smarter-test-execution","title":"Technique 4: Smarter Test Execution","text":"<p>Run only affected tests:</p> <pre><code>stage('Smart Testing') {\n    steps {\n        script {\n            // Use tools like Laika or Maven Test Selection\n            sh '''\n                mvn test \\\n                    -Dtest=$(git diff --name-only HEAD~1 | \\\n                             grep 'src/test' | \\\n                             sed 's/.*\\\\/\\\\(.*\\\\)\\\\.java/\\\\1/' | \\\n                             tr '\\\\n' ',')\n            '''\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#technique-5-resource-optimization","title":"Technique 5: Resource Optimization","text":"<p>Right-size your build agents:</p> <pre><code>// Small builds\nresources:\n  requests:\n    memory: \"512Mi\"\n    cpu: \"500m\"\n  limits:\n    memory: \"1Gi\"\n    cpu: \"1000m\"\n\n// Medium builds\nresources:\n  requests:\n    memory: \"2Gi\"\n    cpu: \"1000m\"\n  limits:\n    memory: \"4Gi\"\n    cpu: \"2000m\"\n\n// Large builds\nresources:\n  requests:\n    memory: \"8Gi\"\n    cpu: \"4000m\"\n  limits:\n    memory: \"16Gi\"\n    cpu: \"8000m\"\n</code></pre> <p>Benefit: Faster scheduling, lower costs, better resource utilization</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#part-6-measuring-pipeline-performance","title":"\ud83d\udcc8 Part 6: Measuring Pipeline Performance","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#build-time-metrics","title":"Build Time Metrics","text":"<p>Track and visualize build performance:</p> <pre><code>post {\n    always {\n        script {\n            // Calculate stage durations\n            def stageDurations = [:]\n            currentBuild.rawBuild.getActions(FlowExecutionAction).each { action -&gt;\n                action.getNodes().each { node -&gt;\n                    if (node.displayName != null) {\n                        def duration = node.getDurationMillis() / 1000\n                        stageDurations[node.displayName] = duration\n                    }\n                }\n            }\n\n            // Send to Prometheus\n            stageDurations.each { stage, duration -&gt;\n                sh \"\"\"\n                    curl -X POST http://prometheus-pushgateway:9091/metrics/job/jenkins/stage/${stage} \\\\\n                        --data-binary @- &lt;&lt;EOF\n# TYPE jenkins_stage_duration_seconds gauge\njenkins_stage_duration_seconds{job=\"${env.JOB_NAME}\",stage=\"${stage}\"} ${duration}\nEOF\n                \"\"\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#key-metrics-to-track","title":"Key Metrics to Track","text":"<pre><code># Average build time\navg(jenkins_build_duration_seconds{job=\"my-app\"})\n\n# Build success rate\nsum(rate(jenkins_build_result{result=\"SUCCESS\"}[7d])) / \nsum(rate(jenkins_build_result[7d])) * 100\n\n# Slowest pipeline stages\ntopk(5, avg(jenkins_stage_duration_seconds) by (stage))\n\n# Build time trend\nrate(jenkins_build_duration_seconds[1d])\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#create-grafana-dashboard","title":"Create Grafana Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"Pipeline Performance\",\n    \"panels\": [\n      {\n        \"title\": \"Average Build Time\",\n        \"targets\": [\n          {\n            \"expr\": \"avg(jenkins_build_duration_seconds) by (job)\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Build Success Rate\",\n        \"targets\": [\n          {\n            \"expr\": \"sum(rate(jenkins_build_result{result='SUCCESS'}[7d])) / sum(rate(jenkins_build_result[7d])) * 100\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#part-7-practical-exercise","title":"\ud83d\udcaa Part 7: Practical Exercise","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#exercise-create-a-multi-language-golden-path","title":"Exercise: Create a Multi-Language Golden Path","text":"<p>Objective: Build a shared library that supports Java, Python, and Node.js</p> <p>Requirements: 1. Create <code>vars/goldenPath.groovy</code> that auto-detects language 2. Support configuration for each language 3. Include parallel testing and linting 4. Implement build caching 5. Add performance metrics 6. Create comprehensive documentation</p> <p>Starter Template:</p> <pre><code>// vars/goldenPath.groovy\ndef call(Map config = [:]) {\n    // Auto-detect language\n    def language = detectLanguage()\n\n    echo \"\ud83d\udd0d Detected language: ${language}\"\n\n    switch(language) {\n        case 'java':\n            goldenPathJava(config)\n            break\n        case 'python':\n            goldenPathPython(config)\n            break\n        case 'node':\n            goldenPathNode(config)\n            break\n        default:\n            error(\"Unsupported language: ${language}\")\n    }\n}\n\ndef detectLanguage() {\n    // TODO: Implement language detection\n    // Check for pom.xml, requirements.txt, package.json\n}\n</code></pre> <p>Validation Criteria: - [ ] Auto-detects language correctly - [ ] All three language templates work - [ ] Build time &lt;8 minutes for sample apps - [ ] Caching reduces build time by 50%+ - [ ] Metrics sent to Prometheus - [ ] Documentation includes usage examples</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#part-8-knowledge-check","title":"\ud83c\udf93 Part 8: Knowledge Check","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#quiz-questions","title":"Quiz Questions","text":"<ol> <li>What is a \"Golden Path\" in platform engineering?</li> <li>[ ] The fastest build configuration</li> <li>[x] An opinionated, easy-to-use template with best practices built-in</li> <li>[ ] A deployment strategy</li> <li> <p>[ ] A security scanning tool</p> </li> <li> <p>Where do you put reusable pipeline steps in a Shared Library?</p> </li> <li>[ ] src/ directory</li> <li>[x] vars/ directory</li> <li>[ ] resources/ directory</li> <li> <p>[ ] lib/ directory</p> </li> <li> <p>What is the benefit of parallel execution in pipelines?</p> </li> <li>[ ] Uses less resources</li> <li>[ ] More reliable</li> <li>[x] Reduces total build time</li> <li> <p>[ ] Easier to debug</p> </li> <li> <p>How can you cache Maven dependencies between builds?</p> </li> <li>[ ] Use a faster Maven mirror</li> <li>[x] Mount a persistent volume to /root/.m2</li> <li>[ ] Download dependencies manually</li> <li> <p>[ ] Skip dependency resolution</p> </li> <li> <p>What should you do with build performance metrics?</p> </li> <li>[ ] Ignore them</li> <li>[ ] Only check when builds are slow</li> <li>[x] Send to Prometheus and visualize in Grafana</li> <li> <p>[ ] Store in Jenkins only</p> </li> <li> <p>What's the recommended maximum build time?</p> </li> <li>[ ] 30 minutes</li> <li>[x] 10 minutes</li> <li>[ ] 1 hour</li> <li> <p>[ ] 5 minutes</p> </li> <li> <p>Which stage can typically be parallelized?</p> </li> <li>[ ] Checkout</li> <li>[ ] Build</li> <li>[x] Tests and linting</li> <li> <p>[ ] Docker push</p> </li> <li> <p>What's the main benefit of Pipeline as Code?</p> </li> <li>[x] Version controlled, code reviewed, consistent</li> <li>[ ] Faster builds</li> <li>[ ] Less disk space</li> <li>[ ] Better UI</li> </ol> <p>Answers: 1-B, 2-B, 3-C, 4-B, 5-C, 6-B, 7-C, 8-A</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#part-9-module-summary-next-steps","title":"\ud83c\udfaf Part 9: Module Summary &amp; Next Steps","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#what-you-learned","title":"What You Learned","text":"<p>\u2705 Golden Paths: Opinionated templates that make easy = best \u2705 Shared Libraries: Reusable pipeline code in <code>vars/</code> and <code>src/</code> \u2705 Multi-Language Support: Java, Python, Node.js templates \u2705 Optimization: Parallel execution, caching, incremental builds \u2705 Performance Metrics: Track and improve build times \u2705 Best Practices: DRY, testable, maintainable pipelines</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#dora-capabilities-achieved","title":"DORA Capabilities Achieved","text":"<ul> <li>\u2705 CD1: Version control for production artifacts (advanced)</li> <li>\u2705 CD4: Trunk-based development support</li> <li>\u2705 Code Review: Pipeline changes reviewed like code</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Golden Paths reduce toil - Write once, use everywhere</li> <li>Shared Libraries enable reuse - Don't copy-paste pipelines</li> <li>Optimization matters - 10-minute builds vs 30-minute builds = happier developers</li> <li>Measure everything - Can't improve what you don't measure</li> <li>Maintainability &gt; Brevity - Readable pipelines are better than clever pipelines</li> </ol>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#real-world-impact","title":"Real-World Impact","text":"<p>\"After implementing Golden Path pipelines: - Pipeline creation time: 2 days \u2192 10 minutes - Average build time: 25 minutes \u2192 7 minutes - Pipelines maintained: 50 \u2192 3 templates - Security update rollout: 2 weeks \u2192 1 day</p> <p>Our developers now spend time building features, not maintaining pipelines.\" - Platform Engineering Team, Tech Company</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#documentation","title":"Documentation","text":"<ul> <li>Jenkins Shared Libraries</li> <li>Pipeline Best Practices</li> <li>Kubernetes Plugin Guide</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#examples","title":"Examples","text":"<ul> <li>Fabric8 Pipeline Library</li> <li>CloudBees Pipeline Template Catalog</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#community","title":"Community","text":"<ul> <li>Jenkins Community Forums</li> <li>Fawkes #yellow-belt Mattermost</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#module-completion","title":"\ud83c\udfc5 Module Completion","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#assessment-checklist","title":"Assessment Checklist","text":"<ul> <li>[ ] Conceptual Understanding</li> <li>[ ] Explain Golden Path philosophy</li> <li>[ ] Describe Shared Library structure</li> <li> <p>[ ] Understand pipeline optimization techniques</p> </li> <li> <p>[ ] Practical Skills</p> </li> <li>[ ] Create a Shared Library repository</li> <li>[ ] Build Golden Path template for at least one language</li> <li>[ ] Implement parallel execution</li> <li>[ ] Configure build caching</li> <li> <p>[ ] Add performance metrics collection</p> </li> <li> <p>[ ] Hands-On Lab</p> </li> <li>[ ] Create reusable pipeline template</li> <li>[ ] Reduce build time by 50%+ through optimization</li> <li> <p>[ ] Successfully use template in 3 different projects</p> </li> <li> <p>[ ] Quiz</p> </li> <li>[ ] Score 80% or higher (6/8 questions)</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#certification-credit","title":"Certification Credit","text":"<p>Upon completion, you earn: - 5 points toward Yellow Belt certification (50% complete) - Badge: \"Golden Path Architect\" - Skill Unlocked: Shared Library Development</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#yellow-belt-progress","title":"\ud83c\udf96\ufe0f Yellow Belt Progress","text":"<pre><code>Yellow Belt: CI/CD Mastery\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nModule 5: CI Fundamentals        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 25% \u2713\nModule 6: Golden Path Pipelines  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 50% \u2713\nModule 7: Security &amp; Quality     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\nModule 8: Artifact Management    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  0%\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n</code></pre> <p>Halfway to Yellow Belt! \ud83c\udf89</p> <p>Next Module Preview: Module 7 - Security Scanning &amp; Quality Gates (SonarQube, Trivy, dependency scanning)</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#appendix-a-complete-shared-library-example","title":"\ud83d\udcd6 Appendix A: Complete Shared Library Example","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#full-repository-structure","title":"Full Repository Structure","text":"<pre><code>fawkes-pipeline-library/\n\u251c\u2500\u2500 vars/\n\u2502   \u251c\u2500\u2500 goldenPathJava.groovy\n\u2502   \u251c\u2500\u2500 goldenPathPython.groovy\n\u2502   \u251c\u2500\u2500 goldenPathNode.groovy\n\u2502   \u251c\u2500\u2500 goldenPath.groovy           # Auto-detect wrapper\n\u2502   \u251c\u2500\u2500 notifySlack.groovy\n\u2502   \u251c\u2500\u2500 runSecurityScan.groovy\n\u2502   \u2514\u2500\u2500 deployToKubernetes.groovy\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 com/\n\u2502       \u2514\u2500\u2500 fawkes/\n\u2502           \u2514\u2500\u2500 pipeline/\n\u2502               \u251c\u2500\u2500 Docker.groovy\n\u2502               \u251c\u2500\u2500 Git.groovy\n\u2502               \u251c\u2500\u2500 Maven.groovy\n\u2502               \u251c\u2500\u2500 Kubernetes.groovy\n\u2502               \u2514\u2500\u2500 Security.groovy\n\u251c\u2500\u2500 resources/\n\u2502   \u251c\u2500\u2500 pod-templates/\n\u2502   \u2502   \u251c\u2500\u2500 java-17.yaml\n\u2502   \u2502   \u251c\u2500\u2500 python-311.yaml\n\u2502   \u2502   \u251c\u2500\u2500 node-20.yaml\n\u2502   \u2502   \u2514\u2500\u2500 docker-dind.yaml\n\u2502   \u251c\u2500\u2500 scripts/\n\u2502   \u2502   \u251c\u2500\u2500 docker-build.sh\n\u2502   \u2502   \u251c\u2500\u2500 security-scan.sh\n\u2502   \u2502   \u2514\u2500\u2500 promote-artifact.sh\n\u2502   \u2514\u2500\u2500 config/\n\u2502       \u251c\u2500\u2500 sonarqube.properties\n\u2502       \u2514\u2500\u2500 checkstyle.xml\n\u251c\u2500\u2500 test/\n\u2502   \u2514\u2500\u2500 groovy/\n\u2502       \u2514\u2500\u2500 com/\n\u2502           \u2514\u2500\u2500 fawkes/\n\u2502               \u2514\u2500\u2500 pipeline/\n\u2502                   \u2514\u2500\u2500 DockerTest.groovy\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 CONTRIBUTING.md\n\u2502   \u2514\u2500\u2500 examples/\n\u2502       \u251c\u2500\u2500 java-example.md\n\u2502       \u251c\u2500\u2500 python-example.md\n\u2502       \u2514\u2500\u2500 node-example.md\n\u251c\u2500\u2500 Jenkinsfile                     # For testing the library itself\n\u2514\u2500\u2500 VERSION\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#example-advanced-docker-helper-class","title":"Example: Advanced Docker Helper Class","text":"<p>Create <code>src/com/fawkes/pipeline/Docker.groovy</code>:</p> <pre><code>package com.fawkes.pipeline\n\nclass Docker implements Serializable {\n    def script\n\n    Docker(script) {\n        this.script = script\n    }\n\n    def build(Map config) {\n        def imageName = config.imageName ?: script.env.JOB_NAME\n        def imageTag = config.imageTag ?: script.env.BUILD_NUMBER\n        def dockerfile = config.dockerfile ?: 'Dockerfile'\n        def context = config.context ?: '.'\n        def buildArgs = config.buildArgs ?: [:]\n\n        script.echo \"\ud83d\udc33 Building Docker image: ${imageName}:${imageTag}\"\n\n        def buildArgsStr = buildArgs.collect { k, v -&gt; \"--build-arg ${k}=${v}\" }.join(' ')\n\n        script.sh \"\"\"\n            docker build \\\n                -f ${dockerfile} \\\n                -t ${imageName}:${imageTag} \\\n                ${buildArgsStr} \\\n                ${context}\n        \"\"\"\n\n        return \"${imageName}:${imageTag}\"\n    }\n\n    def push(String image, Map config = [:]) {\n        def registry = config.registry ?: 'harbor.fawkes.internal'\n        def credentialsId = config.credentialsId ?: 'harbor-credentials'\n\n        script.echo \"\ud83d\udce4 Pushing image: ${image}\"\n\n        script.withCredentials([\n            script.usernamePassword(\n                credentialsId: credentialsId,\n                usernameVariable: 'DOCKER_USER',\n                passwordVariable: 'DOCKER_PASS'\n            )\n        ]) {\n            script.sh \"\"\"\n                echo \\$DOCKER_PASS | docker login ${registry} -u \\$DOCKER_USER --password-stdin\n                docker push ${image}\n            \"\"\"\n        }\n    }\n\n    def scan(String image, Map config = [:]) {\n        def severity = config.severity ?: 'HIGH,CRITICAL'\n        def exitCode = config.exitCode ?: 1\n\n        script.echo \"\ud83d\udd12 Scanning image for vulnerabilities: ${image}\"\n\n        script.sh \"\"\"\n            trivy image \\\n                --severity ${severity} \\\n                --exit-code ${exitCode} \\\n                --no-progress \\\n                ${image}\n        \"\"\"\n    }\n\n    def tag(String sourceImage, String targetTag) {\n        script.echo \"\ud83c\udff7\ufe0f Tagging image: ${sourceImage} \u2192 ${targetTag}\"\n        script.sh \"docker tag ${sourceImage} ${targetTag}\"\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#using-the-helper-class","title":"Using the Helper Class","text":"<p>In <code>vars/goldenPathJava.groovy</code>:</p> <pre><code>@Library('fawkes-pipelines') _\nimport com.fawkes.pipeline.Docker\n\ndef call(Map config = [:]) {\n    pipeline {\n        agent { kubernetes { yaml '...' } }\n\n        stages {\n            // ... build stages ...\n\n            stage('Docker Operations') {\n                steps {\n                    container('docker') {\n                        script {\n                            def docker = new Docker(this)\n\n                            // Build\n                            def image = docker.build(\n                                imageName: \"${config.dockerRegistry}/${env.APP_NAME}\",\n                                imageTag: \"${env.BUILD_NUMBER}\",\n                                buildArgs: [\n                                    'BUILD_DATE': new Date().format('yyyy-MM-dd'),\n                                    'VCS_REF': env.GIT_COMMIT\n                                ]\n                            )\n\n                            // Scan\n                            docker.scan(image, severity: 'CRITICAL')\n\n                            // Tag\n                            docker.tag(image, \"${config.dockerRegistry}/${env.APP_NAME}:latest\")\n\n                            // Push\n                            docker.push(image)\n                            docker.push(\"${config.dockerRegistry}/${env.APP_NAME}:latest\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#appendix-b-testing-shared-libraries","title":"\ud83d\udcd6 Appendix B: Testing Shared Libraries","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#unit-testing-with-spock","title":"Unit Testing with Spock","text":"<p>Create <code>test/groovy/com/fawkes/pipeline/DockerTest.groovy</code>:</p> <pre><code>package com.fawkes.pipeline\n\nimport spock.lang.Specification\n\nclass DockerTest extends Specification {\n\n    def script = Mock()\n    Docker docker = new Docker(script)\n\n    def \"build should construct correct docker command\"() {\n        given:\n        def config = [\n            imageName: 'myapp',\n            imageTag: 'v1.0',\n            buildArgs: [APP_VERSION: '1.0.0']\n        ]\n\n        when:\n        docker.build(config)\n\n        then:\n        1 * script.sh(_ as String) &gt;&gt; { String cmd -&gt;\n            assert cmd.contains('docker build')\n            assert cmd.contains('-t myapp:v1.0')\n            assert cmd.contains('--build-arg APP_VERSION=1.0.0')\n        }\n    }\n\n    def \"scan should fail on critical vulnerabilities\"() {\n        given:\n        def image = 'myapp:v1.0'\n\n        when:\n        docker.scan(image)\n\n        then:\n        1 * script.sh(_ as String) &gt;&gt; { String cmd -&gt;\n            assert cmd.contains('trivy image')\n            assert cmd.contains('--severity HIGH,CRITICAL')\n            assert cmd.contains('--exit-code 1')\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#integration-testing","title":"Integration Testing","text":"<p>Create <code>Jenkinsfile</code> in library root:</p> <pre><code>// Test the shared library itself\n@Library('fawkes-pipelines@development') _\n\npipeline {\n    agent any\n\n    stages {\n        stage('Test Java Template') {\n            steps {\n                script {\n                    goldenPathJava {\n                        gitRepo = 'https://github.com/fawkes/sample-java-app.git'\n                        skipTests = true\n                    }\n                }\n            }\n        }\n\n        stage('Test Python Template') {\n            steps {\n                script {\n                    goldenPathPython {\n                        gitRepo = 'https://github.com/fawkes/sample-python-app.git'\n                        skipTests = true\n                    }\n                }\n            }\n        }\n\n        stage('Test Node Template') {\n            steps {\n                script {\n                    goldenPathNode {\n                        gitRepo = 'https://github.com/fawkes/sample-node-app.git'\n                        skipTests = true\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#appendix-c-advanced-optimization-patterns","title":"\ud83d\udcd6 Appendix C: Advanced Optimization Patterns","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#pattern-1-build-matrix","title":"Pattern 1: Build Matrix","text":"<p>Run builds for multiple versions in parallel:</p> <pre><code>def call(Map config = [:]) {\n    def javaVersions = config.javaVersions ?: ['11', '17', '21']\n\n    pipeline {\n        agent none\n\n        stages {\n            stage('Build Matrix') {\n                matrix {\n                    axes {\n                        axis {\n                            name 'JAVA_VERSION'\n                            values javaVersions\n                        }\n                    }\n\n                    agent {\n                        kubernetes {\n                            yaml \"\"\"\nspec:\n  containers:\n  - name: maven\n    image: maven:3.8-openjdk-\\${JAVA_VERSION}\n\"\"\"\n                        }\n                    }\n\n                    stages {\n                        stage('Build') {\n                            steps {\n                                container('maven') {\n                                    sh \"\"\"\n                                        echo \"Building with Java \\${JAVA_VERSION}\"\n                                        mvn clean package\n                                    \"\"\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#pattern-2-conditional-stages","title":"Pattern 2: Conditional Stages","text":"<p>Skip stages based on branch or file changes:</p> <pre><code>stage('Deploy to Production') {\n    when {\n        allOf {\n            branch 'main'\n            not { changeRequest() }\n            expression {\n                def changedFiles = sh(\n                    script: \"git diff --name-only HEAD~1\",\n                    returnStdout: true\n                ).trim()\n                return changedFiles.contains('src/')\n            }\n        }\n    }\n    steps {\n        echo \"Deploying to production...\"\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#pattern-3-dynamic-stage-generation","title":"Pattern 3: Dynamic Stage Generation","text":"<p>Generate stages based on configuration:</p> <pre><code>def generateTestStages(List&lt;String&gt; testSuites) {\n    def parallelStages = [:]\n\n    testSuites.each { suite -&gt;\n        parallelStages[\"Test ${suite}\"] = {\n            stage(\"Test ${suite}\") {\n                sh \"mvn test -Dtest=${suite}Test\"\n            }\n        }\n    }\n\n    return parallelStages\n}\n\npipeline {\n    stages {\n        stage('Parallel Tests') {\n            steps {\n                script {\n                    parallel generateTestStages(['Unit', 'Integration', 'E2E'])\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#pattern-4-build-artifact-promotion","title":"Pattern 4: Build Artifact Promotion","text":"<p>Progressive promotion through environments:</p> <pre><code>def promote(String artifact, String fromEnv, String toEnv) {\n    echo \"Promoting ${artifact} from ${fromEnv} to ${toEnv}\"\n\n    // Tag artifact\n    sh \"\"\"\n        docker pull ${artifact}:${fromEnv}\n        docker tag ${artifact}:${fromEnv} ${artifact}:${toEnv}\n        docker push ${artifact}:${toEnv}\n    \"\"\"\n\n    // Update manifest\n    sh \"\"\"\n        git clone https://github.com/org/gitops-manifests.git\n        cd gitops-manifests\n        sed -i 's|${artifact}:.*|${artifact}:${toEnv}|' ${toEnv}/deployment.yaml\n        git add .\n        git commit -m \"Promote ${artifact} to ${toEnv}\"\n        git push\n    \"\"\"\n}\n\n// Usage\nstage('Promote to Production') {\n    steps {\n        script {\n            promote(env.DOCKER_IMAGE, 'staging', 'production')\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#appendix-d-troubleshooting-guide","title":"\ud83d\udcd6 Appendix D: Troubleshooting Guide","text":""},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#issue-shared-library-not-found","title":"Issue: Shared Library Not Found","text":"<p>Error: <pre><code>ERROR: Library fawkes-pipelines not found\n</code></pre></p> <p>Solutions: 1. Check library name matches in Jenkins global config 2. Verify repository URL is correct 3. Check branch/tag specified exists 4. If using credentials, verify they're configured</p> <pre><code>// Use specific version\n@Library('fawkes-pipelines@v1.2.3') _\n\n// Use branch\n@Library('fawkes-pipelines@develop') _\n\n// Use commit SHA\n@Library('fawkes-pipelines@abc1234') _\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#issue-class-not-found-in-src","title":"Issue: Class Not Found in src/","text":"<p>Error: <pre><code>unable to resolve class com.fawkes.pipeline.Docker\n</code></pre></p> <p>Solutions: 1. Check package path matches directory structure 2. Ensure class is Serializable 3. Import correctly in calling code</p> <pre><code>// Correct import\nimport com.fawkes.pipeline.Docker\n\n// File must be: src/com/fawkes/pipeline/Docker.groovy\n// Class must implement Serializable\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#issue-variable-not-found-in-vars","title":"Issue: Variable Not Found in vars/","text":"<p>Error: <pre><code>No such DSL method 'goldenPathJava' found\n</code></pre></p> <p>Solutions: 1. Check file is in vars/ directory 2. Filename must match function name 3. Library must be imported</p> <pre><code>// vars/goldenPathJava.groovy defines goldenPathJava()\n@Library('fawkes-pipelines') _\ngoldenPathJava { ... }\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#issue-slow-library-loading","title":"Issue: Slow Library Loading","text":"<p>Problem: Pipeline takes 2+ minutes to start</p> <p>Solutions: 1. Enable library caching 2. Use specific version (not HEAD) 3. Reduce library size</p> <p>In Jenkins global config: <pre><code>\u2611 Cache fetched versions on controller for quick retrieval\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#issue-cannot-modify-immutable-objects","title":"Issue: Cannot Modify Immutable Objects","text":"<p>Error: <pre><code>Scripts not permitted to use method groovy.lang.GroovyObject\n</code></pre></p> <p>Solutions: 1. Approve script in Jenkins \u2192 Manage Jenkins \u2192 In-process Script Approval 2. Use <code>@NonCPS</code> annotation for methods that manipulate complex objects</p> <pre><code>@NonCPS\ndef parseJson(String json) {\n    def slurper = new JsonSlurper()\n    return slurper.parseText(json)\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#congratulations","title":"\ud83c\udf89 Congratulations!","text":"<p>You've completed Module 6: Building Golden Path Pipelines!</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#key-achievements","title":"Key Achievements","text":"<p>\u2705 Created reusable Shared Libraries \u2705 Built Golden Path templates for Java, Python, Node.js \u2705 Optimized pipelines with parallel execution and caching \u2705 Implemented performance monitoring \u2705 Reduced pipeline maintenance by 90%+</p>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#your-golden-path-journey","title":"Your Golden Path Journey","text":"<pre><code>Before Module 6:\n\ud83d\udc64 Writing 200+ line Jenkinsfiles for each project\n\ud83d\udd04 Copy-pasting pipeline code\n\ud83d\udc0c 30-minute builds\n\ud83d\ude30 Fear of changing pipelines\n\nAfter Module 6:\n\ud83d\udc65 10-line Jenkinsfiles using Golden Paths\n\u267b\ufe0f Reusable components in Shared Libraries\n\u26a1 8-minute builds with optimization\n\ud83d\ude0e Confident pipeline changes, tested in library\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#impact-on-dora-metrics","title":"Impact on DORA Metrics","text":"<ul> <li>Deployment Frequency: \u2b06\ufe0f Easier pipelines = more deploys</li> <li>Lead Time: \u2b07\ufe0f Faster builds = faster feedback</li> <li>Change Failure Rate: \u2b07\ufe0f Tested templates = fewer failures</li> <li>MTTR: \u2b07\ufe0f Consistent pipelines = easier debugging</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-06-golden-path/#whats-next","title":"\ud83d\udcc5 What's Next?","text":"<p>Continue Your Journey:</p> <ol> <li>\u2705 Complete Module 7: Security Scanning &amp; Quality Gates</li> <li>\u2705 Complete Module 8: Artifact Management  </li> <li>\ud83c\udf93 Take Yellow Belt Certification Exam</li> <li>\ud83d\ude80 Advance to Green Belt (GitOps &amp; Deployment)</li> </ol> <p>Practice: - Implement Golden Paths for your team - Measure build time improvements - Share templates with community</p> <p>Community: - Share your Shared Library in #show-and-tell - Help others in #yellow-belt channel - Write a blog post about your experience</p> <p>Ready for Module 7? \ud83d\udd12</p> <p>Next up: Security Scanning &amp; Quality Gates - where you'll learn SonarQube, Trivy, dependency scanning, and building security into every pipeline!</p> <p>Fawkes Dojo - Where Platform Engineers Are Forged Version 1.0 | Last Updated: October 2025 License: MIT | https://github.com/paruff/fawkes</p>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/","title":"Fawkes Dojo Module 7: Security Scanning &amp; Quality Gates","text":""},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#module-overview","title":"\ud83c\udfaf Module Overview","text":"<p>Belt Level: \ud83d\udfe1 Yellow Belt - CI/CD Mastery Module: 3 of 4 (Yellow Belt) Duration: 60 minutes Difficulty: Intermediate Prerequisites:  - Module 5 &amp; 6 complete - Understanding of CI/CD pipelines - Basic security awareness - Familiarity with code quality concepts</p>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>By the end of this module, you will:</p> <ol> <li>\u2705 Understand \"Shift Left on Security\" principles</li> <li>\u2705 Implement static code analysis with SonarQube</li> <li>\u2705 Scan container images for vulnerabilities with Trivy</li> <li>\u2705 Detect secrets and sensitive data in code</li> <li>\u2705 Perform dependency scanning and SBOM generation</li> <li>\u2705 Configure quality gates that enforce standards</li> <li>\u2705 Integrate security scanning into Golden Path pipelines</li> </ol> <p>DORA Capabilities Addressed: - \u2713 CD6: Shift Left on Security - \u2713 CD8: Test Data Management - \u2713 Security &amp; Compliance Automation</p>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#part-1-shift-left-on-security","title":"\ud83d\udcd6 Part 1: Shift Left on Security","text":""},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#the-traditional-security-approach-shift-right","title":"The Traditional Security Approach (Shift Right)","text":"<pre><code>Develop \u2192 Build \u2192 Test \u2192 Deploy \u2192 [SECURITY SCAN] \u2192 Production\n                                        \u2191\n                              Find issues AFTER deployment\n                              Expensive to fix\n                              Delays release\n</code></pre> <p>Problems: - Security as afterthought - Issues found late, expensive to fix - Security team bottleneck - Slow feedback (days/weeks)</p>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#shift-left-on-security","title":"Shift Left on Security","text":"<pre><code>[SECURITY SCAN] \u2192 Develop \u2192 [SECURITY SCAN] \u2192 Build \u2192 [SECURITY SCAN] \u2192 Deploy\n      \u2191                            \u2191                         \u2191\n   IDE plugins            CI/CD Pipeline              Container scan\n   Immediate feedback     Fast feedback (5 min)       Pre-deploy check\n</code></pre> <p>Benefits: - \u2705 Catch issues early (cheaper to fix) - \u2705 Developer ownership of security - \u2705 Automated enforcement - \u2705 Faster feedback loops - \u2705 Reduced security team bottleneck</p>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#cost-of-finding-bugs-by-stage","title":"Cost of Finding Bugs by Stage","text":"Stage Cost to Fix Time to Fix Impact IDE/Dev $1 Minutes None CI/CD $10 Hours Blocks build QA/Test $100 Days Delays release Production $1,000+ Weeks Customer impact, reputation damage <p>10x-100x cheaper to catch early!</p>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#part-2-static-application-security-testing-sast","title":"\ud83c\udfd7\ufe0f Part 2: Static Application Security Testing (SAST)","text":""},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#what-is-sast","title":"What is SAST?","text":"<p>Static Analysis: Analyze source code without executing it</p> <p>Detects: - Security vulnerabilities (SQL injection, XSS, etc.) - Code quality issues (dead code, duplicates) - Code smells (complex methods, poor structure) - Technical debt - Coverage gaps</p>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#sonarqube-in-fawkes","title":"SonarQube in Fawkes","text":"<p>SonarQube is the SAST tool integrated into Fawkes platform.</p> <p>Key Features: - 30+ language support - 5,000+ rules - Quality gates - Technical debt tracking - Security hotspots - Pull request decoration</p> <p>Architecture: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Jenkins Pipeline               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  sonar-scanner                   \u2502  \u2502\n\u2502  \u2502  \u2022 Analyzes code                 \u2502  \u2502\n\u2502  \u2502  \u2022 Sends to SonarQube server     \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502  SonarQube Server  \u2502\n        \u2502  \u2022 Stores results  \u2502\n        \u2502  \u2022 Applies rules   \u2502\n        \u2502  \u2022 Quality gates   \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502  PostgreSQL DB     \u2502\n        \u2502  \u2022 Historical data \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#part-3-hands-on-lab-implementing-security-scanning","title":"\ud83d\udee0\ufe0f Part 3: Hands-On Lab - Implementing Security Scanning","text":""},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#step-1-add-sonarqube-to-pipeline","title":"Step 1: Add SonarQube to Pipeline","text":"<p>Update your Golden Path pipeline:</p> <pre><code>// vars/goldenPathJava.groovy\nstage('Code Analysis') {\n    steps {\n        container('maven') {\n            withSonarQubeEnv('Fawkes-SonarQube') {\n                sh '''\n                    mvn sonar:sonar \\\n                        -Dsonar.projectKey=${JOB_NAME} \\\n                        -Dsonar.projectName=\"${JOB_NAME}\" \\\n                        -Dsonar.projectVersion=${BUILD_NUMBER} \\\n                        -Dsonar.sources=src/main/java \\\n                        -Dsonar.tests=src/test/java \\\n                        -Dsonar.java.binaries=target/classes \\\n                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml\n                '''\n            }\n        }\n    }\n}\n\nstage('Quality Gate') {\n    steps {\n        timeout(time: 5, unit: 'MINUTES') {\n            waitForQualityGate abortPipeline: true\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#step-2-configure-quality-gate","title":"Step 2: Configure Quality Gate","text":"<p>In SonarQube UI:</p> <ol> <li>Go to Quality Gates</li> <li>Create new gate: \"Fawkes Standard\"</li> <li>Add conditions:</li> </ol> <pre><code>Conditions:\n\u251c\u2500\u2500 Coverage &lt; 80% \u2192 FAILED\n\u251c\u2500\u2500 Duplicated Lines (%) &gt; 3% \u2192 FAILED\n\u251c\u2500\u2500 Maintainability Rating worse than A \u2192 FAILED\n\u251c\u2500\u2500 Reliability Rating worse than A \u2192 FAILED\n\u251c\u2500\u2500 Security Rating worse than A \u2192 FAILED\n\u251c\u2500\u2500 Security Hotspots Reviewed &lt; 100% \u2192 FAILED\n\u2514\u2500\u2500 New Critical Issues &gt; 0 \u2192 FAILED\n</code></pre> <ol> <li>Set as default gate</li> </ol>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#step-3-add-container-scanning-with-trivy","title":"Step 3: Add Container Scanning with Trivy","text":"<pre><code>stage('Container Security Scan') {\n    steps {\n        container('docker') {\n            script {\n                def imageName = \"${env.DOCKER_IMAGE}\"\n\n                echo \"\ud83d\udd12 Scanning image: ${imageName}\"\n\n                // Scan for vulnerabilities\n                sh \"\"\"\n                    trivy image \\\n                        --severity HIGH,CRITICAL \\\n                        --exit-code 1 \\\n                        --no-progress \\\n                        --format json \\\n                        --output trivy-report.json \\\n                        ${imageName}\n                \"\"\"\n\n                // Also generate human-readable report\n                sh \"\"\"\n                    trivy image \\\n                        --severity HIGH,CRITICAL \\\n                        --format table \\\n                        ${imageName}\n                \"\"\"\n            }\n        }\n    }\n    post {\n        always {\n            archiveArtifacts artifacts: 'trivy-report.json',\n                             allowEmptyArchive: true\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#step-4-secret-scanning","title":"Step 4: Secret Scanning","text":"<pre><code>stage('Secret Detection') {\n    steps {\n        container('maven') {\n            script {\n                echo \"\ud83d\udd0d Scanning for secrets...\"\n\n                // Install trufflehog\n                sh '''\n                    pip3 install trufflehog\n                '''\n\n                // Scan repository\n                sh '''\n                    trufflehog filesystem . \\\n                        --json \\\n                        --fail \\\n                        --no-update \\\n                        &gt; trufflehog-report.json || true\n                '''\n\n                // Check results\n                def report = readFile('trufflehog-report.json')\n                if (report.trim()) {\n                    error(\"\ud83d\udea8 Secrets detected in code! See trufflehog-report.json\")\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#step-5-dependency-scanning","title":"Step 5: Dependency Scanning","text":"<pre><code>stage('Dependency Scan') {\n    steps {\n        container('maven') {\n            script {\n                echo \"\ud83d\udce6 Scanning dependencies...\"\n\n                // OWASP Dependency Check\n                sh '''\n                    mvn dependency-check:check \\\n                        -DfailBuildOnCVSS=7 \\\n                        -DsuppressionFile=dependency-check-suppressions.xml\n                '''\n            }\n        }\n    }\n    post {\n        always {\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: 'target',\n                reportFiles: 'dependency-check-report.html',\n                reportName: 'Dependency Check Report'\n            ])\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#part-4-understanding-security-scan-results","title":"\ud83d\udcca Part 4: Understanding Security Scan Results","text":""},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#sonarqube-metrics-explained","title":"SonarQube Metrics Explained","text":"<p>1. Bugs \ud83d\udc1b - Code that is demonstrably wrong - Example: Null pointer dereference - Standard: 0 bugs</p> <p>2. Vulnerabilities \ud83d\udd13 - Security-related issues - Example: SQL injection risk - Standard: 0 vulnerabilities</p> <p>3. Code Smells \ud83d\udc43 - Maintainability issues - Example: Method too complex - Standard: &lt; 5% code smells</p> <p>4. Security Hotspots \ud83d\udd25 - Security-sensitive code requiring review - Example: Cryptographic operations - Standard: 100% reviewed</p> <p>5. Coverage \ud83d\udcca - % of code covered by tests - Standard: &gt; 80%</p> <p>6. Duplications \u00a9\ufe0f - Duplicate code blocks - Standard: &lt; 3%</p> <p>7. Technical Debt \ud83d\udcb8 - Time to fix all issues - Standard: &lt; 5% debt ratio</p>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#trivy-severity-levels","title":"Trivy Severity Levels","text":"Severity CVSS Score Action Required CRITICAL 9.0-10.0 Block deployment immediately HIGH 7.0-8.9 Fix within 7 days MEDIUM 4.0-6.9 Fix within 30 days LOW 0.1-3.9 Fix when convenient UNKNOWN N/A Investigate <p>Trivy Output Example: <pre><code>myapp:1.0 (alpine 3.18.0)\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nTotal: 2 (HIGH: 1, CRITICAL: 1)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Library     \u2502 Vulnerability  \u2502 Severity \u2502  Installed Version \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 openssl        \u2502 CVE-2023-12345 \u2502 CRITICAL \u2502 3.0.8-r0          \u2502\n\u2502 curl           \u2502 CVE-2023-67890 \u2502 HIGH     \u2502 8.0.1-r0          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#part-5-configuring-quality-gates","title":"\ud83c\udfaf Part 5: Configuring Quality Gates","text":""},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#quality-gate-philosophy","title":"Quality Gate Philosophy","text":"<p>\"Quality gates should prevent bad code from progressing, not punish developers\"</p> <p>Good Quality Gates: - \u2705 Focus on new code (not legacy) - \u2705 Achievable standards - \u2705 Fast feedback (&lt;5 min) - \u2705 Clear remediation steps</p> <p>Bad Quality Gates: - \u274c Unrealistic standards (100% coverage) - \u274c Block on legacy debt - \u274c Slow feedback (&gt;30 min) - \u274c Vague error messages</p>"},{"location":"dojo/modules/yellow-belt/module-07-security-scanning/#recommended-quality-gates-by-stage","title":"Recommended Quality Gates by Stage","text":"<p>Development (IDE/PR): <pre><code>gates:\n  - New Bugs: 0\n  - New Vulnerabilities: 0\n  - New Code Coverage: &gt; 80%\n  - New Duplications: &lt; 3%\n</code></pre></p> <p>CI/CD (Main Branch): <pre><code>gates:\n  - Overall Bugs: &lt; 10\n  - Overall Vulnerabilities: 0\n  - Overall Coverage: &gt; 70%\n  - Security Hotspots Reviewed: 100%\n  - Maintainability Rating: \u2265 B\n</code></pre></p> <p>Production (Release): ```yaml</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/","title":"Fawkes Dojo Module 8: Artifact Management","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#module-overview","title":"\ud83c\udfaf Module Overview","text":"<p>Belt Level: \ud83d\udfe1 Yellow Belt - CI/CD Mastery Module: 4 of 4 (Yellow Belt - FINAL MODULE) Duration: 60 minutes Difficulty: Intermediate Prerequisites:  - Modules 5, 6, 7 complete - Understanding of Docker and containers - Familiarity with versioning concepts - CI/CD pipeline experience</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#learning-objectives","title":"\ud83d\udcda Learning Objectives","text":"<p>By the end of this module, you will:</p> <ol> <li>\u2705 Understand the role of artifact registries in CI/CD</li> <li>\u2705 Configure Harbor container registry in Fawkes</li> <li>\u2705 Implement semantic versioning strategies</li> <li>\u2705 Manage artifact lifecycle and retention policies</li> <li>\u2705 Implement artifact promotion across environments</li> <li>\u2705 Secure artifacts with signing and scanning</li> <li>\u2705 Optimize storage costs and performance</li> </ol> <p>DORA Capabilities Addressed: - \u2713 CD1: Version control for production artifacts - \u2713 CD2: Automate deployment process - \u2713 Artifact Traceability</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#part-1-why-artifact-management-matters","title":"\ud83d\udcd6 Part 1: Why Artifact Management Matters","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#the-problem-ad-hoc-artifact-storage","title":"The Problem: Ad-Hoc Artifact Storage","text":"<p>Without proper artifact management: <pre><code>Team A: Stores Docker images on local machines\nTeam B: Uses random Docker Hub accounts\nTeam C: Rebuilds from source every time\nTeam D: No idea which version is in production\n\nResult:\n\u274c Can't reproduce builds\n\u274c Can't rollback reliably\n\u274c No audit trail\n\u274c Security vulnerabilities untracked\n\u274c Storage costs out of control\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#the-solution-centralized-artifact-registry","title":"The Solution: Centralized Artifact Registry","text":"<pre><code>                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                   \u2502   Harbor Registry   \u2502\n                   \u2502  (Fawkes Platform)  \u2502\n                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                     \u2502                     \u2502\n   \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510\n   \u2502   Dev   \u2502          \u2502 Staging \u2502          \u2502  Prod   \u2502\n   \u2502 myapp:  \u2502          \u2502 myapp:  \u2502          \u2502 myapp:  \u2502\n   \u2502  dev-123\u2502          \u2502  stg-123\u2502          \u2502  v1.2.3 \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Benefits: - \u2705 Single source of truth - \u2705 Immutable artifacts - \u2705 Complete audit trail - \u2705 Security scanning integrated - \u2705 Efficient storage with deduplication - \u2705 Role-based access control - \u2705 Replication for DR</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#part-2-harbor-container-registry","title":"\ud83c\udfd7\ufe0f Part 2: Harbor Container Registry","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#what-is-harbor","title":"What is Harbor?","text":"<p>Harbor is an open-source container registry that secures artifacts with policies and role-based access control.</p> <p>Key Features: - \ud83d\udc33 Docker/OCI image storage - \ud83d\udd12 Integrated security scanning (Trivy) - \ud83d\udcca Vulnerability management - \ud83c\udff7\ufe0f Image signing (Cosign/Notary) - \ud83d\udce6 Helm chart repository - \ud83d\udd10 RBAC and quota management - \ud83d\udcc8 Audit logging - \ud83c\udf0d Replication across registries</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#harbor-architecture-in-fawkes","title":"Harbor Architecture in Fawkes","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Harbor Registry                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502   Core     \u2502  \u2502  Registry  \u2502  \u2502   Trivy      \u2502  \u2502\n\u2502  \u2502  Service   \u2502  \u2502  (Storage) \u2502  \u2502   Scanner    \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502         \u2502                \u2502                \u2502          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502           PostgreSQL Database                  \u2502 \u2502\n\u2502  \u2502  \u2022 Image metadata  \u2022 Scan results  \u2022 Audit    \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502        Object Storage (S3/MinIO)             \u2502  \u2502\n\u2502  \u2502     \u2022 Image layers  \u2022 Helm charts            \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#part-3-hands-on-lab-publishing-artifacts","title":"\ud83d\udee0\ufe0f Part 3: Hands-On Lab - Publishing Artifacts","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#step-1-configure-harbor-in-pipeline","title":"Step 1: Configure Harbor in Pipeline","text":"<pre><code>// vars/goldenPathJava.groovy (enhanced)\ndef call(Map config = [:]) {\n    def defaults = [\n        harborRegistry: 'harbor.fawkes.internal',\n        harborProject: 'library',\n        harborCredentials: 'harbor-robot-account',\n        imagePrefix: '',\n        pushToHarbor: true\n    ]\n\n    config = defaults + config\n\n    pipeline {\n        // ... agent configuration ...\n\n        environment {\n            HARBOR_REGISTRY = \"${config.harborRegistry}\"\n            HARBOR_PROJECT = \"${config.harborProject}\"\n            IMAGE_NAME = \"${config.imagePrefix}${env.JOB_NAME}\".replaceAll('/', '-')\n        }\n\n        stages {\n            // ... build stages ...\n\n            stage('Build Docker Image') {\n                steps {\n                    container('docker') {\n                        script {\n                            // Generate version tags\n                            def shortCommit = env.GIT_COMMIT.take(7)\n                            def buildTag = \"${env.BUILD_NUMBER}-${shortCommit}\"\n                            def latestTag = env.BRANCH_NAME == 'main' ? 'latest' : env.BRANCH_NAME\n\n                            env.IMAGE_TAG = buildTag\n                            env.IMAGE_FULL = \"${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${IMAGE_NAME}:${buildTag}\"\n\n                            echo \"\ud83d\udc33 Building: ${env.IMAGE_FULL}\"\n                            sh \"\"\"\n                                docker build \\\n                                    --label \"version=${buildTag}\" \\\n                                    --label \"git-commit=${env.GIT_COMMIT}\" \\\n                                    --label \"build-url=${env.BUILD_URL}\" \\\n                                    --label \"built-by=fawkes-ci\" \\\n                                    -t ${env.IMAGE_FULL} \\\n                                    -t ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${IMAGE_NAME}:${latestTag} \\\n                                    .\n                            \"\"\"\n                        }\n                    }\n                }\n            }\n\n            stage('Push to Harbor') {\n                when {\n                    expression { config.pushToHarbor }\n                }\n                steps {\n                    container('docker') {\n                        script {\n                            withCredentials([\n                                usernamePassword(\n                                    credentialsId: config.harborCredentials,\n                                    usernameVariable: 'HARBOR_USER',\n                                    passwordVariable: 'HARBOR_PASS'\n                                )\n                            ]) {\n                                echo \"\ud83d\udce4 Pushing to Harbor...\"\n                                sh \"\"\"\n                                    echo \\$HARBOR_PASS | docker login ${HARBOR_REGISTRY} -u \\$HARBOR_USER --password-stdin\n                                    docker push ${env.IMAGE_FULL}\n\n                                    # Push additional tags\n                                    docker push ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${IMAGE_NAME}:${env.BRANCH_NAME}\n                                \"\"\"\n                            }\n                        }\n                    }\n                }\n            }\n\n            stage('Harbor Scan &amp; Sign') {\n                steps {\n                    script {\n                        // Trigger Harbor vulnerability scan\n                        sh \"\"\"\n                            curl -X POST \\\n                                -u \\$HARBOR_USER:\\$HARBOR_PASS \\\n                                \"${HARBOR_REGISTRY}/api/v2.0/projects/${HARBOR_PROJECT}/repositories/${IMAGE_NAME}/artifacts/${env.IMAGE_TAG}/scan\"\n                        \"\"\"\n\n                        // Wait for scan completion\n                        timeout(time: 5, unit: 'MINUTES') {\n                            waitUntil {\n                                def status = sh(\n                                    script: \"\"\"\n                                        curl -s -u \\$HARBOR_USER:\\$HARBOR_PASS \\\n                                            \"${HARBOR_REGISTRY}/api/v2.0/projects/${HARBOR_PROJECT}/repositories/${IMAGE_NAME}/artifacts/${env.IMAGE_TAG}\" \\\n                                            | jq -r '.scan_overview.\"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\".scan_status'\n                                    \"\"\",\n                                    returnStdout: true\n                                ).trim()\n                                return status == 'Success'\n                            }\n                        }\n\n                        echo \"\u2705 Harbor scan complete\"\n                    }\n                }\n            }\n        }\n\n        post {\n            success {\n                script {\n                    echo \"\"\"\n                    \u2705 Artifact published successfully!\n                    \ud83d\udce6 Image: ${env.IMAGE_FULL}\n                    \ud83d\udd17 Harbor: ${HARBOR_REGISTRY}/harbor/projects/${HARBOR_PROJECT}/repositories/${IMAGE_NAME}\n                    \"\"\"\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#step-2-verify-in-harbor-ui","title":"Step 2: Verify in Harbor UI","text":"<p>Access Harbor: <code>https://harbor.fawkes.internal</code></p> <p>Navigate to your image: 1. Projects \u2192 Your Project 2. Repositories \u2192 Your Image 3. Click on tag (e.g., <code>123-abc1234</code>)</p> <p>View Details: - \ud83d\udccb Vulnerabilities scan results - \ud83c\udff7\ufe0f Labels and metadata - \ud83d\udcca Layer information - \ud83d\udd12 Signature status - \ud83d\udcc8 Pull statistics</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#part-4-versioning-strategies","title":"\ud83d\udcca Part 4: Versioning Strategies","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#semantic-versioning-semver","title":"Semantic Versioning (SemVer)","text":"<p>Format: <code>MAJOR.MINOR.PATCH</code></p> <pre><code>v1.2.3\n\u2502 \u2502 \u2502\n\u2502 \u2502 \u2514\u2500 Patch: Bug fixes (backward compatible)\n\u2502 \u2514\u2500\u2500\u2500 Minor: New features (backward compatible)\n\u2514\u2500\u2500\u2500\u2500\u2500 Major: Breaking changes\n</code></pre> <p>Examples: - <code>v1.0.0</code> \u2192 Initial release - <code>v1.0.1</code> \u2192 Bug fix - <code>v1.1.0</code> \u2192 New feature added - <code>v2.0.0</code> \u2192 Breaking API change</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#tagging-strategy","title":"Tagging Strategy","text":"<p>Multiple tags per image:</p> <pre><code># Build number + commit (immutable reference)\nmyapp:142-abc1234\n\n# Semantic version (for releases)\nmyapp:v1.2.3\n\n# Environment-specific\nmyapp:dev\nmyapp:staging\nmyapp:production\n\n# Branch-based\nmyapp:main\nmyapp:feature-auth\n\n# Latest (moving target)\nmyapp:latest\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#implementing-versioning-in-pipeline","title":"Implementing Versioning in Pipeline","text":"<pre><code>def generateImageTags() {\n    def tags = []\n\n    // Always add build number + commit\n    def shortCommit = env.GIT_COMMIT.take(7)\n    tags.add(\"${env.BUILD_NUMBER}-${shortCommit}\")\n\n    // Add semantic version if tagged\n    if (env.TAG_NAME) {\n        tags.add(env.TAG_NAME)\n\n        // Also add major.minor\n        def semver = env.TAG_NAME =~ /v?(\\d+)\\.(\\d+)\\.(\\d+)/\n        if (semver) {\n            tags.add(\"v${semver[0][1]}.${semver[0][2]}\")\n            tags.add(\"v${semver[0][1]}\")\n        }\n    }\n\n    // Add branch name\n    tags.add(env.BRANCH_NAME.replaceAll('/', '-'))\n\n    // Add 'latest' for main branch\n    if (env.BRANCH_NAME == 'main') {\n        tags.add('latest')\n    }\n\n    return tags\n}\n\nstage('Build &amp; Tag') {\n    steps {\n        script {\n            def tags = generateImageTags()\n            def imageBase = \"${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${IMAGE_NAME}\"\n\n            // Build with first tag\n            sh \"docker build -t ${imageBase}:${tags[0]} .\"\n\n            // Add additional tags\n            tags.drop(1).each { tag -&gt;\n                sh \"docker tag ${imageBase}:${tags[0]} ${imageBase}:${tag}\"\n            }\n\n            // Push all tags\n            tags.each { tag -&gt;\n                sh \"docker push ${imageBase}:${tag}\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#part-5-artifact-promotion","title":"\ud83d\udd04 Part 5: Artifact Promotion","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#environment-promotion-pattern","title":"Environment Promotion Pattern","text":"<p>Concept: Same artifact progresses through environments</p> <pre><code>Build \u2192 Dev \u2192 Test \u2192 Staging \u2192 Production\n \u2502       \u2502      \u2502       \u2502          \u2502\n v142    v142   v142    v142      v142\n         \u2193                         \u2193\n      promote               final promote\n</code></pre> <p>Never rebuild - same artifact, different tags/environment</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#implementing-promotion","title":"Implementing Promotion","text":"<pre><code>def promoteArtifact(Map config) {\n    def sourceTag = config.sourceTag\n    def targetTag = config.targetTag\n    def imageBase = \"${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${IMAGE_NAME}\"\n\n    echo \"\ud83d\udd04 Promoting ${imageBase}:${sourceTag} \u2192 ${targetTag}\"\n\n    // Pull source image\n    sh \"docker pull ${imageBase}:${sourceTag}\"\n\n    // Re-tag for target environment\n    sh \"docker tag ${imageBase}:${sourceTag} ${imageBase}:${targetTag}\"\n\n    // Push to Harbor\n    sh \"docker push ${imageBase}:${targetTag}\"\n\n    // Update GitOps manifest\n    sh \"\"\"\n        git clone https://github.com/org/gitops-manifests.git\n        cd gitops-manifests\n\n        # Update image tag in manifest\n        yq eval -i '.spec.template.spec.containers[0].image = \"${imageBase}:${targetTag}\"' \\\n            environments/${targetTag}/deployment.yaml\n\n        git add .\n        git commit -m \"Promote ${IMAGE_NAME} to ${targetTag} (build ${sourceTag})\"\n        git push\n    \"\"\"\n\n    echo \"\u2705 Promotion complete\"\n}\n\n// Usage\nstage('Promote to Staging') {\n    when {\n        branch 'main'\n    }\n    steps {\n        script {\n            promoteArtifact(\n                sourceTag: \"${env.BUILD_NUMBER}-${env.GIT_COMMIT.take(7)}\",\n                targetTag: 'staging'\n            )\n        }\n    }\n}\n\nstage('Promote to Production') {\n    when {\n        tag pattern: \"v\\\\d+\\\\.\\\\d+\\\\.\\\\d+\", comparator: \"REGEXP\"\n    }\n    steps {\n        script {\n            promoteArtifact(\n                sourceTag: 'staging',\n                targetTag: 'production'\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#approval-gates","title":"Approval Gates","text":"<p>Add manual approval for production:</p> <pre><code>stage('Approve Production Deploy') {\n    when {\n        tag pattern: \"v\\\\d+\\\\.\\\\d+\\\\.\\\\d+\", comparator: \"REGEXP\"\n    }\n    steps {\n        script {\n            def approved = input(\n                message: 'Deploy to Production?',\n                parameters: [\n                    booleanParam(\n                        name: 'DEPLOY',\n                        defaultValue: false,\n                        description: 'Check to approve production deployment'\n                    ),\n                    text(\n                        name: 'NOTES',\n                        defaultValue: '',\n                        description: 'Deployment notes (optional)'\n                    )\n                ]\n            )\n\n            if (!approved.DEPLOY) {\n                error(\"Production deployment not approved\")\n            }\n\n            echo \"Deployment approved by: ${env.BUILD_USER}\"\n            echo \"Notes: ${approved.NOTES}\"\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#part-6-retention-policies","title":"\ud83d\uddc4\ufe0f Part 6: Retention Policies","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#why-retention-policies-matter","title":"Why Retention Policies Matter","text":"<p>Without retention: <pre><code>Day 1:   10 images  \u2192 1 GB\nDay 30:  300 images \u2192 30 GB\nDay 90:  900 images \u2192 90 GB\nDay 365: 3650 images \u2192 365 GB \ud83d\udcb8\ud83d\udcb8\ud83d\udcb8\n</code></pre></p> <p>With retention: <pre><code>Day 1:   10 images \u2192 1 GB\nDay 365: 100 images \u2192 10 GB \u2705\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#harbor-retention-rules","title":"Harbor Retention Rules","text":"<p>Configure in Harbor UI or via API:</p> <p>Example Policy: <pre><code>retention_policy:\n  - scope: \"**\"  # All repositories\n    rules:\n      # Keep production images indefinitely\n      - tag: \"production\"\n        retain: -1  # Forever\n\n      # Keep staging images for 30 days\n      - tag: \"staging\"\n        retain: 30\n\n      # Keep latest 10 dev images\n      - tag: \"dev-*\"\n        retain_count: 10\n\n      # Keep semantic versions for 1 year\n      - tag: \"v*.*.*\"\n        retain: 365\n\n      # Delete untagged images after 7 days\n      - tag: \"\"\n        retain: 7\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#implementing-retention-via-api","title":"Implementing Retention via API","text":"<pre><code>stage('Configure Retention') {\n    steps {\n        script {\n            def retentionPolicy = '''\n            {\n                \"rules\": [\n                    {\n                        \"disabled\": false,\n                        \"action\": \"retain\",\n                        \"tag_selectors\": [{\n                            \"kind\": \"doublestar\",\n                            \"decoration\": \"matches\",\n                            \"pattern\": \"production\"\n                        }],\n                        \"scope_selectors\": {\n                            \"repository\": [{\n                                \"kind\": \"doublestar\",\n                                \"decoration\": \"matches\",\n                                \"pattern\": \"**\"\n                            }]\n                        }\n                    },\n                    {\n                        \"disabled\": false,\n                        \"action\": \"retain\",\n                        \"tag_selectors\": [{\n                            \"kind\": \"doublestar\",\n                            \"decoration\": \"matches\",\n                            \"pattern\": \"v*.*.*\"\n                        }],\n                        \"scope_selectors\": {\n                            \"repository\": [{\n                                \"kind\": \"doublestar\",\n                                \"decoration\": \"matches\",\n                                \"pattern\": \"**\"\n                            }]\n                        },\n                        \"template\": \"retain_n\",\n                        \"params\": {\"n\": 10}\n                    }\n                ]\n            }\n            '''\n\n            sh \"\"\"\n                curl -X POST \\\n                    -H \"Content-Type: application/json\" \\\n                    -u \\$HARBOR_USER:\\$HARBOR_PASS \\\n                    -d '${retentionPolicy}' \\\n                    \"${HARBOR_REGISTRY}/api/v2.0/projects/${HARBOR_PROJECT}/retention\"\n            \"\"\"\n        }\n    }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#part-7-artifact-signing-verification","title":"\ud83d\udd12 Part 7: Artifact Signing &amp; Verification","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#why-sign-artifacts","title":"Why Sign Artifacts?","text":"<p>Without signing: <pre><code>\u274c Can't verify artifact authenticity\n\u274c Don't know who published it\n\u274c Can't detect tampering\n\u274c Supply chain vulnerable\n</code></pre></p> <p>With signing: <pre><code>\u2705 Cryptographically verify origin\n\u2705 Detect any modifications\n\u2705 Enforce only signed images run\n\u2705 Complete audit trail\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#signing-with-cosign","title":"Signing with Cosign","text":"<p>Install Cosign: <pre><code># In pipeline\ncurl -sSL https://github.com/sigstore/cosign/releases/download/v2.0.0/cosign-linux-amd64 \\\n    -o /usr/local/bin/cosign\nchmod +x /usr/local/bin/cosign\n</code></pre></p> <p>Generate Key Pair (one-time setup): <pre><code>cosign generate-key-pair\n# Creates: cosign.key (private) and cosign.pub (public)\n# Store private key in Jenkins credentials\n</code></pre></p> <p>Sign Image in Pipeline: <pre><code>stage('Sign Image') {\n    steps {\n        container('cosign') {\n            withCredentials([\n                file(credentialsId: 'cosign-private-key', variable: 'COSIGN_KEY'),\n                string(credentialsId: 'cosign-password', variable: 'COSIGN_PASSWORD')\n            ]) {\n                sh \"\"\"\n                    cosign sign \\\n                        --key \\${COSIGN_KEY} \\\n                        --yes \\\n                        ${env.IMAGE_FULL}\n                \"\"\"\n            }\n        }\n    }\n}\n</code></pre></p> <p>Verify Signature: <pre><code># In deployment pipeline\ncosign verify \\\n    --key cosign.pub \\\n    harbor.fawkes.internal/library/myapp:v1.2.3\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#kubernetes-admission-control","title":"Kubernetes Admission Control","text":"<p>Enforce only signed images:</p> <pre><code># Kyverno policy\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: verify-signed-images\nspec:\n  validationFailureAction: enforce\n  rules:\n  - name: verify-signature\n    match:\n      resources:\n        kinds:\n        - Pod\n    verifyImages:\n    - imageReferences:\n      - \"harbor.fawkes.internal/*\"\n      attestors:\n      - entries:\n        - keys:\n            publicKeys: |-\n              -----BEGIN PUBLIC KEY-----\n              [Your Cosign Public Key]\n              -----END PUBLIC KEY-----\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#part-8-monitoring-metrics","title":"\ud83d\udcc8 Part 8: Monitoring &amp; Metrics","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#key-artifact-metrics","title":"Key Artifact Metrics","text":"<pre><code># Artifact publish rate\nrate(artifacts_published_total[5m])\n\n# Artifact size over time\navg(artifact_size_bytes) by (repository)\n\n# Pull count by artifact\nsum(artifact_pulls_total) by (repository, tag)\n\n# Storage usage by project\nsum(storage_used_bytes) by (project)\n\n# Vulnerability count by severity\nsum(vulnerabilities_total) by (severity, repository)\n\n# Artifact age\ntime() - artifact_push_timestamp_seconds\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#grafana-dashboard","title":"Grafana Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"Artifact Registry Metrics\",\n    \"panels\": [\n      {\n        \"title\": \"Daily Artifact Publishes\",\n        \"targets\": [{\n          \"expr\": \"sum(rate(artifacts_published_total[1d]))\"\n        }],\n        \"type\": \"graph\"\n      },\n      {\n        \"title\": \"Storage Usage by Project\",\n        \"targets\": [{\n          \"expr\": \"sum(storage_used_bytes) by (project) / 1024/1024/1024\"\n        }],\n        \"type\": \"piechart\",\n        \"unit\": \"GB\"\n      },\n      {\n        \"title\": \"Most Pulled Images\",\n        \"targets\": [{\n          \"expr\": \"topk(10, sum(rate(artifact_pulls_total[7d])) by (repository))\"\n        }],\n        \"type\": \"table\"\n      },\n      {\n        \"title\": \"Vulnerabilities by Severity\",\n        \"targets\": [{\n          \"expr\": \"sum(vulnerabilities_total) by (severity)\"\n        }],\n        \"type\": \"bargauge\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#alerting-rules","title":"Alerting Rules","text":"<pre><code>groups:\n  - name: artifact_alerts\n    rules:\n      - alert: HighVulnerabilityCount\n        expr: sum(vulnerabilities_total{severity=\"critical\"}) &gt; 10\n        for: 1h\n        annotations:\n          summary: \"High number of critical vulnerabilities\"\n          description: \"{{ $value }} critical vulnerabilities detected\"\n\n      - alert: StorageQuotaExceeded\n        expr: storage_used_bytes / storage_quota_bytes &gt; 0.9\n        for: 15m\n        annotations:\n          summary: \"Storage quota 90% full\"\n          description: \"Project {{ $labels.project }} is at {{ $value }}% capacity\"\n\n      - alert: ArtifactNotPulled\n        expr: |\n          time() - artifact_last_pull_timestamp_seconds{tag=\"production\"} &gt; 86400*30\n        for: 1h\n        annotations:\n          summary: \"Production artifact not pulled in 30 days\"\n          description: \"{{ $labels.repository }}:{{ $labels.tag }} may be orphaned\"\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#part-9-practical-exercise","title":"\ud83d\udcaa Part 9: Practical Exercise","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#exercise-complete-artifact-lifecycle","title":"Exercise: Complete Artifact Lifecycle","text":"<p>Objective: Implement full artifact management lifecycle</p> <p>Requirements: 1. Build and tag Docker image with multiple tags 2. Push to Harbor with metadata labels 3. Trigger and verify Harbor security scan 4. Sign image with Cosign 5. Implement artifact promotion (dev \u2192 staging \u2192 prod) 6. Configure retention policy 7. Set up monitoring for artifact metrics</p> <p>Starter Template:</p> <pre><code>@Library('fawkes-pipelines') _\n\npipeline {\n    agent {\n        kubernetes {\n            yaml '''\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: docker\n    image: docker:24-dind\n    securityContext:\n      privileged: true\n  - name: cosign\n    image: gcr.io/projectsigstore/cosign:latest\n'''\n        }\n    }\n\n    environment {\n        HARBOR_REGISTRY = 'harbor.fawkes.internal'\n        HARBOR_PROJECT = 'library'\n        IMAGE_NAME = 'myapp'\n    }\n\n    stages {\n        stage('Checkout') {\n            steps {\n                git 'https://github.com/myorg/myapp.git'\n            }\n        }\n\n        stage('Build &amp; Tag') {\n            steps {\n                // TODO: Build with multiple tags\n            }\n        }\n\n        stage('Push to Harbor') {\n            steps {\n                // TODO: Push all tags\n            }\n        }\n\n        stage('Scan &amp; Sign') {\n            steps {\n                // TODO: Trigger Harbor scan and sign with Cosign\n            }\n        }\n\n        stage('Promote to Staging') {\n            when {\n                branch 'main'\n            }\n            steps {\n                // TODO: Promote artifact\n            }\n        }\n    }\n}\n</code></pre> <p>Validation Criteria: - [ ] Image built and tagged correctly - [ ] All tags pushed to Harbor - [ ] Harbor scan completed successfully - [ ] Image signed with Cosign - [ ] Signature verifiable - [ ] Artifact promoted correctly - [ ] Retention policy configured - [ ] Metrics visible in Grafana</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#part-10-knowledge-check","title":"\ud83c\udf93 Part 10: Knowledge Check","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#quiz-questions","title":"Quiz Questions","text":"<ol> <li>What is the purpose of an artifact registry?</li> <li>[ ] Store source code</li> <li>[x] Store and manage build artifacts (images, packages)</li> <li>[ ] Run containers</li> <li> <p>[ ] Deploy applications</p> </li> <li> <p>What is semantic versioning format?</p> </li> <li>[ ] BUILD.DATE.TIME</li> <li>[x] MAJOR.MINOR.PATCH</li> <li>[ ] YEAR.MONTH.DAY</li> <li> <p>[ ] VERSION.RELEASE.BUILD</p> </li> <li> <p>Why should you use the same artifact across environments?</p> </li> <li>[ ] Save disk space</li> <li>[ ] Faster builds</li> <li>[x] Ensure consistency and avoid \"works on my machine\"</li> <li> <p>[ ] Easier to debug</p> </li> <li> <p>What does artifact signing provide?</p> </li> <li>[ ] Faster downloads</li> <li>[ ] Smaller file size</li> <li>[x] Verification of authenticity and integrity</li> <li> <p>[ ] Automatic deployment</p> </li> <li> <p>Why implement retention policies?</p> </li> <li>[x] Control storage costs and remove unused artifacts</li> <li>[ ] Make builds faster</li> <li>[ ] Improve security</li> <li> <p>[ ] All of the above</p> </li> <li> <p>What is artifact promotion?</p> </li> <li>[ ] Marketing the artifact</li> <li>[x] Moving same artifact through environments without rebuilding</li> <li>[ ] Upgrading to newer version</li> <li> <p>[ ] Deleting old versions</p> </li> <li> <p>What tool does Fawkes use for container registry?</p> </li> <li>[ ] Docker Hub</li> <li>[ ] Artifactory</li> <li>[x] Harbor</li> <li> <p>[ ] Nexus</p> </li> <li> <p>What is the benefit of tagging with build number + commit SHA?</p> </li> <li>[ ] Looks professional</li> <li>[ ] Required by Docker</li> <li>[x] Provides immutable, traceable reference</li> <li>[ ] Makes images smaller</li> </ol> <p>Answers: 1-B, 2-B, 3-C, 4-C, 5-A, 6-B, 7-C, 8-C</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#part-11-module-summary-next-steps","title":"\ud83c\udfaf Part 11: Module Summary &amp; Next Steps","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#what-you-learned","title":"What You Learned","text":"<p>\u2705 Artifact Registries: Centralized, secure storage for build artifacts \u2705 Harbor: Configuration and usage in Fawkes platform \u2705 Versioning: Semantic versioning and tagging strategies \u2705 Promotion: Moving artifacts through environments \u2705 Retention: Lifecycle management and cost optimization \u2705 Signing: Cryptographic verification with Cosign \u2705 Monitoring: Tracking artifact metrics and health</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#dora-capabilities-achieved","title":"DORA Capabilities Achieved","text":"<ul> <li>\u2705 CD1: Version control for production artifacts (complete)</li> <li>\u2705 CD2: Automated deployment with immutable artifacts</li> <li>\u2705 Traceability: Complete audit trail from build to production</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Artifacts are immutable - Never rebuild, always promote</li> <li>Tag everything - Multiple tags for different purposes</li> <li>Sign your artifacts - Prevent supply chain attacks</li> <li>Lifecycle management - Retention policies save money</li> <li>Monitor your registry - Track usage, vulnerabilities, costs</li> </ol>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#real-world-impact","title":"Real-World Impact","text":"<p>\"After implementing proper artifact management: - Build reproducibility: 60% \u2192 100% - Deployment confidence: 70% \u2192 95% - Storage costs: $5,000/month \u2192 $800/month - Time to rollback: 30 min \u2192 2 min - Supply chain security: Significantly improved with signing</p> <p>We can now trace every production artifact back to exact source code commit.\" - DevOps Team, E-Commerce Platform</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#yellow-belt-complete","title":"\ud83c\udf89 Yellow Belt Complete!","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#congratulations","title":"\ud83c\udfc6 Congratulations!","text":"<p>You've completed all four Yellow Belt modules: - \u2705 Module 5: CI Fundamentals - \u2705 Module 6: Golden Path Pipelines - \u2705 Module 7: Security Scanning &amp; Quality Gates - \u2705 Module 8: Artifact Management</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#yellow-belt-progress","title":"\ud83c\udf96\ufe0f Yellow Belt Progress","text":"<pre><code>Yellow Belt: CI/CD Mastery\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nModule 5: CI Fundamentals        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 25% \u2713\nModule 6: Golden Path Pipelines  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 50% \u2713\nModule 7: Security &amp; Quality     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591 75% \u2713\nModule 8: Artifact Management    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100% \u2713\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n</code></pre>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#yellow-belt-certification","title":"\ud83d\udcdc Yellow Belt Certification","text":"<p>You're now ready for the Yellow Belt Certification Exam!</p> <p>Exam Format: - 40 multiple choice questions - 3 hands-on challenges - 85% passing score required - 2-hour time limit</p> <p>Exam Challenges: 1. Build a production-ready CI/CD pipeline from scratch 2. Optimize existing pipeline to &lt;5 minute build time 3. Implement complete security scanning and artifact management</p> <p>Schedule Your Exam: - Visit Fawkes Dojo Portal - Navigate to Certifications \u2192 Yellow Belt - Click \"Schedule Exam\"</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#what-youve-achieved","title":"\ud83c\udf93 What You've Achieved","text":"<p>Skills Mastered: - \u2705 Jenkins pipeline development - \u2705 Shared library creation - \u2705 Security scanning integration - \u2705 Artifact management - \u2705 Pipeline optimization - \u2705 CI/CD best practices</p> <p>DORA Impact: - Deployment Frequency: Can deploy multiple times per day - Lead Time: Reduced to minutes with optimized pipelines - Change Failure Rate: Security gates prevent bad code - MTTR: Artifact management enables fast rollbacks</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#whats-next","title":"\ud83d\ude80 What's Next?","text":"<p>Option 1: Take Yellow Belt Certification Exam - Validate your learning - Earn \"Fawkes CI/CD Specialist\" badge - Get LinkedIn-verified credential</p> <p>Option 2: Continue to Green Belt - Module 9: GitOps with ArgoCD - Module 10: Deployment Strategies - Module 11: Progressive Delivery - Module 12: Rollback &amp; Incident Response</p> <p>Option 3: Practice &amp; Contribute - Apply learnings to your team's pipelines - Share your shared library with community - Write blog post about your journey - Help others in #yellow-belt channel</p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#tools-documentation","title":"Tools &amp; Documentation","text":"<ul> <li>Harbor Documentation</li> <li>Cosign Documentation</li> <li>Semantic Versioning</li> <li>OCI Image Spec</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#learning-resources","title":"Learning Resources","text":"<ul> <li>Artifact Management Best Practices</li> <li>Supply Chain Security</li> <li>Container Signing Tutorial</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#community","title":"Community","text":"<ul> <li>Fawkes Mattermost - #yellow-belt</li> <li>Share your certification achievement!</li> <li>Help newcomers in #white-belt</li> </ul>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#appendix-artifact-management-cheat-sheet","title":"\ud83d\udcd6 Appendix: Artifact Management Cheat Sheet","text":""},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#quick-reference-commands","title":"Quick Reference Commands","text":"<p>Harbor CLI (via API): <pre><code># List repositories\ncurl -u user:pass https://harbor.fawkes.internal/api/v2.0/projects/library/repositories\n\n# Get artifact details\ncurl -u user:pass https://harbor.fawkes.internal/api/v2.0/projects/library/repositories/myapp/artifacts/v1.2.3\n\n# Trigger scan\ncurl -X POST -u user:pass https://harbor.fawkes.internal/api/v2.0/projects/library/repositories/myapp/artifacts/v1.2.3/scan\n\n# Delete artifact\ncurl -X DELETE -u user:pass https://harbor.fawkes.internal/api/v2.0/projects/library/repositories/myapp/artifacts/v1.2.3\n</code></pre></p> <p>Cosign Commands: <pre><code># Sign image\ncosign sign --key cosign.key myapp:v1.2.3\n\n# Verify signature\ncosign verify --key cosign.pub myapp:v1.2.3\n\n# Attach SBOM\ncosign attach sbom --sbom sbom.json myapp:v1.2.3\n\n# Download SBOM\ncosign download sbom myapp:v1.2.3\n</code></pre></p> <p>Docker Tag Management: <pre><code># Create multiple tags\ndocker tag myapp:123 myapp:v1.2.3\ndocker tag myapp:123 myapp:latest\ndocker tag myapp:123 myapp:production\n\n# Push all tags\ndocker push --all-tags myapp\n</code></pre></p>"},{"location":"dojo/modules/yellow-belt/module-08-artifact-management/#final-thoughts","title":"\ud83c\udf8a Final Thoughts","text":"<p>You've completed an intensive journey through CI/CD mastery. You now have the skills to:</p> <ul> <li>Build production-ready pipelines</li> <li>Implement security at every stage  </li> <li>Manage artifacts professionally</li> <li>Optimize for speed and reliability</li> <li>Lead CI/CD initiatives in your organization</li> </ul> <p>Your impact on DORA metrics will be significant!</p> <p>Ready to continue? \ud83d\udfe2</p> <p>Next up: Green Belt - GitOps &amp; Deployment</p> <p>Module 9: Introduction to GitOps with ArgoCD awaits! You'll learn declarative deployments, automated sync, and progressive delivery strategies.</p> <p>Fawkes Dojo - Where Platform Engineers Are Forged Version 1.0 | Last Updated: October 2025 License: MIT | https://github.com/paruff/fawkes</p> <p>\ud83c\udf89 Yellow Belt Complete - Congratulations, CI/CD Specialist! \ud83c\udf89</p>"},{"location":"patterns/","title":"Implementation Patterns","text":"<p>These patterns provide proven approaches to implementing DORA capabilities in your organization.</p>"},{"location":"patterns/#fast-flow-patterns","title":"Fast Flow Patterns","text":"Pattern Description Related Tools Continuous Delivery Automated deployment pipeline patterns Spinnaker, Jenkins, Flux Infrastructure as Code Managing infrastructure through code Terraform, Kubernetes Database Changes Safe database deployment patterns Flyway, Liquibase"},{"location":"patterns/#fast-feedback-patterns","title":"Fast Feedback Patterns","text":"Pattern Description Related Tools Test Automation Comprehensive testing strategies Selenium, JUnit Monitoring Observability implementation Prometheus, Grafana Chaos Engineering Resilience testing patterns Chaos Mesh"},{"location":"patterns/#fast-recovery-patterns","title":"Fast Recovery Patterns","text":"Pattern Description Related Tools Shift Left Security Early security testing patterns OWASP ZAP Quality Gates Code quality enforcement SonarQube Incident Response Quick recovery patterns PagerDuty <p>View Capabilities Explore Tools</p>"},{"location":"patterns/continuous-delivery/","title":"Continuous Delivery Pattern","text":"<p>Continuous Delivery (CD) is a software development practice where code changes are automatically prepared for production release. According to DORA research, it's one of the key capabilities that drives high performance in technology organizations.</p>"},{"location":"patterns/continuous-delivery/#core-principles","title":"Core Principles","text":"Principle Description Implementation Trunk-Based Development Work in small batches with short-lived branches Git workflow with feature flags Automation Automate build, test, and deployment processes Jenkins, GitHub Actions Comprehensive Testing Implement automated testing at all levels Selenium, JUnit, Cypress GitOps Use Git as single source of truth ArgoCD, Flux"},{"location":"patterns/continuous-delivery/#implementation-guide","title":"Implementation Guide","text":""},{"location":"patterns/continuous-delivery/#1-version-control-practices","title":"1. Version Control Practices","text":"<pre><code># Trunk-based development workflow\ngit checkout -b feature/small-change\n# Make small, incremental changes\ngit commit -am \"feat: add new feature behind flag\"\ngit push origin feature/small-change\n# Merge to trunk within 24 hours\n</code></pre>"},{"location":"patterns/continuous-delivery/#2-deployment-pipeline","title":"2. Deployment Pipeline","text":"<pre><code># Example Jenkins Pipeline\npipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                sh 'make build'\n            }\n        }\n        stage('Test') {\n            parallel {\n                stage('Unit') {\n                    steps { sh 'make test-unit' }\n                }\n                stage('Integration') {\n                    steps { sh 'make test-integration' }\n                }\n            }\n        }\n        stage('Deploy') {\n            steps {\n                sh 'make deploy'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"patterns/continuous-delivery/#3-feature-flags","title":"3. Feature Flags","text":"<pre><code>public class FeatureFlags {\n    private static final String FLAG_NEW_FEATURE = \"new-feature\";\n\n    public boolean isEnabled(String flag) {\n        return LaunchDarkly.client().boolVariation(flag, user, false);\n    }\n}\n</code></pre>"},{"location":"patterns/continuous-delivery/#key-metrics","title":"Key Metrics","text":"<p>Based on DORA research, track these metrics:</p> Metric Elite Performance Implementation Deployment Frequency Multiple deploys per day <code>deployment_frequency = deploys / time_period</code> Lead Time for Changes Less than one hour <code>lead_time = time_to_production - commit_time</code> Change Failure Rate 0-15% <code>failure_rate = failed_deploys / total_deploys</code> Time to Restore Less than one hour <code>mttr = restore_time - failure_time</code>"},{"location":"patterns/continuous-delivery/#best-practices","title":"Best Practices","text":""},{"location":"patterns/continuous-delivery/#1-build-process","title":"1. Build Process","text":"<ul> <li>Use deterministic builds</li> <li>Cache dependencies</li> <li>Implement parallel processing</li> </ul>"},{"location":"patterns/continuous-delivery/#2-testing-strategy","title":"2. Testing Strategy","text":"<ul> <li>Maintain test pyramid</li> <li>Automate all tests</li> <li>Include security testing</li> </ul>"},{"location":"patterns/continuous-delivery/#3-deployment-process","title":"3. Deployment Process","text":"<pre><code># Example ArgoCD Application\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: fawkes-app\nspec:\n  source:\n    repoURL: https://github.com/paruff/fawkes.git\n    path: kubernetes\n    targetRevision: HEAD\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: production\n</code></pre>"},{"location":"patterns/continuous-delivery/#common-anti-patterns","title":"Common Anti-Patterns","text":"<p>\u274c Avoid These Practices: - Long-lived feature branches - Manual deployment steps - Infrequent integration - Environment-specific builds</p> <p>\u2705 Instead Do This: - Merge to trunk daily - Automate everything - Practice continuous integration - Build once, deploy many times</p>"},{"location":"patterns/continuous-delivery/#tools-integration","title":"Tools Integration","text":"Category Tools Purpose CI/CD Jenkins, GitHub Actions Pipeline automation Version Control Git Source code management Testing Selenium, JUnit Automated testing Deployment Spinnaker, ArgoCD Deployment automation Monitoring Prometheus, Grafana Performance tracking"},{"location":"patterns/continuous-delivery/#references","title":"References","text":"<ul> <li>Accelerate: Building and Scaling High Performing Technology Organizations</li> <li>2023 State of DevOps Report</li> <li>Continuous Delivery</li> </ul> <p>View Examples  Implementation Guide </p>"},{"location":"patterns/infrastructure-as-code/","title":"Infrastructure as Code Pattern","text":"<p>Infrastructure as Code (IaC) is a key capability identified in DORA research that enables high-performing organizations to manage their infrastructure using version-controlled declarative configurations.</p>"},{"location":"patterns/infrastructure-as-code/#core-principles","title":"Core Principles","text":"Principle Description Implementation Declarative Define desired state, not steps Terraform, ARM templates Version Control Track all infrastructure changes Git Immutable Replace rather than modify Containers, VM images Idempotent Same input yields same result Terraform state"},{"location":"patterns/infrastructure-as-code/#implementation-guide","title":"Implementation Guide","text":""},{"location":"patterns/infrastructure-as-code/#1-infrastructure-definition","title":"1. Infrastructure Definition","text":"<pre><code># Example Terraform Configuration\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~&gt; 3.0\"\n    }\n  }\n}\n\nresource \"azurerm_kubernetes_cluster\" \"main\" {\n  name                = \"fawkes-aks\"\n  location            = \"eastus\"\n  resource_group_name = azurerm_resource_group.main.name\n  dns_prefix          = \"fawkes\"\n\n  default_node_pool {\n    name       = \"default\"\n    node_count = 3\n    vm_size    = \"Standard_D2_v2\"\n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n}\n</code></pre>"},{"location":"patterns/infrastructure-as-code/#2-gitops-integration","title":"2. GitOps Integration","text":"<pre><code># ArgoCD Application for Infrastructure\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: fawkes-infrastructure\nspec:\n  source:\n    repoURL: https://github.com/paruff/fawkes.git\n    path: infrastructure/terraform\n    targetRevision: HEAD\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: infrastructure\n</code></pre>"},{"location":"patterns/infrastructure-as-code/#best-practices","title":"Best Practices","text":""},{"location":"patterns/infrastructure-as-code/#1-code-organization","title":"1. Code Organization","text":"<pre><code>infrastructure/\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 production/\n\u2502   \u2502   \u2514\u2500\u2500 main.tf\n\u2502   \u2514\u2500\u2500 staging/\n\u2502       \u2514\u2500\u2500 main.tf\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 kubernetes/\n\u2502   \u2502   \u2514\u2500\u2500 main.tf\n\u2502   \u2514\u2500\u2500 networking/\n\u2502       \u2514\u2500\u2500 main.tf\n\u2514\u2500\u2500 shared/\n    \u2514\u2500\u2500 variables.tf\n</code></pre>"},{"location":"patterns/infrastructure-as-code/#2-security-controls","title":"2. Security Controls","text":"<pre><code># Example Security Policy\nresource \"azurerm_key_vault\" \"main\" {\n  name                = \"fawkes-vault\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  tenant_id          = data.azurerm_client_config.current.tenant_id\n\n  sku_name = \"standard\"\n\n  network_acls {\n    default_action = \"Deny\"\n    bypass         = \"AzureServices\"\n  }\n}\n</code></pre>"},{"location":"patterns/infrastructure-as-code/#key-metrics","title":"Key Metrics","text":"<p>Based on DORA research, track these infrastructure metrics:</p> Metric Elite Performance Implementation Infrastructure Change Success Rate &gt; 95% <code>success_rate = successful_changes / total_changes</code> Infrastructure Recovery Time &lt; 1 hour <code>recovery_time = restore_time - failure_time</code> Infrastructure Deployment Time &lt; 30 minutes <code>deployment_time = end_time - start_time</code>"},{"location":"patterns/infrastructure-as-code/#testing-strategy","title":"Testing Strategy","text":""},{"location":"patterns/infrastructure-as-code/#1-unit-testing","title":"1. Unit Testing","text":"<pre><code># Example Terraform Test\nprovider \"test\" {}\n\nresource \"test_assertions\" \"network\" {\n  component = \"network\"\n\n  equal \"cidr_block\" {\n    description = \"CIDR block should match expected value\"\n    got         = module.network.cidr_block\n    want        = \"10.0.0.0/16\"\n  }\n}\n</code></pre>"},{"location":"patterns/infrastructure-as-code/#2-integration-testing","title":"2. Integration Testing","text":"<pre><code>#!/bin/bash\n# Infrastructure Integration Test\nterraform init\nterraform plan -out=tfplan\nterraform apply tfplan\n\n# Validate resources\naz aks show --name fawkes-aks --resource-group fawkes-rg\n</code></pre>"},{"location":"patterns/infrastructure-as-code/#common-anti-patterns","title":"Common Anti-Patterns","text":"<p>\u274c Avoid These Practices: - Manual infrastructure changes - Untested infrastructure code - Sharing state files - Hard-coded credentials</p> <p>\u2705 Instead Do This: - Automate all changes - Implement comprehensive testing - Use remote state storage - Use secrets management</p>"},{"location":"patterns/infrastructure-as-code/#tools-integration","title":"Tools Integration","text":"Category Tools Purpose IaC Terraform, Pulumi Infrastructure definition Version Control Git Configuration management CI/CD Azure DevOps, GitHub Actions Automation Testing Terratest, Inspec Validation Security Checkov, tfsec Security scanning"},{"location":"patterns/infrastructure-as-code/#references","title":"References","text":"<ul> <li>2023 State of DevOps Report</li> <li>Accelerate: Building and Scaling High Performing Technology Organizations</li> <li>Infrastructure as Code by Kief Morris</li> </ul> <p>View Examples  Implementation Guide </p>"},{"location":"patterns/test-automation/","title":"Test Automation Pattern","text":"<p>Test automation is a critical capability identified in DORA research that enables organizations to achieve elite performance through rapid, reliable feedback cycles. According to the research, elite performers automate 95% of their tests.</p>"},{"location":"patterns/test-automation/#core-principles","title":"Core Principles","text":"Principle Description Implementation Test Pyramid Balance test types for optimal coverage Unit (70%), Integration (20%), E2E (10%) Shift Left Test early in development cycle CI pipeline integration Reliability Tests should be deterministic Avoid flaky tests Speed Quick feedback loops Parallel test execution Trunk-Based Support frequent integration Pre-merge testing"},{"location":"patterns/test-automation/#implementation-guide","title":"Implementation Guide","text":""},{"location":"patterns/test-automation/#1-unit-testing","title":"1. Unit Testing","text":"<pre><code>@Test\nvoid deploymentFrequencyCalculation() {\n    // Arrange\n    DeploymentMetrics metrics = new DeploymentMetrics();\n    List&lt;Deployment&gt; deployments = Arrays.asList(\n        new Deployment(\"2023-01-01\"),\n        new Deployment(\"2023-01-02\")\n    );\n\n    // Act\n    double frequency = metrics.calculateFrequency(deployments);\n\n    // Assert\n    assertEquals(2.0, frequency, \"Should calculate correct deployment frequency\");\n}\n\n@Test\nvoid shouldHandleNoDeployments() {\n    // Arrange\n    DeploymentMetrics metrics = new DeploymentMetrics();\n    List&lt;Deployment&gt; deployments = Collections.emptyList();\n\n    // Act &amp; Assert\n    assertDoesNotThrow(() -&gt; metrics.calculateFrequency(deployments));\n    assertEquals(0.0, metrics.calculateFrequency(deployments));\n}\n</code></pre>"},{"location":"patterns/test-automation/#2-integration-testing-with-testcontainers","title":"2. Integration Testing with TestContainers","text":"<pre><code>@TestContainer\nclass DeploymentRepositoryTest {\n    @Container\n    static PostgreSQLContainer&lt;?&gt; postgres = new PostgreSQLContainer&lt;&gt;(\"postgres:14\")\n        .withDatabaseName(\"testdb\")\n        .withUsername(\"test\")\n        .withPassword(\"test\");\n\n    @Test\n    void shouldPersistDeployment() {\n        // Arrange\n        DeploymentRepository repository = new DeploymentRepository(postgres.getJdbcUrl());\n        Deployment deployment = new Deployment(\"2023-01-01\");\n\n        // Act\n        repository.save(deployment);\n\n        // Assert\n        Optional&lt;Deployment&gt; found = repository.findById(deployment.getId());\n        assertTrue(found.isPresent());\n        assertEquals(\"2023-01-01\", found.get().getDate());\n    }\n}\n</code></pre>"},{"location":"patterns/test-automation/#3-end-to-end-testing-with-cypress","title":"3. End-to-End Testing with Cypress","text":"<pre><code>describe('Deployment Pipeline', () =&gt; {\n  beforeEach(() =&gt; {\n    cy.intercept('GET', '/api/deployments').as('getDeployments');\n    cy.login(); // Custom command for authentication\n  });\n\n  it('shows deployment metrics dashboard', () =&gt; {\n    // Arrange\n    cy.visit('/dashboard');\n\n    // Act\n    cy.wait('@getDeployments');\n\n    // Assert\n    cy.get('[data-testid=\"deployment-frequency\"]').should('be.visible');\n    cy.get('[data-testid=\"lead-time\"]').should('be.visible');\n    cy.get('[data-testid=\"change-failure-rate\"]').should('be.visible');\n    cy.get('[data-testid=\"mttr\"]').should('be.visible');\n  });\n\n  it('creates new deployment', () =&gt; {\n    // Arrange\n    cy.visit('/deployments/new');\n\n    // Act\n    cy.get('[data-testid=\"service-name\"]').type('fawkes-web');\n    cy.get('[data-testid=\"version\"]').type('1.0.0');\n    cy.get('[data-testid=\"submit\"]').click();\n\n    // Assert\n    cy.get('[data-testid=\"success-message\"]')\n      .should('be.visible')\n      .and('contain', 'Deployment created successfully');\n  });\n});\n</code></pre>"},{"location":"patterns/test-automation/#continuous-integration-pipeline","title":"Continuous Integration Pipeline","text":"<pre><code># GitHub Actions workflow for test automation\nname: Test Automation\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          java-version: '17'\n          distribution: 'temurin'\n\n      - name: Unit Tests\n        run: ./gradlew test\n\n      - name: Integration Tests\n        run: ./gradlew integrationTest\n\n      - name: E2E Tests\n        uses: cypress-io/github-action@v6\n        with:\n          browser: chrome\n          config-file: cypress.config.js\n\n      - name: Upload Test Reports\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: test-reports\n          path: build/reports/tests/\n</code></pre>"},{"location":"patterns/test-automation/#test-coverage-goals","title":"Test Coverage Goals","text":"Test Type Coverage Target Run Frequency Max Duration Unit 80% Every commit 3 minutes Integration 60% Every PR 10 minutes E2E 40% Daily 30 minutes"},{"location":"patterns/test-automation/#performance-metrics","title":"Performance Metrics","text":"<p>According to DORA research, elite performers achieve:</p> <ul> <li>Test Runtime: &lt; 10 minutes for the full suite</li> <li>Test Reliability: &gt; 95% pass rate</li> <li>Coverage: &gt; 80% of critical paths</li> <li>Automation: &gt; 95% of all tests</li> </ul> <p>View Example Project  Testing Guide </p>"},{"location":"tools/","title":"Tools Overview","text":"<p>Fawkes integrates with industry-leading open-source tools to implement DORA capabilities effectively.</p>"},{"location":"tools/#continuous-delivery-tools","title":"Continuous Delivery Tools","text":"Tool Purpose Related Patterns Spinnaker Cloud-native continuous delivery Continuous Delivery Jenkins Automation server Continuous Delivery"},{"location":"tools/#infrastructure-tools","title":"Infrastructure Tools","text":"Tool Purpose Related Patterns Terraform Infrastructure as Code Infrastructure as Code Kubernetes Container orchestration Infrastructure as Code"},{"location":"tools/#monitoring-tools","title":"Monitoring Tools","text":"Tool Purpose Related Patterns Prometheus Metrics collection Monitoring Grafana Visualization Monitoring"},{"location":"tools/#testing-tools","title":"Testing Tools","text":"Tool Purpose Related Patterns Selenium UI testing Test Automation JUnit Unit testing Test Automation <p>View Implementation Guide</p>"},{"location":"tools/jenkins/","title":"Jenkins","text":"<p>Jenkins is an open-source automation server that enables continuous integration and continuous delivery (CI/CD) for software development projects.</p>"},{"location":"tools/jenkins/#overview","title":"Overview","text":"<p>Jenkins provides robust automation capabilities: - Build Automation - Compile and test code automatically - Deployment Pipeline - Create sophisticated deployment workflows - Plugin Ecosystem - Extend functionality through thousands of plugins</p>"},{"location":"tools/jenkins/#key-features","title":"Key Features","text":"Feature Description  Pipeline as Code Define pipelines using Jenkinsfile  Plugin System Extensive plugin ecosystem  Distributed Builds Scale with master/agent architecture  Security Features Built-in security and authentication"},{"location":"tools/jenkins/#integration-with-fawkes","title":"Integration with Fawkes","text":""},{"location":"tools/jenkins/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker or Kubernetes cluster</li> <li>Helm (for Kubernetes deployment)</li> <li>kubectl configured with cluster access</li> </ul>"},{"location":"tools/jenkins/#installation","title":"Installation","text":"<pre><code># Using Helm\nhelm repo add jenkins https://charts.jenkins.io\nhelm repo update\n\n# Install Jenkins\nhelm install jenkins jenkins/jenkins \\\n  --namespace jenkins \\\n  --create-namespace \\\n  --values jenkins-values.yaml\n</code></pre> <p>Example <code>jenkins-values.yaml</code>: <pre><code>controller:\n  ingress:\n    enabled: true\n    hostName: jenkins.fawkes.local\n  adminPassword: \"your-secure-password\"\n\npersistence:\n  enabled: true\n  size: 10Gi\n\nserviceAccount:\n  create: true\n  annotations:\n    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/jenkins-role\n</code></pre></p>"},{"location":"tools/jenkins/#configuring-jenkins-pipelines","title":"Configuring Jenkins Pipelines","text":""},{"location":"tools/jenkins/#basic-pipeline-example","title":"Basic Pipeline Example","text":"<pre><code>// Jenkinsfile\npipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn clean package'\n            }\n        }\n        stage('Test') {\n            steps {\n                sh 'mvn test'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                sh 'kubectl apply -f k8s/'\n            }\n        }\n    }\n\n    post {\n        always {\n            junit '**/target/surefire-reports/TEST-*.xml'\n        }\n    }\n}\n</code></pre>"},{"location":"tools/jenkins/#advanced-pipeline-with-fawkes-integration","title":"Advanced Pipeline with Fawkes Integration","text":"<pre><code>// Jenkinsfile for Fawkes deployment\npipeline {\n    agent {\n        kubernetes {\n            yaml '''\n                apiVersion: v1\n                kind: Pod\n                spec:\n                  containers:\n                  - name: maven\n                    image: maven:3.8.4-openjdk-11\n                    command:\n                    - cat\n                    tty: true\n                  - name: kubectl\n                    image: bitnami/kubectl\n                    command:\n                    - cat\n                    tty: true\n            '''\n        }\n    }\n\n    stages {\n        stage('Build &amp; Test') {\n            steps {\n                container('maven') {\n                    sh 'mvn clean verify'\n                }\n            }\n        }\n\n        stage('Deploy to Kubernetes') {\n            steps {\n                container('kubectl') {\n                    sh '''\n                        kubectl apply -f k8s/\n                        kubectl rollout status deployment/fawkes-app\n                    '''\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"tools/jenkins/#best-practices","title":"Best Practices","text":"<ol> <li>Pipeline as Code</li> <li>Store Jenkinsfile in version control</li> <li>Use declarative pipeline syntax</li> <li> <p>Keep pipelines simple and modular</p> </li> <li> <p>Security</p> </li> <li>Use credentials management</li> <li>Implement role-based access control</li> <li> <p>Regular security updates</p> </li> <li> <p>Performance</p> </li> <li>Use agent nodes for distribution</li> <li>Clean workspace regularly</li> <li>Optimize build steps</li> </ol>"},{"location":"tools/jenkins/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> Issue Solution Pipeline fails to start Check Jenkins agent connectivity Build fails Verify build tool configuration Deployment fails Check Kubernetes credentials"},{"location":"tools/jenkins/#monitoring-jenkins","title":"Monitoring Jenkins","text":"<pre><code># Prometheus configuration\n- job_name: 'jenkins'\n  metrics_path: /prometheus\n  static_configs:\n    - targets: ['jenkins.fawkes.local:8080']\n</code></pre>"},{"location":"tools/jenkins/#additional-resources","title":"Additional Resources","text":"<ul> <li>Jenkins Documentation</li> <li>Jenkins GitHub</li> <li>Jenkins Plugins</li> </ul> <p>Configure Jenkins  View Examples </p>"},{"location":"tools/prometheus/","title":"Prometheus","text":"<p>Prometheus is an open-source monitoring and alerting toolkit designed for reliability and scalability in modern cloud environments.</p>"},{"location":"tools/prometheus/#overview","title":"Overview","text":"<p>Prometheus provides essential monitoring capabilities: - Time-Series Database - Store and query metrics data - PromQL - Powerful query language for metrics analysis - Alert Manager - Handle alerts and notifications - Service Discovery - Automatic target discovery</p>"},{"location":"tools/prometheus/#key-features","title":"Key Features","text":"Feature Description  Metrics Collection Pull-based metrics gathering  PromQL Flexible query language  Alerting Configurable alert rules  Service Discovery Auto-discover targets"},{"location":"tools/prometheus/#integration-with-fawkes","title":"Integration with Fawkes","text":""},{"location":"tools/prometheus/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster</li> <li>Helm v3</li> <li>kubectl configured with cluster access</li> </ul>"},{"location":"tools/prometheus/#installation","title":"Installation","text":"<pre><code># Add Prometheus Helm repository\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\n\n# Install Prometheus Stack\nhelm install prometheus prometheus-community/kube-prometheus-stack \\\n  --namespace monitoring \\\n  --create-namespace \\\n  --values prometheus-values.yaml\n</code></pre> <p>Example <code>prometheus-values.yaml</code>: <pre><code>prometheus:\n  prometheusSpec:\n    retention: 15d\n    storageSpec:\n      volumeClaimTemplate:\n        spec:\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: 50Gi\n\ngrafana:\n  enabled: true\n  persistence:\n    enabled: true\n    size: 10Gi\n\nalertmanager:\n  config:\n    global:\n      resolve_timeout: 5m\n    route:\n      group_by: ['job']\n      group_wait: 30s\n      group_interval: 5m\n      repeat_interval: 12h\n</code></pre></p>"},{"location":"tools/prometheus/#configuring-prometheus-rules","title":"Configuring Prometheus Rules","text":""},{"location":"tools/prometheus/#basic-recording-rules","title":"Basic Recording Rules","text":"<pre><code>groups:\n- name: fawkes-recording-rules\n  rules:\n  - record: job:http_requests_total:rate5m\n    expr: rate(http_requests_total[5m])\n  - record: job:http_errors_total:rate5m\n    expr: rate(http_errors_total[5m])\n</code></pre>"},{"location":"tools/prometheus/#alert-rules","title":"Alert Rules","text":"<pre><code>groups:\n- name: fawkes-alerts\n  rules:\n  - alert: HighErrorRate\n    expr: job:http_errors_total:rate5m / job:http_requests_total:rate5m &gt; 0.1\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: High error rate detected\n      description: Error rate is above 10% for 5 minutes\n</code></pre>"},{"location":"tools/prometheus/#monitoring-dora-metrics","title":"Monitoring DORA Metrics","text":""},{"location":"tools/prometheus/#deployment-frequency","title":"Deployment Frequency","text":"<pre><code>groups:\n- name: dora-metrics\n  rules:\n  - record: dora:deployment_frequency:count24h\n    expr: count_over_time(deployment_success_total[24h])\n  - record: dora:lead_time_seconds:avg24h\n    expr: avg_over_time(deployment_lead_time_seconds[24h])\n</code></pre>"},{"location":"tools/prometheus/#best-practices","title":"Best Practices","text":"<ol> <li>Data Retention</li> <li>Set appropriate retention periods</li> <li>Use persistent storage</li> <li> <p>Implement data compaction</p> </li> <li> <p>Query Optimization</p> </li> <li>Use recording rules for complex queries</li> <li>Limit the use of high-cardinality labels</li> <li> <p>Cache frequently used queries</p> </li> <li> <p>Alerting</p> </li> <li>Define clear alerting thresholds</li> <li>Implement proper alert routing</li> <li>Avoid alert fatigue</li> </ol>"},{"location":"tools/prometheus/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> Issue Solution High memory usage Adjust retention period and storage Slow queries Review and optimize PromQL expressions Missing metrics Check service discovery configuration"},{"location":"tools/prometheus/#grafana-dashboard-examples","title":"Grafana Dashboard Examples","text":"<pre><code>{\n  \"dashboard\": {\n    \"id\": null,\n    \"title\": \"Fawkes DORA Metrics\",\n    \"panels\": [\n      {\n        \"title\": \"Deployment Frequency\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"dora:deployment_frequency:count24h\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"tools/prometheus/#additional-resources","title":"Additional Resources","text":"<ul> <li>Prometheus Documentation</li> <li>PromQL Examples</li> <li>Grafana Integration</li> </ul> <p>Configure Prometheus  View Dashboards </p>"},{"location":"tools/spinnaker/","title":"Spinnaker","text":"<p>Spinnaker is an open-source continuous delivery platform that helps you release software changes with high velocity and confidence.</p>"},{"location":"tools/spinnaker/#overview","title":"Overview","text":"<p>Spinnaker provides two core sets of features: - Application Management - Deploy and manage cloud resources - Application Deployment - Construct and manage continuous delivery workflows</p>"},{"location":"tools/spinnaker/#key-features","title":"Key Features","text":"Feature Description  Multi-Cloud Deploy to multiple cloud providers  Pipeline Management Create complex deployment workflows  Automated Canary Analysis Automated testing in production  Easy Rollbacks Quick recovery from failed deployments"},{"location":"tools/spinnaker/#integration-with-fawkes","title":"Integration with Fawkes","text":""},{"location":"tools/spinnaker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster</li> <li>Helm v3</li> <li>kubectl configured with cluster access</li> </ul>"},{"location":"tools/spinnaker/#installation","title":"Installation","text":"<pre><code># Add Spinnaker Helm repository\nhelm repo add spinnaker https://helmcharts.opsmx.com/\nhelm repo update\n\n# Install Spinnaker\nhelm install spinnaker spinnaker/spinnaker \\\n  --namespace spinnaker \\\n  --create-namespace \\\n  --values values.yaml\n</code></pre> <p>Example <code>values.yaml</code>: <pre><code>spinnakerConfig:\n  profiles:\n    clouddriver:\n      kubernetes:\n        enabled: true\n        accounts:\n        - name: fawkes-cluster\n          requiredGroupMembership: []\n          providerVersion: V2\n          permissions: {}\n          dockerRegistries: []\n          configureImagePullSecrets: true\n          cacheThreads: 1\n          namespaces: []\n          omitNamespaces: []\n          kinds: []\n          omitKinds: []\n          customResources: []\n</code></pre></p>"},{"location":"tools/spinnaker/#using-spinnaker-with-fawkes","title":"Using Spinnaker with Fawkes","text":""},{"location":"tools/spinnaker/#creating-a-deployment-pipeline","title":"Creating a Deployment Pipeline","text":"<ol> <li>Navigate to Spinnaker UI</li> <li>Create a new application:</li> <li>Name: <code>fawkes-app</code></li> <li>Owner Email: <code>team@fawkes.io</code></li> <li> <p>Cloud Providers: <code>Kubernetes V2</code></p> </li> <li> <p>Create a deployment pipeline:    <pre><code>{\n  \"name\": \"Deploy to Production\",\n  \"stages\": [\n    {\n      \"type\": \"deployManifest\",\n      \"name\": \"Deploy Application\",\n      \"cloudProvider\": \"kubernetes\",\n      \"account\": \"fawkes-cluster\",\n      \"source\": \"text\",\n      \"manifests\": [\n        {\n          \"apiVersion\": \"apps/v1\",\n          \"kind\": \"Deployment\",\n          \"metadata\": {\n            \"name\": \"fawkes-app\"\n          },\n          \"spec\": {\n            \"replicas\": 3\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre></p> </li> </ol>"},{"location":"tools/spinnaker/#best-practices","title":"Best Practices","text":"<ol> <li>Pipeline Templates</li> <li>Use pipeline templates for consistency</li> <li>Version control your templates</li> <li> <p>Share common deployment patterns</p> </li> <li> <p>Security</p> </li> <li>Enable RBAC</li> <li>Use service accounts</li> <li> <p>Implement least privilege access</p> </li> <li> <p>Monitoring</p> </li> <li>Configure pipeline notifications</li> <li>Monitor pipeline executions</li> <li>Set up alerting for failures</li> </ol>"},{"location":"tools/spinnaker/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> Issue Solution Pipeline fails to start Check Spinnaker service account permissions Manifest deployment fails Verify Kubernetes cluster connectivity Images not found Confirm container registry configuration"},{"location":"tools/spinnaker/#additional-resources","title":"Additional Resources","text":"<ul> <li>Spinnaker Documentation</li> <li>GitHub Repository</li> <li>Community Slack</li> </ul> <p>Configure Spinnaker  View Examples </p>"}]}